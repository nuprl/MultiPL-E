{
  "name": "mbpp_784_mul_even_odd",
  "language": "ts",
  "prompt": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet mul: number = mul_even_odd(list1);\nconsole.log(mul);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even = list1[i];\n      break;\n    }\n  }\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 != 0) {\n      odd = list1[i];\n      break;\n    }\n  }\n  return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(\"The product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510082,
      "stdout": "The product of first even and odd number of a given list is: 3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp2mdfwspa.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2mdfwspa.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7x0_h_l4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7x0_h_l4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count == 0) {\n                even_num = list1[i];\n                count++;\n            }\n        }\n        else {\n            if (count == 1) {\n                odd_num = list1[i];\n                count++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpi26qvqc4.js:26:12)\n    at Object.<anonymous> (/tmp/tmpi26qvqc4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count == 0) {\n                even_num = list1[i];\n                count++;\n            }\n        }\n        else {\n            if (count == 1) {\n                odd_num = list1[i];\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpotb8lyza.js:26:12)\n    at Object.<anonymous> (/tmp/tmpotb8lyza.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(mul_even_odd(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6]));\nconsole.log(mul_even_odd([1, 3, 5, 7, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510082,
      "stdout": "2\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_odd_product: number = 1;\n    let even_count: number = 0;\n    let odd_count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_odd_product = even_odd_product * list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                even_odd_product = even_odd_product * list1[i];\n            }\n        }\n    }\n    return even_odd_product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510082,
      "stdout": "../../../../tmp/tmp8sa39r4_.ts(15,88): error TS2304: Cannot find name 'list1'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510082,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7lyhl2qu.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7lyhl2qu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    let i: number = 0;\n    while (i < list1.length) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            i++;\n        }\n        else {\n            odd = odd * list1[i];\n            i++;\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpicqbz6j_.js:22:12)\n    at Object.<anonymous> (/tmp/tmpicqbz6j_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmprsmvl540.js:31:12)\n    at Object.<anonymous> (/tmp/tmprsmvl540.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7x0_h_l4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7x0_h_l4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "362880\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpyg5qaygg.js:20:12)\n    at Object.<anonymous> (/tmp/tmpyg5qaygg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i = i + 1;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppxwf06_j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppxwf06_j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even += 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd += 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5bccwyya.js:31:12)\n    at Object.<anonymous> (/tmp/tmp5bccwyya.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpc7r2x8x_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc7r2x8x_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_product: number = 1;\n    let odd_product: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        }\n        else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8y6aticg.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8y6aticg.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(mul_even_odd([1, 3, 5, 7, 9]));\nconsole.log(mul_even_odd([2, 4, 6, 8, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n0\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4z6037lp.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4z6037lp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count == 0) {\n                even_num = list1[i];\n                count++;\n            }\n        }\n        else {\n            if (count == 0) {\n                odd_num = list1[i];\n                count++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpf1j7ep2r.js:25:12)\n    at Object.<anonymous> (/tmp/tmpf1j7ep2r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    let product: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    if (count == 2) {\n        product = even_num * odd_num;\n    }\n    return product;\n}\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n            count++;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = odd_num * list1[i];\n            count++;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "24\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n72\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpkufivw2_.js:32:12)\n    at Object.<anonymous> (/tmp/tmpkufivw2_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 72,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "Product of first even and odd number of a given list is: 3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpm17mva_7.js:19:12)\n    at Object.<anonymous> (/tmp/tmpm17mva_7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_num = list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_num = list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_no: number = 0;\n    let odd_no: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0 && count == 0) {\n            even_no = list1[i];\n            count++;\n        }\n        else if (list1[i] % 2 != 0 && count == 1) {\n            odd_no = list1[i];\n            count++;\n        }\n    }\n    return even_no * odd_no;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpo76wa17k.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo76wa17k.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_product: number = 1;\n    let odd_product: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        }\n        else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8y6aticg.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8y6aticg.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let count = 0;\n    let product = 1;\n    for (let index = 0; index < list1.length; index++) {\n        if (list1[index] % 2 == 0) {\n            even_num = list1[index];\n            count = count + 1;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    for (let index = 0; index < list1.length; index++) {\n        if (list1[index] % 2 != 0) {\n            odd_num = list1[index];\n            break;\n        }\n    }\n    product = even_num * odd_num;\n    return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpl9xoiy6x.js:28:12)\n    at Object.<anonymous> (/tmp/tmpl9xoiy6x.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    let flag: boolean = true;\n    for (let i = 0; i < list1.length; i++) {\n        if (flag) {\n            if (list1[i] % 2 == 0) {\n                even_num = even_num * list1[i];\n                flag = false;\n            }\n        }\n        else {\n            if (list1[i] % 2 != 0) {\n                odd_num = odd_num * list1[i];\n                flag = true;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n24\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdujpuixn.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdujpuixn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptpjmud1h.js:30:12)\n    at Object.<anonymous> (/tmp/tmptpjmud1h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphpk64g29.js:19:12)\n    at Object.<anonymous> (/tmp/tmphpk64g29.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_num = list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_num = list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let flag: boolean = false;\n    let flag1: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            flag = true;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            flag1 = true;\n            break;\n        }\n    }\n    if (flag && flag1) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6]));\nconsole.log(mul_even_odd([1, 3, 5, 7, 9]));\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n0\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7x0_h_l4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7x0_h_l4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let result = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    result = even_num * odd_num;\n    return result;\n}\nlet list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3m2shuo5.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3m2shuo5.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp24iqtgv8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp24iqtgv8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    var even_num: number = 0;\n    var odd_num: number = 0;\n    var product: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    product = even_num * odd_num;\n    return product;\n}\nvar list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(\"The product of first even and odd number of a given list is: \" + mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "The product of first even and odd number of a given list is: 2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let i = 0;\n    while (i < list1.length) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < list1.length) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n        i++;\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\n\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpsb4k42q1.js:20:12)\n    at Object.<anonymous> (/tmp/tmpsb4k42q1.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4z6037lp.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4z6037lp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even++;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd++;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpb6435koo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpb6435koo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5jf0klhv.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5jf0klhv.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    let count1: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count1++;\n            break;\n        }\n    }\n    if (count == 1 && count1 == 1) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7x0_h_l4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7x0_h_l4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpc7r2x8x_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc7r2x8x_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let i = 0;\n    while (even_num == 0 || odd_num == 0) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n        }\n        else {\n            odd_num = list1[i];\n        }\n        i = i + 1;\n    }\n    return even_num * odd_num;\n}\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp1hgjulmm.js:22:12)\n    at Object.<anonymous> (/tmp/tmp1hgjulmm.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0, odd = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even: number = 0;\n  let odd: number = 0;\n  let i: number = 0;\n  let j: number = 0;\n  while (i < list1.length) {\n    if (list1[i] % 2 == 0) {\n      even = list1[i];\n      i++;\n      break;\n    }\n    i++;\n  }\n  while (j < list1.length) {\n    if (list1[j] % 2 != 0) {\n      odd = list1[j];\n      j++;\n      break;\n    }\n    j++;\n  }\n  return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_num = list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_num = list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    var even_num: number = 0;\n    var odd_num: number = 0;\n    var count: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nvar list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i = i + 1;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppxwf06_j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppxwf06_j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_mul: number = 1;\n    let odd_mul: number = 1;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_mul = even_mul * list1[i];\n            count_even++;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_mul = odd_mul * list1[i];\n            count_odd++;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_mul * odd_mul;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "24\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n72\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpfarbtt87.js:31:12)\n    at Object.<anonymous> (/tmp/tmpfarbtt87.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 72,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even * odd;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = odd_num * list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nlet list1 = [2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even++;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd++;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "20\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3itwbpc4.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3itwbpc4.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even++;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd++;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpb6435koo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpb6435koo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(mul_even_odd([1, 3, 5, 7, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even += 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd += 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5bccwyya.js:31:12)\n    at Object.<anonymous> (/tmp/tmp5bccwyya.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\n\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpp80qbq4d.js:19:12)\n    at Object.<anonymous> (/tmp/tmpp80qbq4d.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_num = list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_num = list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let product = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    product = even * odd;\n    return product;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0ejdjme9.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0ejdjme9.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count == 0) {\n                even_num = list1[i];\n                count++;\n            }\n        }\n        else {\n            if (count == 1) {\n                odd_num = list1[i];\n                count++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpi26qvqc4.js:26:12)\n    at Object.<anonymous> (/tmp/tmpi26qvqc4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    let product: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        product = even_num * odd_num;\n    }\n    return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\n\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([2, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "Product of first even and odd number of a given list is: 302400\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjte6sa2j.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjte6sa2j.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    var even_num: number = 0;\n    var odd_num: number = 0;\n    var count: number = 0;\n    var product: number = 0;\n    for (let index = 0; index < list1.length; index++) {\n        if (list1[index] % 2 == 0) {\n            if (count == 0) {\n                even_num = list1[index];\n                count++;\n            }\n        }\n        else {\n            if (count == 1) {\n                odd_num = list1[index];\n                count++;\n            }\n        }\n    }\n    product = even_num * odd_num;\n    return product;\n}\nvar list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpo5km27ea.js:30:12)\n    at Object.<anonymous> (/tmp/tmpo5km27ea.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_kgd3jo2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_kgd3jo2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptpjmud1h.js:30:12)\n    at Object.<anonymous> (/tmp/tmptpjmud1h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even_num: number = 0;\n  let odd_num: number = 0;\n  let count: number = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even_num = list1[i];\n      count = count + 1;\n      break;\n    }\n  }\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 != 0) {\n      odd_num = list1[i];\n      count = count + 1;\n      break;\n    }\n  }\n  if (count == 2) {\n    return even_num * odd_num;\n  } else {\n    return 0;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp24iqtgv8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp24iqtgv8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i = i + 1;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppxwf06_j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppxwf06_j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_prod = 1;\n    let odd_prod = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_prod = even_prod * list1[i];\n        }\n        else {\n            odd_prod = odd_prod * list1[i];\n        }\n    }\n    return even_prod * odd_prod;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjbxihop5.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjbxihop5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even_num: number = 0;\n  let odd_num: number = 0;\n  let count: number = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even_num = list1[i];\n      count = count + 1;\n      break;\n    }\n  }\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 != 0) {\n      odd_num = list1[i];\n      count = count + 1;\n      break;\n    }\n  }\n  if (count == 2) {\n    return even_num * odd_num;\n  } else {\n    return 0;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even++;\n        }\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd++;\n        }\n        if (count_even == 1 && count_odd == 1) {\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqwm9j8hm.js:26:12)\n    at Object.<anonymous> (/tmp/tmpqwm9j8hm.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_index: number = 0;\n    let odd_index: number = 0;\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let index = 0; index < list1.length; index++) {\n        if (list1[index] % 2 == 0) {\n            even_index = index;\n            even_num = list1[index];\n            break;\n        }\n    }\n    for (let index = list1.length - 1; index >= 0; index--) {\n        if (list1[index] % 2 != 0) {\n            odd_index = index;\n            odd_num = list1[index];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp0ux9qf3v.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0ux9qf3v.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even: number = 1;\n  let odd: number = 1;\n  for (let i = 0; i < list1.length; i++) {\n    if (i % 2 == 0) {\n      even = even * list1[i];\n    } else {\n      odd = odd * list1[i];\n    }\n  }\n  return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp9uevqu42.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9uevqu42.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    let product: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        product = even_num * odd_num;\n    }\n    return product;\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_odd_mul: number = 1;\n    let even_count: number = 0;\n    let odd_count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_count += 1;\n            if (even_count == 1) {\n                even_odd_mul = even_odd_mul * list1[i];\n            }\n        }\n        else {\n            odd_count += 1;\n            if (odd_count == 1) {\n                even_odd_mul = even_odd_mul * list1[i];\n            }\n        }\n    }\n    return even_odd_mul;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_index: number = 0;\n    let odd_index: number = 0;\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_index = i;\n                even_num = list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_index = i;\n                odd_num = list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(\"The product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "The product of first even and odd number of a given list is: 2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_product: number = 1;\n    let odd_product: number = 1;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_product = even_product * list1[i];\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_product = odd_product * list1[i];\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return even_product * odd_product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n72\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpyieh74mt.js:30:12)\n    at Object.<anonymous> (/tmp/tmpyieh74mt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 72,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7x0_h_l4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7x0_h_l4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpsyw0fzwq.js:20:12)\n    at Object.<anonymous> (/tmp/tmpsyw0fzwq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even += 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd += 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "20\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppalev5o1.js:31:12)\n    at Object.<anonymous> (/tmp/tmppalev5o1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i = i + 1;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppxwf06_j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppxwf06_j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    let i: number = 0;\n    while (i < list1.length) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n        i++;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0si9ff_8.js:21:12)\n    at Object.<anonymous> (/tmp/tmp0si9ff_8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_odd_mul: number = 1;\n    let even_count: number = 0;\n    let odd_count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_odd_mul = even_odd_mul * list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                even_odd_mul = even_odd_mul * list1[i];\n            }\n        }\n    }\n    return even_odd_mul;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4z6037lp.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4z6037lp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp24iqtgv8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp24iqtgv8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count == 0) {\n                even_num = list1[i];\n                count++;\n            }\n        }\n        else {\n            if (count == 1) {\n                odd_num = list1[i];\n                count++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt3j9sj1q.js:28:12)\n    at Object.<anonymous> (/tmp/tmpt3j9sj1q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "Product of first even and odd number of a given list is: 720\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptca2nxih.js:19:12)\n    at Object.<anonymous> (/tmp/tmptca2nxih.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi16quvjz.js:18:12)\n    at Object.<anonymous> (/tmp/tmpi16quvjz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_kgd3jo2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_kgd3jo2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4z6037lp.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4z6037lp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmprsmvl540.js:31:12)\n    at Object.<anonymous> (/tmp/tmprsmvl540.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "362880\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuhb0cfah.js:19:12)\n    at Object.<anonymous> (/tmp/tmpuhb0cfah.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpc7r2x8x_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc7r2x8x_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "Product of first even and odd number of a given list is: 3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpkt8moy9_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpkt8moy9_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    var even_num: number = 0;\n    var odd_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nvar list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n            break;\n        }\n    }\n    for (let j: number = 0; j < list1.length; j++) {\n        if (list1[j] % 2 != 0) {\n            odd_num = odd_num * list1[j];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "Product of first even and odd number of a given list is: 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_mul: number = 1;\n    let odd_mul: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_mul = even_mul * list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_mul = odd_mul * list1[i];\n            break;\n        }\n    }\n    return even_mul * odd_mul;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even: number = 1;\n  let odd: number = 1;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even = even * list1[i];\n    } else {\n      odd = odd * list1[i];\n    }\n  }\n  return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmprplbtn4k.js:18:12)\n    at Object.<anonymous> (/tmp/tmprplbtn4k.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 0;\n    let odd: number = 0;\n    let product: number = 0;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    product = even * odd;\n    return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_index = 0;\n    let odd_index = 0;\n    let even_num = 0;\n    let odd_num = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            even_index = i;\n            break;\n        }\n    }\n    for (let i = even_index + 1; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            odd_index = i;\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp_k7e6w70.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_k7e6w70.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    var even_num: number = 0;\n    var odd_num: number = 0;\n    var mul_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    mul_num = even_num * odd_num;\n    return mul_num;\n}\nvar list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4z6037lp.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4z6037lp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_num = list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_num = list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    let i: number = 0;\n    let j: number = 0;\n    while (i < list1.length && j < list1.length) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            i++;\n        }\n        if (list1[j] % 2 != 0) {\n            odd = odd * list1[j];\n            j++;\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "362880\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuhb0cfah.js:19:12)\n    at Object.<anonymous> (/tmp/tmpuhb0cfah.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even_num: number = 0;\n  let odd_num: number = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even_num = list1[i];\n      break;\n    }\n  }\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 != 0) {\n      odd_num = list1[i];\n      break;\n    }\n  }\n  return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even: number = 1;\n  let odd: number = 1;\n  for (let i: number = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even = even * list1[i];\n    } else {\n      odd = odd * list1[i];\n    }\n  }\n  return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpysc9ev3w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpysc9ev3w.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_2oeb8fz.js:20:12)\n    at Object.<anonymous> (/tmp/tmp_2oeb8fz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmprsmvl540.js:31:12)\n    at Object.<anonymous> (/tmp/tmprsmvl540.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i = i + 1;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppxwf06_j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppxwf06_j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp1vr_t1uu.js:18:12)\n    at Object.<anonymous> (/tmp/tmp1vr_t1uu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i = i + 1;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppxwf06_j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppxwf06_j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_mul: number = 1;\n    let odd_mul: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_mul = even_mul * list1[i];\n        }\n        else {\n            odd_mul = odd_mul * list1[i];\n        }\n    }\n    return even_mul * odd_mul;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "120\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmplaasi92p.js:19:12)\n    at Object.<anonymous> (/tmp/tmplaasi92p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    var even: number = 1;\n    var odd: number = 1;\n    for (var i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nvar list1 = [1, 2, 3, 4, 5];\nconsole.log(\"The product of first even and odd number of a given list is: \" + mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "The product of first even and odd number of a given list is: 120\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp08x3eanp.js:20:12)\n    at Object.<anonymous> (/tmp/tmp08x3eanp.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "720\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpgt2akg5x.js:19:12)\n    at Object.<anonymous> (/tmp/tmpgt2akg5x.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even++;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd++;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpb6435koo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpb6435koo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(mul_even_odd([1, 3, 5, 7, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "2\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "362880\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjkwcqyf5.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjkwcqyf5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "Product of first even and odd number of a given list is: 2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even * odd;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp24iqtgv8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp24iqtgv8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i = i + 1;\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n28\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppxwf06_j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppxwf06_j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 28,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count == 0) {\n                even_num = list1[i];\n                count++;\n            }\n        }\n        else {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nlet list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmmal_k70.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmmal_k70.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxe2ehknh.js:18:12)\n    at Object.<anonymous> (/tmp/tmpxe2ehknh.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 1) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 1) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even * odd;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "362880\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjkwcqyf5.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjkwcqyf5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "Product of first even and odd number of a given list is: 3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpkt8moy9_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpkt8moy9_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_num = list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_num = list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even_num: number = 0;\n  let odd_num: number = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even_num = list1[i];\n      break;\n    }\n  }\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 != 0) {\n      odd_num = list1[i];\n      break;\n    }\n  }\n  return even_num * odd_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 1;\n    let odd_num: number = 1;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n            count++;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = odd_num * list1[i];\n            count++;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(\"Product of first even and odd number of a given list is: \" + mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "Product of first even and odd number of a given list is: 24\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n72\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpx2qq_htb.js:31:12)\n    at Object.<anonymous> (/tmp/tmpx2qq_htb.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 72,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "3628800\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpa1vhrgkk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa1vhrgkk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_product: number = 1;\n    let odd_product: number = 1;\n    let even_count: number = 0;\n    let odd_count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product = even_product * list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product = odd_product * list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_index = 0;\n    let odd_index = 0;\n    let even_number = 0;\n    let odd_number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_number = list1[i];\n            even_index = i;\n            break;\n        }\n    }\n    for (let i = list1.length - 1; i >= 0; i--) {\n        if (list1[i] % 2 != 0) {\n            odd_number = list1[i];\n            odd_index = i;\n            break;\n        }\n    }\n    return even_number * odd_number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsb9jcnbo.js:27:12)\n    at Object.<anonymous> (/tmp/tmpsb9jcnbo.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count = count + 1;\n            break;\n        }\n    }\n    if (count == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1665510083,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even: number = 1;\n    let odd: number = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "720\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20160\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphxdsxs0n.js:19:12)\n    at Object.<anonymous> (/tmp/tmphxdsxs0n.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20160,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num = 0;\n    let odd_num = 0;\n    let count = 0;\n    let product = 1;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 2) {\n        product = even_num * odd_num;\n    }\n    return product;\n}\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(mul_even_odd(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even = count_even + 1;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd = count_odd + 1;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122856,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6iqjpl6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6iqjpl6w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 == 0) {\n      even = list1[i];\n      count++;\n      break;\n    }\n  }\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 != 0) {\n      odd = list1[i];\n      count++;\n      break;\n    }\n  }\n  if (count == 2) {\n    return even * odd;\n  } else {\n    return 0;\n  }\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6]));\nconsole.log(mul_even_odd([1, 3, 5, 7, 9, 11]));\nconsole.log(mul_even_odd([2, 4, 6, 8, 10, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "2\n0\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    let count_even: number = 0;\n    let count_odd: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            count_even++;\n            if (count_even == 2) {\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            count_odd++;\n            if (count_odd == 2) {\n                break;\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "12\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpb6435koo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpb6435koo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even_count: number = 0;\n    let odd_count: number = 0;\n    let even_num: number = 0;\n    let odd_num: number = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_num = list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_num = list1[i];\n            }\n        }\n    }\n    return even_num * odd_num;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd(list1: number[]): number {\n    let even = 0;\n    let odd = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nconsole.log(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mul_even_odd;\n  assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}