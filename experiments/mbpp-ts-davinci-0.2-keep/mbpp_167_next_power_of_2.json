{
  "name": "mbpp_167_next_power_of_2",
  "language": "ts",
  "prompt": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n",
    "    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n",
    "    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n",
    "    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n",
    "    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n",
    "    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n",
    "    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\nconsole.log(next_power_of_2(4));\n",
    "    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n",
    "    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\n",
    "    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n",
    "    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\n",
    "    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n",
    "    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n",
    "    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n",
    "    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n",
    "    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n",
    "    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n",
    "    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n",
    "    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n",
    "    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n"
  ]
}