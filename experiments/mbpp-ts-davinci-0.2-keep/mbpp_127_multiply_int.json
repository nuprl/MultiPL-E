{
  "name": "mbpp_127_multiply_int",
  "language": "ts",
  "prompt": "//Write a function to multiply two integers.\nfunction multiply_int(x: number, y: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply_int;\n  assert.deepEqual(candidate(10, 20),200);\n  assert.deepEqual(candidate(5, 10),50);\n  assert.deepEqual(candidate(4, 8),32);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return x * y;\n}\n",
    "    return x * y;\n}\nconsole.log(multiply_int(2, 3));\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\nconsole.log(multiply_int(2, 3));\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\nconsole.log(multiply_int(2, 3));\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\n",
    "    return x * y;\n}\nconsole.log(multiply_int(2, 3));\n"
  ]
}