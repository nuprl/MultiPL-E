{
  "name": "mbpp_222_check_type",
  "language": "ts",
  "prompt": "//Write a function to check if all the elements in tuple have same data type or not.\nfunction check_type(test_tuple: any): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_type;\n  assert.deepEqual(candidate([5, 6, 7, 3, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, \"4\"]),false);\n  assert.deepEqual(candidate([3, 2, 1, 4, 5]),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    var result: boolean = true;\n    var first_type: string = typeof test_tuple[0];\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] !== first_type) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(check_type([1, 2, 3, 4]));\nconsole.log(check_type([\"a\", \"b\", \"c\", \"d\"]));\nconsole.log(check_type([1, \"a\", 3, \"d\"]));\n",
    "    var count = 0;\n    var temp = typeof (test_tuple[0]);\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (typeof (test_tuple[i]) == temp) {\n            count++;\n        }\n    }\n    if (count == test_tuple.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(check_type(test_tuple));\n",
    "    let flag: boolean = true;\n    let count: number = 0;\n    let first_type: string = typeof test_tuple[0];\n    while (count < test_tuple.length) {\n        if (typeof test_tuple[count] != first_type) {\n            flag = false;\n            break;\n        }\n        count++;\n    }\n    return flag;\n}\n",
    "    var result: boolean = true;\n    var count: number = 0;\n    var temp: any = typeof (test_tuple[0]);\n    while (count < test_tuple.length) {\n        if (typeof (test_tuple[count]) == temp) {\n            result = true;\n        }\n        else {\n            result = false;\n            break;\n        }\n        count++;\n    }\n    return result;\n}\n",
    "    var result: boolean = true;\n    var first_type: string = typeof test_tuple[0];\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] != first_type) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n",
    "    var result = true;\n    var first_element_type = typeof test_tuple[0];\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] != first_element_type) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(check_type([1, 2, 3, 4, 5]));\nconsole.log(check_type([\"a\", \"b\", \"c\", \"d\"]));\nconsole.log(check_type([1, \"a\", \"b\", \"c\", \"d\"]));\n",
    "    var result = test_tuple[0];\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] != typeof result) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    var result = test_tuple[0]\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (typeof (test_tuple[i]) != typeof (result)) {\n            return false\n        }\n    }\n    return true\n}\nconsole.log(check_type([1, 2, 3, 4, 5, 6]))\nconsole.log(check_type([1, 2, 3, 4, 5, \"6\"]))\n",
    "    var result: boolean = true;\n    var count: number = 0;\n    var temp: any;\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (count == 0) {\n            temp = typeof test_tuple[i];\n        }\n        if (temp != typeof test_tuple[i]) {\n            result = false;\n            break;\n        }\n        count++;\n    }\n    return result;\n}\n",
    "    var result: boolean = true;\n    var count: number = 0;\n    var temp: any = typeof (test_tuple[0]);\n    while (count < test_tuple.length) {\n        if (typeof (test_tuple[count++]) != temp) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n",
    "    var result: boolean = true;\n    var temp: any = typeof (test_tuple[0]);\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (temp != typeof (test_tuple[i])) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n",
    "    let flag: boolean = true;\n    let count: number = 0;\n    let type: string = typeof test_tuple[0];\n    for (let i: number = 0; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] == type) {\n            count++;\n        }\n    }\n    if (count == test_tuple.length) {\n        flag = true;\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nlet test_tuple: any = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(check_type(test_tuple));\n",
    "    var result = true;\n    var temp = test_tuple[0];\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (typeof (test_tuple[i]) != typeof (temp)) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(check_type(test_tuple));\n",
    "    var count = 0;\n    var temp = typeof (test_tuple[0]);\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (typeof (test_tuple[i]) == temp) {\n            count++;\n        }\n    }\n    if (count == test_tuple.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(check_type([1, 2, 3, 4]));\nconsole.log(check_type([1, 2, 3, \"4\"]));\n",
    "    var result: boolean = true;\n    var count: number = 0;\n    var temp: any = typeof test_tuple[0];\n    while (count < test_tuple.length) {\n        if (typeof test_tuple[count] != temp) {\n            result = false;\n            break;\n        }\n        count++;\n    }\n    return result;\n}\n",
    "    let flag: boolean = true;\n    let count: number = 0;\n    let temp: any = typeof test_tuple[0];\n    while (count < test_tuple.length) {\n        if (typeof test_tuple[count] != temp) {\n            flag = false;\n            break;\n        }\n        count++;\n    }\n    return flag;\n}\nconsole.log(check_type(test_tuple));\n",
    "    var count: number = 0;\n    var temp: any = typeof (test_tuple[0]);\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (typeof (test_tuple[i]) == temp) {\n            count++;\n        }\n    }\n    if (count == test_tuple.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar test_tuple: any = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar res: boolean = check_type(test_tuple);\nconsole.log(res);\n",
    "    var result = true;\n    var first_type = typeof test_tuple[0];\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] != first_type) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(check_type([1, 2, 3, 4, 5]));\nconsole.log(check_type([1, 2, 3, 4, \"5\"]));\n",
    "    var first_type = typeof test_tuple[0];\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] != first_type) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(check_type([1, 2, 3, 4, 5]));\nconsole.log(check_type([1, 2, 3, 4, \"5\"]));\n",
    "    var result: boolean = true;\n    var count: number = 0;\n    var temp: any = typeof (test_tuple[0]);\n    while (count < test_tuple.length) {\n        if (temp == typeof (test_tuple[count])) {\n            result = true;\n        }\n        else {\n            result = false;\n            break;\n        }\n        count++;\n    }\n    return result;\n}\n"
  ]
}