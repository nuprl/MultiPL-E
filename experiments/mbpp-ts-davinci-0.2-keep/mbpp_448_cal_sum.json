{
  "name": "mbpp_448_cal_sum",
  "language": "ts",
  "prompt": "//Write a function to calculate the sum of perrin numbers.\nfunction cal_sum(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cal_sum;\n  assert.deepEqual(candidate(9),49);\n  assert.deepEqual(candidate(10),66);\n  assert.deepEqual(candidate(11),88);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sum = 0;\n    let arr = [3, 0, 2];\n    for (let i = 3; i <= n; i++) {\n        arr[i] = arr[i - 2] + arr[i - 3];\n        sum += arr[i];\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    let perrin = [3, 0, 2];\n    for (let i = 0; i < n; i++) {\n        sum += perrin[2];\n        perrin[0] = perrin[1];\n        perrin[1] = perrin[2];\n        perrin[2] = perrin[0] + perrin[1];\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    sum += perrin(i);\n  }\n  return sum;\n}\n",
    "    let sum = 0;\n    let perrin = [3, 0, 2];\n    for (let i = 0; i < n; i++) {\n        sum += perrin[2];\n        perrin[0] = perrin[1];\n        perrin[1] = perrin[2];\n        perrin[2] = perrin[0] + perrin[1];\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i: number = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i: number = 0; i < n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i: number = 0; i <= n; i++) {\n        sum += perrin(i);\n    }\n    return sum;\n}\n",
    "  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += perrin(i);\n  }\n  return sum;\n}\n"
  ]
}