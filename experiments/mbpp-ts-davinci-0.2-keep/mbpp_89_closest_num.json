{
  "name": "mbpp_89_closest_num",
  "language": "ts",
  "prompt": "//Write a function to find the closest smaller number than n.\nfunction closest_num(N: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_num;\n  assert.deepEqual(candidate(11),10);\n  assert.deepEqual(candidate(7),6);\n  assert.deepEqual(candidate(12),11);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) == 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - count;\n}\n",
    "    let num = N;\n    let prev = num;\n    let next = num;\n    let i = 0;\n    while (i < 32) {\n        if ((num & (1 << i)) == 0) {\n            prev = num | (1 << i);\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < 32) {\n        if ((num & (1 << i)) != 0) {\n            next = num & ~(1 << i);\n            break;\n        }\n        i++;\n    }\n    return (N - prev) > (next - N) ? next : prev;\n}\n",
    "    let num = N;\n    let binary = num.toString(2);\n    let binary_arr = binary.split('');\n    let index = binary_arr.length - 1;\n    let count = 0;\n    while (index >= 0) {\n        if (binary_arr[index] === '1') {\n            binary_arr[index] = '0';\n            count++;\n        } else {\n            binary_arr[index] = '1';\n            break;\n        }\n        index--;\n    }\n    if (count === binary_arr.length) {\n        return -1;\n    }\n    return parseInt(binary_arr.join(''), 2);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = num >> 1;\n        count++;\n    }\n    return N - (1 << (count - 1));\n}\n",
    "    let num = N;\n    let binary = N.toString(2);\n    let one = binary.lastIndexOf('1');\n    let zero = binary.indexOf('0', one);\n    binary = binary.substring(0, one) + '0' + binary.substring(one + 1, zero) + '1' + binary.substring(zero + 1);\n    return parseInt(binary, 2);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) == 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 === 1) {\n            return N - count;\n        }\n        count++;\n        num = Math.floor(num / 2);\n    }\n    return 0;\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) == 1) {\n            break;\n        }\n        count++;\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            num = num / 2;\n            count++;\n        } else {\n            num = num - 1;\n            count++;\n        }\n    }\n    return count;\n}\n",
    "    let n = N;\n    let i = 0;\n    while (n > 0) {\n        n = n >> 1;\n        i++;\n    }\n    return 1 << (i - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) == 1) {\n            break;\n        }\n        count++;\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n",
    "    let n = N;\n    let c0 = 0;\n    let c1 = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            c0++;\n        } else {\n            c1++;\n        }\n        n = Math.floor(n / 2);\n    }\n    if (c0 > c1) {\n        return N - Math.pow(2, c1);\n    } else {\n        return N - Math.pow(2, c0);\n    }\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 == 1) {\n            break;\n        }\n        count++;\n        num = num / 2;\n    }\n    return N - Math.pow(2, count);\n}\n",
    "    let i = 1;\n    while (i < N) {\n        if (N % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            num = num / 2;\n            count++;\n        }\n        else {\n            num = num - 1;\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(closest_num(13));\n",
    "    let n = N;\n    let count = 0;\n    while (n > 0) {\n        n = n >> 1;\n        count++;\n    }\n    return N - (1 << (count - 1));\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = Math.floor(num / 2);\n        count++;\n    }\n    return Math.pow(2, count - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) === 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = num >> 1;\n        count++;\n    }\n    return N - (1 << (count - 1));\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 === 1) {\n            return N - Math.pow(2, count);\n        }\n        num = num >> 1;\n        count++;\n    }\n    return -1;\n}\n"
  ]
}