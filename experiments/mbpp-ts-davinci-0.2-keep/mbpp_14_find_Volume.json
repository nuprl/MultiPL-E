{
  "name": "mbpp_14_find_Volume",
  "language": "ts",
  "prompt": "//Write a python function to find the volume of a triangular prism.\nfunction find_Volume(l: number, b: number, h: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Volume;\n  assert.deepEqual(candidate(10, 8, 6),240);\n  assert.deepEqual(candidate(3, 2, 2),6);\n  assert.deepEqual(candidate(1, 2, 1),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return (l * b * h) / 2;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return (l * b * h) / 2;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return (l * b * h) / 2;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return (l * b * h);\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return (l * b * h) / 2;\n}\n\nconsole.log(find_Volume(5, 2, 8));\n",
    "    return (l * b * h) / 2;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return (l * b * h) / 2;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return l * b * h;\n}\nconsole.log(find_Volume(2, 3, 4));\n",
    "    return (l * b * h) / 2;\n}\n\nconsole.log(find_Volume(2, 3, 4));\n"
  ]
}