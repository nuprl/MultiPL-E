{
  "name": "mbpp_472_check_Consecutive",
  "language": "ts",
  "prompt": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmpnj8n071h.ts(24,1): error TS1005: ',' expected.\n../../../../tmp/tmpnj8n071h.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmp5fyoopk2.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = 0;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = 1;\n        }\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar res = check_Consecutive([1, 2, 3, 4, 5, 6, 7]);\nconsole.log(res);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmplcph1k_2.ts(17,1): error TS1005: ',' expected.\n../../../../tmp/tmplcph1k_2.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var max: number = Math.max.apply(null, l);\n    var min: number = Math.min.apply(null, l);\n    if (max - min + 1 == l.length) {\n        for (var i = 0; i < l.length; i++) {\n            if (l.indexOf(min + i) == -1) {\n                flag = false;\n                break;\n            }\n        }\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let diff: number = max - min;\n    if (diff == l.length - 1) {\n        flag = true;\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\ntrue\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = false;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmpqdgsbvmb.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpqdgsbvmb.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var min: number = Math.min(...l);\n    var max: number = Math.max(...l);\n    var len: number = l.length;\n    if (max - min + 1 == len) {\n        for (var i = 0; i < len; i++) {\n            if (l[i] != min) {\n                flag = false;\n                break;\n            }\n            min++;\n        }\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nvar l1: number[] = [1, 2, 3, 4, 5];\nvar l2: number[] = [1, 2, 3, 4, 5, 6];\nvar l3: number[] = [1, 2, 3, 4, 6];\nconsole.log(check_Consecutive(l1));\nconsole.log(check_Consecutive(l2));\nconsole.log(check_Consecutive(l3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let len: number = l.length;\n    if (max - min + 1 == len) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = 0;\n    let min = Math.min(...l);\n    let max = Math.max(...l);\n    let len = l.length;\n    if (len == max - min + 1) {\n        flag = 1;\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmpq06ai_vi.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var n: number = l.length;\n    for (var i = 0; i < n - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7];\nlet result: boolean = check_Consecutive(l);\nconsole.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmpqdgsbvmb.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpqdgsbvmb.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let n: number = l.length;\n    let max: number = Math.max(...l);\n    let min: number = Math.min(...l);\n    if (n == max - min + 1) {\n        flag = true;\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmp4enivxzh.ts(24,1): error TS1005: ',' expected.\n../../../../tmp/tmp4enivxzh.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var max: number = Math.max.apply(null, l);\n    var min: number = Math.min.apply(null, l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar l1: number[] = [1, 2, 3, 4, 5, 6, 7];\nvar l2: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\nconsole.log(check_Consecutive(l1));\nconsole.log(check_Consecutive(l2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var i: number = 0;\n    var j: number = 0;\n    var count: number = 0;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] == l[j]) {\n                flag = true;\n                break;\n            }\n        }\n    }\n    if (flag == true) {\n        console.log(\"Duplicate element found\");\n    }\n    else {\n        console.log(\"Duplicate element not found\");\n    }\n    for (i = 0; i < l.length; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            count++;\n        }\n    }\n    if (count == l.length - 1) {\n        console.log(\"Consecutive numbers\");\n    }\n    else {\n        console.log(\"Not consecutive numbers\");\n    }\n    return flag;\n}\nvar l1: number[] = [1, 2, 3, 4, 5, 6, 7];\nvar l2: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\nvar l3: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar l4: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar l5: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar l6: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar l7: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nvar l8: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar l9: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmpicy1hg4v.ts(43,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmp_x5udz6w.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = false;\n    let min = Math.min(...l);\n    let max = Math.max(...l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = l[0];\n    let max: number = l[0];\n    for (let i = 0; i < l.length; i++) {\n        if (min > l[i]) {\n            min = l[i];\n        }\n        if (max < l[i]) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var len: number = l.length;\n    var max: number = Math.max.apply(null, l);\n    var min: number = Math.min.apply(null, l);\n    if (max - min + 1 == len) {\n        flag = true;\n    }\n    return flag;\n}\nvar l: number[] = [1, 2, 3, 4, 5];\nvar l1: number[] = [1, 2, 3, 4, 6];\nconsole.log(check_Consecutive(l));\nconsole.log(check_Consecutive(l1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i: number = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var n: number = l.length;\n    var min: number = Math.min.apply(null, l);\n    var max: number = Math.max.apply(null, l);\n    if (n == max - min + 1) {\n        for (var i = 0; i < n; i++) {\n            if (l.indexOf(min + i) == -1) {\n                flag = false;\n                break;\n            }\n        }\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmpxv0fny7w.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpxv0fny7w.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let min = Math.min(...l);\n    let max = Math.max(...l);\n    let size = max - min + 1;\n    if (size == l.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (!l.includes(min++))\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmp5umakhm1.ts(17,1): error TS1005: ',' expected.\n../../../../tmp/tmp5umakhm1.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = l[0];\n    var max: number = l[0];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar l1: number[] = [5, 6, 7, 8, 9, 10];\nvar l2: number[] = [5, 6, 7, 8, 9, 10, 11, 12];\nconsole.log(check_Consecutive(l1));\nconsole.log(check_Consecutive(l2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let n: number = l.length;\n    let max: number = Math.max(...l);\n    let min: number = Math.min(...l);\n    if (n == (max - min + 1)) {\n        flag = true;\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmpjpyba9ek.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var n: number = l.length;\n    for (var i = 0; i < n - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var n: number = l.length;\n    for (var i = 0; i < n - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  let flag: boolean = true;\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] + 1 != l[i + 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmpvfhx_otv.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpvfhx_otv.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmp2msywk_p.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  var flag: boolean = false;\n  var n: number = l.length;\n  var max: number = Math.max(...l);\n  var min: number = Math.min(...l);\n  if (n == max - min + 1) {\n    flag = true;\n  }\n  return flag;\n}\nvar result: boolean = check_Consecutive([1, 2, 3, 4, 5]);\nconsole.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    let min: number = l[0];\n    let max: number = l[0];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmp3z6ku049.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmp3z6ku049.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpin_uccm0.js:17:12)\n    at Object.<anonymous> (/tmp/tmpin_uccm0.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  let flag = true;\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i + 1] - l[i] == 1) {\n      flag = true;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmpiwfbjt4e.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpiwfbjt4e.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet l1: number[] = [1, 2, 3, 4, 5];\nlet l2: number[] = [1, 2, 3, 5, 6];\nconsole.log(check_Consecutive(l1));\nconsole.log(check_Consecutive(l2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122805,
      "stdout": "false\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6xixbfml.js:27:12)\n    at Object.<anonymous> (/tmp/tmp6xixbfml.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  let flag: boolean = true;\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i + 1] - l[i] != 1) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmpgpyt2rtb.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmpgpyt2rtb.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  var flag = 1;\n  for (var i = 0; i < l.length - 1; i++) {\n    if (l[i] + 1 != l[i + 1]) {\n      flag = 0;\n      break;\n    }\n  }\n  if (flag == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122805,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmp1h3abnso.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = 0;\n    l.sort();\n    for (var i = 1; i < l.length; i++) {\n        if (l[i] - l[i - 1] == 1) {\n            flag = 1;\n        }\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar result = check_Consecutive(l);\nconsole.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122805,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var max: number = Math.max.apply(null, l);\n    var min: number = Math.min.apply(null, l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmp7bd7kuyr.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp7bd7kuyr.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = l[0];\n    var max: number = l[0];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar l: number[] = [5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122805,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmp2msywk_p.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpnhzjkznl.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhzjkznl.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmp1f3gyqy5.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var min: number = Math.min.apply(null, l);\n    var max: number = Math.max.apply(null, l);\n    var len: number = l.length;\n    if ((max - min + 1) == len) {\n        for (var i = 0; i < len; i++) {\n            if (l.indexOf(min) == -1) {\n                flag = false;\n                break;\n            }\n            min++;\n        }\n    } else {\n        flag = false;\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  var flag: boolean = true;\n  var n: number = l.length;\n  l.sort();\n  for (var i = 0; i < n - 1; i++) {\n    if (l[i + 1] - l[i] != 1) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var n: number = l.length;\n    var max: number = Math.max.apply(null, l);\n    var min: number = Math.min.apply(null, l);\n    if ((max - min + 1) == n) {\n        flag = true;\n    }\n    return flag;\n}\nvar l: number[] = [1, 2, 3, 4, 5];\nvar l1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar l2: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];\nvar l3: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmphsnqxzfn.ts(16,1): error TS1005: ',' expected.\n../../../../tmp/tmphsnqxzfn.ts(16,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = Math.min(...l);\n    var max: number = Math.max(...l);\n    var length: number = l.length;\n    if (max - min + 1 == length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] == 1) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_Consecutive([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmp50bynmee.ts(24,1): error TS1005: ',' expected.\n../../../../tmp/tmp50bynmee.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var i: number;\n    for (i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar result: boolean = check_Consecutive(l);\nif (result == true) {\n    console.log(\"The given list contains consecutive numbers\");\n}\nelse {\n    console.log(\"The given list does not contain consecutive numbers\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "The given list contains consecutive numbers\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = l[0];\n    var max: number = l[0];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar l: number[] = [1, 2, 3, 4, 5];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_Consecut\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmpwr5gy10q.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpwr5gy10q.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  let flag: boolean = true;\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] + 1 != l[i + 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmp58ldb55n.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmp58ldb55n.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmp8grep1e_.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = 0;\n    var min = Math.min(...l);\n    var max = Math.max(...l);\n    var len = l.length;\n    if (len == max - min + 1) {\n        flag = 1;\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconsole.log(check_Consecutive(l1));\nconsole.log(check_Consecutive(l2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    l.sort();\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let diff: number = max - min;\n    if (diff == l.length - 1) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122808,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let min = Math.min(...l);\n    let max = Math.max(...l);\n    let len = l.length;\n    if (max - min + 1 === len) {\n        return true;\n    }\n    return false;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = Math.min(...l);\n    var max: number = Math.max(...l);\n    var n: number = l.length;\n    if (max - min + 1 == n) {\n        flag = true;\n    }\n    return flag;\n}\nvar l: number[] = [1, 2, 3, 4, 5];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122808,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = false;\n    let min = Math.min(...l);\n    let max = Math.max(...l);\n    let new_list = [];\n    for (let i = min; i <= max; i++) {\n        new_list.push(i);\n    }\n    if (new_list.length == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122809,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122809,
      "stdout": "../../../../tmp/tmpgml3njrc.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpgml3njrc.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] != l[i] + 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122809,
      "stdout": "../../../../tmp/tmpd3ifwo_p.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmpd3ifwo_p.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let count: number = 0;\n    for (let i: number = 0; i < l.length; i++) {\n        if (l[i] == min) {\n            count++;\n        }\n    }\n    if (count == (max - min + 1)) {\n        flag = true;\n    }\n    return flag;\n}\n\nlet l1: number[] = [1, 2, 3, 4, 5];\nlet l2: number[] = [1, 2, 3, 4, 5, 6, 7];\nlet l3: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nlet l4: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];\nconsole.log(check_Consecutive(l1));\nconsole.log(check_Consecutive(l2));\nconsole.log(check_Consecutive(l3));\nconsole.log(check_Consecutive(l4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "false\nfalse\nfalse\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj4x83f1n.js:28:12)\n    at Object.<anonymous> (/tmp/tmpj4x83f1n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122809,
      "stdout": "../../../../tmp/tmp2xu236wt.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "../../../../tmp/tmp7780p_gw.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmp7780p_gw.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  let flag: boolean = true;\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] + 1 != l[i + 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    l.sort();\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var min: number = Math.min(...l);\n    var max: number = Math.max(...l);\n    for (var i = min; i < max; i++) {\n        if (l.indexOf(i) == -1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "../../../../tmp/tmp7ee54zux.ts(26,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var n: number = l.length;\n    var min: number = Math.min.apply(null, l);\n    var max: number = Math.max.apply(null, l);\n    if (n == max - min + 1) {\n        for (var i = 0; i < n; i++) {\n            if (l.indexOf(min + i) == -1) {\n                flag = false;\n                break;\n            }\n        }\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var n: number = l.length;\n    for (var i = 0; i < n - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "../../../../tmp/tmpj66qk980.ts(16,1): error TS1005: ',' expected.\n../../../../tmp/tmpj66qk980.ts(16,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = l[0];\n    var max: number = l[0];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar l: number[] = [5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var n: number = l.length;\n    for (var i = 0; i < n - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    let min: number = l[0];\n    let max: number = l[0];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([81, 82, 83, 84, 85, 86]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "../../../../tmp/tmp9qi4mf4l.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    let min: number = l[0];\n    let max: number = l[0];\n    for (let i: number = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    var min: number = Math.min(...l);\n    var max: number = Math.max(...l);\n    var len: number = l.length;\n    if (len == max - min + 1) {\n        for (var i = 0; i < len - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                flag = false;\n                break;\n            }\n        }\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    let n: number = l.length;\n    for (let i = 0; i < n - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpur57z4r_.js:15:12)\n    at Object.<anonymous> (/tmp/tmpur57z4r_.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "../../../../tmp/tmpvht_mouc.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "../../../../tmp/tmprao4fg1k.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmprao4fg1k.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = Math.min(...l);\n    var max: number = Math.max(...l);\n    var n: number = l.length;\n    if (max - min + 1 == n) {\n        flag = true;\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "../../../../tmp/tmpcjva10q7.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpcjva10q7.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "../../../../tmp/tmpurd6pt7_.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpurd6pt7_.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "../../../../tmp/tmpr1yy4s6p.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmpr1yy4s6p.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "../../../../tmp/tmpa5smzbnb.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmpa5smzbnb.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "../../../../tmp/tmpiopxqjt9.ts(15,1): error TS1005: ',' expected.\n../../../../tmp/tmpiopxqjt9.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let max: number = Math.max(...l);\n    let min: number = Math.min(...l);\n    let diff: number = max - min;\n    if (diff == l.length - 1) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "../../../../tmp/tmpmh6zlvm4.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nvar l = [1, 2, 3, 4, 5, 6, 7];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    l.sort();\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] - l[i - 1] != 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let len: number = l.length;\n    if (len == (max - min + 1)) {\n        for (let i: number = 0; i < len; i++) {\n            if (l.indexOf(min + i) == -1) {\n                flag = false;\n                break;\n            }\n        }\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "../../../../tmp/tmpqqax34n1.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let min = Math.min(...l);\n    let max = Math.max(...l);\n    let len = l.length;\n    if (max - min + 1 === len) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let length: number = l.length;\n    if (length != max - min + 1) {\n        flag = false;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  let flag = true;\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i + 1] - l[i] != 1) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "../../../../tmp/tmp7u94eo07.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmp7u94eo07.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = l[0];\n    var max: number = l[0];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if ((max - min) == (l.length - 1)) {\n        flag = true;\n    }\n    return flag;\n}\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var i: number = 0;\n    var j: number = 0;\n    var count: number = 0;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + 1 == l[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == l.length - 1) {\n        flag = true;\n    }\n    return flag;\n}\nvar l1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar l2: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar l3: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar l4: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar l5: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nvar l6: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar l7: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nvar l8: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nvar l9: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\nvar l10: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\nvar l11: number[] = [1, 2, 3, 4, 5, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "../../../../tmp/tmpph1nr_jz.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpph1nr_jz.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let l1: number[] = l.sort();\n    for (let i = 0; i < l1.length - 1; i++) {\n        if (l1[i] + 1 == l1[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nlet l1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmp2msywk_p.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var max: number = Math.max.apply(null, l);\n    var min: number = Math.min.apply(null, l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122814,
      "stdout": "../../../../tmp/tmpwai7avgi.ts(26,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122814,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122814,
      "stdout": "../../../../tmp/tmptcw1y5se.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122815,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122815,
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let len: number = l.length;\n    if (max - min + 1 == len) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122815,
      "stdout": "../../../../tmp/tmpbv6ofrp_.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122815,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = 0;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] == 1) {\n            flag = 1;\n        }\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122815,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    l.sort();\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122815,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    l.sort();\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == l[i + 1] - 1) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsxyf5yvz.js:19:12)\n    at Object.<anonymous> (/tmp/tmpsxyf5yvz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    let min: number = l[0];\n    let max: number = l[0];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if ((max - min + 1) == l.length) {\n        flag = true;\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "../../../../tmp/tmpr2imgim6.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpr2imgim6.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i: number = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "../../../../tmp/tmpesqjd66t.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let sorted_list = l.sort();\n    let flag = 0;\n    for (let i = 0; i < sorted_list.length - 1; i++) {\n        if (sorted_list[i] + 1 != sorted_list[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "../../../../tmp/tmp37xbu_ky.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = Math.min(...l);\n    var max: number = Math.max(...l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60])\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "../../../../tmp/tmpa3vb6p0w.ts(20,1): error TS1005: ',' expected.\n../../../../tmp/tmpa3vb6p0w.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "../../../../tmp/tmprpw5azpm.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = 0;\n    var min = l[0];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n    }\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == min + i) {\n            flag = 1;\n        }\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar l = [5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "../../../../tmp/tmpc3gfejvg.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpc3gfejvg.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = false;\n    var max = Math.max.apply(null, l);\n    var min = Math.min.apply(null, l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var min: number = l[0];\n    var max: number = l[0];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar l1: number[] = [5, 6, 7, 8, 9, 10];\nvar l2: number[] = [5, 6, 7, 8, 9, 10, 11];\nconsole.log(check_Consecutive(l1));\nconsole.log(check_Consecutive(l2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let n: number = l.length;\n    for (let i = 0; i < n; i++) {\n        if (l[i] == l[i + 1] - 1) {\n            flag = true;\n        }\n        else {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\nlet l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfl0b5c6r.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfl0b5c6r.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmplcph1k_2.ts(17,1): error TS1005: ',' expected.\n../../../../tmp/tmplcph1k_2.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    let range: number = max - min + 1;\n    if (range == l.length) {\n        for (let i: number = 0; i < l.length; i++) {\n            if (l[i] < min || l[i] > max) {\n                flag = false;\n                break;\n            }\n            else {\n                flag = true;\n            }\n        }\n    }\n    else {\n        flag = false;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([5, 2, 3, 1, 4]));\nconsole.log(check_Consecutive([83, 78, 80, 81, 79, 82]));\nconsole.log(check_Consecutive([34, 23, 52, 12, 3]));\nconsole.log(check_Consecutive([-5, -6, -7, -8, -9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "true\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nlet l1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet l2: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nlet l3: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];\nlet l4: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmpwz3co89t.ts(20,1): error TS1005: ',' expected.\n../../../../tmp/tmpwz3co89t.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 !== l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmpnjqdbpxx.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1665509989,
      "stdout": "../../../../tmp/tmplcph1k_2.ts(17,1): error TS1005: ',' expected.\n../../../../tmp/tmplcph1k_2.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122804,
      "stdout": "../../../../tmp/tmp2msywk_p.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 == l[i + 1]) {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = Math.min(...l);\n    let max: number = Math.max(...l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmpk4_9spve.ts(24,1): error TS1005: ',' expected.\n../../../../tmp/tmpk4_9spve.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag: boolean = false;\n    var max: number = Math.max(...l);\n    var min: number = Math.min(...l);\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmpv79za0p2.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let max: number = Math.max(...l);\n    let min: number = Math.min(...l);\n    let diff: number = max - min;\n    if (diff == l.length - 1) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n  let flag: boolean = true;\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] + 1 != l[i + 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\n\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(check_Consecutive([5, 6, -10, -11, -12, -13]));\nconsole.log(check_Consecutive([5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag = true;\n    l.sort();\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "../../../../tmp/tmpldoatklq.ts(24,1): error TS1005: ',' expected.\n../../../../tmp/tmpldoatklq.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    let flag: boolean = false;\n    let min: number = l[0];\n    let max: number = l[0];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    if (max - min + 1 == l.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet l: number[] = [5, 6, 7, 8, 9, 10];\nconsole.log(check_Consecutive(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive(l: number[]): boolean {\n    var flag = 0;\n    var n = l.length;\n    for (var i = 0; i < n - 1; i++) {\n        if (l[i + 1] - l[i] == 1) {\n            flag = 1;\n        }\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_Consecutive;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);\n  assert.deepEqual(candidate([1, 2, 1]),false);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}