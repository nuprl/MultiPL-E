{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "ts",
  "prompt": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(x => x % 2 != 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 == 1;\n    });\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 != 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 == 1;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 == 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    })\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers = nums.filter(function (num) {\n        return (num % 2 != 0);\n    });\n    return oddnumbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            oddnums.push(nums[i]);\n        }\n    }\n    return oddnums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 != 0);\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(num => num % 2 !== 0);\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 1) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 != 0);\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return oddnumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    var odd_numbers: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(\"Odd numbers are: \" + filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "Odd numbers are: 1,3,5,7,9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (n) {\n        return n % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function(num){\n        return num % 2 !== 0;\n    })\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 == 1);\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function(num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 == 1;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123321,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function(num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return oddnumbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nlet odd_numbers: number[] = filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nconsole.log(\"Odd numbers are: \" + odd_numbers);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "Odd numbers are: 1,3,5,7,9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return oddnumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 1) {\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    })\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    })\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return oddnumbers;\n}\nconsole.log(\"Odd numbers are : \" + filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "Odd numbers are : 1,3,5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 === 1;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 1) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123315,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    var odd_nums: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 1) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 === 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 1) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    var oddnumbers: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    var oddnumbers: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (n) {\n        return n % 2 != 0;\n    });\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    })\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 == 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 != 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    var odd_nums: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(\"odd numbers are: \" + filter_oddnumbers(arr));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "odd numbers are: 1,3,5,7,9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers = nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 == 1;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\nconsole.log(\"Odd numbers are : \" + filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "Odd numbers are : 1,3,5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums = nums.filter(function (num) {\n        return num % 2 == 1;\n    });\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_nums.push(nums[i]);\n        }\n    }\n    return odd_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    })\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 != 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(n => n % 2 == 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 != 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 != 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    let odd_numbers: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            odd_numbers.push(nums[i]);\n        }\n    }\n    return odd_numbers;\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(function (num) {\n        return num % 2 !== 0;\n    });\n}\n\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517535,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 != 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to filter odd numbers.\nfunction filter_oddnumbers(nums: number[]): number[] {\n    return nums.filter(num => num % 2 !== 0);\n}\nconsole.log(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_oddnumbers;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\n  assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);\n  assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);\n}\n\ntest();",
      "timestamp": 1665517533,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}