{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "ts",
  "prompt": "//Write a function to find nth centered hexagonal number.\nfunction centered_hexagonal_number(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = centered_hexagonal_number;\n  assert.deepEqual(candidate(10),271);\n  assert.deepEqual(candidate(2),7);\n  assert.deepEqual(candidate(9),217);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "  return (3 * n * n - n) / 2;\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "  return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return (3 * n * n - n) / 2;\n}\n",
    "    return n * (2 * n - 1);\n}\n",
    "    return n * (2 * n - 1);\n}\n"
  ]
}