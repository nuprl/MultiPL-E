{
  "name": "mbpp_806_max_run_uppercase",
  "language": "ts",
  "prompt": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510552,
      "stdout": "2\n4\n4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpogvkygxi.js:25:12)\n    at Object.<anonymous> (/tmp/tmpogvkygxi.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i].match(/[A-Z]/)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpyiqutjod.js:22:12)\n    at Object.<anonymous> (/tmp/tmpyiqutjod.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpqj1dkkln.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqj1dkkln.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpd4m0y4pr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd4m0y4pr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n            if (count > max) {\n                max = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmpxw_tgtbd.ts(27,116): error TS1002: Unterminated string literal.\n../../../../tmp/tmpxw_tgtbd.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpxw_tgtbd.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercasendeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmpslsg6x5o.ts(18,806): error TS1002: Unterminated string literal.\n../../../../tmp/tmpslsg6x5o.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmpslsg6x5o.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\nconsole.log(max_run_uppercase(\"aaAAbbbBBBccCC\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count > max) {\n            max = count;\n        }\n    }\n    return max;\n}\n\nconsole.log(max_run_uppercase(\"AAABBBB\"));\nconsole.log(max_run_uppercase(\"AAABBBBcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmpcxp5gqeb.ts(19,783): error TS1002: Unterminated string literal.\n../../../../tmp/tmpcxp5gqeb.ts(20,1): error TS1005: ',' expected.\n../../../../tmp/tmpcxp5gqeb.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aBcDeFgH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABC\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCabc\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCabcABC\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCabcABCabc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "1\n1\n1\n13\n13\n13\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpv0w029a3.js:28:12)\n    at Object.<anonymous> (/tmp/tmpv0w029a3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello world\"));\nconsole.log(max_run_uppercase(\"hello WORLD\"));\nconsole.log(max_run_uppercase(\"hello world\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"HELL\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmp21hc2_hp.ts(37,36): error TS1002: Unterminated string literal.\n../../../../tmp/tmp21hc2_hp.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp21hc2_hp.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpx6llln7j.js:22:12)\n    at Object.<anonymous> (/tmp/tmpx6llln7j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmpd34f9y_9.ts(18,409): error TS1002: Unterminated string literal.\n../../../../tmp/tmpd34f9y_9.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmpd34f9y_9.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run += 1;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp8vhrz0d2.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8vhrz0d2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str.charAt(i) === test_str.charAt(i).toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str.charAt(i) === test_str.charAt(i).toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            max_run = Math.max(max_run, run);\n            run = 0;\n        }\n    }\n    return Math.max(max_run, run);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpd4m0y4pr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd4m0y4pr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpd4m0y4pr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd4m0y4pr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "2\n4\n4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmps98ep7v9.js:25:12)\n    at Object.<anonymous> (/tmp/tmps98ep7v9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpx6llln7j.js:22:12)\n    at Object.<anonymous> (/tmp/tmpx6llln7j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpb5boddd9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpb5boddd9.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"));\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\") === 26);\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\") === 26);\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\") === 26);\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\") === 26);\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\") === 26);\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMn\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmpndmgeb9f.ts(24,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmpndmgeb9f.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmpndmgeb9f.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconsole.log(max_run_uppercase(\"AAABBBBAAAAA\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "12\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string, I am a string, I\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmpjasenlzb.ts(27,166): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjasenlzb.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpjasenlzb.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmptvyb5u6k.ts(27,84): error TS1002: Unterminated string literal.\n../../../../tmp/tmptvyb5u6k.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmptvyb5u6k.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            cur_run = 0;\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"a\"));\nconsole.log(max_run_uppercase(\"aaa\"));\nconsole.log(max_run_uppercase(\"aAa\"));\nconsole.log(max_run_uppercase(\"aAaA\"));\nconsole.log(max_run_uppercase(\"aAaAa\"));\nconsole.log(max_run_uppercase(\"aAaAaA\"));\nconsole.log(max_run_uppercase(\"aAaAaAa\"));\nconsole.log(max_run_uppercase(\"aAaAaAaA\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAA\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAa\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAaA\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAaAA\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAaAAA\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAaAAAA\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAaAAAAa\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAaAAAAaA\"));\nconsole.log(max_run_uppercase(\"aAaAaAaAAaAAAAaAA\"));\nconsole.log(max_run_uppercase(\"aAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmpxhd8niyq.ts(35,37): error TS1002: Unterminated string literal.\n../../../../tmp/tmpxhd8niyq.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpxhd8niyq.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpq6suga58.js:22:12)\n    at Object.<anonymous> (/tmp/tmpq6suga58.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123309,
      "stdout": "2\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123309,
      "stdout": "../../../../tmp/tmp5oh4alsr.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        }\n        else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpcwpytixi.js:22:12)\n    at Object.<anonymous> (/tmp/tmpcwpytixi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpuq6nwe7l.js:22:12)\n    at Object.<anonymous> (/tmp/tmpuq6nwe7l.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n  let max_run: number = 0;\n  let curr_run: number = 0;\n  for (let i: number = 0; i < test_str.length; i++) {\n    if (test_str[i] === test_str[i].toUpperCase()) {\n      curr_run++;\n    } else {\n      if (curr_run > max_run) {\n        max_run = curr_run;\n      }\n      curr_run = 0;\n    }\n  }\n  return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpn85j954i.js:22:12)\n    at Object.<anonymous> (/tmp/tmpn85j954i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"abCdEfG\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AA\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaa\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaA\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAa\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAaA\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAaAa\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAaAaA\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAaAaAa\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAaAaAaA\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAaAaAaAa\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaaAaAaAaAaA\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAaaa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "../../../../tmp/tmpuiiteffh.ts(31,48): error TS1002: Unterminated string literal.\n../../../../tmp/tmpuiiteffh.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpuiiteffh.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aBcDeFg\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjK\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKL\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLm\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmN\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNo\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNoP\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNoPq\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNoPqR\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNoPqRs\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNoPqRsT\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNoPqRsTu\"));\nconsole.log(max_run_uppercase(\"aBcDeFgHjKLmNoPqRsTuV\"));\nconsole.log(max_run_uppercase(\"aBcDe\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123309,
      "stdout": "../../../../tmp/tmpdqjcd7gd.ts(32,37): error TS1002: Unterminated string literal.\n../../../../tmp/tmpdqjcd7gd.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpdqjcd7gd.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpnzy6sp5h.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnzy6sp5h.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_count = 0;\n    let count = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp68dyufo3.js:22:12)\n    at Object.<anonymous> (/tmp/tmp68dyufo3.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run_count = 0;\n    let run_count = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run_count++;\n            if (run_count > max_run_count) {\n                max_run_count = run_count;\n            }\n        } else {\n            run_count = 0;\n        }\n    }\n    return max_run_count;\n}\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "2\n4\n4\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "1\n2\n2\n0\n0\n0\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpy4bb1oql.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy4bb1oql.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n        }\n        else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpemtzqfaa.js:22:12)\n    at Object.<anonymous> (/tmp/tmpemtzqfaa.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpqj1dkkln.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqj1dkkln.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        }\n        else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    let i: number = 0;\n    while (i < test_str.length) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n        i++;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpqa6h380i.js:24:12)\n    at Object.<anonymous> (/tmp/tmpqa6h380i.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string with a lot of UPPERCASE characters\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string with a lot of lowercase characters\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "2\n4\n11\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"abCdEfG\"));\nconsole.log(max_run_uppercase(\"abCdEfGHH\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHH\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHh\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhH\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHh\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHhH\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHhHh\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHhHhH\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHhHhHh\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHhHhHhH\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHhHhHhHh\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhHhHhHhHhH\"));\nconsole.log(max_run_uppercase(\"abCdEfGHHHhH\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "../../../../tmp/tmpx4plheok.ts(34,44): error TS1002: Unterminated string literal.\n../../../../tmp/tmpx4plheok.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpx4plheok.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\nconsole.log(max_run_uppercase(\"aBCdefghijklmnopqrstuvwxyz\"));\nconsole.log(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\nconsole.log(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\nconsole.log(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\nconsole.log(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "../../../../tmp/tmp0z7249sw.ts(24,240): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0z7249sw.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmp0z7249sw.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123310,
      "stdout": "../../../../tmp/tmpj8u0lj6_.ts(38,9): error TS1003: Identifier expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!123\"));\nconsole.log(max_run_uppercase(\"Hello World!123!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!123!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!123!HELLO WORLD!123!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!123!HELLO WORLD!123!HELLO WORLD!123!\"));\nconsole.log(max_run_uppercase(\"HELLO WORLD!123!HELLO WORLD!123!HELLO WORLD!123!HELLO WORLD!123!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123311,
      "stdout": "1\n2\n2\n4\n5\n16\n32\n48\n64\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run += 1;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmptgnn40r6.js:22:12)\n    at Object.<anonymous> (/tmp/tmptgnn40r6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123311,
      "stdout": "../../../../tmp/tmphet5akwx.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmphet5akwx.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run += 1;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123311,
      "stdout": "../../../../tmp/tmp5y_om821.ts(18,419): error TS1002: Unterminated string literal.\n../../../../tmp/tmp5y_om821.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmp5y_om821.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, with a lot of UPPERCASE letters\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, with a lot of lowercase letters\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "2\n4\n11\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n\n    if (run > max_run) {\n        max_run = run;\n    }\n\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpczuw9pau.js:22:12)\n    at Object.<anonymous> (/tmp/tmpczuw9pau.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfbnr_aej.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfbnr_aej.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpqj1dkkln.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqj1dkkln.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_count = 0;\n    let count = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpd4m0y4pr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd4m0y4pr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n  let max_run: number = 0;\n  let run: number = 0;\n  for (let i = 0; i < test_str.length; i++) {\n    if (test_str[i] === test_str[i].toUpperCase()) {\n      run++;\n    } else {\n      if (run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmptwp4wgb4.js:22:12)\n    at Object.<anonymous> (/tmp/tmptwp4wgb4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123311,
      "stdout": "../../../../tmp/tmp3mqh9f7l.ts(38,43): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3mqh9f7l.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp3mqh9f7l.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            max_run = Math.max(max_run, run);\n            run = 0;\n        }\n    }\n    return Math.max(max_run, run);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpd4m0y4pr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd4m0y4pr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "../../../../tmp/tmpml5rf_pz.ts(18,419): error TS1002: Unterminated string literal.\n../../../../tmp/tmpml5rf_pz.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmpml5rf_pz.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"));\nconsole.log(max_run_uppercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890\"));\nconsole.log(max_run_uppercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890!@#$%^&*()_+\"));\nconsole.log(max_run_uppercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890!@#$%^&*()_+`~-=[]{}\\\\|;:'\\\",<.>/?\"));\nconsole.log(max_run_uppercase(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890!@#$%^&*()_+`\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "../../../../tmp/tmpi_ocn39k.ts(22,107): error TS1002: Unterminated string literal.\n../../../../tmp/tmpi_ocn39k.ts(23,1): error TS1005: ',' expected.\n../../../../tmp/tmpi_ocn39k.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123312,
      "stdout": "../../../../tmp/tmpf8a3ze9i.ts(40,43): error TS1002: Unterminated string literal.\n../../../../tmp/tmpf8a3ze9i.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpf8a3ze9i.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "../../../../tmp/tmpxw_tgtbd.ts(27,116): error TS1002: Unterminated string literal.\n../../../../tmp/tmpxw_tgtbd.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpxw_tgtbd.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            cur_run = 0;\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            max_run = Math.max(max_run, run);\n            run = 0;\n        }\n    }\n    return Math.max(max_run, run);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}