{
  "name": "mbpp_474_replace_char",
  "language": "ts",
  "prompt": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\nconsole.log(replace_char(\"Hello World\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "Hetto Wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"Hello World\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "Hetto Wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let str2: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            str2 = str2 + newch;\n        }\n        else {\n            str2 = str2 + str1[i];\n        }\n    }\n    return str2;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"the quick brown fox\", \"o\", \"*\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "the quick br*wn f*x\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let str2: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            str2 = str2 + newch;\n        }\n        else {\n            str2 = str2 + str1[i];\n        }\n    }\n    return str2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"Hello World\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "Hetto Wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n  let newstr: string = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] == ch) {\n      newstr = newstr + newch;\n    } else {\n      newstr = newstr + str1[i];\n    }\n  }\n  return newstr;\n}\nconsole.log(replace_char(\"the quick brown fox\", \"o\", \"i\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "the quick briwn fix\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char('hello world', 'l', 't'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let str2: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            str2 = str2 + newch;\n        }\n        else {\n            str2 = str2 + str1[i];\n        }\n    }\n    return str2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let str2 = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            str2 = str2 + newch;\n        }\n        else {\n            str2 = str2 + str1[i];\n        }\n    }\n    return str2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"This is a test\", \"t\", \"T\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "This is a TesT\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"x\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hexxo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"Hello World\", \"o\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "Hella Warld\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let str2: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            str2 = str2 + newch;\n        } else {\n            str2 = str2 + str1[i];\n        }\n    }\n    return str2;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"Hello World\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "Hetto Wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"m\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hemmo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "heppo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"x\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hexxo worxd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1.charAt(i) == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1.charAt(i);\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "heppo worpd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n  let newstr: string = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] == ch) {\n      newstr = newstr + newch;\n    } else {\n      newstr = newstr + str1[i];\n    }\n  }\n  return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\nconsole.log(replace_char(\"Hello World\", \"o\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "Hella Warld\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n  let newstr: string = \"\";\n  for (let i: number = 0; i < str1.length; i++) {\n    if (str1[i] == ch) {\n      newstr += newch;\n    } else {\n      newstr += str1[i];\n    }\n  }\n  return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1.charAt(i) == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1.charAt(i);\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    return str1.replace(ch, newch);\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"m\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "hemlo world\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aharacter'\n\nshould loosely deep-equal\n\n'aharaater'\n    at test (/tmp/tmpym1rc3rl.js:10:12)\n    at Object.<anonymous> (/tmp/tmpym1rc3rl.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aharacter',\n  expected: 'aharaater',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"This is a test\", \"t\", \"T\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "This is a TesT\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\nconsole.log(replace_char(\"this is a test\", \"t\", \"T\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "This is a TesT\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\nconsole.log(replace_char(\"Hello World\", \"o\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "Hella Warld\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"Hello World\", \"o\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "Hella Warld\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"Hello World\", \"o\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122405,
      "stdout": "Hella Warld\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"the quick brown fox\", \"o\", \"*\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "the quick br*wn f*x\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122413,
      "stdout": "heppo worpd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello world\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hetto wortd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        }\n        else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "hetto\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\nconsole.log(replace_char(\"hello\", \"l\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "hewwo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        } else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i: number = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr = newstr + newch;\n        } else {\n            newstr = newstr + str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to replace characters in a string.\nfunction replace_char(str1: string, ch: string, newch: string): string {\n    let newstr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == ch) {\n            newstr += newch;\n        }\n        else {\n            newstr += str1[i];\n        }\n    }\n    return newstr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = replace_char;\n  assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");\n  assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");\n  assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");\n}\n\ntest();",
      "timestamp": 1665510047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}