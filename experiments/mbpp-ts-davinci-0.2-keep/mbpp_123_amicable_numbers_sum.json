{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "ts",
  "prompt": "//Write a function to sum all amicable numbers from 1 to a specified number.\nfunction amicable_numbers_sum(limit: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = amicable_numbers_sum;\n  assert.deepEqual(candidate(999),504);\n  assert.deepEqual(candidate(9999),31626);\n  assert.deepEqual(candidate(99),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let sum_of_divisors = sum_of_divisors_of(i);\n        if (sum_of_divisors > i && sum_of_divisors_of(sum_of_divisors) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (i != a && sum_of_divisors(a) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i = 1; i < limit; i++) {\n        let divisors_sum: number = 0;\n        for (let j = 1; j < i; j++) {\n            if (i % j === 0) {\n                divisors_sum += j;\n            }\n        }\n        let divisors_sum_2: number = 0;\n        for (let j = 1; j < divisors_sum; j++) {\n            if (divisors_sum % j === 0) {\n                divisors_sum_2 += j;\n            }\n        }\n        if (divisors_sum_2 === i && divisors_sum !== i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i: number = 1; i < limit; i++) {\n        if (is_amicable(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (a > i && sum_of_divisors(a) == i) {\n            sum += a + i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (i == b && i != a) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let sum_of_divisors = sum_of_divisors_of_number(i);\n        if (sum_of_divisors > i) {\n            let sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of_number(sum_of_divisors);\n            if (sum_of_divisors_of_sum_of_divisors == i) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (b == i && a != b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (b === i && a !== b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i: number = 1; i < limit; i++) {\n        let sum_of_divisors: number = sum_of_divisors_of_number(i);\n        if (sum_of_divisors > i && sum_of_divisors_of_number(sum_of_divisors) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (b == i && a != b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let sum_of_divisors = sum_of_divisors_of_number(i);\n        if (sum_of_divisors > i) {\n            let sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of_number(sum_of_divisors);\n            if (sum_of_divisors_of_sum_of_divisors == i) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let a = sum_of_divisors(i);\n        if (a > i && sum_of_divisors(a) === i) {\n            sum += i + a;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i = 1; i < limit; i++) {\n        if (amicable_numbers(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (i == sum_of_divisors(a) && a != i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let divisors_sum = get_divisors_sum(i);\n        if (divisors_sum < limit) {\n            let divisors_sum_divisors_sum = get_divisors_sum(divisors_sum);\n            if (divisors_sum_divisors_sum == i && divisors_sum != i) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (i == b && i != a) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (a > i && sum_of_divisors(a) == i) {\n            sum += i + a;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let divisors_sum = divisors_sum_of(i);\n        if (divisors_sum > i && divisors_sum_of(divisors_sum) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (a > i && sum_of_divisors(a) == i) {\n            sum += a + i;\n        }\n    }\n    return sum;\n}\n"
  ]
}