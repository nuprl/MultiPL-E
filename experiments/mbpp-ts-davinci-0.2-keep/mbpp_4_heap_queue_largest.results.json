{
  "name": "mbpp_4_heap_queue_largest",
  "language": "ts",
  "prompt": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp4a63k0mv.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new HeapQueue<number>();\n    for (let i = 0; i < nums.length; i++) {\n        heap.push(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpjy1cfb6j.ts(3,20): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp51s2du1u.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new HeapQueue(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp85cvjksq.ts(3,20): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap(nums, (a, b) => b - a);\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp7jk1xx4a.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpamwzrjq4.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap(nums, (a, b) => a < b);\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp85r88rvy.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new HeapQueue<number>((a, b) => a - b);\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i]);\n    }\n    for (let i = n; i < nums.length; i++) {\n        if (nums[i] > heap.peek()) {\n            heap.pop();\n            heap.push(nums[i]);\n        }\n    }\n    let result = [];\n    while (!heap.isEmpty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpnie47tth.ts(3,20): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.insert(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.extract_max());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp6xyup79q.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.insert(num);\n    }\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmphs6rxez1.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray().reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpidisksya.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpnpu_mqba.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpvud5az78.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpi7tazndh.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpnpu_mqba.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdbw8wdy5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap<number>();\n    for (const num of nums) {\n        heap.push(num);\n    }\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpwggr3uh8.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, \"max\");\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpl62gvbds.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.length > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (heap.length > 0) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpx63twtri.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.isEmpty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp3aavq13x.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a < b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpej51lr12.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>();\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i]);\n    }\n    for (let i = n; i < nums.length; i++) {\n        if (nums[i] > heap.peek()) {\n            heap.pop();\n            heap.push(nums[i]);\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpi50qbfhm.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a < b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.extract_max());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp06vgwqr5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp51s2du1u.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp4a63k0mv.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, 'max');\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmprrl1cvf9.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums, \"max\");\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp51lwvrg6.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpradfql3x.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6y3syqkt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i]);\n    }\n    for (let i = n; i < nums.length; i++) {\n        if (nums[i] > heap.peek()) {\n            heap.pop();\n            heap.push(nums[i]);\n        }\n    }\n    let result = [];\n    while (!heap.isEmpty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmprinblmq9.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new HeapQueue<number>();\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result: number[] = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp8c0zgpj_.ts(3,20): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>();\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp5xx8d9yu.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6b3ddby_.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdf2cwqio.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap<number>((a, b) => a - b);\n  for (let num of nums) {\n    heap.push(num);\n    if (heap.size() > n) {\n      heap.pop();\n    }\n  }\n  return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpuvmltind.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap();\n    for (const num of nums) {\n        heap.push(num);\n    }\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpr34ybk7r.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpnpu_mqba.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    heap.build_max_heap();\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.extract_max());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpymrmpocj.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result: number[] = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmppnahu9g1.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  const heap = new Heap<number>((a, b) => b - a);\n  for (const num of nums) {\n    heap.push(num);\n    if (heap.size() > n) {\n      heap.pop();\n    }\n  }\n  const result = [];\n  while (!heap.empty()) {\n    result.push(heap.pop()!);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmp2pqvs_cf.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdbw8wdy5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let largest = [];\n    for (let i = 0; i < n; i++) {\n        largest.push(heap.pop());\n    }\n    return largest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmpxcqs886g.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    if (nums.length < n) {\n        return nums;\n    }\n    let heap = new Heap();\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i]);\n    }\n    for (let i = n; i < nums.length; i++) {\n        if (nums[i] > heap.peek()) {\n            heap.pop();\n            heap.push(nums[i]);\n        }\n    }\n    let result = [];\n    while (!heap.isEmpty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmpq5bll4yp.ts(6,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpi7tazndh.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap<number>((a, b) => a - b);\n  for (let i = 0; i < n; i++) {\n    heap.add(nums[i]);\n  }\n  for (let i = n; i < nums.length; i++) {\n    if (nums[i] > heap.peek()) {\n      heap.poll();\n      heap.add(nums[i]);\n    }\n  }\n  let result = [];\n  while (!heap.isEmpty()) {\n    result.push(heap.poll());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmp5h6dkooq.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6y3syqkt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpi7tazndh.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new HeapQueue<number>();\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpp7t2ulbq.ts(3,20): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpnpu_mqba.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.insert(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmppltmmcfx.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>();\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpw7z23non.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6b3ddby_.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdbw8wdy5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6y3syqkt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a > b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmprngovwfp.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let i = 0; i < nums.length; i++) {\n        heap.push(nums[i]);\n    }\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpzaqyp6s2.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a < b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpej51lr12.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp51s2du1u.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6b3ddby_.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6y3syqkt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.insert(num);\n    }\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmphs6rxez1.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpxo3_0msz.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.insert(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmppltmmcfx.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a > b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmprngovwfp.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new HeapQueue<number>((a, b) => a - b);\n  for (let num of nums) {\n    heap.push(num);\n    if (heap.size() > n) {\n      heap.pop();\n    }\n  }\n  let result = [];\n  while (!heap.empty()) {\n    result.push(heap.pop());\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmp5r4hy0m0.ts(3,18): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a > b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmprngovwfp.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap(nums);\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpwp14qier.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpi7tazndh.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpradfql3x.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums);\n  heap.build_max_heap();\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.extract_max());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpvawvhllh.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, \"max\");\n    let res: number[] = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmp2m6rrbyb.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpnpu_mqba.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    heap.build_max_heap();\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.extract_max());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpymrmpocj.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdbw8wdy5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>();\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmp1dn3nl63.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpamwzrjq4.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpi7tazndh.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpradfql3x.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6b3ddby_.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let largest = [];\n    for (let i = 0; i < n; i++) {\n        largest.push(heap.pop());\n    }\n    return largest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmpxcqs886g.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a < b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpej51lr12.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpoyyg4snx.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpradfql3x.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap: number[] = [];\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i]);\n    }\n    heapify(heap);\n    for (let i = n; i < nums.length; i++) {\n        if (nums[i] > heap[0]) {\n            heap[0] = nums[i];\n            heapify(heap);\n        }\n    }\n    return heap;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpbv1vs2bf.ts(7,5): error TS2304: Cannot find name 'heapify'.\n../../../../tmp/tmpbv1vs2bf.ts(11,13): error TS2304: Cannot find name 'heapify'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpradfql3x.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>();\n    for (let i = 0; i < nums.length; i++) {\n        heap.push(nums[i]);\n    }\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpo7jk60sa.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123557,
      "stdout": "../../../../tmp/tmp_wnyf7l4.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpxm36aqnx.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.add(num);\n        if (heap.size() > n) {\n            heap.poll();\n        }\n    }\n    let result = [];\n    while (!heap.isEmpty()) {\n        result.push(heap.poll());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmp6jyxn9uq.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a > b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmprngovwfp.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpnpu_mqba.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let res: number[] = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmprr5w5vu5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpvud5az78.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new HeapQueue<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmp451mcich.ts(3,20): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a > b);\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmp6k92vh58.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    heap.build_max_heap();\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.extract_max());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpymrmpocj.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmph1t160b6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    heap.build_max_heap();\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.heap_extract_max());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmp212pmn76.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray().reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpidisksya.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a - b);\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmpar27eueg.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, \"max\");\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpl62gvbds.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let queue = new HeapQueue<number>();\n  for (let num of nums) {\n    queue.push(num);\n  }\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(queue.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmpxje8y70m.ts(3,19): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap<number>(nums, (a, b) => b - a);\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmpwj5nyi6i.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap(nums);\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpwp14qier.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmp6y3syqkt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new HeapQueue<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmp451mcich.ts(3,20): error TS2304: Cannot find name 'HeapQueue'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray().reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpidisksya.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpxm36aqnx.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpwsxp0vbk.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let i = 0; i < nums.length; i++) {\n        heap.push(nums[i]);\n    }\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmpzaqyp6s2.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums, (a, b) => b - a);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmpufsjlpaf.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => a > b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123558,
      "stdout": "../../../../tmp/tmprngovwfp.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let num of nums) {\n        heap.insert(num);\n        if (heap.size() > n) {\n            heap.remove();\n        }\n    }\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.remove());\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmpzyl3cfu_.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdbw8wdy5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpe7rxulj6.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdf2cwqio.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray().reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpidisksya.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray().reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpidisksya.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let res: number[] = [];\n    while (!heap.empty()) {\n        res.push(heap.pop());\n    }\n    return res.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmpzovf3gvt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n  let heap = new Heap(nums, 'max');\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmp4gl5a_vo.ts(3,18): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmpb38ajpix.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpg4ps589a.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp9rriu5bt.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    const heap = new Heap(nums, (a, b) => a - b);\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123559,
      "stdout": "../../../../tmp/tmpo7e3qu7a.ts(3,22): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    return heap.toArray();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1665510507,
      "stdout": "../../../../tmp/tmp51s2du1u.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
      "timestamp": 1666123555,
      "stdout": "../../../../tmp/tmpdbw8wdy5.ts(3,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}