{
  "name": "mbpp_58_opposite_Signs",
  "language": "ts",
  "prompt": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(-5, 6));\nconsole.log(opposite_Signs(5, -6));\nconsole.log(opposite_Signs(-5, -6));\nconsole.log(opposite_Signs(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x < 0 && y > 0) {\n        return true;\n    }\n    else if (x > 0 && y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(4, -5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(5, -5));\nconsole.log(opposite_Signs(5, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\nconsole.log(opposite_Signs(-5, 6));\nconsole.log(opposite_Signs(5, -6));\nconsole.log(opposite_Signs(-5, -6));\nconsole.log(opposite_Signs(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(3, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(10, -10));\nconsole.log(opposite_Signs(10, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -5));\nconsole.log(opposite_Signs(-2, 5));\nconsole.log(opposite_Signs(2, 5));\nconsole.log(opposite_Signs(-2, -5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(-1, 1));\nconsole.log(opposite_Signs(1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x < 0 && y > 0) {\n        return true;\n    }\n    else if (x > 0 && y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(5, -5));\nconsole.log(opposite_Signs(5, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(-1, 1));\nconsole.log(opposite_Signs(1, -1));\nconsole.log(opposite_Signs(1, 1));\nconsole.log(opposite_Signs(-1, -1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "false\nfalse\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x < 0 && y > 0) {\n        return true;\n    }\n    else if (x > 0 && y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(5, -5));\nconsole.log(opposite_Signs(-5, 5));\nconsole.log(opposite_Signs(-5, -5));\nconsole.log(opposite_Signs(5, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x < 0 && y > 0 || x > 0 && y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(-2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(-2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x < 0 && y > 0) || (x > 0 && y < 0);\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(opposite_Signs(5, -5));\nconsole.log(opposite_Signs(5, 5));\nconsole.log(opposite_Signs(-5, -5));\nconsole.log(opposite_Signs(-5, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return (x ^ y) < 0;\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(2, 3));\nconsole.log(opposite_Signs(-2, -3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x < 0 && y > 0) {\n        return true;\n    }\n    else if (x > 0 && y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(opposite_Signs(-1, 1));\nconsole.log(opposite_Signs(1, -1));\nconsole.log(opposite_Signs(-1, -1));\nconsole.log(opposite_Signs(1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\nconsole.log(opposite_Signs(-1, 1));\nconsole.log(opposite_Signs(1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(-1, -2));\nconsole.log(opposite_Signs(-1, 2));\nconsole.log(opposite_Signs(1, -2));\nconsole.log(opposite_Signs(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "false\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x < 0 && y > 0) {\n        return true;\n    } else if (x > 0 && y < 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x < 0 && y > 0) || (x > 0 && y < 0)\n}\nconsole.log(opposite_Signs(1, -1))\nconsole.log(opposite_Signs(1, 1))\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(5, -5));\nconsole.log(opposite_Signs(5, 5));\nconsole.log(opposite_Signs(-5, -5));\nconsole.log(opposite_Signs(-5, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return x * y < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -2));\nconsole.log(opposite_Signs(2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(-1, 1));\nconsole.log(opposite_Signs(1, -1));\nconsole.log(opposite_Signs(-1, -1));\nconsole.log(opposite_Signs(1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(-1, 2));\nconsole.log(opposite_Signs(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0)\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(-1, 1));\nconsole.log(opposite_Signs(1, -1));\nconsole.log(opposite_Signs(-1, -1));\nconsole.log(opposite_Signs(1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(-5, 6));\nconsole.log(opposite_Signs(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x ^ y) < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(-1, 1));\nconsole.log(opposite_Signs(1, -1));\nconsole.log(opposite_Signs(1, 1));\nconsole.log(opposite_Signs(-1, -1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n  return (x ^ y) < 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(-1, 2));\nconsole.log(opposite_Signs(1, -2));\nconsole.log(opposite_Signs(1, 2));\nconsole.log(opposite_Signs(-1, -2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(opposite_Signs(-5, 6));\nconsole.log(opposite_Signs(5, -6));\nconsole.log(opposite_Signs(-5, -6));\nconsole.log(opposite_Signs(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123012,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if (x * y < 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1665510247,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123013,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return (x ^ y) < 0;\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
      "timestamp": 1666123009,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}