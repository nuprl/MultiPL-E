{
  "name": "mbpp_227_min_of_three",
  "language": "ts",
  "prompt": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(5, 6, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\nconsole.log(min_of_three(4, 3, 2));\nconsole.log(min_of_three(2, 4, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(\"Minimum of three numbers is \" + min_of_three(5, 10, 15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "Minimum of three numbers is 5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(3, 5, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(5, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(3, 3, 3));\nconsole.log(min_of_three(3, 1, 3));\nconsole.log(min_of_three(1, 3, 3));\nconsole.log(min_of_three(1, 1, 3));\nconsole.log(min_of_three(1, 3, 1));\nconsole.log(min_of_three(3, 1, 1));\nconsole.log(min_of_three(1, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n3\n1\n1\n3\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122636,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\nconsole.log(min_of_three(3, 4, 2));\nconsole.log(min_of_three(4, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(1, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(5, 7, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122639,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a <= b && a <= c) {\n        return a;\n    } else if (b <= a && b <= c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(3, 4, 5));\nconsole.log(min_of_three(5, 4, 3));\nconsole.log(min_of_three(3, 5, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "3\n3\n3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(5, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        }\n        else {\n            return c;\n        }\n    }\n    else {\n        if (b < c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n  let min: number = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}\n\nconsole.log(min_of_three(5, 4, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\nconsole.log(min_of_three(2, 4, 3));\nconsole.log(min_of_three(4, 2, 3));\nconsole.log(min_of_three(4, 3, 2));\nconsole.log(min_of_three(3, 4, 2));\nconsole.log(min_of_three(3, 2, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509861,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(3, 4, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(1, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number;\n    if (a < b && a < c) {\n        min = a;\n    } else if (b < a && b < c) {\n        min = b;\n    } else {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122644,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (min > b) {\n        min = b;\n    }\n    if (min > c) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number;\n    if (a < b && a < c) {\n        min = a;\n    } else if (b < a && b < c) {\n        min = b;\n    } else {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 1, 1));\nconsole.log(min_of_three(1, 2, 2));\nconsole.log(min_of_three(2, 1, 2));\nconsole.log(min_of_three(2, 2, 1));\nconsole.log(min_of_three(1, 1, 2));\nconsole.log(min_of_three(1, 2, 1));\nconsole.log(min_of_three(2, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(5, 10, 15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        }\n        else {\n            return c;\n        }\n    }\n    else {\n        if (b < c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122642,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122636,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(3, 3, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(5, 10, 15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 2, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 1, 2));\nconsole.log(min_of_three(2, 1, 1));\nconsole.log(min_of_three(1, 2, 1));\nconsole.log(min_of_three(1, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n2\n1\n2\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 1, 1));\nconsole.log(min_of_three(1, 2, 1));\nconsole.log(min_of_three(2, 1, 1));\nconsole.log(min_of_three(1, 1, 2));\nconsole.log(min_of_three(1, 2, 2));\nconsole.log(min_of_three(2, 1, 2));\nconsole.log(min_of_three(2, 2, 1));\nconsole.log(min_of_three(2, 2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(5, 2, 3));\nconsole.log(min_of_three(1, 6, 3));\nconsole.log(min_of_three(1, 2, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n2\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122636,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509861,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509861,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(5, 6, 7));\nconsole.log(min_of_three(7, 6, 5));\nconsole.log(min_of_three(5, 7, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "5\n5\n5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(4, 5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(3, 4, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(5, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(3, 4, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122636,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 1, 1));\nconsole.log(min_of_three(1, 2, 2));\nconsole.log(min_of_three(2, 1, 2));\nconsole.log(min_of_three(2, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nconsole.log(min_of_three(5, 6, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (min > b) {\n        min = b;\n    }\n    if (min > c) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 1, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 1, 1));\nconsole.log(min_of_three(1, 1, 2));\nconsole.log(min_of_three(1, 2, 1));\nconsole.log(min_of_three(2, 1, 1));\nconsole.log(min_of_three(1, 2, 2));\nconsole.log(min_of_three(2, 1, 2));\nconsole.log(min_of_three(2, 2, 1));\nconsole.log(min_of_three(2, 2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122645,
      "stdout": "1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122636,
      "stdout": "1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 1, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509863,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    let min: number = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122638,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122639,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    return Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
      "timestamp": 1666122633,
      "stdout": "1\n1\n1\n1\n1\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}