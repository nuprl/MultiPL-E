{
  "name": "mbpp_468_max_product",
  "language": "ts",
  "prompt": "//Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunction max_product(arr: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_product;\n  assert.deepEqual(candidate([3, 100, 4, 5, 150, 6]),3000);\n  assert.deepEqual(candidate([4, 42, 55, 68, 80]),50265600);\n  assert.deepEqual(candidate([10, 22, 9, 33, 21, 50, 41, 60]),2460);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let max = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        if (product > max) {\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 1;\n    let flag = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = Math.max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if (flag == 0 && max_so_far == 1) {\n        return 0;\n    }\n    return max_so_far;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        if (product > max) {\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        if (product > max) {\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let maxProduct = 1;\n    let currentProduct = 1;\n    for (let i = 0; i < arr.length; i++) {\n        currentProduct *= arr[i];\n        maxProduct = Math.max(maxProduct, currentProduct);\n        if (currentProduct === 0) {\n            currentProduct = 1;\n        }\n    }\n    currentProduct = 1;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        currentProduct *= arr[i];\n        maxProduct = Math.max(maxProduct, currentProduct);\n        if (currentProduct === 0) {\n            currentProduct = 1;\n        }\n    }\n    return maxProduct;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        max = Math.max(max, product);\n        if (product === 0) {\n            product = 1;\n        }\n    }\n    return max;\n}\n",
    "    let maxProduct = 1;\n    let currProduct = 1;\n    let prev = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > prev) {\n            currProduct *= arr[i];\n        } else {\n            maxProduct = Math.max(maxProduct, currProduct);\n            currProduct = 1;\n        }\n        prev = arr[i];\n    }\n    return Math.max(maxProduct, currProduct);\n}\n",
    "    let max_product = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        max_product = Math.max(max_product, product);\n        if (product === 0) {\n            product = 1;\n        }\n    }\n    product = 1;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        product *= arr[i];\n        max_product = Math.max(max_product, product);\n        if (product === 0) {\n            product = 1;\n        }\n    }\n    return max_product;\n}\n",
    "  let max_ending_here = 1;\n  let min_ending_here = 1;\n  let max_so_far = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = Math.min(min_ending_here * arr[i], 1);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      let temp = max_ending_here;\n      max_ending_here = Math.max(min_ending_here * arr[i], 1);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here;\n    }\n  }\n  return max_so_far;\n}\n",
    "    let max_so_far = 1;\n    let min_so_far = 1;\n    let max_product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = Math.min(min_so_far * arr[i], 1);\n        } else if (arr[i] === 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            let temp = max_so_far;\n            max_so_far = Math.max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        if (product > max) {\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = Math.max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;\n}\n",
    "  let max = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n}\n\nconsole.log(max_product([1, 2, 3, 4, 5]));\nconsole.log(max_product([5, 4, 3, 2, 1]));\nconsole.log(max_product([1, 2, 3, 4, -5]));\nconsole.log(max_product([-5, -4, -3, -2, -1]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10, 11]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10, 11, -12]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10, 11, -12, 13]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10, 11, -12, 13, -14]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10, 11, -12, 13, -14, 15]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10, 11, -12, 13, -14, 15, -16]));\nconsole.log(max_product([1, 2, 3, 4, -5, -6, 7, 8, 9, -10, 11, -12, 13, -14, 15,",
    "  let max = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n    max = Math.max(max, product);\n    if (product === 0) {\n      product = 1;\n    }\n  }\n  product = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    product *= arr[i];\n    max = Math.max(max, product);\n    if (product === 0) {\n      product = 1;\n    }\n  }\n  return max;\n}\n",
    "    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 1;\n    let flag = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = Math.max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if (flag == 0 && max_so_far == 1) {\n        return 0;\n    }\n    return max_so_far;\n}\n",
    "    let maxProduct = 1;\n    let currentProduct = 1;\n    for (let i = 0; i < arr.length; i++) {\n        currentProduct *= arr[i];\n        maxProduct = Math.max(maxProduct, currentProduct);\n        if (currentProduct === 0) {\n            currentProduct = 1;\n        }\n    }\n    currentProduct = 1;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        currentProduct *= arr[i];\n        maxProduct = Math.max(maxProduct, currentProduct);\n        if (currentProduct === 0) {\n            currentProduct = 1;\n        }\n    }\n    return maxProduct;\n}\n",
    "    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = Math.max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;\n}\n",
    "  let max = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n}\n",
    "    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = Math.max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;\n}\n",
    "    let max = 0;\n    let dp = new Array(arr.length).fill(0);\n    dp[0] = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = Math.max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = Math.max(max, dp[i]);\n    }\n    return max;\n}\n"
  ]
}