{
  "name": "mbpp_11_remove_Occ",
  "language": "ts",
  "prompt": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    return s1 + s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp_66n7buu.js:13:12)\n    at Object.<anonymous> (/tmp/tmp_66n7buu.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_index = s.indexOf(ch);\n    let last_index = s.lastIndexOf(ch);\n    let s1 = s.slice(0, first_index) + s.slice(first_index + 1, s.length);\n    let s2 = s1.slice(0, last_index) + s1.slice(last_index + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "Phon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpxrr1tkgp.js:13:12)\n    at Object.<anonymous> (/tmp/tmpxrr1tkgp.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    new_s = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n    return new_s;\n}\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"a\"));\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"z\"));\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"c\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxy\nabdefghijklmnopqrstuvwxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let l = s.length;\n    let s1 = s.replace(ch, \"\");\n    let l1 = s1.length;\n    let s2 = s1.replace(ch, \"\");\n    let l2 = s2.length;\n    if (l1 == l2) {\n        return s;\n    }\n    else {\n        return s2;\n    }\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\nconsole.log(remove_Occ(\"abcabc\", \"b\"));\nconsole.log(remove_Occ(\"abcabc\", \"c\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bcbc\nacac\nabab\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a = s.replace(ch, \"\");\n    let b = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510495,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\nconsole.log(remove_Occ(\"python\", \"n\"));\nconsole.log(remove_Occ(\"python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "ython\npytho\npythn\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index1 = s.lastIndexOf(ch);\n    let s1 = s.slice(0, index) + s.slice(index + 1);\n    let s2 = s1.slice(0, index1) + s1.slice(index1 + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "Phon\nPytho\nPythoPythoPythoPython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmphcxzp17t.js:15:12)\n    at Object.<anonymous> (/tmp/tmphcxzp17t.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    if (first_occ == -1) {\n        return s;\n    }\n    else {\n        new_str = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"z\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "Pthon\nPytho\nPython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a = s.indexOf(ch);\n    let b = s.lastIndexOf(ch);\n    let c = s.slice(0, a) + s.slice(a + 1, b) + s.slice(b + 1);\n    return c;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.slice(0, index);\n    let s2 = s.slice(index + 1, index2);\n    let s3 = s.slice(index2 + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"Hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "Heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = s.indexOf(ch);\n    var j: number = s.lastIndexOf(ch);\n    var s1: string = s.substring(0, i);\n    var s2: string = s.substring(i + 1, j);\n    var s3: string = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\nvar s: string = \"abcdefghijklmnopqrstuvwxyz\";\nvar ch: string = \"a\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "abcdefghijklmnopqrstuvwxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let res: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return res;\n}\n\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510495,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let index1: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, index) + s.substring(index + 1);\n    let s2: string = s1.substring(0, index1) + s1.substring(index1 + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpz066se29.js:13:12)\n    at Object.<anonymous> (/tmp/tmpz066se29.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('abcabc', 'a'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bracadabr\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let new_str: string = \"\";\n    while (i < s.length) {\n        if (s[i] != ch) {\n            new_str += s[i];\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] != ch) {\n            new_str += s[j];\n        }\n        j--;\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"abcdabcd\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bcdbcddcbdcb\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heooeh'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpzknyruzi.js:24:12)\n    at Object.<anonymous> (/tmp/tmpzknyruzi.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heooeh',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let new_str: string = \"\";\n    while (s[i] != ch) {\n        new_str += s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        j--;\n    }\n    for (let k: number = i + 1; k < j; k++) {\n        new_str += s[k];\n    }\n    return new_str;\n}\nlet s: string = \"abcdefghijklmnopqrstuvwxyz\";\nlet ch: string = \"a\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp5cyfme2u.js:24:12)\n    at Object.<anonymous> (/tmp/tmp5cyfme2u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var s1: string = \"\";\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\n\nvar s: string = \"hello\";\nvar ch: string = \"l\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let res: string = \"\";\n    while (s[i] != ch) {\n        res += s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        j--;\n    }\n    for (let k: number = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcabc\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpfa3n10x4.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfa3n10x4.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n    return s1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = s.replace(ch, \"\");\n    let b: string = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let firstPart = s.substring(0, index);\n    let lastPart = s.substring(lastIndex + 1, s.length);\n    return firstPart + lastPart;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp4nyrazu6.js:13:12)\n    at Object.<anonymous> (/tmp/tmp4nyrazu6.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    for (let i: number = 0; i < s.length; i++) {\n        if (i != first_occ && i != last_occ) {\n            new_str += s[i];\n        }\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, '');\n    let s2 = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('python', 'p'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = s.length - 1;\n    var s1: string = \"\";\n    var s2: string = \"\";\n    var s3: string = \"\";\n    var s4: string = \"\";\n    var s5: string = \"\";\n    while (s[i] != ch) {\n        s1 = s1 + s[i];\n        i++;\n    }\n    i++;\n    while (s[i] != ch) {\n        s2 = s2 + s[i];\n        i++;\n    }\n    i++;\n    while (i < s.length) {\n        s3 = s3 + s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        s4 = s4 + s[j];\n        j--;\n    }\n    j--;\n    while (j >= 0) {\n        s5 = s5 + s[j];\n        j--;\n    }\n    s4 = s4.split(\"\").reverse().join(\"\");\n    s5 = s5.split(\"\").reverse().join(\"\");\n    return s1 + s2 + s3 + s4 + s5;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"b\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "acacabccabcabca\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heoohel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp836zuqj7.js:41:12)\n    at Object.<anonymous> (/tmp/tmp836zuqj7.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heoohel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"the quick brown fox jumps over the lazy dog\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "the quick brwn fox jumps over the lazy dg\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"siddharth\", \"s\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "iddharth\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1, s.length);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "pthon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpjvg6a6j2.js:14:12)\n    at Object.<anonymous> (/tmp/tmpjvg6a6j2.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    return s1;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "helo\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpd48z7lb6.js:10:12)\n    at Object.<anonymous> (/tmp/tmpd48z7lb6.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.slice(0, i);\n    let s2 = s.slice(j + 1);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bc\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp0jj3ugyx.js:14:12)\n    at Object.<anonymous> (/tmp/tmp0jj3ugyx.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a = s.indexOf(ch);\n    let b = s.lastIndexOf(ch);\n    let c = s.slice(0, a) + s.slice(a + 1, b) + s.slice(b + 1);\n    return c;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let new_s = s.slice(0, index) + s.slice(index + 1, index2) + s.slice(index2 + 1);\n    return new_s;\n}\nconsole.log(remove_Occ(\"Hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "Heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str = s.replace(ch, \"\");\n    return new_str;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "ython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpt1qkywxj.js:10:12)\n    at Object.<anonymous> (/tmp/tmpt1qkywxj.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    if (first_occ == -1) {\n        return s;\n    }\n    else {\n        new_str = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n        return new_str;\n    }\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let str = s.replace(ch, \"\");\n    return str;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "Pthon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpt5kamnwh.js:10:12)\n    at Object.<anonymous> (/tmp/tmpt5kamnwh.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let lastIndex: number = s.lastIndexOf(ch);\n    let newString: string = s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1);\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bcbcabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    return s.replace(ch, \"\");\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "helo\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpu16xdsfy.js:9:12)\n    at Object.<anonymous> (/tmp/tmpu16xdsfy.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "../../../../tmp/tmpu1vf8hyc.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "../../../../tmp/tmpu1vf8hyc.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2: string = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp6v3_wjod.js:12:12)\n    at Object.<anonymous> (/tmp/tmp6v3_wjod.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\nconsole.log(remove_Occ(\"abcdefgh\", \"a\"));\nconsole.log(remove_Occ(\"abcdefgh\", \"e\"));\nconsole.log(remove_Occ(\"abcdefgh\", \"i\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bcdefgh\nabcdfgh\nabcdefgh\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(i + 1, j);\n    let s3: string = s.substring(j + 1, s.length);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"abcdefgh\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "abcdefgh\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = s.replace(ch, \"\");\n    let b: string = a.replace(ch, \"\");\n    return b;\n}\n\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bcbcabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let newString = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return newString;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bcbcabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let res: string = \"\";\n    let first: boolean = true;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch && first) {\n            first = false;\n            continue;\n        }\n        if (s[i] == ch && i == s.length - 1) {\n            continue;\n        }\n        res += s[i];\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpzy0se4mp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzy0se4mp.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('python', 'p'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, '');\n    let s2 = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('Python', 'y'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s = s.replace(ch, \"\");\n    return new_s;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "Pthon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmphi6ah00w.js:10:12)\n    at Object.<anonymous> (/tmp/tmphi6ah00w.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let res = s.replace(ch, '');\n    return res;\n}\n\nconsole.log(remove_Occ('Python', 'n'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "Pytho\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp86ftt2w1.js:10:12)\n    at Object.<anonymous> (/tmp/tmp86ftt2w1.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var s1: string = \"\";\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var s2: string = \"\";\n    var s3: string = \"\";\n    var s4: string = \"\";\n    var s5: string = \"\";\n    var s6: string = \"\";\n    var s7: string = \"\";\n    var s8: string = \"\";\n    var s9: string = \"\";\n    var s10: string = \"\";\n    var s11: string = \"\";\n    var s12: string = \"\";\n    var s13: string = \"\";\n    var s14: string = \"\";\n    var s15: string = \"\";\n    var s16: string = \"\";\n    var s17: string = \"\";\n    var s18: string = \"\";\n    var s19: string = \"\";\n    var s20: string = \"\";\n    var s21: string = \"\";\n    var s22: string = \"\";\n    var s23: string = \"\";\n    var s24: string = \"\";\n    var s25: string = \"\";\n    var s26: string = \"\";\n    var s27: string = \"\";\n    var s28: string = \"\";\n    var s29: string = \"\";\n    var s30: string = \"\";\n    var s31: string = \"\";\n    var s32: string = \"\";\n    var s33: string = \"\";\n    var s34: string = \"\";\n    var s35: string = \"\";\n    var s36: string = \"\";\n    var s37: string = \"\";\n    var s38: string = \"\";\n    var s39: string = \"\";\n    var s40: string = \"\";\n    var s41: string = \"\";\n    var s42: string = \"\";\n    var s43: string = \"\";\n    var s44: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "../../../../tmp/tmp22qays3c.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2: string = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpc78ch8nm.js:13:12)\n    at Object.<anonymous> (/tmp/tmpc78ch8nm.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bcbcabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let x = s.replace(ch, \"\");\n    return x;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bracadabra\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmppktj2boa.js:10:12)\n    at Object.<anonymous> (/tmp/tmppktj2boa.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let lastIndex: number = s.lastIndexOf(ch);\n    let newString: string = s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1);\n    return newString;\n}\nconsole.log(remove_Occ(\"hello world\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "hell wrld\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, '');\n    let s2 = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123212,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, '');\n    let s2 = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('python', 'p'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, '');\n    let s2 = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('abcabcabc', 'a'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bcbcabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2: string = s1.substring(0, j - 1) + s1.substring(j, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var s1: string = s.replace(ch, \"\");\n    var s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"w\"));\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "3resource\nw3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var index = s.indexOf(ch);\n    var index1 = s.lastIndexOf(ch);\n    var s1 = s.substring(0, index) + s.substring(index + 1);\n    var s2 = s1.substring(0, index1) + s1.substring(index1 + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "bcabcac\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpucmc0mtk.js:13:12)\n    at Object.<anonymous> (/tmp/tmpucmc0mtk.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            continue;\n        }\n        result += s[i];\n    }\n    return result;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: boolean = true;\n    let last_occ: boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            if (first_occ) {\n                first_occ = false;\n                continue;\n            }\n            if (i == s.length - 1) {\n                last_occ = true;\n                continue;\n            }\n        }\n        if (first_occ || last_occ) {\n            new_str += s[i];\n        }\n    }\n    return new_str;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "P\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpounoenhd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpounoenhd.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    new_str = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n    return new_str;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "bracadabr\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let res = s.replace(ch, \"\");\n    return res;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "Pthon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp4aok63gw.js:10:12)\n    at Object.<anonymous> (/tmp/tmp4aok63gw.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s: string = \"\";\n    let first_occ: boolean = false;\n    let last_occ: boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch && first_occ == false) {\n            first_occ = true;\n            continue;\n        }\n        if (s[i] == ch && first_occ == true) {\n            last_occ = true;\n            continue;\n        }\n        if (last_occ == true) {\n            new_s += s[i];\n        }\n    }\n    return new_s;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\nconsole.log(remove_Occ(\"python\", \"n\"));\nconsole.log(remove_Occ(\"python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "\n\n\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpfhutjet8.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfhutjet8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"helloworld\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "heoworld\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n        else {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] != ch) {\n            s2 = s2 + s[j];\n        }\n        else {\n            break;\n        }\n    }\n    for (let k = i + 1; k < j; k++) {\n        s3 = s3 + s[k];\n    }\n    return s1 + s3 + s2;\n}\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"a\"));\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"z\"));\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "zyxwvutsrqponmlkjihgfedcb\nabcdefghijklmnopqrstuvwxy\nabcdzyxwvutsrqponmlkjihgf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index1 = s.lastIndexOf(ch);\n    let s1 = s.slice(0, index) + s.slice(index + 1, index1) + s.slice(index1 + 1);\n    return s1;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            new_str += s[i];\n        }\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"geeksforgeeks\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "gksforgks\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s: string = \"\";\n    let first_occ: boolean = false;\n    let last_occ: boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch && first_occ == false) {\n            first_occ = true;\n        }\n        else if (s[i] == ch && first_occ == true) {\n            last_occ = true;\n        }\n        else if (s[i] != ch && first_occ == true && last_occ == false) {\n            new_s = new_s + s[i];\n        }\n        else if (s[i] != ch && first_occ == true && last_occ == true) {\n            new_s = new_s + s[i];\n        }\n    }\n    return new_s;\n}\n\nconsole.log(remove_Occ(\"abcabcabc\", \"b\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "cacac\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp3si5jcew.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3si5jcew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var m: number = 0;\n    var n: number = 0;\n    var o: number = 0;\n    var p: number = 0;\n    var q: number = 0;\n    var r: number = 0;\n    var s: string = \"\";\n    var t: string = \"\";\n    var u: string = \"\";\n    var v: string = \"\";\n    var w: string = \"\";\n    var x: string = \"\";\n    var y: string = \"\";\n    var z: string = \"\";\n    var a: string = \"\";\n    var b: string = \"\";\n    var c: string = \"\";\n    var d: string = \"\";\n    var e: string = \"\";\n    var f: string = \"\";\n    var g: string = \"\";\n    var h: string = \"\";\n    var i: string = \"\";\n    var j: string = \"\";\n    var k: string = \"\";\n    var l: string = \"\";\n    var m: string = \"\";\n    var n: string = \"\";\n    var o: string = \"\";\n    var p: string = \"\";\n    var q: string = \"\";\n    var r: string = \"\";\n    var s: string = \"\";\n    var t: string = \"\";\n    var u: string = \"\";\n    var v: string = \"\";\n    var w: string = \"\";\n    var x: string = \"\";\n    var y: string = \"\";\n    var z: string = \"\";\n    var a: string = \"\";\n    var b: string = \"\";\n    var c: string = \"\";\n    var d: string = \"\";\n    var e: string = \"\";\n    var f: string = \"\";\n    var g: string = \"\";\n    var h: string = \"\";\n    var i: string = \"\";\n    var j: string = \"\";\n    var k: string = \"\";\n    var l: string = \"\";\n    var m: string = \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "../../../../tmp/tmplkz1i9mn.ts(59,22): error TS1002: Unterminated string literal.\n../../../../tmp/tmplkz1i9mn.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = s.replace(ch, \"\");\n    let b: string = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"w3resource\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "3resource\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\n\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string[] = s.split(ch);\n    let b: string = a.join(\"\");\n    return b;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1);\n    let s2: string = s1.substring(0, j) + s1.substring(j + 1);\n    return s2;\n}\nlet s: string = \"python\";\nlet ch: string = \"p\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "thon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpi7d53cku.js:15:12)\n    at Object.<anonymous> (/tmp/tmpi7d53cku.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let str1: string = s.slice(0, i);\n    let str2: string = s.slice(j + 1);\n    let str3: string = str1.concat(str2);\n    return str3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp3gp9lwvn.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3gp9lwvn.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.slice(0, i) + s.slice(i + 1, s.length);\n    let s2 = s1.slice(0, j) + s1.slice(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123216,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp3skr1sse.js:13:12)\n    at Object.<anonymous> (/tmp/tmp3skr1sse.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123216,
      "stdout": "ython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpj_m5i679.js:14:12)\n    at Object.<anonymous> (/tmp/tmpj_m5i679.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(i + 1, j);\n    let s3: string = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var s1: string = s.replace(ch, \"\");\n    var s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(i + 1, j);\n    let s3: string = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    for (let i = s1.length - 1; i >= 0; i--) {\n        if (s1[i] != ch) {\n            s2 = s2 + s1[i];\n        }\n    }\n    for (let i = s2.length - 1; i >= 0; i--) {\n        s3 = s3 + s2[i];\n    }\n    return s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var s1: string = \"\";\n    var s2: string = \"\";\n    var s3: string = \"\";\n    var s4: string = \"\";\n    var s5: string = \"\";\n    var s6: string = \"\";\n    var s7: string = \"\";\n    var s8: string = \"\";\n    var s9: string = \"\";\n    var s10: string = \"\";\n    var s11: string = \"\";\n    var s12: string = \"\";\n    var s13: string = \"\";\n    var s14: string = \"\";\n    var s15: string = \"\";\n    var s16: string = \"\";\n    var s17: string = \"\";\n    var s18: string = \"\";\n    var s19: string = \"\";\n    var s20: string = \"\";\n    var s21: string = \"\";\n    var s22: string = \"\";\n    var s23: string = \"\";\n    var s24: string = \"\";\n    var s25: string = \"\";\n    var s26: string = \"\";\n    var s27: string = \"\";\n    var s28: string = \"\";\n    var s29: string = \"\";\n    var s30: string = \"\";\n    var s31: string = \"\";\n    var s32: string = \"\";\n    var s33: string = \"\";\n    var s34: string = \"\";\n    var s35: string = \"\";\n    var s36: string = \"\";\n    var s37: string = \"\";\n    var s38: string = \"\";\n    var s39: string = \"\";\n    var s40: string = \"\";\n    var s41: string = \"\";\n    var s42: string = \"\";\n    var s43: string = \"\";\n    var s44: string = \"\";\n    var s45: string = \"\";\n    var s46: string = \"\";\n    var s47: string = \"\";\n    var s48: string = \"\";\n    var s49: string = \"\";\n    var s50: string = \"\";\n    var s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "../../../../tmp/tmpgn_38s6t.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"Python Exercises\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Python Exrciss\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123214,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('abcabc', 'a'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let result = s.replace(ch, \"\");\n    return result;\n}\nconsole.log(remove_Occ(\"w3resource\", \"w\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "3resource\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpb57lu5gf.js:10:12)\n    at Object.<anonymous> (/tmp/tmpb57lu5gf.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = s.replace(ch, \"\");\n    let b: string = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"sakshi\", \"s\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "akhi\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            s1 = s.slice(i + 1);\n            break;\n        }\n    }\n    for (let i: number = s1.length - 1; i >= 0; i--) {\n        if (s1[i] == ch) {\n            s1 = s1.slice(0, i);\n            break;\n        }\n    }\n    return s1;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "ython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp_a1di0mf.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_a1di0mf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\n\nconsole.log(remove_Occ('abcabc', 'a'));\nconsole.log(remove_Occ('python', 'o'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "bcbc\npythn\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let res = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n    return res;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var s1 = s.replace(ch, '');\n    var s2 = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('w3resource', 'r'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "../../../../tmp/tmpu1vf8hyc.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(i + 1, j);\n    let s3: string = s.substring(j + 1, s.length);\n    return s1 + s2 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let res: string = \"\";\n    for (let i: number = 0; i < n; i++) {\n        if (s[i] != ch) {\n            res += s[i];\n        }\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "../../../../tmp/tmpu1vf8hyc.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "../../../../tmp/tmpu1vf8hyc.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nlet s: string = \"abcdefgh\";\nlet ch: string = \"a\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123218,
      "stdout": "bcdefgh\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            new_str += s[i];\n        }\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "bcbcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1, s.length);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123218,
      "stdout": "ython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmplbe5115x.js:14:12)\n    at Object.<anonymous> (/tmp/tmplbe5115x.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ = s.indexOf(ch);\n    let last_Occ = s.lastIndexOf(ch);\n    let new_Str = s.slice(0, first_Occ) + s.slice(first_Occ + 1, last_Occ) + s.slice(last_Occ + 1);\n    return new_Str;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('abcabc', 'a'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(i + 1, j);\n    let s3 = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123219,
      "stdout": "python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n    return s1;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123219,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "bcbcabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n        else {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] != ch) {\n            s2 = s2 + s[j];\n        }\n        else {\n            break;\n        }\n    }\n    for (i = s1.length; i < s.length - s2.length; i++) {\n        s3 = s3 + s[i];\n    }\n    return s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'll'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp_u9lmd7v.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_u9lmd7v.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'll',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = \"\";\n    if (index != -1) {\n        result = s.slice(0, index) + s.slice(index + 1, s.length);\n    }\n    if (lastIndex != -1) {\n        result = result.slice(0, lastIndex) + result.slice(lastIndex + 1, result.length);\n    }\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123219,
      "stdout": "Phon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpn4dmguaa.js:18:12)\n    at Object.<anonymous> (/tmp/tmpn4dmguaa.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            new_s += s[i];\n        }\n    }\n    return new_s;\n}\n\nconsole.log(remove_Occ(\"siddharth\", \"s\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "iddharth\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"aabbcc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "bbcc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a = s.replace(ch, \"\");\n    let b = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            new_s += s[i];\n        }\n    }\n    return new_s;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "bcbcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let res: string = \"\";\n    let first: boolean = true;\n    let last: boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            if (first) {\n                first = false;\n                continue;\n            }\n            if (i == s.length - 1) {\n                last = true;\n                continue;\n            }\n        }\n        if (first || last) {\n            res += s[i];\n        }\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"abcdabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp_9cch2l4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp_9cch2l4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            new_str += s[i];\n        }\n    }\n    return new_str;\n}\n\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "../../../../tmp/tmpu1vf8hyc.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\nconsole.log(remove_Occ(\"abcdabcd\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "bcdbcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: boolean = false;\n    let last_occ: boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch && first_occ == false) {\n            first_occ = true;\n            continue;\n        }\n        if (s[i] == ch && first_occ == true) {\n            last_occ = true;\n            continue;\n        }\n        if (last_occ == true) {\n            new_str += s[i];\n        }\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "cdbr\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpg4i27boh.js:25:12)\n    at Object.<anonymous> (/tmp/tmpg4i27boh.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    new_str = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n    return new_str;\n}\nconsole.log(remove_Occ(\"abcabcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "bcabcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let f = s.indexOf(ch);\n    let l = s.lastIndexOf(ch);\n    let res = s.slice(0, f) + s.slice(f + 1, l) + s.slice(l + 1);\n    return res;\n}\nconsole.log(remove_Occ(\"geeksforgeeks\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "geksforgeks\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    let s3: string = s1 + s2;\n    return s3;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "heo\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpeckm8934.js:15:12)\n    at Object.<anonymous> (/tmp/tmpeckm8934.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    for (let i: number = 0; i < s.length; i++) {\n        if (i == first_occ || i == last_occ) {\n            continue;\n        }\n        new_str += s[i];\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2: string = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp0l6sq6jc.js:13:12)\n    at Object.<anonymous> (/tmp/tmp0l6sq6jc.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, '');\n    let s2 = s1.replace(ch, '');\n    return s2;\n}\n\nconsole.log(remove_Occ('Python', 'y'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123221,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"Hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "Heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a = s.indexOf(ch);\n    let b = s.lastIndexOf(ch);\n    let c = s.substring(0, a) + s.substring(a + 1, b) + s.substring(b + 1);\n    return c;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123221,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123221,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s = s.replace(ch, \"\");\n    return new_s;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "Pthon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmphi6ah00w.js:10:12)\n    at Object.<anonymous> (/tmp/tmphi6ah00w.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_s: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    if (first_occ == -1 || last_occ == -1) {\n        return s;\n    }\n    new_s = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n    return new_s;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\nconsole.log(remove_Occ(\"Python\", \"t\"));\nconsole.log(remove_Occ(\"Python\", \"o\"));\nconsole.log(remove_Occ(\"Python\", \"h\"));\nconsole.log(remove_Occ(\"Python\", \"P\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123222,
      "stdout": "Pthon\nPytho\nPython\nPyhon\nPythn\nPyton\nython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let result: string = \"\";\n    let first_occ: boolean = false;\n    let last_occ: boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch && first_occ == false) {\n            first_occ = true;\n            continue;\n        }\n        if (s[i] == ch && first_occ == true && last_occ == false) {\n            last_occ = true;\n            continue;\n        }\n        if (s[i] == ch && first_occ == true && last_occ == true) {\n            result += s[i];\n        }\n        else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123222,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    for (let i: number = 0; i < s.length; i++) {\n        if (i != first_occ && i != last_occ) {\n            new_str += s[i];\n        }\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123222,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let i: number = 0;\n    let j: number = n - 1;\n    let res: string = \"\";\n    while (i < n && s[i] != ch) {\n        res = res + s[i];\n        i++;\n    }\n    i++;\n    while (i < n && s[i] != ch) {\n        res = res + s[i];\n        i++;\n    }\n    while (j > 0 && s[j] != ch) {\n        j--;\n    }\n    j--;\n    while (j > 0 && s[j] != ch) {\n        j--;\n    }\n    while (j > 0) {\n        res = res + s[j];\n        j--;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\nconsole.log(remove_Occ(\"abracadabra\", \"b\"));\nconsole.log(remove_Occ(\"abracadabra\", \"c\"));\nconsole.log(remove_Occ(\"abracadabra\", \"d\"));\nconsole.log(remove_Occ(\"abracadabra\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123222,
      "stdout": "bradacarb\naracadab\nabraadabra\nabracaabra\nabacadabrb\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hele'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpwddp54nm.js:37:12)\n    at Object.<anonymous> (/tmp/tmpwddp54nm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hele',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var s1: string = \"\";\n    var s2: string = \"\";\n    var s3: string = \"\";\n    var s4: string = \"\";\n    var s5: string = \"\";\n    var s6: string = \"\";\n    var s7: string = \"\";\n    var s8: string = \"\";\n    var s9: string = \"\";\n    var s10: string = \"\";\n    var s11: string = \"\";\n    var s12: string = \"\";\n    var s13: string = \"\";\n    var s14: string = \"\";\n    var s15: string = \"\";\n    var s16: string = \"\";\n    var s17: string = \"\";\n    var s18: string = \"\";\n    var s19: string = \"\";\n    var s20: string = \"\";\n    var s21: string = \"\";\n    var s22: string = \"\";\n    var s23: string = \"\";\n    var s24: string = \"\";\n    var s25: string = \"\";\n    var s26: string = \"\";\n    var s27: string = \"\";\n    var s28: string = \"\";\n    var s29: string = \"\";\n    var s30: string = \"\";\n    var s31: string = \"\";\n    var s32: string = \"\";\n    var s33: string = \"\";\n    var s34: string = \"\";\n    var s35: string = \"\";\n    var s36: string = \"\";\n    var s37: string = \"\";\n    var s38: string = \"\";\n    var s39: string = \"\";\n    var s40: string = \"\";\n    var s41: string = \"\";\n    var s42: string = \"\";\n    var s43: string = \"\";\n    var s44: string = \"\";\n    var s45: string = \"\";\n    var s46: string = \"\";\n    var s47: string = \"\";\n    var s48: string = \"\";\n    var s49: string = \"\";\n    var s50: string = \"\";\n    var s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123217,
      "stdout": "../../../../tmp/tmpgn_38s6t.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var str: string = \"\";\n    var str1: string = \"\";\n    var str2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    for (k = 0; k < i; k++) {\n        str1 = str1 + s[k];\n    }\n    for (l = j + 1; l < s.length; l++) {\n        str2 = str2 + s[l];\n    }\n    str = str1 + str2;\n    return str;\n}\nvar str: string = \"abcd\";\nvar ch: string = \"c\";\nconsole.log(remove_Occ(str, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "abd\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpv8p68pya.js:36:12)\n    at Object.<anonymous> (/tmp/tmpv8p68pya.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, '');\n    let s2 = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('abcabc', 'a'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123222,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let result: string = \"\";\n    let flag1: boolean = false;\n    let flag2: boolean = false;\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch && flag1 == false) {\n            flag1 = true;\n        }\n        else {\n            result = result + s[i];\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch && flag2 == false) {\n            flag2 = true;\n        }\n        else {\n            result = s[j] + result;\n        }\n    }\n    return result;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "helohelo\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helohelo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpelv74ce9.js:30:12)\n    at Object.<anonymous> (/tmp/tmpelv74ce9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helohelo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let str: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            str += s[i];\n        }\n    }\n    return str;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "Pthon\nPytho\nPython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(i + 1, j);\n    let s3: string = s.substring(j + 1, s.length);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\nconsole.log(remove_Occ(\"python\", \"n\"));\nconsole.log(remove_Occ(\"python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "python\npython\npython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length);\n    return s1;\n}\n\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: boolean = true;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            if (first_occ) {\n                first_occ = false;\n                continue;\n            }\n            else {\n                new_str = s.slice(0, i);\n                break;\n            }\n        }\n        new_str += s[i];\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "abr\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpu3k5y8kh.js:24:12)\n    at Object.<anonymous> (/tmp/tmpu3k5y8kh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = s.replace(ch, \"\");\n    let b: string = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('python', 'p'));\nconsole.log(remove_Occ('python', 'o'));\nconsole.log(remove_Occ('python', 'n'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "ython\npythn\npytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123208,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = s.replace(ch, \"\");\n    let b: string = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    return s1;\n}\n\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "ython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpwnq7itib.js:10:12)\n    at Object.<anonymous> (/tmp/tmpwnq7itib.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(i + 1, j);\n    let s3 = s.substring(j + 1, s.length);\n    return s1 + s2 + s3;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"abcabca\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "bcbca\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('python', 'p'));\nconsole.log(remove_Occ('python', 'o'));\nconsole.log(remove_Occ('python', 'n'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "ython\npythn\npytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.slice(0, i);\n    let s2 = s.slice(j + 1);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "Pthon\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp1rq4xvxs.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1rq4xvxs.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = s.indexOf(ch);\n    var j: number = s.lastIndexOf(ch);\n    var s1: string = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n    return s1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let str: string = \"\";\n    let first_ch: number = s.indexOf(ch);\n    let last_ch: number = s.lastIndexOf(ch);\n    if (first_ch == last_ch) {\n        str = s.replace(ch, \"\");\n    }\n    else {\n        str = s.replace(ch, \"\");\n        str = str.replace(ch, \"\");\n    }\n    return str;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "brcadabra\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            a = a + s[i];\n        }\n    }\n    return a;\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "bcbc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123223,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123211,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}