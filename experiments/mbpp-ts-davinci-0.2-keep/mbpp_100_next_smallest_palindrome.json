{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "ts",
  "prompt": "//Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome(num: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest_palindrome;\n  assert.deepEqual(candidate(99),101);\n  assert.deepEqual(candidate(1221),1331);\n  assert.deepEqual(candidate(120),121);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let left_half = num_str.substring(0, Math.floor(num_len / 2));\n    let middle = num_len % 2 === 1 ? num_str.charAt(Math.floor(num_len / 2)) : '';\n    let right_half = left_half.split('').reverse().join('');\n    let palindrome = left_half + middle + right_half;\n    if (palindrome > num) {\n        return parseInt(palindrome);\n    }\n    let left_half_int = parseInt(left_half);\n    let middle_int = parseInt(middle);\n    let increment = Math.pow(10, Math.floor(num_len / 2));\n    if (middle_int < 9) {\n        middle_int++;\n    } else {\n        middle_int = 0;\n        left_half_int += 1;\n    }\n    left_half = left_half_int.toString();\n    middle = middle_int.toString();\n    right_half = left_half.split('').reverse().join('');\n    palindrome = left_half + middle + right_half;\n    return parseInt(palindrome);\n}\n",
    "    let num_str = num.toString();\n    let len = num_str.length;\n    let left = Math.floor(len / 2);\n    let right = Math.ceil(len / 2);\n    let left_str = num_str.slice(0, left);\n    let right_str = num_str.slice(right);\n    let left_num = parseInt(left_str);\n    let right_num = parseInt(right_str);\n    if (left_num < right_num) {\n        left_str = (left_num + 1).toString();\n        left = left_str.length;\n        right = len - left;\n        right_str = left_str.slice(0, right);\n    } else if (left_num > right_num) {\n        right_str = (right_num + 1).toString();\n        right = right_str.length;\n        left = len - right;\n        left_str = right_str.slice(0, left);\n    } else {\n        left_str = (left_num + 1).toString();\n        left = left_str.length;\n        right = len - left;\n        right_str = left_str.slice(0, right);\n    }\n    return parseInt(left_str + right_str);\n}\n",
    "    let num_str = num.toString();\n    let num_str_len = num_str.length;\n    let num_str_half_len = Math.floor(num_str_len / 2);\n    let num_str_half_len_ceil = Math.ceil(num_str_len / 2);\n    let num_str_half_len_floor = Math.floor(num_str_len / 2);\n    let num_str_half_len_ceil_pow = Math.pow(10, num_str_half_len_ceil);\n    let num_str_half_len_floor_pow = Math.pow(10, num_str_half_len_floor);\n    let num_str_half_len_ceil_pow_minus_one = num_str_half_len_ceil_pow - 1;\n    let num_str_half_len_floor_pow_minus_one = num_str_half_len_floor_pow - 1;\n    let num_str_half_len_ceil_pow_minus_one_str = num_str_half_len_ceil_pow_minus_one.toString();\n    let num_str_half_len_floor_pow_minus_one_str = num_str_half_len_floor_pow_minus_one.toString();\n    let num_str_half_len_ceil_pow_minus_one_str_rev = num_str_half_len_ceil_pow_minus_one_str.split('').reverse().join('');\n    let num_str_half_len_floor_pow_minus_one_str_rev = num_str_half_len_floor_pow_minus_one_str.split('').reverse().join('');\n    let num_str_half_len_ceil_pow_minus_one_str_rev_num = parseInt(num_str_half_len_ceil_pow_minus_one_str_rev);\n    let num_str_half_len_floor_pow_minus_one_str_rev_",
    "  let str = num.toString();\n  let len = str.length;\n  let mid = Math.floor(len / 2);\n  let left = str.substr(0, mid);\n  let right = str.substr(mid + len % 2, mid);\n  let left_rev = left.split('').reverse().join('');\n  if (left < right) {\n    return parseInt(left + (len % 2 ? str[mid] : '') + left_rev);\n  }\n  let left_num = parseInt(left);\n  left_num++;\n  left = left_num.toString();\n  left_rev = left.split('').reverse().join('');\n  return parseInt(left + (len % 2 ? str[mid] : '') + left_rev);\n}\n",
    "    let num_str = num.toString();\n    let len = num_str.length;\n    let left = Math.floor(len / 2);\n    let right = len % 2 === 0 ? left : left + 1;\n    let increment = 1;\n    while (left >= 0 && num_str[left] === num_str[right]) {\n        left--;\n        right++;\n    }\n    if (left < 0 || num_str[left] < num_str[right]) {\n        left = Math.floor(len / 2);\n        right = len % 2 === 0 ? left : left + 1;\n        while (left >= 0) {\n            let sum = parseInt(num_str[left]) + increment;\n            if (sum > 9) {\n                increment = 1;\n                sum = 0;\n            } else {\n                increment = 0;\n            }\n            num_str = num_str.substring(0, left) + sum + num_str.substring(right + 1);\n            left--;\n            right++;\n        }\n    }\n    left = Math.floor(len / 2);\n    right = len % 2 === 0 ? left : left + 1;\n    while (left >= 0) {\n        num_str = num_str.substring(0, left) + num_str[right] + num_str.substring(left + 1);\n        left--;\n        right++;\n    }\n    return parseInt(num_str);\n}\n",
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let left_half = num_str.substr(0, Math.floor(num_len / 2));\n    let middle = num_len % 2 === 1 ? num_str[Math.floor(num_len / 2)] : '';\n    let right_half = left_half.split('').reverse().join('');\n    let palindrome = left_half + middle + right_half;\n    if (palindrome > num) {\n        return parseInt(palindrome);\n    }\n    let left_half_int = parseInt(left_half);\n    let middle_int = parseInt(middle);\n    let inc_left_half = (left_half_int + 1).toString();\n    let inc_middle = middle_int === 9 ? '0' : (middle_int + 1).toString();\n    let inc_palindrome = inc_left_half + inc_middle + inc_left_half.split('').reverse().join('');\n    return parseInt(inc_palindrome);\n}\n",
    "  let num_str = num.toString();\n  let num_str_len = num_str.length;\n  let num_str_len_half = Math.floor(num_str_len / 2);\n  let num_str_len_half_ceil = Math.ceil(num_str_len / 2);\n  let num_str_len_half_ceil_minus_one = num_str_len_half_ceil - 1;\n  let num_str_len_half_ceil_minus_two = num_str_len_half_ceil - 2;\n  let num_str_len_half_ceil_minus_three = num_str_len_half_ceil - 3;\n  let num_str_len_half_ceil_minus_four = num_str_len_half_ceil - 4;\n  let num_str_len_half_ceil_minus_five = num_str_len_half_ceil - 5;\n  let num_str_len_half_ceil_minus_six = num_str_len_half_ceil - 6;\n  let num_str_len_half_ceil_minus_seven = num_str_len_half_ceil - 7;\n  let num_str_len_half_ceil_minus_eight = num_str_len_half_ceil - 8;\n  let num_str_len_half_ceil_minus_nine = num_str_len_half_ceil - 9;\n  let num_str_len_half_ceil_minus_ten = num_str_len_half_ceil - 10;\n  let num_str_len_half_ceil_minus_eleven = num_str_len_half_ceil - 11;\n  let num_str_len_half_ceil_minus_twelve = num_str_len_half_ceil - 12;\n  let num_str_len_half_ceil_minus_thirteen = num_str_len_half_ceil - 13;\n  let num_str_len_half_ceil_minus_fourteen = num_str_len_half_ceil",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let left_half = num_str.substring(0, (num_len / 2));\n  let middle = num_len % 2 === 1 ? num_str.substring(num_len / 2, num_len / 2 + 1) : \"\";\n  let right_half = num_str.substring(num_len / 2 + middle.length);\n  let right_half_rev = right_half.split(\"\").reverse().join(\"\");\n  let next_palindrome = parseInt(left_half + middle + right_half_rev);\n  if (next_palindrome > num) {\n    return next_palindrome;\n  }\n  if (middle) {\n    middle = (parseInt(middle) + 1).toString();\n  } else {\n    left_half = (parseInt(left_half) + 1).toString();\n  }\n  right_half = left_half.split(\"\").reverse().join(\"\");\n  return parseInt(left_half + middle + right_half);\n}\n",
    "    let str = num.toString();\n    let len = str.length;\n    let mid = Math.floor(len / 2);\n    let left = str.substr(0, mid);\n    let right = str.substr(mid + len % 2, len);\n    let left_rev = left.split('').reverse().join('');\n    let right_rev = right.split('').reverse().join('');\n    if (left_rev > right) {\n        return parseInt(left + str[mid] + left_rev);\n    } else {\n        let left_num = parseInt(left);\n        left_num++;\n        left = left_num.toString();\n        left_rev = left.split('').reverse().join('');\n        return parseInt(left + str[mid] + left_rev);\n    }\n}\n",
    "    let str = num.toString();\n    let len = str.length;\n    let mid = Math.floor(len / 2);\n    let left = str.substr(0, mid);\n    let right = str.substr(mid + len % 2, mid);\n    let next_palindrome = parseInt(left + (len % 2 ? str[mid] : '') + right.split('').reverse().join(''));\n    if (next_palindrome > num) {\n        return next_palindrome;\n    }\n    if (len % 2 && str[mid] < '9') {\n        return parseInt(left + (parseInt(str[mid]) + 1) + right.split('').reverse().join(''));\n    }\n    if (len % 2) {\n        left = (parseInt(left) + 1).toString();\n        right = left.split('').reverse().join('');\n        return parseInt(left + right);\n    }\n    left = (parseInt(left) + 1).toString();\n    right = left.split('').reverse().join('');\n    return parseInt(left + str[mid] + right);\n}\n",
    "    let str = num.toString();\n    let len = str.length;\n    let mid = Math.floor(len / 2);\n    let left = str.substr(0, mid);\n    let right = str.substr(mid + 1);\n    let left_rev = left.split('').reverse().join('');\n    let right_rev = right.split('').reverse().join('');\n    let left_num = parseInt(left);\n    let right_num = parseInt(right);\n    let left_rev_num = parseInt(left_rev);\n    let right_rev_num = parseInt(right_rev);\n    let left_num_plus_one = left_num + 1;\n    let left_num_plus_one_str = left_num_plus_one.toString();\n    let left_num_plus_one_str_rev = left_num_plus_one_str.split('').reverse().join('');\n    let left_num_plus_one_str_rev_num = parseInt(left_num_plus_one_str_rev);\n    let left_num_plus_one_str_rev_num_plus_one = left_num_plus_one_str_rev_num + 1;\n    let left_num_plus_one_str_rev_num_plus_one_str = left_num_plus_one_str_rev_num_plus_one.toString();\n    let left_num_plus_one_str_rev_num_plus_one_str_rev = left_num_plus_one_str_rev_num_plus_one_str.split('').reverse().join('');\n    let left_num_plus_one_str_rev_num_plus_one_str_rev_num = parseInt(left_num_plus_one_str_rev_num_plus_one_str_rev);\n    let left_num_plus_one_str_rev_num_plus_one_str_rev_num_plus_one = left_num_plus_one_str_rev_num_plus_one_str_rev_num + 1;\n    let left_",
    "    let num_str = num.toString();\n    let len = num_str.length;\n    let mid = Math.floor(len / 2);\n    let left_smaller = false;\n    let i = mid - 1;\n    let j = len % 2 === 0 ? mid : mid + 1;\n    while (i >= 0 && num_str[i] === num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str = replace_char(num_str, j, num_str[i]);\n        num_str = replace_char(num_str, i, num_str[j]);\n        i--;\n        j++;\n    }\n    if (left_smaller) {\n        let carry = 1;\n        i = mid - 1;\n        if (len % 2 === 1) {\n            num_str = replace_char(num_str, mid, (parseInt(num_str[mid]) + carry).toString());\n            carry = parseInt(num_str[mid]) / 10;\n            num_str = replace_char(num_str, mid, (parseInt(num_str[mid]) % 10).toString());\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            num_str = replace_char(num_str, i, (parseInt(num_str[i]) + carry).toString());\n            carry = parseInt(num_str[i]) / 10;\n            num_str = replace_char(num_str, i, (parseInt(num_str[i]) % 10).toString());\n            num_str = replace_char(num_str, j, num_str[i]);\n            i--;\n            j++;\n        }\n    }\n    return parseInt(num_str);\n}\n",
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let is_even = num_len % 2 === 0;\n    let half_len = Math.floor(num_len / 2);\n    let left_half = num_str.slice(0, half_len);\n    let right_half = num_str.slice(half_len + (is_even ? 0 : 1));\n    let left_half_int = parseInt(left_half);\n    let right_half_int = parseInt(right_half);\n    let left_half_str = left_half_int.toString();\n    let right_half_str = right_half_int.toString();\n    let left_half_str_rev = left_half_str.split(\"\").reverse().join(\"\");\n    let right_half_str_rev = right_half_str.split(\"\").reverse().join(\"\");\n    let left_half_rev_int = parseInt(left_half_str_rev);\n    let right_half_rev_int = parseInt(right_half_str_rev);\n    let left_half_rev_str = left_half_rev_int.toString();\n    let right_half_rev_str = right_half_rev_int.toString();\n    let left_half_rev_str_len = left_half_rev_str.length;\n    let right_half_rev_str_len = right_half_rev_str.length;\n    let left_half_rev_str_pad = left_half_rev_str_len < half_len ? \"0\".repeat(half_len - left_half_rev_str_len) + left_half_rev_str : left_half_rev_str;\n    let right_half_rev_str_pad = right_half_rev_str_len < half_len ? \"0\".repeat(half_len - right_half_rev_str_len) + right_half_rev_str : right_half_rev_str;\n    let left_half_rev_str_pad_int = parseInt(left_half_rev_str_pad);\n    let right",
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let mid = Math.floor(num_len / 2);\n    let left_half = num_str.substring(0, mid);\n    let right_half = num_str.substring(mid + num_len % 2);\n    let next_palindrome = parseInt(left_half + (num_len % 2 == 1 ? num_str[mid] : \"\") + left_half.split(\"\").reverse().join(\"\"));\n    if (next_palindrome > num) {\n        return next_palindrome;\n    } else {\n        if (num_len % 2 == 1) {\n            if (num_str[mid] < \"9\") {\n                return parseInt(left_half + (parseInt(num_str[mid]) + 1) + left_half.split(\"\").reverse().join(\"\"));\n            } else {\n                return parseInt(left_half + \"0\" + left_half.split(\"\").reverse().join(\"\"));\n            }\n        } else {\n            if (left_half < right_half) {\n                return parseInt(left_half + left_half.split(\"\").reverse().join(\"\"));\n            } else {\n                let carry = 1;\n                let new_left_half = \"\";\n                for (let i = left_half.length - 1; i >= 0; i--) {\n                    let sum = parseInt(left_half[i]) + carry;\n                    new_left_half = (sum % 10).toString() + new_left_half;\n                    carry = Math.floor(sum / 10);\n                }\n                if (carry == 1) {\n                    new_left_half = \"1\" + new_left_half;\n                }\n                return parseInt(new_left_half + new_left_half.split(\"\").reverse().join(\"\"));\n            }\n        }\n    }\n}\n",
    "  let str = num.toString();\n  let len = str.length;\n  let mid = Math.floor(len / 2);\n  let left = str.substring(0, mid);\n  let right = str.substring(mid + 1);\n  let left_rev = left.split('').reverse().join('');\n  let right_rev = right.split('').reverse().join('');\n  let left_int = parseInt(left);\n  let right_int = parseInt(right);\n  let left_rev_int = parseInt(left_rev);\n  let right_rev_int = parseInt(right_rev);\n  let left_rev_str = left_rev_int.toString();\n  let right_rev_str = right_rev_int.toString();\n  let left_rev_len = left_rev_str.length;\n  let right_rev_len = right_rev_str.length;\n  let left_len = left.length;\n  let right_len = right.length;\n  let left_rev_mid = Math.floor(left_rev_len / 2);\n  let right_rev_mid = Math.floor(right_rev_len / 2);\n  let left_mid = Math.floor(left_len / 2);\n  let right_mid = Math.floor(right_len / 2);\n  let left_rev_mid_int = parseInt(left_rev_str.substring(left_rev_mid));\n  let right_rev_mid_int = parseInt(right_rev_str.substring(right_rev_mid));\n  let left_mid_int = parseInt(left.substring(left_mid));\n  let right_mid_int = parseInt(right.substring(right_mid));\n  let left_rev_mid_int_str = left_rev_mid_int.toString();\n  let right_rev_mid_int_str = right_rev_mid_int.toString();\n  let left_mid_int_str = left_mid_int.toString();\n  let right_mid_int_str = right_mid_int.toString();\n ",
    "  let next_palindrome = num;\n  let is_palindrome = false;\n  while (!is_palindrome) {\n    next_palindrome++;\n    if (is_palindrome_num(next_palindrome)) {\n      is_palindrome = true;\n    }\n  }\n  return next_palindrome;\n}\n",
    "    let str = num.toString();\n    let len = str.length;\n    let mid = Math.floor(len / 2);\n\n    let left = str.substr(0, mid);\n    let right = str.substr(mid + len % 2);\n    let right_rev = right.split('').reverse().join('');\n\n    if (left < right_rev) {\n        return parseInt(left + (len % 2 ? str[mid] : '') + right_rev);\n    }\n\n    left = (parseInt(left) + 1).toString();\n    right_rev = left.split('').reverse().join('');\n\n    return parseInt(left + (len % 2 ? str[mid] : '') + right_rev);\n}\n",
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let num_half_len = Math.floor(num_len / 2);\n    let num_half_str = num_str.substr(0, num_half_len);\n    let num_half_str_rev = num_half_str.split('').reverse().join('');\n    let num_half_str_rev_num = parseInt(num_half_str_rev);\n    let num_half_str_num = parseInt(num_half_str);\n    let num_half_str_rev_num_str = num_half_str_rev_num.toString();\n    let num_half_str_num_str = num_half_str_num.toString();\n    let num_half_str_rev_num_str_len = num_half_str_rev_num_str.length;\n    let num_half_str_num_str_len = num_half_str_num_str.length;\n    let num_half_str_rev_num_str_len_diff = num_half_len - num_half_str_rev_num_str_len;\n    let num_half_str_num_str_len_diff = num_half_len - num_half_str_num_str_len;\n    let num_half_str_rev_num_str_len_diff_str = '';\n    let num_half_str_num_str_len_diff_str = '';\n    let num_half_str_rev_num_str_len_diff_str_num = 0;\n    let num_half_str_num_str_len_diff_str_num = 0;\n    let num_half_str_rev_num_str_len_diff_str_num_str = '';\n    let num_half_str_num_str_len_diff_str_num_str = '';\n    let num_half_str_rev_num_str_len_diff_str_num_str_len = 0;\n    let num_half_str_num_str_len_diff",
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let num_mid = Math.floor(num_len / 2);\n    let left_half = num_str.substring(0, num_mid);\n    let right_half = num_str.substring(num_mid + num_len % 2, num_len);\n    let left_half_num = parseInt(left_half);\n    let right_half_num = parseInt(right_half);\n    let left_half_num_rev = parseInt(left_half.split('').reverse().join(''));\n    let right_half_num_rev = parseInt(right_half.split('').reverse().join(''));\n    if (left_half_num_rev > right_half_num) {\n        return parseInt(left_half + left_half_num_rev.toString().substring(num_len % 2, num_len));\n    }\n    else {\n        let next_left_half_num = left_half_num + 1;\n        let next_left_half_num_rev = parseInt(next_left_half_num.toString().split('').reverse().join(''));\n        if (next_left_half_num_rev < next_left_half_num) {\n            return parseInt(next_left_half_num.toString() + next_left_half_num_rev.toString().substring(num_len % 2, num_len));\n        }\n        else {\n            return parseInt(next_left_half_num.toString() + next_left_half_num_rev.toString().substring(num_len % 2, num_len));\n        }\n    }\n}\n",
    "    if (num < 0) {\n        return -1;\n    }\n    if (num < 10) {\n        return num;\n    }\n    let num_str = num.toString();\n    let len = num_str.length;\n    let mid = Math.floor(len / 2);\n    let left_half = num_str.substring(0, mid);\n    let right_half = num_str.substring(mid + len % 2, len);\n    if (left_half < right_half) {\n        return parseInt(left_half + (len % 2 == 1 ? num_str[mid] : '') + left_half.split('').reverse().join(''));\n    }\n    let left_half_int = parseInt(left_half);\n    let carry = 1;\n    let new_left_half = '';\n    for (let i = mid - 1; i >= 0; i--) {\n        let sum = parseInt(left_half[i]) + carry;\n        if (sum > 9) {\n            carry = 1;\n            sum -= 10;\n        } else {\n            carry = 0;\n        }\n        new_left_half = sum.toString() + new_left_half;\n    }\n    if (carry == 1) {\n        new_left_half = '1' + new_left_half;\n    }\n    return parseInt(new_left_half + (len % 2 == 1 ? num_str[mid] : '') + new_left_half.split('').reverse().join(''));\n}\n"
  ]
}