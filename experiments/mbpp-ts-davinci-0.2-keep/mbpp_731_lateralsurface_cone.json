{
  "name": "mbpp_731_lateralsurface_cone",
  "language": "ts",
  "prompt": "//Write a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone(r: number, h: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lateralsurface_cone;\n  assert.deepEqual(candidate(5, 12),204.20352248333654);\n  assert.deepEqual(candidate(10, 15),566.3586699569488);\n  assert.deepEqual(candidate(19, 17),1521.8090132193388);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    let lsa: number = Math.PI * r * Math.sqrt(r * r + h * h);\n    return lsa;\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    let result: number = Math.PI * r * Math.sqrt(r * r + h * h);\n    return result;\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n",
    "    return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n"
  ]
}