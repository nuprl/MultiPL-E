{
  "name": "mbpp_12_sort_matrix",
  "language": "ts",
  "prompt": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M: number[][]): number[][] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result = M.slice();\n    result.sort((a, b) => {\n        let sum_a = 0;\n        let sum_b = 0;\n        for (let i = 0; i < a.length; i++) {\n            sum_a += a[i];\n            sum_b += b[i];\n        }\n        return sum_a - sum_b;\n    });\n    return result;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row[i] += M[i][j];\n        }\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_row: number = sum_row[0];\n        let min_row_index: number = 0;\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sum_row[j] < min_row) {\n                min_row = sum_row[j];\n                min_row_index = j;\n            }\n        }\n        sorted_matrix[i] = M[min_row_index];\n        sum_row[min_row_index] = Number.MAX_VALUE;\n    }\n    return sorted_matrix;\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return result;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_of_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    let sorted_sum_of_rows: number[] = sum_of_rows.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sum_of_rows.length; i++) {\n        for (let j = 0; j < sum_of_rows.length; j++) {\n            if (sorted_sum_of_rows[i] === sum_of_rows[j]) {\n                sorted_matrix.push(M[j]);\n                sum_of_rows[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min: number = Math.min(...sums);\n        let index: number = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return result;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_of_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    let sorted_sum_of_rows: number[] = sum_of_rows.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sum_of_rows.length; i++) {\n        for (let j = 0; j < sum_of_rows.length; j++) {\n            if (sorted_sum_of_rows[i] == sum_of_rows[j]) {\n                sorted_matrix.push(M[j]);\n                sum_of_rows[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\nconsole.log(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let rows = M.length;\n    let cols = M[0].length;\n    let sums = [];\n    for (let i = 0; i < rows; i++) {\n        sums.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    let sorted = sums.slice().sort((a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < rows; i++) {\n        let row = sorted.indexOf(sums[i]);\n        result[row] = M[i];\n    }\n    return result;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min: number = Math.min(...sum);\n        let index: number = sum.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    let sorted_sum_row: number[] = sum_row.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] == sum_row[j]) {\n                sorted_matrix.push(M[j]);\n                sum_row[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let N: number[][] = [];\n    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min.apply(null, sum);\n        let index = sum.indexOf(min);\n        N.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return N;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let s = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            s += M[i][j];\n        }\n        sum.push(s);\n    }\n    let sorted_sum = sum.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M.length; j++) {\n            if (sum[i] == sorted_sum[j]) {\n                sorted_M.push(M[i]);\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    sums.sort((a, b) => a - b);\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = 0; j < M.length; j++) {\n            let sum = 0;\n            for (let k = 0; k < M[j].length; k++) {\n                sum += M[j][k];\n            }\n            if (sums[i] === sum) {\n                result.push(M[j]);\n                M.splice(j, 1);\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum = 0;\n    let sum_arr: number[] = [];\n    let sorted_arr: number[] = [];\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    sorted_arr = sum_arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_arr.length; i++) {\n        for (let j = 0; j < sum_arr.length; j++) {\n            if (sorted_arr[i] == sum_arr[j]) {\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\nlet M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(sort_matrix(M));\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_row[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n    }\n    return result;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index = sums.indexOf(Math.min(...sums));\n        sorted_matrix.push(M[min_index]);\n        sums.splice(min_index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    for (let i = 0; i < sum_rows.length; i++) {\n        for (let j = i + 1; j < sum_rows.length; j++) {\n            if (sum_rows[i] > sum_rows[j]) {\n                let temp = sum_rows[i];\n                sum_rows[i] = sum_rows[j];\n                sum_rows[j] = temp;\n                let temp_matrix = M[i];\n                M[i] = M[j];\n                M[j] = temp_matrix;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let row_sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            row_sum += M[i][j];\n        }\n        sum.push(row_sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index: number = sum.indexOf(Math.min(...sum));\n        sorted_matrix.push(M[min_index]);\n        sum.splice(min_index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((sum, el) => sum + el) - b.reduce((sum, el) => sum + el));\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    let sorted_sum: number[] = sum.sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sum.length; i++) {\n        for (let j = 0; j < sum.length; j++) {\n            if (sorted_sum[i] == sum[j]) {\n                sorted_M.push(M[j]);\n                sum[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index: number = sum.indexOf(Math.min(...sum));\n        sorted_matrix.push(M[min_index]);\n        sum[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = 0; j < sums.length - 1; j++) {\n            if (sums[j] > sums[j + 1]) {\n                let temp = sums[j];\n                sums[j] = sums[j + 1];\n                sums[j + 1] = temp;\n                let temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n\nlet M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(sort_matrix(M));\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_sum_row = sum_row.sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] == sum_row[j]) {\n                sorted_M.push(M[j]);\n                sum_row[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M.length - 1; j++) {\n            if (sum[j] > sum[j + 1]) {\n                let temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                let temp_arr = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    let sorted: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min: number = Math.min(...sum);\n        let index: number = sum.indexOf(min);\n        sorted.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return sorted;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    for (let i = 0; i < sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length - i - 1; j++) {\n            if (sum_row[j] > sum_row[j + 1]) {\n                let temp = sum_row[j];\n                sum_row[j] = sum_row[j + 1];\n                sum_row[j + 1] = temp;\n                let temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum = 0;\n    let sum_arr: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    let sorted_arr = sum_arr.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_arr.length; i++) {\n        for (let j = 0; j < M.length; j++) {\n            let sum = 0;\n            for (let k = 0; k < M[j].length; k++) {\n                sum += M[j][k];\n            }\n            if (sum === sorted_arr[i]) {\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_rows = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_matrix = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_rows);\n        let index = sum_rows.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_rows.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp1 = M[i];\n                M[i] = M[j];\n                M[j] = temp1;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index: number = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    let sorted_sums: number[] = [];\n    let sorted_matrix: number[][] = [];\n    let temp: number;\n    let temp_row: number[];\n\n    for (let i: number = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b));\n    }\n\n    sorted_sums = sums.slice().sort((a, b) => a - b);\n\n    for (let i: number = 0; i < sorted_sums.length; i++) {\n        for (let j: number = 0; j < sums.length; j++) {\n            if (sorted_sums[i] === sums[j]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n            }\n        }\n    }\n\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp1 = M[i];\n                M[i] = M[j];\n                M[j] = temp1;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    let result: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        let min: number = Math.min(...sums);\n        let index: number = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return result;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index: number = sum.indexOf(Math.min(...sum));\n        sorted_matrix[i] = M[min_index];\n        sum[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return result;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                let temp_sum = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp_sum;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < sum.length; i++) {\n        for (let j = i + 1; j < sum.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum.push(M[i].reduce((a, b) => a + b));\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                let temp2 = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp: number = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp_arr: number[] = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let result: number[][] = [];\n    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min: number = Math.min(...sum);\n        let index: number = sum.indexOf(min);\n        result.push(M[index]);\n        sum[index] = Number.MAX_VALUE;\n    }\n    return result;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    for (let i = 0; i < sum_rows.length; i++) {\n        for (let j = i + 1; j < sum_rows.length; j++) {\n            if (sum_rows[i] > sum_rows[j]) {\n                let temp = sum_rows[i];\n                sum_rows[i] = sum_rows[j];\n                sum_rows[j] = temp;\n                let temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sums.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sums[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_row[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index = sum_row.indexOf(Math.min(...sum_row));\n        sorted_matrix.push(M[min_index]);\n        sum_row[min_index] = Number.MAX_SAFE_INTEGER;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M.length - 1; j++) {\n            if (sum[j] > sum[j + 1]) {\n                let temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                let temp_arr = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b));\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index: number = sums.indexOf(sorted_sums[i]);\n        result.push(M[index]);\n        sums[index] = -1;\n    }\n    return result;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sums[j] == sorted_sums[i]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums[i] = M[i].reduce((a, b) => a + b);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_sum: number = Math.min(...sums);\n        let min_index: number = sums.indexOf(min_sum);\n        sorted_matrix[i] = M[min_index];\n        sums[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        result.push(M[index]);\n    }\n    return result;\n}\n",
    "    let sums: number[] = [];\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sums[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index: number = 0;\n        for (let j = 0; j < sum.length; j++) {\n            if (sum[j] < sum[min_index]) {\n                min_index = j;\n            }\n        }\n        sorted_matrix[i] = M[min_index];\n        sum[min_index] = Number.MAX_VALUE;\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => {\n        let sum_a = a.reduce((acc, curr) => acc + curr, 0);\n        let sum_b = b.reduce((acc, curr) => acc + curr, 0);\n        return sum_a - sum_b;\n    });\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < sum.length; i++) {\n        for (let j = i + 1; j < sum.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_sum_rows = sum_rows.sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sum_rows.length; i++) {\n        for (let j = 0; j < sum_rows.length; j++) {\n            if (sorted_sum_rows[i] === sum_rows[j]) {\n                sorted_M.push(M[j]);\n                sum_rows.splice(j, 1);\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        let min = sums[i];\n        let min_index = i;\n        for (let j = i; j < sums.length; j++) {\n            if (sums[j] < min) {\n                min = sums[j];\n                min_index = j;\n            }\n        }\n        let temp = sums[i];\n        sums[i] = sums[min_index];\n        sums[min_index] = temp;\n        result.push(M[min_index]);\n    }\n    return result;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_sum_row = sum_row.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        let index = sum_row.indexOf(sorted_sum_row[i]);\n        sorted_M.push(M[index]);\n    }\n    return sorted_M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n    }\n    return sorted_M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    let temp: number;\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M.length - 1; j++) {\n            if (sum[j] > sum[j + 1]) {\n                temp = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                for (let k = 0; k < M[j].length; k++) {\n                    temp = M[j][k];\n                    M[j][k] = M[j + 1][k];\n                    M[j + 1][k] = temp;\n                }\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row[i] += M[i][j];\n        }\n    }\n    let sorted_matrix = [];\n    for (let i = 0; i < M.length; i++) {\n        sorted_matrix[i] = [];\n        for (let j = 0; j < M[i].length; j++) {\n            sorted_matrix[i][j] = 0;\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        for (let j = 0; j < M[i].length; j++) {\n            sorted_matrix[i][j] = M[index][j];\n        }\n        sum_row[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b));\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index = sums.indexOf(Math.min(...sums));\n        sorted_matrix.push(M[min_index]);\n        sums[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b));\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sums.length; i++) {\n        result.push(M[sums.indexOf(sorted_sums[i])]);\n    }\n    return result;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_rows[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_rows[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < sum_rows.length; i++) {\n        for (let j = i + 1; j < sum_rows.length; j++) {\n            if (sum_rows[i] > sum_rows[j]) {\n                let temp = sum_rows[i];\n                sum_rows[i] = sum_rows[j];\n                sum_rows[j] = temp;\n                let temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_row = (row: number[]) => row.reduce((a, b) => a + b, 0);\n    return M.sort((a, b) => sum_row(a) - sum_row(b));\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_sum_row = sum_row.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] == sum_row[j]) {\n                sorted_M.push(M[j]);\n                sum_row[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_row.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    M.sort((a, b) => {\n        let sum_a = 0;\n        let sum_b = 0;\n        for (let i = 0; i < a.length; i++) {\n            sum_a += a[i];\n            sum_b += b[i];\n        }\n        return sum_a - sum_b;\n    });\n    return M;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_sum_row = sum_row.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] === sum_row[j]) {\n                sorted_matrix.push(M[j]);\n                sum_row[j] = 0;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums[i] = M[i].reduce((a, b) => a + b);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index = sums.indexOf(Math.min(...sums));\n        sorted_matrix.push(M[min_index]);\n        sums[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    let sorted_sum = sum.slice().sort((a, b) => a - b);\n    let sorted_matrix = [];\n    for (let i = 0; i < sorted_sum.length; i++) {\n        let index = sum.indexOf(sorted_sum[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    for (let i = 0; i < sum_rows.length; i++) {\n        for (let j = 0; j < sum_rows.length - 1; j++) {\n            if (sum_rows[j] > sum_rows[j + 1]) {\n                let temp = sum_rows[j];\n                sum_rows[j] = sum_rows[j + 1];\n                sum_rows[j + 1] = temp;\n                let temp_arr = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    let sorted_sum: number[] = sum.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M.length; j++) {\n            if (sum[j] == sorted_sum[i]) {\n                sorted_M.push(M[j]);\n                sum[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sum: number[] = [];\n    let result: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < sum.length; i++) {\n        let index = sum.indexOf(Math.min(...sum));\n        result.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return result;\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: number[][] = [];\n    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum.push(M[i].reduce((a, b) => a + b));\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum);\n        let index = sum.indexOf(min);\n        result.push(M[index]);\n        sum[index] = Infinity;\n    }\n    return result;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b));\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index: number = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = 0; j < sums.length - i - 1; j++) {\n            if (sums[j] > sums[j + 1]) {\n                let temp = sums[j];\n                sums[j] = sums[j + 1];\n                sums[j + 1] = temp;\n                let temp_matrix = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_matrix;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum_row[i] > sum_row[j]) {\n                let temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                let temp1 = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp1;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((sum, curr) => sum + curr) - b.reduce((sum, curr) => sum + curr));\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n\n    let sorted_matrix = [];\n    let sorted_sum_row = sum_row.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] === sum_row[j]) {\n                sorted_matrix.push(M[j]);\n                sum_row[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n\nlet M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(sort_matrix(M));\n",
    "    let sum_row = [];\n    let matrix_sorted = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    for (let i = 0; i < sum_row.length; i++) {\n        let min = sum_row[i];\n        let index = i;\n        for (let j = i + 1; j < sum_row.length; j++) {\n            if (sum_row[j] < min) {\n                min = sum_row[j];\n                index = j;\n            }\n        }\n        let temp = sum_row[i];\n        sum_row[i] = sum_row[index];\n        sum_row[index] = temp;\n        matrix_sorted.push(M[index]);\n    }\n    return matrix_sorted;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] === sums[j]) {\n                result.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = 0; j < sums.length - i - 1; j++) {\n            if (sums[j] > sums[j + 1]) {\n                let temp = sums[j];\n                sums[j] = sums[j + 1];\n                sums[j + 1] = temp;\n                let temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_of_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_of_rows.push(M[i].reduce((a, b) => a + b));\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum_of_rows[i] > sum_of_rows[j]) {\n                let temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n                temp = sum_of_rows[i];\n                sum_of_rows[i] = sum_of_rows[j];\n                sum_of_rows[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_M = [];\n    for (let i = 0; i < M.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n    }\n    return sorted_M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_rows = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_matrix = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_rows);\n        let index = sum_rows.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_rows[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sum_rows.length; i++) {\n        let min = Math.min(...sum_rows);\n        let index = sum_rows.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_rows.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum_row[i] > sum_row[j]) {\n                let temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                let temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sums[j] == sorted_sums[i]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = 0;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let N = M.length;\n    let M_sorted = [];\n    let row_sums = [];\n    for (let i = 0; i < N; i++) {\n        let row_sum = 0;\n        for (let j = 0; j < N; j++) {\n            row_sum += M[i][j];\n        }\n        row_sums.push(row_sum);\n    }\n    let row_sums_sorted = row_sums.sort((a, b) => a - b);\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            if (row_sums[i] == row_sums_sorted[j]) {\n                M_sorted.push(M[i]);\n            }\n        }\n    }\n    return M_sorted;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums[i] = M[i].reduce((a, b) => a + b, 0);\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        sorted_matrix[i] = M[sums.indexOf(sorted_sums[i])];\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    for (let i = 0; i < sum_rows.length; i++) {\n        for (let j = 0; j < sum_rows.length - i - 1; j++) {\n            if (sum_rows[j] > sum_rows[j + 1]) {\n                let temp = sum_rows[j];\n                sum_rows[j] = sum_rows[j + 1];\n                sum_rows[j + 1] = temp;\n                let temp_row = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < sum.length; i++) {\n        for (let j = 0; j < sum.length; j++) {\n            if (sum[i] < sum[j]) {\n                let temp: number = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp_row: number[] = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    let sorted_sum_row: number[] = sum_row.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] == sum_row[j]) {\n                sorted_matrix.push(M[j]);\n                sum_row[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    let result: number[][] = [];\n\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n\n    for (let i = 0; i < sums.length; i++) {\n        let min: number = Math.min(...sums);\n        let index: number = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n\n    return result;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sums.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    let sum: number[] = [];\n    for (let i: number = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j: number = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i: number = 0; i < M.length; i++) {\n        let min: number = Math.min(...sum);\n        let index: number = sum.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sums: number[] = [];\n    for (let i: number = 0; i < M.length; i++) {\n        sums[i] = 0;\n        for (let j: number = 0; j < M[i].length; j++) {\n            sums[i] += M[i][j];\n        }\n    }\n    let sorted: number[][] = [];\n    for (let i: number = 0; i < M.length; i++) {\n        let min: number = Math.min(...sums);\n        let index: number = sums.indexOf(min);\n        sorted.push(M[index]);\n        sums[index] = Infinity;\n    }\n    return sorted;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_rows[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_rows[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum_rows[i] > sum_rows[j]) {\n                let temp = sum_rows[i];\n                sum_rows[i] = sum_rows[j];\n                sum_rows[j] = temp;\n                let temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums.push(M[i].reduce((a, b) => a + b));\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index = sums.indexOf(Math.min(...sums));\n        sorted_matrix.push(M[min_index]);\n        sums[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        sorted_matrix[i] = M[index];\n        sum_row[index] = Number.MAX_VALUE;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_row[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    for (let i = 0; i < sum_row.length; i++) {\n        for (let j = i + 1; j < sum_row.length; j++) {\n            if (sum_row[i] > sum_row[j]) {\n                let temp = sum_row[i];\n                sum_row[i] = sum_row[j];\n                sum_row[j] = temp;\n                let temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    let result: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < sum.length; i++) {\n        for (let j = 0; j < sum.length - 1; j++) {\n            if (sum[j] > sum[j + 1]) {\n                let temp: number = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n                let temp_row: number[] = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_row: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n        sum = 0;\n    }\n    let sorted_matrix: number[][] = [];\n    let sorted_sum_row: number[] = [];\n    for (let i = 0; i < sum_row.length; i++) {\n        let min: number = sum_row[0];\n        let index: number = 0;\n        for (let j = 0; j < sum_row.length; j++) {\n            if (min > sum_row[j]) {\n                min = sum_row[j];\n                index = j;\n            }\n        }\n        sorted_sum_row.push(min);\n        sum_row[index] = Number.MAX_VALUE;\n    }\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] == sum_row[j]) {\n                sorted_matrix.push(M[j]);\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_rows);\n        let index = sum_rows.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_rows[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length - 1; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row.push(M[i].reduce((a, b) => a + b));\n    }\n    let sorted_matrix = [];\n    let sorted_sum_row = sum_row.slice().sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        let index = sum_row.indexOf(sorted_sum_row[i]);\n        sorted_matrix.push(M[index]);\n        sum_row[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums = sums.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index = sums.indexOf(sorted_sums[i]);\n        sorted_M.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_M;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                temp = M[i];\n                M[i] = M[j];\n                M[j] = temp;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let N = M.length;\n    let M_sorted = [];\n    let sums = [];\n    for (let i = 0; i < N; i++) {\n        sums.push(M[i].reduce((a, b) => a + b));\n    }\n    for (let i = 0; i < N; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        M_sorted.push(M[index]);\n        sums[index] = Infinity;\n    }\n    return M_sorted;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => {\n        let sum_a = a.reduce((a, b) => a + b);\n        let sum_b = b.reduce((a, b) => a + b);\n        return sum_a - sum_b;\n    });\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sum_row.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_row[index] = Number.MAX_VALUE;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sum_row.length; i++) {\n        let min = Math.min(...sum_row);\n        let index = sum_row.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_row[index] = Infinity;\n    }\n    return sorted_matrix;\n}\nconsole.log(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sums[i] += M[i][j];\n        }\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    let sorted_matrix: number[][] = [];\n    let i: number;\n    let j: number;\n    let k: number;\n    let min: number;\n    let min_index: number;\n    for (i = 0; i < M.length; i++) {\n        sums[i] = 0;\n        for (j = 0; j < M[i].length; j++) {\n            sums[i] += M[i][j];\n        }\n    }\n    for (i = 0; i < M.length; i++) {\n        min = sums[i];\n        min_index = i;\n        for (j = i; j < M.length; j++) {\n            if (sums[j] < min) {\n                min = sums[j];\n                min_index = j;\n            }\n        }\n        sums[min_index] = sums[i];\n        sums[i] = min;\n        sorted_matrix[i] = [];\n        for (k = 0; k < M[i].length; k++) {\n            sorted_matrix[i][k] = M[min_index][k];\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_sum_row = sum_row.slice().sort((a, b) => a - b);\n    let sorted_M = [];\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        let index = sum_row.indexOf(sorted_sum_row[i]);\n        sorted_M.push(M[index]);\n    }\n    return sorted_M;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_rows);\n        let index = sum_rows.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_rows[index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums[i] = M[i].reduce((a, b) => a + b);\n    }\n    let sorted = M.sort((a, b) => sums[M.indexOf(a)] - sums[M.indexOf(b)]);\n    return sorted;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < sum.length; i++) {\n        for (let j = i + 1; j < sum.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp_row = M[i];\n                M[i] = M[j];\n                M[j] = temp_row;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sum_of_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index = sum_of_rows.indexOf(Math.min(...sum_of_rows));\n        sorted_matrix.push(M[min_index]);\n        sum_of_rows[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum: number[] = [];\n    let result: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    for (let i = 0; i < sum.length; i++) {\n        for (let j = i + 1; j < sum.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp: number = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp_arr: number[] = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\nconsole.log(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums[i] = M[i].reduce((a, b) => a + b, 0);\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let index: number = sums.indexOf(sorted_sums[i]);\n        sorted_matrix[i] = M[index];\n        sums[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = M[i].reduce((a, b) => a + b);\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M.length - 1; j++) {\n            if (sum[j] > sum[j + 1]) {\n                let temp = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp;\n                let temp2 = sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        for (let j = 0; j < sums.length; j++) {\n            if (sorted_sums[i] === sums[j]) {\n                sorted_matrix.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => {\n        let sum_a = 0;\n        let sum_b = 0;\n        for (let i = 0; i < a.length; i++) {\n            sum_a += a[i];\n            sum_b += b[i];\n        }\n        return sum_a - sum_b;\n    });\n}\n",
    "    let sum_row = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row[i] = M[i].reduce((a, b) => a + b, 0);\n    }\n    let sorted = M.sort((a, b) => {\n        return sum_row[M.indexOf(a)] - sum_row[M.indexOf(b)];\n    });\n    return sorted;\n}\n"
  ]
}