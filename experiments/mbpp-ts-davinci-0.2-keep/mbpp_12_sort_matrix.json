{
  "name": "mbpp_12_sort_matrix",
  "language": "ts",
  "prompt": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M: number[][]): number[][] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result = M.slice();\n    result.sort((a, b) => {\n        let sum_a = 0;\n        let sum_b = 0;\n        for (let i = 0; i < a.length; i++) {\n            sum_a += a[i];\n            sum_b += b[i];\n        }\n        return sum_a - sum_b;\n    });\n    return result;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum_row[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row[i] += M[i][j];\n        }\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_row: number = sum_row[0];\n        let min_row_index: number = 0;\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sum_row[j] < min_row) {\n                min_row = sum_row[j];\n                min_row_index = j;\n            }\n        }\n        sorted_matrix[i] = M[min_row_index];\n        sum_row[min_row_index] = Number.MAX_VALUE;\n    }\n    return sorted_matrix;\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return result;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_of_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    let sorted_sum_of_rows: number[] = sum_of_rows.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sum_of_rows.length; i++) {\n        for (let j = 0; j < sum_of_rows.length; j++) {\n            if (sorted_sum_of_rows[i] === sum_of_rows[j]) {\n                sorted_matrix.push(M[j]);\n                sum_of_rows[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min: number = Math.min(...sums);\n        let index: number = sums.indexOf(min);\n        result.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return result;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_of_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    let sorted_sum_of_rows: number[] = sum_of_rows.sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sum_of_rows.length; i++) {\n        for (let j = 0; j < sum_of_rows.length; j++) {\n            if (sorted_sum_of_rows[i] == sum_of_rows[j]) {\n                sorted_matrix.push(M[j]);\n                sum_of_rows[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\nconsole.log(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let rows = M.length;\n    let cols = M[0].length;\n    let sums = [];\n    for (let i = 0; i < rows; i++) {\n        sums.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    let sorted = sums.slice().sort((a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < rows; i++) {\n        let row = sorted.indexOf(sums[i]);\n        result[row] = M[i];\n    }\n    return result;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum_row: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum_row += M[i][j];\n        }\n        sum.push(sum_row);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min: number = Math.min(...sum);\n        let index: number = sum.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    let sorted_sum_row: number[] = sum_row.sort((a, b) => a - b);\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        for (let j = 0; j < sum_row.length; j++) {\n            if (sorted_sum_row[i] == sum_row[j]) {\n                sorted_matrix.push(M[j]);\n                sum_row[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let N: number[][] = [];\n    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum.push(M[i].reduce((a, b) => a + b, 0));\n    }\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min.apply(null, sum);\n        let index = sum.indexOf(min);\n        N.push(M[index]);\n        sum.splice(index, 1);\n    }\n    return N;\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let s = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            s += M[i][j];\n        }\n        sum.push(s);\n    }\n    let sorted_sum = sum.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M.length; j++) {\n            if (sum[i] == sorted_sum[j]) {\n                sorted_M.push(M[i]);\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let result: number[][] = [];\n    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    sums.sort((a, b) => a - b);\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = 0; j < M.length; j++) {\n            let sum = 0;\n            for (let k = 0; k < M[j].length; k++) {\n                sum += M[j][k];\n            }\n            if (sums[i] === sum) {\n                result.push(M[j]);\n                M.splice(j, 1);\n                break;\n            }\n        }\n    }\n    return result;\n}\n"
  ]
}