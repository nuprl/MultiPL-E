{
  "name": "mbpp_281_all_unique",
  "language": "ts",
  "prompt": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = test_list.filter((value, index, self) => self.indexOf(value) === index);\n    return unique_list.length === test_list.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n        if (!unique) {\n            break;\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n\n    return unique_list.length === test_list.length;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    var s = new Set(test_list);\n    if (s.size === test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    let i: number = 0;\n    while (i < test_list.length) {\n        let j: number = i + 1;\n        while (j < test_list.length) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n            j++;\n        }\n        i++;\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    return unique_list.length === test_list.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j) {\n                if (test_list[i] == test_list[j]) {\n                    unique = false;\n                }\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let set = new Set(test_list);\n    if (set.size == test_list.length) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length === test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = test_list.filter((value, index, array) => {\n        return array.indexOf(value) === index;\n    });\n    return unique_list.length === test_list.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j] && i != j) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nlet test_list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(all_unique(test_list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]))\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]))\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124232,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (test_list.length == unique_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j) {\n                if (test_list[i] == test_list[j]) {\n                    unique = false;\n                }\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.includes(test_list[i])) {\n            return false;\n        }\n        else {\n            unique_list.push(test_list[i]);\n        }\n    }\n    return true;\n}\n\nlet test_list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(all_unique(test_list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length == new Set(test_list).size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = test_list.filter((value, index, array) => {\n        return array.indexOf(value) === index;\n    });\n    return unique_list.length === test_list.length;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet test_list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(all_unique(test_list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    return unique_list.length === test_list.length;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j] && i != j) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j) {\n                if (test_list[i] == test_list[j]) {\n                    unique = false;\n                }\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j] && i != j) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length === test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    return unique_list.length == test_list.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(all_unique(test_list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j) {\n                if (test_list[i] == test_list[j]) {\n                    unique = false;\n                }\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let set_list = new Set(test_list);\n    if (set_list.size === test_list.length) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length === test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nlet test_list: number[] = [1, 2, 3, 4, 5];\nconsole.log(all_unique(test_list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length === test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    return unique_list.length === test_list.length;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j) {\n                if (test_list[i] == test_list[j]) {\n                    unique = false;\n                }\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nlet test_list: number[] = [1, 2, 3, 4, 5];\nconsole.log(all_unique(test_list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let result: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                result = false;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j) {\n                if (test_list[i] == test_list[j]) {\n                    unique = false;\n                }\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n  let unique: boolean = true;\n  for (let i = 0; i < test_list.length; i++) {\n    for (let j = i + 1; j < test_list.length; j++) {\n      if (test_list[i] == test_list[j]) {\n        unique = false;\n        break;\n      }\n    }\n  }\n  return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    return test_list.length === new Set(test_list).size;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) === -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length === test_list.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j) {\n                if (test_list[i] == test_list[j]) {\n                    unique = false;\n                }\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list: number[] = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = 0; j < test_list.length; j++) {\n            if (i != j && test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique: boolean = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        if (unique_list.indexOf(test_list[i]) == -1) {\n            unique_list.push(test_list[i]);\n        }\n    }\n    if (unique_list.length == test_list.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    const set1 = new Set(test_list);\n    return set1.size === test_list.length;\n}\n\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1666124238,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique(test_list: number[]): boolean {\n    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] == test_list[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_unique;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n}\n\ntest();",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}