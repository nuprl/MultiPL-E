{
  "name": "mbpp_397_median_numbers",
  "language": "ts",
  "prompt": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let arr: number[] = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                return b;\n            } else {\n                return c;\n            }\n        } else {\n            return a;\n        }\n    } else {\n        if (b > c) {\n            if (a > c) {\n                return a;\n            } else {\n                return c;\n            }\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a > c && a < b) {\n        return a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a > c && a < b) {\n        median = a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        median = b;\n    }\n    else if (c > a && c < b || c > b && c < a) {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a < c) {\n            return a;\n        } else if (b > c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (a < c) {\n        return a;\n    } else if (b < c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n25\n\nshould loosely deep-equal\n\n55\n    at test (/tmp/tmp5a3pa2kb.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5a3pa2kb.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 25,\n  expected: 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\nconsole.log(median_numbers(2, 3, 4));\nconsole.log(median_numbers(2, 4, 3));\nconsole.log(median_numbers(3, 2, 4));\nconsole.log(median_numbers(3, 4, 2));\nconsole.log(median_numbers(4, 2, 3));\nconsole.log(median_numbers(4, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "3\n3\n3\n3\n3\n3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a < b && a > c) {\n        return a;\n    } else if (b > a && b < c || b < a && b > c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    }\n    else if (b < a && b > c || b > a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    return (a + b + c) / 3;\n}\n\nconsole.log(median_numbers(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n48.333333333333336\n\nshould loosely deep-equal\n\n55\n    at test (/tmp/tmpjnmg5v36.js:9:12)\n    at Object.<anonymous> (/tmp/tmpjnmg5v36.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 48.333333333333336,\n  expected: 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a > c) {\n        if (b > c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b > a && b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a > c) {\n        if (b > c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b > a && b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(1, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return (b < c) ? b : c;\n    } else if (b < a && b < c) {\n        return (a < c) ? a : c;\n    } else {\n        return (a < b) ? a : b;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return b < c ? b : c;\n    } else if (b < a && b < c) {\n        return a < c ? a : c;\n    } else {\n        return a < b ? a : b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        }\n        else if (a > c) {\n            return c;\n        }\n        else {\n            return a;\n        }\n    }\n    else if (a > c) {\n        return a;\n    }\n    else if (b > c) {\n        return c;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(4, 5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else if (c < a && c < b) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(5, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a < b && a > c) {\n        return a;\n    } else if (b > a && b < c || b < a && b > c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a > c && a < b) {\n        return a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        return b;\n    }\n    else if (c > a && c < b || c > b && c < a) {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    } else if (b < a && b > c || b > a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let result: number;\n    if (a > b) {\n        if (b > c) {\n            result = b;\n        } else if (a > c) {\n            result = c;\n        } else {\n            result = a;\n        }\n    } else {\n        if (a > c) {\n            result = a;\n        } else if (b > c) {\n            result = c;\n        } else {\n            result = b;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a > c && a < b) {\n        median = a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        median = b;\n    }\n    else {\n        median = c;\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(2, 3, 4));\nconsole.log(median_numbers(2, 4, 3));\nconsole.log(median_numbers(3, 2, 4));\nconsole.log(median_numbers(3, 4, 2));\nconsole.log(median_numbers(4, 2, 3));\nconsole.log(median_numbers(4, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "3\n3\n3\n3\n3\n3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a < b && a > c) {\n        return a;\n    }\n    else if (b > a && b < c || b < a && b > c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        return b < c ? b : c;\n    } else if (b < a && b < c) {\n        return a < c ? a : c;\n    } else {\n        return a < b ? a : b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b && b > c) {\n        median = b;\n    } else if (a > c && c > b) {\n        median = c;\n    } else if (b > a && a > c) {\n        median = a;\n    } else if (b > c && c > a) {\n        median = c;\n    } else if (c > a && a > b) {\n        median = a;\n    } else if (c > b && b > a) {\n        median = b;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a < b && a > c) {\n        return a;\n    } else if (b > a && b < c || b < a && b > c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    } else if (b < a && b > c || b > a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                return b;\n            } else {\n                return c;\n            }\n        } else {\n            return a;\n        }\n    } else {\n        if (b > c) {\n            if (a > c) {\n                return a;\n            } else {\n                return c;\n            }\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n    else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        }\n        else {\n            return c;\n        }\n    }\n    else {\n        if (a < b) {\n            return a;\n        }\n        else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let result: number;\n    if (a > b) {\n        if (b > c) {\n            result = b;\n        } else if (a > c) {\n            result = c;\n        } else {\n            result = a;\n        }\n    } else {\n        if (a > c) {\n            result = a;\n        } else if (b > c) {\n            result = c;\n        } else {\n            result = b;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a > c && a < b) {\n        return a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(median_numbers(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a > c && a < b) {\n        median = a;\n    } else if (b > a && b < c || b > c && b < a) {\n        median = b;\n    } else if (c > a && c < b || c > b && c < a) {\n        median = c;\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        }\n        else if (a > c) {\n            return c;\n        }\n        else {\n            return a;\n        }\n    }\n    else {\n        if (a > c) {\n            return a;\n        }\n        else if (b > c) {\n            return c;\n        }\n        else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    }\n    else if (b < a && b > c || b > a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a < c) {\n            return a;\n        }\n        else if (b > c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n    else {\n        if (a > c) {\n            return a;\n        }\n        else if (b < c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a < c) {\n        return a;\n    } else if (b < c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                return b;\n            } else {\n                return c;\n            }\n        } else {\n            return a;\n        }\n    } else {\n        if (b > c) {\n            if (a > c) {\n                return a;\n            } else {\n                return c;\n            }\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let max: number = Math.max(a, b, c);\n    let min: number = Math.min(a, b, c);\n    let median: number = (a + b + c) - max - min;\n    return median;\n}\nconsole.log(median_numbers(3, 5, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else if (c < a && c < b) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a > c && a < b) {\n        return a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    return (a + b + c) - Math.max(a, b, c) - Math.min(a, b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                return b;\n            } else {\n                return c;\n            }\n        } else {\n            return a;\n        }\n    } else {\n        if (b > c) {\n            if (a > c) {\n                return a;\n            } else {\n                return c;\n            }\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                return b;\n            } else {\n                return c;\n            }\n        } else {\n            return a;\n        }\n    } else {\n        if (b > c) {\n            if (a > c) {\n                return a;\n            } else {\n                return c;\n            }\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a > c && a < b) {\n        median = a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        median = b;\n    }\n    else if (c > a && c < b || c > b && c < a) {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(3, 4, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a < b && a > c) {\n        return a;\n    } else if (b > a && b < c || b < a && b > c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(2, 3, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123928,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\nconsole.log(median_numbers(2, 3, 4));\nconsole.log(median_numbers(2, 4, 3));\nconsole.log(median_numbers(3, 2, 4));\nconsole.log(median_numbers(3, 4, 2));\nconsole.log(median_numbers(4, 2, 3));\nconsole.log(median_numbers(4, 3, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "3\n3\n3\n3\n3\n3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a > c) {\n        if (b > c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b > a && b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else if (c > a && c > b) {\n        if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a < b && a > c) {\n        return a;\n    }\n    else if (b > a && b < c || b < a && b > c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else if (c > a && c < b || c < a && c > b) {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(10, 20, 30));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    } else if (b < a && b > c || b > a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a > c && a < b) {\n        median = a;\n    } else if (b > a && b < c || b > c && b < a) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else if (a > c) {\n        median = a;\n    } else if (b > c) {\n        median = c;\n    } else {\n        median = b;\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else if (c < a && c < b) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        }\n        else if (a > c) {\n            return c;\n        }\n        else {\n            return a;\n        }\n    }\n    else if (a > c) {\n        return a;\n    }\n    else if (b > c) {\n        return c;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else {\n            if (a > c) {\n                return c;\n            } else {\n                return a;\n            }\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else {\n            if (b > c) {\n                return c;\n            } else {\n                return b;\n            }\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else if (c > a && c < b || c < a && c > b) {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    }\n    else if (b < a && b > c || b > a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        }\n        else if (a > c) {\n            return c;\n        }\n        else {\n            return a;\n        }\n    }\n    else {\n        if (a > c) {\n            return a;\n        }\n        else if (b > c) {\n            return c;\n        }\n        else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a < b && b < c) {\n        median = b;\n    } else if (b < a && a < c) {\n        median = a;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n1\n2\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a < b && a > c) {\n        return a;\n    } else if (b > a && b < c || b < a && b > c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else if (c < a && c < b) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a < c) {\n            return a;\n        }\n        else if (b > c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n    else if (a < c) {\n        return a;\n    }\n    else if (b > c) {\n        return c;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n25\n\nshould loosely deep-equal\n\n55\n    at test (/tmp/tmpjgmdg6_6.js:27:12)\n    at Object.<anonymous> (/tmp/tmpjgmdg6_6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 25,\n  expected: 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let result: number = 0;\n    if (a > b && a < c || a < b && a > c) {\n        result = a;\n    }\n    else if (b > a && b < c || b < a && b > c) {\n        result = b;\n    }\n    else {\n        result = c;\n    }\n    return result;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (a > c) {\n        return a;\n    } else if (b > c) {\n        return c;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let arr: number[] = [a, b, c];\n    arr.sort();\n    return arr[1];\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else if (c < a && c < b) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if ((a > b && a < c) || (a < b && a > c)) {\n        median = a;\n    } else if ((b > a && b < c) || (b < a && b > c)) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else {\n            if (a > c) {\n                return c;\n            } else {\n                return a;\n            }\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else {\n            if (b > c) {\n                return c;\n            } else {\n                return b;\n            }\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c) {\n        median = a;\n    } else if (a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c) {\n        median = b;\n    } else if (b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b) {\n        if (b > c) {\n            median = b;\n        } else if (a > c) {\n            median = c;\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b > c) {\n            median = c;\n        } else {\n            median = b;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if ((a > b && a < c) || (a < b && a > c)) {\n        return a;\n    }\n    else if ((b > a && b < c) || (b < a && b > c)) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    }\n    else if (b < a && b > c || b > a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n  let median: number;\n  if (a > b && a < c || a < b && a > c) {\n    median = a;\n  } else if (b > a && b < c || b < a && b > c) {\n    median = b;\n  } else {\n    median = c;\n  }\n  return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n  if (a > b) {\n    if (b > c) {\n      return b;\n    } else if (a > c) {\n      return c;\n    } else {\n      return a;\n    }\n  } else {\n    if (a > c) {\n      return a;\n    } else if (b > c) {\n      return c;\n    } else {\n      return b;\n    }\n  }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        }\n        else if (a > c) {\n            return c;\n        }\n        else {\n            return a;\n        }\n    }\n    else {\n        if (a > c) {\n            return a;\n        }\n        else if (b > c) {\n            return c;\n        }\n        else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n            median = a;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else {\n            if (b > c) {\n                median = c;\n            } else {\n                median = b;\n            }\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        }\n        else if (a > c) {\n            return c;\n        }\n        else {\n            return a;\n        }\n    }\n    else {\n        if (a > c) {\n            return a;\n        }\n        else if (b > c) {\n            return c;\n        }\n        else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else if (c < a && c < b) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    } else if (b < a && b > c || b > a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123929,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    return (a + b + c) / 3;\n}\n\nconsole.log(median_numbers(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n48.333333333333336\n\nshould loosely deep-equal\n\n55\n    at test (/tmp/tmpjnmg5v36.js:9:12)\n    at Object.<anonymous> (/tmp/tmpjnmg5v36.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 48.333333333333336,\n  expected: 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a < b && a > c || a > b && a < c) {\n        median = a;\n    } else if (b < a && b > c || b > a && b < c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123925,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        }\n        else if (a > c) {\n            return c;\n        }\n        else {\n            return a;\n        }\n    }\n    else if (a > c) {\n        return a;\n    }\n    else if (b > c) {\n        return c;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n  if (a > b && a < c || a < b && a > c) {\n    return a;\n  } else if (b > a && b < c || b < a && b > c) {\n    return b;\n  } else {\n    return c;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    }\n    else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    }\n    else if (c > a && c < b || c < a && c > b) {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a > c || a > b && a < c) {\n        return a;\n    }\n    else if (b < a && b > c || b > a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123923,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a > c && a < b) {\n        return a;\n    } else if (b > a && b < c || b > c && b < a) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number = 0;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else if (c > a && c < b || c < a && c > b) {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        if (b < c) {\n            return b;\n        } else if (a < c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a < c) {\n            return a;\n        } else if (b < c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a > c && a < b) {\n        return a;\n    }\n    else if (b > a && b < c || b > c && b < a) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let result: number;\n    if (a > b && a < c || a < b && a > c) {\n        result = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        result = b;\n    } else {\n        result = c;\n    }\n    return result;\n}\n\nconsole.log(median_numbers(3, 5, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a > c && a < b) {\n        median = a;\n    } else if (b > a && b < c || b > c && b < a) {\n        median = b;\n    } else if (c > a && c < b || c > b && c < a) {\n        median = c;\n    }\n    return median;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let result: number;\n    if (a < b && a < c) {\n        if (b < c) {\n            result = b;\n        } else {\n            result = c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            result = a;\n        } else {\n            result = c;\n        }\n    } else {\n        if (a < b) {\n            result = a;\n        } else {\n            result = b;\n        }\n    }\n    return result;\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b && a < c || a > c && a < b) {\n        return a;\n    } else if (b > a && b < c || b > c && b < a) {\n        return b;\n    } else if (c > a && c < b || c > b && c < a) {\n        return c;\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                return b;\n            }\n            else {\n                return c;\n            }\n        }\n        else {\n            return a;\n        }\n    }\n    else {\n        if (b > c) {\n            if (a > c) {\n                return a;\n            }\n            else {\n                return c;\n            }\n        }\n        else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a > c && a < b) {\n        median = a;\n    } else if (b > a && b < c || b > c && b < a) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (b > c) {\n        if (a > c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let result: number = 0;\n    if (a > b) {\n        if (b > c) {\n            result = b;\n        } else if (a > c) {\n            result = c;\n        } else {\n            result = a;\n        }\n    } else {\n        if (a > c) {\n            result = a;\n        } else if (b > c) {\n            result = c;\n        } else {\n            result = b;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else if (a > c) {\n            return c;\n        } else {\n            return a;\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else if (b > c) {\n            return c;\n        } else {\n            return b;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a > b) {\n        if (b > c) {\n            return b;\n        } else {\n            if (a > c) {\n                return c;\n            } else {\n                return a;\n            }\n        }\n    } else {\n        if (a > c) {\n            return a;\n        } else {\n            if (b > c) {\n                return c;\n            } else {\n                return b;\n            }\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    let median: number;\n    if (a > b && a < c || a < b && a > c) {\n        median = a;\n    } else if (b > a && b < c || b < a && b > c) {\n        median = b;\n    } else {\n        median = c;\n    }\n    return median;\n}\nconsole.log(median_numbers(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123918,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\nconsole.log(median_numbers(3, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123925,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if (a < b && a < c) {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    } else if (b < a && b < c) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n\nconsole.log(median_numbers(1, 2, 3));\nconsole.log(median_numbers(2, 1, 3));\nconsole.log(median_numbers(3, 2, 1));\nconsole.log(median_numbers(1, 3, 2));\nconsole.log(median_numbers(2, 3, 1));\nconsole.log(median_numbers(3, 1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "2\n2\n2\n2\n2\n2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of three numbers.\nfunction median_numbers(a: number, b: number, c: number): number {\n    if ((a < b && a > c) || (a > b && a < c)) {\n        return a;\n    } else if ((b < a && b > c) || (b > a && b < c)) {\n        return b;\n    } else {\n        return c;\n    }\n}\nconsole.log(median_numbers(3, 4, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_numbers;\n  assert.deepEqual(candidate(25, 55, 65),55.0);\n  assert.deepEqual(candidate(20, 10, 30),20.0);\n  assert.deepEqual(candidate(15, 45, 75),45.0);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}