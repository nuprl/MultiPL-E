{
  "name": "mbpp_119_search",
  "language": "ts",
  "prompt": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        let mid: number = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n",
    "    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n",
    "  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n",
    "    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n",
    "    let index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1]) {\n            index = i;\n            break;\n        }\n    }\n    return arr[index];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n",
    "  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n      return arr[i];\n    }\n    i++;\n  }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n",
    "    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n",
    "    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n",
    "    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            }\n            else {\n                high = mid;\n            }\n        }\n        else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n",
    "    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start < end) {\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return arr[mid];\n}\n",
    "    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n",
    "    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        let mid: number = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n",
    "    let i = 0;\n    let j = arr.length - 1;\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n"
  ]
}