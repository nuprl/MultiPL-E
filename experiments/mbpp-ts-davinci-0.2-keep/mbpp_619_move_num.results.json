{
  "name": "mbpp_619_move_num",
  "language": "ts",
  "prompt": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "../../../../tmp/tmpiuf4efsr.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let alpha_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\nabcdefghij12345678910\nabcdefghijklmnopqrstuvwxyz1234567891011121314151617181920212223242526\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = \"\";\n    let nums = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "../../../../tmp/tmpdxe3zy5p.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/\\d+/g);\n  let chars = test_str.match(/[a-zA-Z]+/g);\n  return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let alpha_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            alpha_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "../../../../tmp/tmp9p95bv0d.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return char_arr.join(\"\") + num_arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split(\"\");\n    let num = [];\n    let char = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            char.push(str[i]);\n        } else {\n            num.push(str[i]);\n        }\n    }\n    return char.join(\"\") + num.join(\"\");\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "../../../../tmp/tmp6q7pyand.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str: string = \"\";\n    let num_str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "../../../../tmp/tmplv4jr8bg.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122857,
      "stdout": "../../../../tmp/tmpzwn2iykn.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/\\D+/g);\n    return str.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let num_str = \"\";\n  let char_str = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(test_str[i])) {\n      char_str += test_str[i];\n    } else {\n      num_str += test_str[i];\n    }\n  }\n  return char_str + num_str;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122857,
      "stdout": "../../../../tmp/tmpli1qrzad.ts(6,15): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmppdc29p9j.js:10:12)\n    at Object.<anonymous> (/tmp/tmppdc29p9j.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    var num_str = \"\";\n    var char_str = \"\";\n    for (var i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\nconsole.log(move_num(\"abcd123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = '';\n    let num = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122857,
      "stdout": "../../../../tmp/tmpb7yca0t5.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, \"\");\n    return str + nums.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str: string = \"\";\n    let num_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"test1ng-Leet=code-Q!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "testng-Leet=code-Q!1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = [];\n    let str_arr = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('abc123'));\nconsole.log(move_num('abc123xyz'));\nconsole.log(move_num('abcdef'));\nconsole.log(move_num('123456'));\nconsole.log(move_num('0'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "../../../../tmp/tmpkm055cfj.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i].match(/[0-9]/)) {\n            num_arr.push(test_str[i]);\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "../../../../tmp/tmpw1t1o9le.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let str_arr = test_str.split(\"\");\n  let num_arr = [];\n  let char_arr = [];\n  for (let i = 0; i < str_arr.length; i++) {\n    if (isNaN(parseInt(str_arr[i]))) {\n      char_arr.push(str_arr[i]);\n    } else {\n      num_arr.push(str_arr[i]);\n    }\n  }\n  return char_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    return str.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"abc123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d/g);\n    let str_arr = test_str.match(/[a-zA-Z]/g);\n    let result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    if (nums == null) {\n        return str.join(\"\");\n    }\n    if (str == null) {\n        return nums.join(\"\");\n    }\n    return str.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"123\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abc123\nabc102030\n123\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = \"\";\n    let nums = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let alpha_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            alpha_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122857,
      "stdout": "../../../../tmp/tmpv27y3_1b.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr: string[] = test_str.split(\"\");\n    let num_arr: string[] = [];\n    let result_arr: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (parseInt(str_arr[i])) {\n            num_arr.push(str_arr[i]);\n        } else {\n            result_arr.push(str_arr[i]);\n        }\n    }\n    return result_arr.concat(num_arr).join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "abcd1234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthree000thousand1143553'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpmo607pj1.js:20:12)\n    at Object.<anonymous> (/tmp/tmpmo607pj1.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthree000thousand1143553',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3'));\nconsole.log(move_num('a10b20c30'));\nconsole.log(move_num('abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            new_str += test_str[i];\n        }\n    }\n    for (let i = 0; i < test_str.length; i++) {\n        if (!isNaN(test_str[i])) {\n            new_str += test_str[i];\n        }\n    }\n    return new_str;\n}\nconsole.log(move_num(\"abcd1234xyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpat6j4er1.ts(5,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpat6j4er1.ts(10,20): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join('') + nums.join('');\n}\nconsole.log(move_num('a1b2c3'));\nconsole.log(move_num('a10b20c30'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "abc123\nabc102030\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpvrb27nku.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/\\D+/g);\n    return chars.join(\"\") + nums.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let letters: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            letters += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return letters + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"0123456789\";\n    let res: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (nums.indexOf(test_str[i]) == -1) {\n            res += test_str[i];\n        }\n    }\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (nums.indexOf(test_str[i]) != -1) {\n            res += test_str[i];\n        }\n    }\n    return res;\n}\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "abc123\nabcdef\nabc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510022,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let num = [];\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        if (parseInt(str[i]) || parseInt(str[i]) === 0) {\n            num.push(str[i]);\n        } else {\n            result.push(str[i]);\n        }\n    }\n    return result.concat(num).join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let alpha_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string[] = [];\n    let str: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    result = str.join(\"\") + nums.join(\"\");\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/\\D+/g);\n    return chars.join('') + nums.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\nconsole.log(move_num(\"a100b200c300d400\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\nabcd10203040\nabcd100200300400\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d/g);\n    let str_arr = test_str.match(/\\D/g);\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (parseInt(test_str[i])) {\n            nums += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "abcd1234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthree000thousand1143553'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpm8xasb4c.js:19:12)\n    at Object.<anonymous> (/tmp/tmpm8xasb4c.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthree000thousand1143553',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string[] = [];\n    let chars: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            chars.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = char_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join('') + nums.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/\\d+/g);\n  let letters = test_str.match(/\\D+/g);\n  return letters.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234xyz\"));\nconsole.log(move_num(\"abcdxyz1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "abcdxyz1234\nabcdxyz1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d+/g);\n    let str_arr = test_str.match(/\\D+/g);\n    let result = \"\";\n    if (num_arr != null) {\n        result += num_arr.join(\"\");\n    }\n    if (str_arr != null) {\n        result += str_arr.join(\"\");\n    }\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1B2\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1B2C3\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122862,
      "stdout": "../../../../tmp/tmpsg47h_9s.ts(22,44): error TS1002: Unterminated string literal.\n../../../../tmp/tmpsg47h_9s.ts(23,1): error TS1005: ',' expected.\n../../../../tmp/tmpsg47h_9s.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_arr.push(test_str[i]);\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('abcd1234'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "../../../../tmp/tmp3gu0vw4q.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        }\n        else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"123abc\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"aa11b33\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abc123\nabc123\nabc\n123\nabcxyz123\naab1133\n\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = '';\n    let nums = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "../../../../tmp/tmpqcapwvag.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "../../../../tmp/tmpll4sixnl.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = '';\n    let nums = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num('a1b2c3d4e5f6g7h8i9j10'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "../../../../tmp/tmpe0xa2oke.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = \"\";\n    let nums = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = '';\n    let chars: string = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abc1,2,3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpp5m43w0x.js:11:12)\n    at Object.<anonymous> (/tmp/tmpp5m43w0x.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    return str.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abc123\nabc102030\n",
      "stderr": "/tmp/tmpirhme7kd.js:5\n    return str.join('') + nums.join('');\n                               ^\n\nTypeError: Cannot read properties of null (reading 'join')\n    at move_num (/tmp/tmpirhme7kd.js:5:32)\n    at Object.<anonymous> (/tmp/tmpirhme7kd.js:9:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d+/g);\n    let str_arr = test_str.match(/[a-zA-Z]+/g);\n    let result = '';\n    if (num_arr) {\n        result += num_arr.join('');\n    }\n    if (str_arr) {\n        result += str_arr.join('');\n    }\n    return result;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1B\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A1B2\"));\nconsole.log(move_num(\"a1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "../../../../tmp/tmp3qub314s.ts(22,25): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3qub314s.ts(23,1): error TS1005: ',' expected.\n../../../../tmp/tmp3qub314s.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpzxh5dxma.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str = \"\";\n    let num_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let num_arr: string[] = [];\n  let str_arr: string[] = [];\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(Number(test_str[i]))) {\n      str_arr.push(test_str[i]);\n    } else {\n      num_arr.push(test_str[i]);\n    }\n  }\n  return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let alpha_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(Number(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let letter_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            letter_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return letter_str + num_str;\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d+/g);\n    let str_arr = test_str.match(/[a-zA-Z]+/g);\n    let result = '';\n    if (num_arr !== null) {\n        result += num_arr.join('');\n    }\n    if (str_arr !== null) {\n        result += str_arr.join('');\n    }\n    return result;\n}\n\nconsole.log(move_num('a1b2c3'));\nconsole.log(move_num('a10b20c30'));\nconsole.log(move_num('abc'));\nconsole.log(move_num('123'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "123abc\n102030abc\nabc\n123\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1143553000Iloveyouthreethousand'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmp8jrr3di5.js:21:12)\n    at Object.<anonymous> (/tmp/tmp8jrr3di5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1143553000Iloveyouthreethousand',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let str = test_str.split(\"\");\n  let nums = [];\n  let letters = [];\n  for (let i = 0; i < str.length; i++) {\n    if (isNaN(parseInt(str[i]))) {\n      letters.push(str[i]);\n    } else {\n      nums.push(str[i]);\n    }\n  }\n  return letters.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i]) == false) {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp79rxfrxm.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = char_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/\\D+/g);\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "../../../../tmp/tmpcg9g5hfi.ts(5,12): error TS2365: Operator '+' cannot be applied to types 'RegExpMatchArray' and 'RegExpMatchArray'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let str_arr_new = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            str_arr_new.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return str_arr_new.join('') + num_arr.join('');\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"abc123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/\\D+/g);\n    return str.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (Number(test_str[i])) {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthree000thousand1143553'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpb5yrw54z.js:18:12)\n    at Object.<anonymous> (/tmp/tmpb5yrw54z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthree000thousand1143553',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abcd1234\nabcdefghij123456789\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = '';\n    let str: string = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let str: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n      nums += test_str[i];\n    } else {\n      str += test_str[i];\n    }\n  }\n  return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let letters: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            letters += test_str[i];\n        }\n    }\n    return letters + nums;\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122867,
      "stdout": "abc123\nabc\n123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string[] = [];\n  let chars: string[] = [];\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(parseInt(test_str[i]))) {\n      chars.push(test_str[i]);\n    } else {\n      nums.push(test_str[i]);\n    }\n  }\n  return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122867,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return char_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "../../../../tmp/tmp491bcddz.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str: string = \"\";\n    let num_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122867,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let chars: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(test_str[i])) {\n      chars += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "../../../../tmp/tmpcsm962uv.ts(6,15): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = \"\";\n    let nums = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "../../../../tmp/tmpjlc30sbn.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join('') + nums.join('');\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122867,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let num_arr: string[] = [];\n  let str_arr: string[] = [];\n  let result: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(parseInt(test_str[i]))) {\n      str_arr.push(test_str[i]);\n    } else {\n      num_arr.push(test_str[i]);\n    }\n  }\n  result = str_arr.join(\"\") + num_arr.join(\"\");\n  return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122867,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let res = '';\n    let num = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            res += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return res + num;\n}\n\nconsole.log(move_num('a1b2c3d4'));\nconsole.log(move_num('a1b2c3d4e5f6g7h8i9j0'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122867,
      "stdout": "../../../../tmp/tmp9du2btpd.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122867,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let non_num_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            non_num_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return non_num_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122868,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let new_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            new_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpzxh5dxma.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122868,
      "stdout": "abcd123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122868,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = [];\n  let str = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n      nums.push(test_str[i]);\n    } else {\n      str += test_str[i];\n    }\n  }\n  return str + nums.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122868,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/\\D+/g);\n    return str.join('') + nums.join('');\n}\nconsole.log(move_num(\"abcd12efg34\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abcdefg1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_arr.push(test_str[i]);\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let letter_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            letter_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return letter_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d+/g);\n    let str_arr = test_str.match(/[a-zA-Z]+/g);\n    let result = \"\";\n    if (num_arr) {\n        result += num_arr.join(\"\");\n    }\n    if (str_arr) {\n        result += str_arr.join(\"\");\n    }\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "1234abcd\n102030abc\nabc\n123\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1143553000Iloveyouthreethousand'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpmm_cvg9c.js:21:12)\n    at Object.<anonymous> (/tmp/tmpmm_cvg9c.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1143553000Iloveyouthreethousand',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/\\D+/g);\n    return chars.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string[] = [];\n    let chars: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    return str.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abc1,2,3\nabc10,20,30\nabcnull\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpwls1u2zv.js:13:12)\n    at Object.<anonymous> (/tmp/tmpwls1u2zv.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmpm2rcj2xy.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split(\"\");\n    let num_arr = [];\n    let letter_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            letter_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return letter_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"abcd123\"));\nconsole.log(move_num(\"abcd\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "abcd123\nabcd\n123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = '';\n    let chars: string = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123456\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122840,
      "stdout": "abc123\nabcxyz123\nabcdef\n123456\n\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let chars: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(Number(test_str[i]))) {\n      chars += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    return str.join('') + nums.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(Number(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmpm2rcj2xy.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split(\"\");\n    let num = [];\n    let letter = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letter.push(str[i]);\n        } else {\n            num.push(str[i]);\n        }\n    }\n    return letter.join(\"\") + num.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = \"\";\n    let nums = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpps438c1r.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122863,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpft5il0gt.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let str_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return str_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpkbpikwfk.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "../../../../tmp/tmpiwlov4cc.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/\\d+/g);\n  let str = test_str.match(/[a-zA-Z]+/g);\n  return str.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"abc123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    let res: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_arr.push(test_str[i]);\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    res = str_arr.join(\"\") + num_arr.join(\"\");\n    return res;\n}\n\nconsole.log(move_num(\"abcd123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "abcd123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr: string[] = test_str.split(\"\");\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(Number(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"abc123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let alpha_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            alpha_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "../../../../tmp/tmp5_59znfp.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmppdc29p9j.js:10:12)\n    at Object.<anonymous> (/tmp/tmppdc29p9j.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join('') + nums.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123456\"));\nconsole.log(move_num(\"0\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "abc123\nabcxyz123\nabcdef\n123456\n0\n\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num_str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return result + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let num = [];\n    let letter = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(str[i])) {\n            letter.push(str[i]);\n        } else {\n            num.push(str[i]);\n        }\n    }\n    return letter.join('') + num.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "../../../../tmp/tmpc1c4vsq0.ts(7,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}