{
  "name": "mbpp_640_remove_parenthesis",
  "language": "ts",
  "prompt": "//Write a function to remove the parenthesis and what is inbetween them from a string.\nfunction remove_parenthesis(items: string[]): string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_parenthesis;\n  assert.deepEqual(candidate([\"python (chrome)\"]),\"python\");\n  assert.deepEqual(candidate([\"string(.abc)\"]),\"string\");\n  assert.deepEqual(candidate([\"alpha(num)\"]),\"alpha\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result: string = \"\";\n    let open: number = 0;\n    let close: number = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (items[i] == \"(\") {\n            open++;\n        }\n        else if (items[i] == \")\") {\n            close++;\n        }\n        else if (open == close) {\n            result += items[i];\n        }\n    }\n    return result;\n}\n",
    "    let new_items = items.filter(item => !item.includes(\"(\") && !item.includes(\")\"));\n    return new_items.join(\" \");\n}\n\nconsole.log(remove_parenthesis([\"example (.com)\", \"w3resource\", \"github (.com)\", \"stackoverflow (.com)\"]));\n",
    "  let new_items: string[] = [];\n  for (let i = 0; i < items.length; i++) {\n    if (items[i] !== \"(\" && items[i] !== \")\") {\n      new_items.push(items[i]);\n    }\n  }\n  return new_items.join(\"\");\n}\n",
    "    let new_items = [];\n    for (let i = 0; i < items.length; i++) {\n        if (items[i] != '(' && items[i] != ')') {\n            new_items.push(items[i]);\n        }\n    }\n    return new_items.join('');\n}\n\nconsole.log(remove_parenthesis(['(', 'a', 'b', 'c', ')', 'd', 'e', 'f']));\n",
    "    let result: string = \"\";\n    let open: number = 0;\n    let close: number = 0;\n    for (let i: number = 0; i < items.length; i++) {\n        if (items[i] == \"(\") {\n            open = i;\n        }\n        if (items[i] == \")\") {\n            close = i;\n        }\n    }\n    for (let i: number = 0; i < items.length; i++) {\n        if (i < open || i > close) {\n            result += items[i];\n        }\n    }\n    return result;\n}\n",
    "    let result: string = \"\";\n    for (let i = 0; i < items.length; i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\n",
    "  let newItems = items.map(item => {\n    let newItem = item.split('');\n    let newItem2 = [];\n    for (let i = 0; i < newItem.length; i++) {\n      if (newItem[i] !== '(' && newItem[i] !== ')') {\n        newItem2.push(newItem[i]);\n      }\n    }\n    return newItem2.join('');\n  });\n  return newItems.join(',');\n}\n\nconsole.log(remove_parenthesis(['(1,2)', '(3,4)', '(5,6)']));\n",
    "    let new_items: string[] = [];\n    for (let i = 0; i < items.length; i++) {\n        if (items[i] != '(' && items[i] != ')') {\n            new_items.push(items[i]);\n        }\n    }\n    return new_items.join('');\n}\n",
    "  let new_items = [];\n  for (let i = 0; i < items.length; i++) {\n    if (items[i] === \"(\") {\n      for (let j = i; j < items.length; j++) {\n        if (items[j] === \")\") {\n          i = j;\n        }\n      }\n    } else {\n      new_items.push(items[i]);\n    }\n  }\n  return new_items.join(\"\");\n}\n",
    "    let new_items: string[] = [];\n    for (let i = 0; i < items.length; i++) {\n        if (items[i] !== '(' && items[i] !== ')') {\n            new_items.push(items[i]);\n        }\n    }\n    return new_items.join('');\n}\n",
    "  const newArr = items.map(item => {\n    return item.replace(/\\(.*?\\)/g, '');\n  });\n  return newArr.join(' ');\n}\n",
    "  let new_array: string[] = [];\n  items.forEach(function(item) {\n    if (item.includes(\"(\")) {\n      new_array.push(item.replace(/\\(.*?\\)/g, \"\"));\n    } else {\n      new_array.push(item);\n    }\n  });\n  return new_array.join(\" \");\n}\n",
    "    let result: string = \"\";\n    let open: number = 0;\n    let close: number = 0;\n    for (let i: number = 0; i < items.length; i++) {\n        if (items[i] === \"(\") {\n            open = i;\n        }\n        if (items[i] === \")\") {\n            close = i;\n        }\n    }\n    for (let i: number = 0; i < items.length; i++) {\n        if (i < open || i > close) {\n            result += items[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_parenthesis([\"a\", \"(\", \"b\", \")\", \"c\"]));\n",
    "    let result = [];\n    for (let i = 0; i < items.length; i++) {\n        if (items[i] === '(') {\n            while (items[i] !== ')') {\n                i++;\n            }\n        } else {\n            result.push(items[i]);\n        }\n    }\n    return result.join('');\n}\nconsole.log(remove_parenthesis(['a', 'b', '(', 'c', 'd', ')', 'e', 'f']));\n",
    "  let new_items: string[] = [];\n  for (let i = 0; i < items.length; i++) {\n    if (items[i] === \"(\" || items[i] === \")\") {\n      continue;\n    } else {\n      new_items.push(items[i]);\n    }\n  }\n  return new_items.join(\" \");\n}\n",
    "  let result: string[] = [];\n  for (let i = 0; i < items.length; i++) {\n    if (items[i] == \"(\") {\n      while (items[i] != \")\") {\n        i++;\n      }\n    } else {\n      result.push(items[i]);\n    }\n  }\n  return result.join(\"\");\n}\n\nconsole.log(remove_parenthesis([\"a\", \"(\", \"b\", \")\", \"c\"]));\nconsole.log(remove_parenthesis([\"a\", \"(\", \"b\", \"c\", \")\"]));\nconsole.log(remove_parenthesis([\"a\", \"(\", \"b\", \"c\", \")\", \"d\"]));\n",
    "  let newItems = items.map(item => {\n    let newItem = item.replace(/\\(.*?\\)/g, \"\");\n    return newItem;\n  });\n  return newItems.join(\" \");\n}\n",
    "  let newItems = items.map(item => {\n    let newItem = item.replace(/\\(.*\\)/, \"\");\n    return newItem;\n  });\n  return newItems.join(\" \");\n}\n\nconsole.log(remove_parenthesis([\"example (.com)\", \"w3resource\", \"github (.com)\", \"stackoverflow (.com)\"]));\n",
    "    let result: string = \"\";\n    for (let i = 0; i < items.length; i++) {\n        if (items[i] === \"(\") {\n            while (items[i] !== \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\n",
    "    let new_items: string[] = [];\n    for (let i = 0; i < items.length; i++) {\n        let item = items[i];\n        if (item.indexOf('(') != -1) {\n            item = item.slice(0, item.indexOf('(')) + item.slice(item.indexOf(')') + 1);\n        }\n        new_items.push(item);\n    }\n    return new_items.join(' ');\n}\n"
  ]
}