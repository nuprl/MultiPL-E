{
  "name": "mbpp_745_divisible_by_digits",
  "language": "ts",
  "prompt": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(1000, 10000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  1111, 1112, 1113, 1115, 1116, 1122, 1124, 1128, 1131, 1144,\n  1155, 1164, 1176, 1184, 1197, 1212, 1222, 1224, 1236, 1244,\n  1248, 1266, 1288, 1296, 1311, 1326, 1332, 1335, 1344, 1362,\n  1368, 1395, 1412, 1416, 1424, 1444, 1448, 1464, 1488, 1515,\n  1555, 1575, 1626, 1632, 1644, 1662, 1692, 1715, 1722, 1764,\n  1771, 1824, 1848, 1888, 1926, 1935, 1944, 1962, 2112, 2122,\n  2124, 2128, 2136, 2144, 2166, 2184, 2196, 2212, 2222, 2224,\n  2226, 2232, 2244, 2248, 2262, 2288, 2316, 2322, 2328, 2364,\n  2412, 2424, 2436, 2444, 2448, 2488, 2616, 2622, 2664, 2688,\n  2744, 2772, 2824, 2832, 2848, 2888, 2916, 3111, 3126, 3132,\n  ... 160 more items\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: string[] = i.toString().split(\"\");\n        let is_divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) != 0) {\n                is_divisible = false;\n                break;\n            }\n        }\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let isDivisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: string[] = i.toString().split(\"\");\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let is_divisible: boolean = digits.every(digit => i % digit === 0);\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(100, 500));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  111, 112, 115, 122, 124, 126, 128,\n  132, 135, 144, 155, 162, 168, 175,\n  184, 212, 216, 222, 224, 244, 248,\n  264, 288, 312, 315, 324, 333, 336,\n  366, 384, 396, 412, 424, 432, 444,\n  448, 488\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(x => i % x === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits = i.toString().split('');\n        let isDivisible = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    return Array.from({ length: endnum - startnum + 1 }, (_, i) => i + startnum).filter(num => {\n        const digits = Array.from(String(num), Number);\n        return digits.every(digit => num % digit === 0);\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(d => i % d == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible = true;\n        let num = i;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                isDivisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    const result = [];\n    for (let i = startnum; i <= endnum; i++) {\n        const digits = i.toString().split('');\n        if (digits.every(digit => i % parseInt(digit) === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let is_divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                is_divisible = false;\n                break;\n            }\n        }\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    return Array.from(Array(endnum - startnum + 1).keys()).map(i => i + startnum).filter(x => x.toString().split('').map(y => parseInt(y)).every(y => x % y == 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        let isDivisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        let divisible: boolean = digits.every(x => i % x == 0);\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let isDivisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                isDivisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i: number = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let divisible: boolean = true;\n        let num: number = i;\n        while (num > 0) {\n            let digit: number = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    const result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible: boolean = true;\n        const digits: number[] = i.toString().split('').map(x => parseInt(x));\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(100, 1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  111, 112, 115, 122, 124, 126, 128, 132,\n  135, 144, 155, 162, 168, 175, 184, 212,\n  216, 222, 224, 244, 248, 264, 288, 312,\n  315, 324, 333, 336, 366, 384, 396, 412,\n  424, 432, 444, 448, 488, 515, 555, 612,\n  624, 636, 648, 666, 672, 728, 735, 777,\n  784, 816, 824, 848, 864, 888, 936, 999\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        if (digits.every(x => i % x === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    const result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        const digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        if (digits.every(x => i % x === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible = true;\n        let num = i;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                isDivisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i.toString();\n        let divisible = true;\n        for (let j = 0; j < num.length; j++) {\n            if (i % parseInt(num[j]) != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible: boolean = true;\n        let num = i;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                isDivisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(100, 200));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  111, 112, 115, 122,\n  124, 126, 128, 132,\n  135, 144, 155, 162,\n  168, 175, 184\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = digits.every(digit => i % digit === 0);\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(100, 200));\nconsole.log(divisible_by_digits(1000, 2000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  111, 112, 115, 122,\n  124, 126, 128, 132,\n  135, 144, 155, 162,\n  168, 175, 184\n]\n[\n  1111, 1112, 1113, 1115, 1116, 1122, 1124,\n  1128, 1131, 1144, 1155, 1164, 1176, 1184,\n  1197, 1212, 1222, 1224, 1236, 1244, 1248,\n  1266, 1288, 1296, 1311, 1326, 1332, 1335,\n  1344, 1362, 1368, 1395, 1412, 1416, 1424,\n  1444, 1448, 1464, 1488, 1515, 1555, 1575,\n  1626, 1632, 1644, 1662, 1692, 1715, 1722,\n  1764, 1771, 1824, 1848, 1888, 1926, 1935,\n  1944, 1962\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num_str: string = i.toString();\n        let is_divisible: boolean = true;\n        for (let j = 0; j < num_str.length; j++) {\n            if (i % parseInt(num_str[j]) !== 0) {\n                is_divisible = false;\n                break;\n            }\n        }\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let isDivisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit !== 0 && i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpbg8ccbvo.js:24:12)\n    at Object.<anonymous> (/tmp/tmpbg8ccbvo.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let digits: number[] = [];\n        while (num > 0) {\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i: number = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    return range(startnum, endnum).filter(num => num.toString().split('').every(digit => num % parseInt(digit) === 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "../../../../tmp/tmppjb5nz2h.ts(3,12): error TS2552: Cannot find name 'range'. Did you mean 'Range'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let is_divisible: boolean = true;\n        let num: number = i;\n        while (num > 0) {\n            let digit: number = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                is_divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible = true;\n        let digits = i.toString().split('');\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let isDivisible: boolean = digits.every(digit => i % digit === 0);\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(1000, 10000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  1111, 1112, 1113, 1115, 1116, 1122, 1124, 1128, 1131, 1144,\n  1155, 1164, 1176, 1184, 1197, 1212, 1222, 1224, 1236, 1244,\n  1248, 1266, 1288, 1296, 1311, 1326, 1332, 1335, 1344, 1362,\n  1368, 1395, 1412, 1416, 1424, 1444, 1448, 1464, 1488, 1515,\n  1555, 1575, 1626, 1632, 1644, 1662, 1692, 1715, 1722, 1764,\n  1771, 1824, 1848, 1888, 1926, 1935, 1944, 1962, 2112, 2122,\n  2124, 2128, 2136, 2144, 2166, 2184, 2196, 2212, 2222, 2224,\n  2226, 2232, 2244, 2248, 2262, 2288, 2316, 2322, 2328, 2364,\n  2412, 2424, 2436, 2444, 2448, 2488, 2616, 2622, 2664, 2688,\n  2744, 2772, 2824, 2832, 2848, 2888, 2916, 3111, 3126, 3132,\n  ... 160 more items\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: string[] = i.toString().split(\"\");\n        let isDivisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) != 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let digits: number[] = [];\n        while (num > 0) {\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(d => i % d == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let is_divisible: boolean = digits.every(digit => i % digit == 0);\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits = i.toString().split(\"\");\n        let isDivisible = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible: boolean = true;\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let divisible: boolean = true;\n        let num: number = i;\n        while (num > 0) {\n            let digit: number = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(100, 200));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  111, 112, 115, 122,\n  124, 126, 128, 132,\n  135, 144, 155, 162,\n  168, 175, 184\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (digits[j] === 0) {\n                divisible = false;\n                break;\n            }\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let flag = true;\n        let num = i;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                flag = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (flag) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: string[] = i.toString().split(\"\");\n        let isDivisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) != 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let digits: number[] = [];\n        while (num > 0) {\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num: number = i;\n        let divisible: boolean = true;\n        while (num > 0) {\n            let digit: number = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i < endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(100, 200));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  111, 112, 115, 122,\n  124, 126, 128, 132,\n  135, 144, 155, 162,\n  168, 175, 184\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmplww8rdhk.js:26:12)\n    at Object.<anonymous> (/tmp/tmplww8rdhk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2, 3, 4,  5,\n     6,  7, 8, 9, 11,\n    12, 15\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.j",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\nconsole.log(divisible_by_digits(1000, 10000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n[\n  1111, 1112, 1113, 1115, 1116, 1122, 1124, 1128, 1131, 1144,\n  1155, 1164, 1176, 1184, 1197, 1212, 1222, 1224, 1236, 1244,\n  1248, 1266, 1288, 1296, 1311, 1326, 1332, 1335, 1344, 1362,\n  1368, 1395, 1412, 1416, 1424, 1444, 1448, 1464, 1488, 1515,\n  1555, 1575, 1626, 1632, 1644, 1662, 1692, 1715, 1722, 1764,\n  1771, 1824, 1848, 1888, 1926, 1935, 1944, 1962, 2112, 2122,\n  2124, 2128, 2136, 2144, 2166, 2184, 2196, 2212, 2222, 2224,\n  2226, 2232, 2244, 2248, 2262, 2288, 2316, 2322, 2328, 2364,\n  2412, 2424, 2436, 2444, 2448, 2488, 2616, 2622, 2664, 2688,\n  2744, 2772, 2824, 2832, 2848, 2888, 2916, 3111, 3126, 3132,\n  ... 160 more items\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    return Array.from(Array(endnum - startnum + 1), (_, i) => i + startnum).filter(x => x.toString().split('').every(y => x % parseInt(y) === 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let flag = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                flag = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (flag) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num_str: string = i.toString();\n        let divisible: boolean = true;\n        for (let j = 0; j < num_str.length; j++) {\n            if (i % parseInt(num_str[j]) != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits = i.toString().split('');\n        if (digits.every(digit => i % parseInt(digit) == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let is_divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                is_divisible = false;\n                break;\n            }\n        }\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        if (i.toString().split(\"\").every(x => i % parseInt(x) == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = digits.every(digit => i % digit === 0);\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let isDivisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i.toString();\n        let divisible = true;\n        for (let j = 0; j < num.length; j++) {\n            if (i % parseInt(num[j]) != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible = true;\n        let num = i;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                isDivisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: string[] = i.toString().split('');\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible = true;\n        let num = i;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                isDivisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let digits: number[] = [];\n        while (num > 0) {\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        let divisible = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (digits[j] == 0) {\n                divisible = false;\n                break;\n            }\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nconsole.log(divisible_by_digits(1, 100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "[\n   1,  2,  3,  4,  5,  6,  7,  8,\n   9, 11, 12, 15, 22, 24, 33, 36,\n  44, 48, 55, 66, 77, 88, 99\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let is_divisible: boolean = digits.every(digit => i % digit === 0);\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let divisible = true;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let is_divisible: boolean = true;\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                is_divisible = false;\n                break;\n            }\n        }\n        if (is_divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        let isDivisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let divisible: boolean = true;\n        let num: number = i;\n        while (num > 0) {\n            let digit: number = num % 10;\n            if (digit === 0 || i % digit !== 0) {\n                divisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split(\"\").map(x => parseInt(x));\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let nums: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit == 0)) {\n            nums.push(i);\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(x => parseInt(x));\n        let divisible: boolean = true;\n        for (let j = 0; j < digits.length; j++) {\n            if (i % digits[j] != 0) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(x => i % x == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible: boolean = true;\n        let num: number = i;\n        while (num > 0) {\n            let digit: number = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                isDivisible = false;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    const result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let isDivisible = true;\n        const digits = i.toString().split('');\n        for (let j = 0; j < digits.length; j++) {\n            if (i % parseInt(digits[j]) !== 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i;\n        let digits: number[] = [];\n        while (num > 0) {\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        if (digits.every(d => i % d == 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let divisible_by_all_digits = true;\n        for (let j = 0; j < i.toString().length; j++) {\n            if (i % parseInt(i.toString().charAt(j)) !== 0) {\n                divisible_by_all_digits = false;\n                break;\n            }\n        }\n        if (divisible_by_all_digits) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let digits: number[] = i.toString().split('').map(Number);\n        if (digits.every(digit => i % digit === 0)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits(startnum: number, endnum: number): number[] {\n    let result: number[] = [];\n    for (let i = startnum; i <= endnum; i++) {\n        let num = i.toString();\n        let isDivisible = true;\n        for (let j = 0; j < num.length; j++) {\n            if (i % parseInt(num[j]) != 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}