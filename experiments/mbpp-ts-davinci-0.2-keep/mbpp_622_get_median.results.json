{
  "name": "mbpp_622_get_median",
  "language": "ts",
  "prompt": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1 = median(arr1, n);\n  let m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  }\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "../../../../tmp/tmp6d9o_as9.ts(7,12): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp6d9o_as9.ts(8,12): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1 = median(arr1, n);\n  let m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  }\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "../../../../tmp/tmp6d9o_as9.ts(7,12): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp6d9o_as9.ts(8,12): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1 = median(arr1, n);\n  let m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  }\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "../../../../tmp/tmp6d9o_as9.ts(7,12): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp6d9o_as9.ts(8,12): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) {\n    return -1;\n  }\n  if (n === 1) {\n    return (arr1[0] + arr2[0]) / 2;\n  }\n  if (n === 2) {\n    return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n  }\n\n  const m1 = median(arr1, n);\n  const m2 = median(arr2, n);\n\n  if (m1 === m2) {\n    return m1;\n  }\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr2.slice(n / 2 - 1), arr1.slice(0, n / 2 + 1), n - n / 2 + 1);\n  }\n  return get_median(arr2.slice(n / 2), arr1.slice(0, n / 2 + 1), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "../../../../tmp/tmp1d84w1tq.ts(13,14): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp1d84w1tq.ts(14,14): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\nlet arr1: number[] = [1, 12, 15, 26, 38];\nlet arr2: number[] = [2, 13, 17, 30, 45];\n\nconsole.log(get_median(arr1, arr2, arr1.length));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i: number = 0;\n  let j: number = 0;\n  let count: number = 0;\n  let m1: number = -1;\n  let m2: number = -1;\n  while (count <= n) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n    count++;\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0, j = 0;\n  let m1 = -1, m2 = -1;\n\n  for (let count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1: number = median(arr1, n);\n  let m2: number = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  }\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "../../../../tmp/tmpeowrfix2.ts(7,20): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmpeowrfix2.ts(8,20): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1 = median(arr1, n);\n  let m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  }\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "../../../../tmp/tmp6d9o_as9.ts(7,12): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp6d9o_as9.ts(8,12): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1 = median(arr1, n);\n  let m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0)\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0)\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "../../../../tmp/tmp8u10xebw.ts(7,12): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp8u10xebw.ts(8,12): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i: number = 0;\n  let j: number = 0;\n  let count: number = 0;\n  let m1: number = -1;\n  let m2: number = -1;\n  while (count <= n) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n    count++;\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i: number = 0;\n  let j: number = 0;\n  let count: number = 0;\n  let m1: number = -1;\n  let m2: number = -1;\n\n  while (count <= n) {\n    if (i === n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j === n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n    count++;\n  }\n\n  return (m1 + m2) / 2;\n}\n\nlet arr1: number[] = [1, 12, 15, 26, 38];\nlet arr2: number[] = [2, 13, 17, 30, 45];\n\nconsole.log(get_median(arr1, arr2, arr1.length));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1 = median(arr1, n);\n  let m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  }\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "../../../../tmp/tmp6d9o_as9.ts(7,12): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp6d9o_as9.ts(8,12): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let m1 = -1;\n    let m2 = -1;\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let m1 = -1;\n    let m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\nlet arr1: number[] = [1, 12, 15, 26, 38];\nlet arr2: number[] = [2, 13, 17, 30, 45];\n\nlet n: number = arr1.length;\n\nconsole.log(`Median is ${get_median(arr1, arr2, n)}`);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "Median is 16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    while (count <= n) {\n        count++;\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  const m1 = median(arr1, n);\n  const m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr2.slice(n / 2 - 1), arr1.slice(0, n / 2 + 1), n - n / 2 + 1);\n  }\n  return get_median(arr2.slice(n / 2), arr1.slice(0, n / 2 + 1), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "../../../../tmp/tmpyz514nvr.ts(7,14): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmpyz514nvr.ts(8,14): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  if (n <= 0) return -1;\n  if (n === 1) return (arr1[0] + arr2[0]) / 2;\n  if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n  let m1 = median(arr1, n);\n  let m2 = median(arr2, n);\n\n  if (m1 === m2) return m1;\n\n  if (m1 < m2) {\n    if (n % 2 === 0) {\n      return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n  }\n\n  if (n % 2 === 0) {\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n  }\n  return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "../../../../tmp/tmp6d9o_as9.ts(7,12): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp6d9o_as9.ts(8,12): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\nlet arr1 = [1, 2, 3, 6];\nlet arr2 = [4, 6, 8, 10];\nlet n = arr1.length;\nconsole.log(`Median is ${get_median(arr1, arr2, n)}`);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "Median is 5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let m1 = -1;\n    let m2 = -1;\n\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    if (n <= 0) return -1;\n    if (n === 1) return (arr1[0] + arr2[0]) / 2;\n    if (n === 2) return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1])) / 2;\n\n    let m1 = median(arr1, n);\n    let m2 = median(arr2, n);\n\n    if (m1 === m2) return m1;\n\n    if (m1 < m2) {\n        if (n % 2 === 0) {\n            return get_median(arr1.slice(n / 2 - 1), arr2.slice(0, n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(arr1.slice(n / 2), arr2.slice(0, n / 2 + 1), n - n / 2);\n    }\n\n    if (n % 2 === 0) {\n        return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2 - 1), n - n / 2 + 1);\n    }\n    return get_median(arr1.slice(0, n / 2 + 1), arr2.slice(n / 2), n - n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "../../../../tmp/tmp02huopqf.ts(7,14): error TS2304: Cannot find name 'median'.\n../../../../tmp/tmp02huopqf.ts(8,14): error TS2304: Cannot find name 'median'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let m1 = -1;\n    let m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    /* Since there are 2n elements, median will be average\n       of elements at index n-1 and n in the array obtained after\n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) {\n        /* Below is to handle case where all elements of ar1[] are\n           smaller than smallest(or first) element of ar2[] */\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n\n        /* Below is to handle case where all elements of ar2[] are\n           smaller than smallest(or first) element of ar1[] */\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            /* Store the prev median */\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            /* Store the prev median */\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i === n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j === n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let m1 = -1;\n    let m2 = -1;\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0, j = 0;\n  let m1 = -1, m2 = -1;\n  for (let count = 0; count <= n; count++) {\n    if (i === n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j === n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    while (count <= n) {\n        count++;\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0, j = 0;\n    let m1 = -1, m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let m1 = -1;\n    let m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let m1 = -1;\n    let m2 = -1;\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n  let i = 0;\n  let j = 0;\n  let count;\n  let m1 = -1;\n  let m2 = -1;\n\n  for (count = 0; count <= n; count++) {\n    if (i == n) {\n      m1 = m2;\n      m2 = arr2[0];\n      break;\n    } else if (j == n) {\n      m1 = m2;\n      m2 = arr1[0];\n      break;\n    }\n\n    if (arr1[i] < arr2[j]) {\n      m1 = m2;\n      m2 = arr1[i];\n      i++;\n    } else {\n      m1 = m2;\n      m2 = arr2[j];\n      j++;\n    }\n  }\n\n  return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let m1 = -1;\n    let m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    let m1: number = -1;\n    let m2: number = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (let count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1666123808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i = 0;\n    let j = 0;\n    let count;\n    let m1 = -1;\n    let m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the median of two sorted lists of same size.\nfunction get_median(arr1: number[], arr2: number[], n: number): number {\n    let i: number = 0, j: number = 0;\n    let m1: number = -1, m2: number = -1;\n    for (let count: number = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_median;\n  assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);\n  assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);\n  assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);\n}\n\ntest();",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}