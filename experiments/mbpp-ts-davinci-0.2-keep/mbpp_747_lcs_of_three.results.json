{
  "name": "mbpp_747_lcs_of_three",
  "language": "ts",
  "prompt": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++)\n            L[i][j] = new Array(o + 1);\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n  let m = X.length;\n  let n = Y.length;\n  let o = Z.length;\n  let L = new Array(m + 1)\n    .fill(0)\n    .map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n\n  for (let i = 0; i <= m; i++) {\n    for (let j = 0; j <= n; j++) {\n      for (let k = 0; k <= o; k++) {\n        if (i == 0 || j == 0 || k == 0) L[i][j][k] = 0;\n        else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n          L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n        else L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n      }\n    }\n  }\n  return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n  let m = X.length;\n  let n = Y.length;\n  let o = Z.length;\n  let L = Array(m + 1)\n    .fill(0)\n    .map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n\n  for (let i = 0; i <= m; i++) {\n    for (let j = 0; j <= n; j++) {\n      for (let k = 0; k <= o; k++) {\n        if (i == 0 || j == 0 || k == 0) L[i][j][k] = 0;\n        else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n          L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n        else L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n      }\n    }\n  }\n  return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m: number = X.length;\n    let n: number = Y.length;\n    let o: number = Z.length;\n    let L: number[][][] = [];\n    for (let i: number = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j: number = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k: number = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i: number = 0; i <= m; i++) {\n        for (let j: number = 0; j <= n; j++) {\n            for (let k: number = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L: number[][][] = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i === 0 || j === 0 || k === 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i === 0 || j === 0 || k === 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array.from(Array(m + 1), () => Array(n + 1).fill(0));\n    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n                if (L[i][j][k] > result) {\n                    result = L[i][j][k];\n                }\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpy40w6_xx.js:31:12)\n    at Object.<anonymous> (/tmp/tmpy40w6_xx.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array<Array<Array<number>>>();\n\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array<Array<number>>();\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array<number>();\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array<Array<Array<number>>>();\n    for (let i = 0; i <= m; i++) {\n        let temp = new Array<Array<number>>();\n        for (let j = 0; j <= n; j++) {\n            let temp2 = new Array<number>();\n            for (let k = 0; k <= o; k++) {\n                temp2.push(0);\n            }\n            temp.push(temp2);\n        }\n        L.push(temp);\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const dp: number[][][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                dp[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= o; k++) {\n                if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = Math.max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return dp[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n  let m = X.length;\n  let n = Y.length;\n  let o = Z.length;\n  let L = new Array(m + 1);\n  for (let i = 0; i <= m; i++) {\n    L[i] = new Array(n + 1);\n    for (let j = 0; j <= n; j++) {\n      L[i][j] = new Array(o + 1);\n      for (let k = 0; k <= o; k++) {\n        L[i][j][k] = 0;\n      }\n    }\n  }\n\n  for (let i = 0; i <= m; i++) {\n    for (let j = 0; j <= n; j++) {\n      for (let k = 0; k <= o; k++) {\n        if (i == 0 || j == 0 || k == 0) {\n          L[i][j][k] = 0;\n        } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n          L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n        } else {\n          L[i][j][k] = Math.max(\n            L[i - 1][j][k],\n            L[i][j - 1][k],\n            L[i][j][k - 1]\n          );\n        }\n      }\n    }\n  }\n  return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length, n = Y.length, o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array.from(Array(m + 1), () => Array(n + 1).fill(0));\n    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                if (result < L[i][j][k])\n                    result = L[i][j][k];\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6zdai22d.js:27:12)\n    at Object.<anonymous> (/tmp/tmp6zdai22d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array.from(Array(m + 1), () => Array(n + 1).fill(0));\n    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n                if (result < L[i][j][k]) {\n                    result = L[i][j][k];\n                }\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpqnyitbgh.js:31:12)\n    at Object.<anonymous> (/tmp/tmpqnyitbgh.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n  let m = X.length;\n  let n = Y.length;\n  let o = Z.length;\n  let L = new Array(m + 1);\n  for (let i = 0; i <= m; i++) {\n    L[i] = new Array(n + 1);\n    for (let j = 0; j <= n; j++) {\n      L[i][j] = new Array(o + 1);\n      for (let k = 0; k <= o; k++) {\n        L[i][j][k] = 0;\n      }\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    for (let j = 0; j <= n; j++) {\n      for (let k = 0; k <= o; k++) {\n        if (i == 0 || j == 0 || k == 0) {\n          L[i][j][k] = 0;\n        } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n          L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n        } else {\n          L[i][j][k] = Math.max(\n            L[i - 1][j][k],\n            L[i][j - 1][k],\n            L[i][j][k - 1]\n          );\n        }\n      }\n    }\n  }\n  return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m: number = X.length;\n    let n: number = Y.length;\n    let o: number = Z.length;\n    let L: number[][][] = [];\n    for (let i: number = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j: number = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k: number = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i: number = 0; i <= m; i++) {\n        for (let j: number = 0; j <= n; j++) {\n            for (let k: number = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m: number = X.length;\n    let n: number = Y.length;\n    let o: number = Z.length;\n    let L: number[][][] = [];\n    for (let i: number = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j: number = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k: number = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i: number = 0; i <= m; i++) {\n        for (let j: number = 0; j <= n; j++) {\n            for (let k: number = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m: number = X.length;\n    let n: number = Y.length;\n    let o: number = Z.length;\n    let L: number[][][] = [];\n    for (let i: number = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j: number = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k: number = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i: number = 0; i <= m; i++) {\n        for (let j: number = 0; j <= n; j++) {\n            for (let k: number = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i === 0 || j === 0 || k === 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    const m = X.length;\n    const n = Y.length;\n    const o = Z.length;\n    const L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i === 0 || j === 0 || k === 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(\n                        L[i - 1][j][k],\n                        L[i][j - 1][k],\n                        L[i][j][k - 1]\n                    );\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0).map(() => new Array(o + 1).fill(0)));\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array.from(Array(m + 1), () => Array(n + 1).fill(0));\n    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                else\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                if (result < L[i][j][k])\n                    result = L[i][j][k];\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp14phwybz.js:27:12)\n    at Object.<anonymous> (/tmp/tmp14phwybz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = [];\n    for (let i = 0; i <= m; i++) {\n        L[i] = [];\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = [];\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i === 0 || j === 0 || k === 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0).map(() => Array(o + 1).fill(0)));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122527,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                }\n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                }\n                else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1).fill(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n  let m = X.length;\n  let n = Y.length;\n  let o = Z.length;\n  let L = new Array(m + 1);\n  for (let i = 0; i <= m; i++) {\n    L[i] = new Array(n + 1);\n    for (let j = 0; j <= n; j++) {\n      L[i][j] = new Array(o + 1);\n    }\n  }\n\n  for (let i = 0; i <= m; i++) {\n    for (let j = 0; j <= n; j++) {\n      for (let k = 0; k <= o; k++) {\n        if (i == 0 || j == 0 || k == 0) {\n          L[i][j][k] = 0;\n        } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n          L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n        } else {\n          L[i][j][k] = Math.max(\n            L[i - 1][j][k],\n            L[i][j - 1][k],\n            L[i][j][k - 1]\n          );\n        }\n      }\n    }\n  }\n\n  return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X: string, Y: string, Z: string): number {\n    let m = X.length;\n    let n = Y.length;\n    let o = Z.length;\n    let L = new Array(m + 1);\n    for (let i = 0; i <= m; i++) {\n        L[i] = new Array(n + 1);\n        for (let j = 0; j <= n; j++) {\n            L[i][j] = new Array(o + 1);\n            for (let k = 0; k <= o; k++) {\n                L[i][j][k] = 0;\n            }\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            for (let k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = Math.max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lcs_of_three;\n  assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);\n  assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);\n  assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);\n}\n\ntest();",
      "timestamp": 1665509981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}