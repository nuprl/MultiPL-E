{
  "name": "mbpp_66_pos_count",
  "language": "ts",
  "prompt": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(pos_count([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] >= 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(pos_count([1, -2, 3, -4, 5, -6, 7, -8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i of list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] >= 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(pos_count([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(pos_count([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(pos_count([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    var count: number = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    var count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(pos_count([1, -2, 3, -4, 5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    var count = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(pos_count([1, 2, 3, -1, -2, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] >= 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to count the number of positive numbers in a list.\nfunction pos_count(list: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pos_count;\n  assert.deepEqual(candidate([1, -2, 3, -4]),2);\n  assert.deepEqual(candidate([3, 4, 5, -1]),3);\n  assert.deepEqual(candidate([1, 2, 3, 4]),4);\n}\n\ntest();",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}