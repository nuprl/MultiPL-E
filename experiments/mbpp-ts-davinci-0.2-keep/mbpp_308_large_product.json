{
  "name": "mbpp_308_large_product",
  "language": "ts",
  "prompt": "//Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max1 = -Infinity;\n        let max2 = -Infinity;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max1 = j;\n                    max2 = k;\n                }\n            }\n        }\n        res.push(max);\n        nums1.splice(max1, 1);\n        nums2.splice(max2, 1);\n    }\n    return res;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\n",
    "    let result: number[] = [];\n    let max1: number = Math.max(...nums1);\n    let max2: number = Math.max(...nums2);\n    let max: number = max1 * max2;\n    let min1: number = Math.min(...nums1);\n    let min2: number = Math.min(...nums2);\n    let min: number = min1 * min2;\n    let temp: number = 0;\n    for (let i: number = 0; i < N; i++) {\n        if (max > min) {\n            temp = max;\n            max = min;\n            min = temp;\n        }\n        for (let j: number = 0; j < nums1.length; j++) {\n            for (let k: number = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                }\n                if (nums1[j] * nums2[k] < min) {\n                    min = nums1[j] * nums2[k];\n                }\n            }\n        }\n        result.push(max);\n        max = min;\n    }\n    return result;\n}\n",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let temp: number = 0;\n    let temp1: number = 0;\n    let temp2: number = 0;\n    let temp3: number = 0;\n    let temp4: number = 0;\n    let temp5: number = 0;\n    let temp6: number = 0;\n    let temp7: number = 0;\n    let temp8: number = 0;\n    let temp9: number = 0;\n    let temp10: number = 0;\n    let temp11: number = 0;\n    let temp12: number = 0;\n    let temp13: number = 0;\n    let temp14: number = 0;\n    let temp15: number = 0;\n    let temp16: number = 0;\n    let temp17: number = 0;\n    let temp18: number = 0;\n    let temp19: number = 0;\n    let temp20: number = 0;\n    let temp21: number = 0;\n    let temp22: number = 0;\n    let temp23: number = 0;\n    let temp24: number = 0;\n    let temp25: number = 0;\n    let temp26: number = 0;\n    let temp27: number = 0;\n    let temp28: number = 0;\n    let temp29: number = 0;\n    let temp30: number = 0;\n    let temp31: number = 0;\n    let temp32: number = 0;\n    let temp33: number = 0;\n    let temp34: number = 0;\n    let temp35: number = 0;\n    let temp36: number = 0;\n    let temp37: number = 0;\n    let temp38: number = 0;\n    let temp39: number = 0;\n    let temp40: number = 0;\n    let temp41: number = 0;\n    let temp42: number = 0;\n    let temp43: number = 0;\n    let temp44: number = 0;\n    let temp45: number = 0;\n    let temp46: number = 0;\n    let temp47: number",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        res.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return res;\n}\n",
    "    let result: number[] = [];\n    let max1: number = Math.max(...nums1);\n    let max2: number = Math.max(...nums2);\n    let max: number = max1 * max2;\n    for (let i = 0; i < N; i++) {\n        result.push(max);\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] < max) {\n                    max = nums1[j] * nums2[k];\n                }\n            }\n        }\n    }\n    return result;\n}\n",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let res: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (N > 0) {\n        if (nums1[i] * nums2[j] > nums1[i + 1] * nums2[j]) {\n            res.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            res.push(nums1[i + 1] * nums2[j]);\n            i++;\n        }\n        N--;\n    }\n    return res;\n}\n",
    "    let res = [];\n    let i = 0;\n    let j = 0;\n    while (N > 0) {\n        if (nums1[i] * nums2[j] > nums1[i + 1] * nums2[j]) {\n            res.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            res.push(nums1[i + 1] * nums2[j]);\n            i++;\n        }\n        N--;\n    }\n    return res;\n}\n",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "  let result = [];\n  let max = 0;\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      let product = nums1[i] * nums2[j];\n      if (product > max) {\n        result.push(product);\n        max = product;\n      }\n    }\n  }\n  return result.sort((a, b) => b - a).slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\n",
    "    let result: number[] = [];\n    let nums1_sorted = nums1.sort((a, b) => b - a);\n    let nums2_sorted = nums2.sort((a, b) => b - a);\n    let i = 0;\n    let j = 0;\n    while (result.length < N) {\n        if (nums1_sorted[i] * nums2_sorted[j] > nums1_sorted[i] * nums2_sorted[j + 1]) {\n            result.push(nums1_sorted[i] * nums2_sorted[j]);\n            j++;\n        } else {\n            result.push(nums1_sorted[i] * nums2_sorted[j + 1]);\n            i++;\n        }\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 3));\n",
    "    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n",
    "    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n"
  ]
}