{
  "name": "mbpp_129_magic_square_test",
  "language": "ts",
  "prompt": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_reverse_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_reverse_diagonal: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n            sum_of_all_elements_in_row += my_matrix[i][j];\n            sum_of_all_elements_in_column += my_matrix[j][i];\n            if (i === j) {\n                sum_of_all_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_all_elements_in_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_all_elements_in_row);\n        sum_of_columns.push(sum_of_all_elements_in_column);\n        sum_of_diagonals.push(sum_of_all_elements_in_diagonal);\n        sum_of_reverse_diagonals.push(sum_of_all_elements_in_reverse_diagonal);\n        sum_of_all_elements_in_row = 0;\n        sum_of_all_elements_in_column = 0",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_diagonal_2_1: number = 0;\n    let sum_of_diagonal_2_2: number = 0;\n    let sum_of_diagonal_2_3: number = 0;\n    let sum_of_diagonal_2_4: number = 0;\n    let sum_of_diagonal_2_5: number = 0;\n    let sum_of_diagonal_2_6: number = 0;\n    let sum_of_diagonal_2_7: number = 0;\n    let sum_of_diagonal_2_8: number = 0;\n    let sum_of_diagonal_2_9: number = 0;\n    let sum_of_diagonal_2_10: number = 0;\n    let sum_of_diagonal_2_11: number = 0;\n    let sum_of_diagonal_2_12: number = 0;\n    let sum_of_diagonal_2_13: number = 0;\n    let sum_of_diagonal_2_14: number = 0;\n    let sum_of_diagonal_2_15: number = 0;\n    let sum_of_diagonal_2_16: number = 0;\n    let sum_of_diagonal_2_17: number = 0;\n    let sum_of_diagonal_2_18: number = 0;\n    let sum_of_diagonal_2_19: number = 0;\n    let sum_of_diagonal_2_20: number = 0;\n    let sum_of_diagonal_2_21: number = 0;\n    let sum_of",
    "    let sum: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_col) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diag_1 || sum !== sum_diag_2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n",
    "    let magic_number: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row_test: number = 0;\n    let sum_col_test: number = 0;\n    let sum_diag_test: number = 0;\n    let sum_diag_2_test: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = sum_row + my_matrix[0][i];\n        sum_col = sum_col + my_matrix[i][0];\n        sum_diag = sum_diag + my_matrix[i][i];\n        sum_diag_2 = sum_diag_2 + my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row_test = 0;\n        sum_col_test = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row_test = sum_row_test + my_matrix[i][j];\n            sum_col_test = sum_col_test + my_matrix[j][i];\n        }\n        if (sum_row_test != sum_row || sum_col_test != sum_col) {\n            magic_square = false;\n        }\n    }\n    if (sum_diag != sum_row || sum_diag_2 != sum_row) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_di",
    "    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] !== sum_of_cols[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diags.length; i++) {\n        if (sum_of_diags[i] !== sum_of_diags[",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        sum_of_rows.push(row_sum);\n        sum_of_columns.push(column_sum);\n    }\n    let diagonal_sum_1: number = 0;\n    let diagonal_sum_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        diagonal_sum_1 += my_matrix[i][i];\n        diagonal_sum_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(diagonal_sum_1);\n    sum_of_diagonals.push(diagonal_sum_2);\n\n    let sum_of_rows_set = new Set(sum_of_rows);\n    let sum_of_columns_set = new Set(sum_of_columns);\n    let sum_of_diagonals_set = new Set(sum_of_diagonals);\n\n    if (sum_of_rows_set.size == 1 && sum_of_columns_set.size == 1 && sum_of_diagonals_set.size == 1) {\n        return true;\n    }\n    return false;\n}\n",
    "    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    let magic_square: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_col = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_of_diagonal = sum_of_row;\n        }\n        if (i == my_matrix.length - 1) {\n            sum_of_reverse_diagonal = sum_of_row;\n        }\n        if (sum_of_row != sum_of_diagonal || sum_of_col != sum_of_diagonal) {\n            magic_square = false;\n        }\n    }\n    if (sum_of_diagonal != sum_of_reverse_diagonal) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n",
    "    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_diagonal_1 || sum_column != sum_diagonal_1) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let sum_of_row = 0;\n    let sum_of_col = 0;\n    let sum_of_diag = 0;\n    let sum_of_rev_diag = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_rev_diag += my_matrix[i][j];\n            }\n        }\n        if (sum_of_row != sum_of_col || sum_of_row != sum_of_diag || sum_of_row != sum_of_rev_diag) {\n            return false;\n        }\n        sum_of_row = 0;\n        sum_of_col = 0;\n    }\n    return true;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(0);\n        sum_of_columns.push(0);\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n    sum_of_diagonals.push(0);\n    sum_of_diagonals.push(0);\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    let sum_of_all_sums: number = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        sum_of_all_sums += sum_of_rows[i];\n        sum_of_all_sums += sum_of_columns[i];\n    }\n    sum_of_all_sums += sum_of_diagonals[0];\n    sum_of_all_sums += sum_of_diagonals[1];\n    if (sum_of_all_sums / (sum_of_rows.length * 2 + 2) === sum_of_all_elements / (sum_of_rows.length * sum_of_rows.length)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_columns[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n            if (i === j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n    sum_of_all = sum_of_rows[0];\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_elements: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[0]) {\n",
    "    let sum_of_row: number[] = [];\n    let sum_of_column: number[] = [];\n    let sum_of_diagonal: number[] = [];\n    let sum_of_reverse_diagonal: number[] = [];\n    let sum: number = 0;\n    let sum_of_all_elements: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_row.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_column.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonal.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_reverse_diagonal.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < sum_of_row.length; i++) {\n        if (sum_of_row[i] != sum_of_all_elements || sum_of_column[i] != sum_of_all_elements || sum",
    "    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_row_2: number = 0;\n    let sum_col_2: number = 0;\n    let sum_row_3: number = 0;\n    let sum_col_3: number = 0;\n    let sum_row_4: number = 0;\n    let sum_col_4: number = 0;\n    let sum_row_5: number = 0;\n    let sum_col_5: number = 0;\n    let sum_row_6: number = 0;\n    let sum_col_6: number = 0;\n    let sum_row_7: number = 0;\n    let sum_col_7: number = 0;\n    let sum_row_8: number = 0;\n    let sum_col_8: number = 0;\n    let sum_row_9: number = 0;\n    let sum_col_9: number = 0;\n    let sum_row_10: number = 0;\n    let sum_col_10: number = 0;\n    let sum_row_11: number = 0;\n    let sum_col_11: number = 0;\n    let sum_row_12: number = 0;\n    let sum_col_12: number = 0;\n    let sum_row_13: number = 0;\n    let sum_col_13: number = 0;\n    let sum_row_14: number = 0;\n    let sum_col_14: number = 0;\n    let sum_row_15: number = 0;\n    let sum_col_15: number = 0;\n    let sum_row_16: number = 0;\n    let sum_col_16: number = 0;\n    let sum_row_17: number = 0;\n    let sum_col_17: number = 0;\n    let sum_row_18: number = 0;\n    let sum_col_18: number = 0;\n    let sum_row_19: number = 0;\n    let sum_col_",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_reverse_diagonal: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_row += my_matrix[i][j];\n            sum_of_elements_in_column += my_matrix[j][i];\n            if (i == j) {\n                sum_of_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_elements_in_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_elements_in_row);\n        sum_of_columns.push(sum_of_elements_in_column);\n        sum_of_elements_in_row = 0;\n        sum_of_elements_in_column = 0;\n    }\n    sum_of_diagonals.push(sum_of_elements_in_diagonal);\n    sum_of_diagonals.push(sum_of_elements_in_reverse_",
    "    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let magic_number: number = 0;\n    let magic_number2: number = 0;\n    let magic_number3: number = 0;\n    let magic_number4: number = 0;\n    let magic_number5: number = 0;\n    let magic_number6: number = 0;\n    let magic_number7: number = 0;\n    let magic_number8: number = 0;\n    let magic_number9: number = 0;\n    let magic_number10: number = 0;\n    let magic_number11: number = 0;\n    let magic_number12: number = 0;\n    let magic_number13: number = 0;\n    let magic_number14: number = 0;\n    let magic_number15: number = 0;\n    let magic_number16: number = 0;\n    let magic_number17: number = 0;\n    let magic_number18: number = 0;\n    let magic_number19: number = 0;\n    let magic_number20: number = 0;\n    let magic_number21: number = 0;\n    let magic_number22: number = 0;\n    let magic_number23: number = 0;\n    let magic_number24: number = 0;\n    let magic_number25: number = 0;\n    let magic_number26: number = 0;\n    let magic_number27: number = 0;\n    let magic_number28: number = 0;\n    let magic_number29: number = 0;\n    let magic_number30: number = 0;\n    let magic_number31: number = 0;\n    let magic_number32: number = 0;\n    let magic_number33: number = 0;\n    let magic_number34: number = 0;\n    let magic_number35: number = 0;\n    let magic_number36: number = 0;\n    let magic_number37: number = 0;\n    let magic_number38: number = 0;\n    let magic_number39: number =",
    "    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_prev: number = 0;\n    let sum_col_prev: number = 0;\n    let sum_diag_prev: number = 0;\n    let sum_diag2_prev: number = 0;\n    let isMagic: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i == j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        if (i > 0) {\n            if (sum_row != sum_row_prev || sum_col != sum_col_prev || sum_diag != sum_diag_prev || sum_diag2 != sum_diag2_prev) {\n                isMagic = false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag_prev = sum_diag;\n        sum_diag2_prev = sum_diag2;\n        sum_row = 0;\n        sum_col = 0;\n    }\n    return isMagic;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag_2: number[] = [];\n    let sum: number = 0;\n    let sum_2: number = 0;\n    let sum_3: number = 0;\n    let sum_4: number = 0;\n    let sum_5: number = 0;\n    let sum_6: number = 0;\n    let sum_7: number = 0;\n    let sum_8: number = 0;\n    let sum_9: number = 0;\n    let sum_10: number = 0;\n    let sum_11: number = 0;\n    let sum_12: number = 0;\n    let sum_13: number = 0;\n    let sum_14: number = 0;\n    let sum_15: number = 0;\n    let sum_16: number = 0;\n    let sum_17: number = 0;\n    let sum_18: number = 0;\n    let sum_19: number = 0;\n    let sum_20: number = 0;\n    let sum_21: number = 0;\n    let sum_22: number = 0;\n    let sum_23: number = 0;\n    let sum_24: number = 0;\n    let sum_25: number = 0;\n    let sum_26: number = 0;\n    let sum_27: number = 0;\n    let sum_28: number = 0;\n    let sum_29: number = 0;\n    let sum_30: number = 0;\n    let sum_31: number = 0;\n    let sum_32: number = 0;\n    let sum_33: number = 0;\n    let sum_34: number = 0;\n    let sum_35: number = 0;\n    let sum_36: number = 0;\n    let sum_37: number = 0;\n    let sum_38: number = 0;\n    let sum_39: number = 0;\n    let sum_40: number = 0;\n    let sum_41: number = 0;\n    let sum_42",
    "    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_prev: number = 0;\n    let sum_col_prev: number = 0;\n    let sum_diag_prev: number = 0;\n    let sum_diag2_prev: number = 0;\n    let is_magic: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i == j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        if (sum_row_prev != 0 && sum_row_prev != sum_row) {\n            is_magic = false;\n        }\n        if (sum_col_prev != 0 && sum_col_prev != sum_col) {\n            is_magic = false;\n        }\n        if (sum_diag_prev != 0 && sum_diag_prev != sum_diag) {\n            is_magic = false;\n        }\n        if (sum_diag2_prev != 0 && sum_diag2_prev != sum_diag2) {\n            is_magic = false;\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag_prev = sum_diag;\n        sum_diag2_prev = sum_diag2;\n        sum_row = 0;\n        sum_col = 0;\n        sum_diag = 0;\n        sum_diag2 = 0;\n    }\n    return is_magic;\n}\n"
  ]
}