{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "ts",
  "prompt": "//Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore(text: string): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_lowercase_underscore;\n  assert.deepEqual(candidate(\"aab_cbbbc\"),true);\n  assert.deepEqual(candidate(\"aab_Abbbc\"),false);\n  assert.deepEqual(candidate(\"Aaab_abbbc\"),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /[a-z]+_[a-z]+/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n"
  ]
}