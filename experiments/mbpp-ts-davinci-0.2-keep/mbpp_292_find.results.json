{
  "name": "mbpp_292_find",
  "language": "ts",
  "prompt": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\nconsole.log(find(5, 3));\nconsole.log(find(5, 4));\nconsole.log(find(5, 5));\nconsole.log(find(5, 6));\nconsole.log(find(5, 7));\nconsole.log(find(5, 8));\nconsole.log(find(5, 9));\nconsole.log(find(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n1\n1\n1\n0\n0\n0\n0\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n  return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n  return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n  return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(7, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(4, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n  return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(7, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(10, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n  return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n: number, m: number): number {\n    return Math.floor(n / m);\n}\nconsole.log(find(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find;\n  assert.deepEqual(candidate(10, 3),3);\n  assert.deepEqual(candidate(4, 2),2);\n  assert.deepEqual(candidate(20, 5),4);\n}\n\ntest();",
      "timestamp": 1665517135,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}