{
  "name": "mbpp_632_move_zero",
  "language": "ts",
  "prompt": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number = 0;\n    let b: number = num_list.length - 1;\n\n    while (a < b) {\n        while (num_list[a] != 0) {\n            a++;\n        }\n        while (num_list[b] == 0) {\n            b--;\n        }\n        if (a < b) {\n            let temp = num_list[a];\n            num_list[a] = num_list[b];\n            num_list[b] = temp;\n        }\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 12, 1, 3, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  2,\n  3,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpv_u537di.js:24:12)\n    at Object.<anonymous> (/tmp/tmpv_u537di.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2, 3, 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,0,3,12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let output: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    output = b.concat(a);\n    return output;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a = [0, 0, 0];\n    let b = num_list.filter(val => val != 0);\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpr_2ia5i8.js:11:12)\n    at Object.<anonymous> (/tmp/tmpr_2ia5i8.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    0, 0, 0\n  ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number = 0;\n    let b: number = num_list.length - 1;\n\n    while (a < b) {\n        while (num_list[a] != 0) {\n            a++;\n        }\n        while (num_list[b] == 0) {\n            b--;\n        }\n        if (a < b) {\n            let temp: number = num_list[a];\n            num_list[a] = num_list[b];\n            num_list[b] = temp;\n        }\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 12, 1, 3, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  2,\n  3,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp2d9z7szo.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2d9z7szo.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2, 3, 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let output: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    output = b.concat(a);\n    return output;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,0,3,12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let output: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    output = b.concat(a);\n    return output;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let output: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    output = b.concat(a);\n    return output;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n  let a: number[] = [];\n  let b: number[] = [];\n\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] != 0) {\n      a.push(num_list[i]);\n    } else {\n      b.push(num_list[i]);\n    }\n  }\n\n  return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let output: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    output = b.concat(a);\n    return output;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number = 0;\n    let b: number = num_list.length - 1;\n    while (a < b) {\n        while (num_list[a] != 0) {\n            a++;\n        }\n        while (num_list[b] == 0) {\n            b--;\n        }\n        if (a < b) {\n            num_list[a] = num_list[b];\n            num_list[b] = 0;\n        }\n    }\n    return num_list;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 12, 1, 3, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  2,\n  3,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpooav3su8.js:23:12)\n    at Object.<anonymous> (/tmp/tmpooav3su8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2, 3, 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\nconsole.log(move_zero([1, 2, 0, 0, 2, 312, 33, 0, 0]));\nconsole.log(move_zero([0, 0, 0]));\nconsole.log(move_zero([1, 2, 312, 11, 2]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n[\n  1, 2, 2, 312, 33,\n  0, 0, 0,   0\n]\n[ 0, 0, 0 ]\n[ 1, 2, 312, 11, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 6,\n  0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a = [0, 0, 0];\n    let b = num_list.filter(val => val != 0);\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4]));\nconsole.log(move_zero([1, 2, 3, 4, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 4,\n  0, 0, 0\n]\n[\n  1, 2, 3, 4,\n  0, 0, 0\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp0rt9hcso.js:12:12)\n    at Object.<anonymous> (/tmp/tmp0rt9hcso.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    0, 0, 0\n  ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  0, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,0,3,12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,0,3,12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number = 0;\n    let b: number = num_list.length - 1;\n    while (a < b) {\n        while (num_list[a] != 0) {\n            a++;\n        }\n        while (num_list[b] == 0) {\n            b--;\n        }\n        if (a < b) {\n            num_list[a] = num_list[b];\n            num_list[b] = 0;\n        }\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 12, 1, 3, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  2,\n  3,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpxdd5hlo5.js:23:12)\n    at Object.<anonymous> (/tmp/tmpxdd5hlo5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2, 3, 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nlet num_list: number[] = [0, 1, 0, 3, 12];\nconsole.log(move_zero(num_list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a = [0, 0, 0];\n    let b = num_list.filter(val => val != 0);\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 0, 0, 0\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp2bjb0y3o.js:11:12)\n    at Object.<anonymous> (/tmp/tmp2bjb0y3o.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    0, 0, 0\n  ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]));\nconsole.log(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let output: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    output = b.concat(a);\n    return output;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12, 0]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12, 0]));\nconsole.log(move_zero([1, 2, 0, 1, 0, 1, 0, 3, 0, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  12, 10,  8, 12, 7, 6,\n   4, 10, 12,  0, 0, 0,\n   0\n]\n[\n  12, 10,  8, 12, 7, 6,\n   4, 10, 12,  0, 0, 0,\n   0\n]\n[\n  1, 2, 1, 1, 3,\n  1, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]));\nconsole.log(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]));\nconsole.log(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        }\n        else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  0, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let output: number[] = [];\n    for (let i in num_list) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    output = b.concat(a);\n    return output;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12, 0]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12, 0]));\nconsole.log(move_zero([1, -5, 0, 0, 8, 12, -2]));\nconsole.log(move_zero([1, -5, 0, 0, 8, 12, -2]));\nconsole.log(move_zero([0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1]));\nconsole.log(move_zero([0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  12, 10,  8, 12, 7, 6,\n   4, 10, 12,  0, 0, 0,\n   0\n]\n[\n  12, 10,  8, 12, 7, 6,\n   4, 10, 12,  0, 0, 0,\n   0\n]\n[\n   1, -5, 8, 12,\n  -2,  0, 0\n]\n[\n   1, -5, 8, 12,\n  -2,  0, 0\n]\n[\n  1, 1, 1, 1, 1, 0,\n  0, 0, 0, 0, 0, 0,\n  0\n]\n[\n  1, 1, 1, 1, 1, 0,\n  0, 0, 0, 0, 0, 0,\n  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a = [0, 0, 0];\n    let b = num_list.filter(val => val != 0);\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 4,\n  0, 0, 0\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp2j17vz87.js:11:12)\n    at Object.<anonymous> (/tmp/tmp2j17vz87.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    0, 0, 0\n  ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a = [0, 0];\n    let b = num_list.filter(num => num !== 0);\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 2, 3, 6, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpj3v7aqvm.js:12:12)\n    at Object.<anonymous> (/tmp/tmpj3v7aqvm.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 2, 4,\n    5, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  0, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        }\n        else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12, 0]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12, 0]));\nconsole.log(move_zero([1, 2, 0, 1, 0, 1, 0, 3, 0, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  12, 10,  8, 12, 7, 6,\n   4, 10, 12,  0, 0, 0,\n   0\n]\n[\n  12, 10,  8, 12, 7, 6,\n   4, 10, 12,  0, 0, 0,\n   0\n]\n[\n  1, 2, 1, 1, 3,\n  1, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]));\nconsole.log(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  0, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number = 0;\n    let b: number = num_list.length - 1;\n\n    while (a < b) {\n        while (num_list[a] != 0) {\n            a++;\n        }\n        while (num_list[b] == 0) {\n            b--;\n        }\n        if (a < b) {\n            num_list[a] = num_list[b];\n            num_list[b] = 0;\n        }\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "[ 12, 1, 3, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  2,\n  3,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpv6mhr6w_.js:23:12)\n    at Object.<anonymous> (/tmp/tmpv6mhr6w_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2, 3, 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        }\n        else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number = 0;\n    let b: number = num_list.length - 1;\n\n    while (a < b) {\n        while (num_list[a] != 0) {\n            a++;\n        }\n        while (num_list[b] == 0) {\n            b--;\n        }\n        if (a < b) {\n            num_list[a] = num_list[b];\n            num_list[b] = 0;\n        }\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "[ 12, 1, 3, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  2,\n  3,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpv6mhr6w_.js:23:12)\n    at Object.<anonymous> (/tmp/tmpv6mhr6w_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2, 3, 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0,1,0,3,12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510527,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n\n    for (let i in num_list) {\n        if (num_list[i] != 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n\n    return a.concat(b);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list: number[]): number[] {\n    let a = [0, 0];\n    let b = num_list.filter(function (num) {\n        return num !== 0;\n    });\n    return b.concat(a);\n}\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "[ 1, 2, 3, 4, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp1w7heai1.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1w7heai1.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 2, 4,\n    5, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}