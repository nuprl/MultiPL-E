{
  "name": "mbpp_91_find_substring",
  "language": "ts",
  "prompt": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let str_len: number = str1.length;\n    let sub_str_len: number = sub_str.length;\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    for (i = 0; i < str_len; i++) {\n        for (j = 0; j < sub_str_len; j++) {\n            if (str1[i] == sub_str[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == sub_str_len) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet str1: string[] = ['a', 'b', 'c', 'd', 'e'];\nlet sub_str: string = 'abc';\nlet res: boolean = find_substring(str1, sub_str);\nconsole.log(res);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt5f_hthf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpt5f_hthf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let i: number;\n    for (i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\"];\nlet sub_str: string = \"or\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510190,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"ipsum\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510190,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'test'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            flag = true;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'in'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'what'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'searching'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'banana'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hi\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let str2 = str1.join('');\n    return str2.includes(sub_str);\n}\n\nconsole.log(find_substring(['hello', 'world'], 'hello'));\nconsole.log(find_substring(['hello', 'world'], 'hi'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'aaa'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let str_len: number = str1.length;\n    let sub_str_len: number = sub_str.length;\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < str_len; i++) {\n        for (j = 0; j < sub_str_len; j++) {\n            if (str1[i] == sub_str[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hi\";\nlet result: boolean = find_substring(str1, sub_str);\nconsole.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp72yvb9vu.js:27:12)\n    at Object.<anonymous> (/tmp/tmp72yvb9vu.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this is a test', 'this is a test', 'this is a test'], 'this is a test'));\nconsole.log(find_substring(['this is a test', 'this is a test', 'this is a test'], 'this is a test'));\nconsole.log(find_substring(['this is a test', 'this is a test', 'this is a test'], 'this is a test'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"llo\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"lloo\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'lo'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'lor'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'xyz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510190,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'krishna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'krishna'], 'krishna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'krishna'], 'krish'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"lo\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            count++;\n        }\n    }\n    if (count > 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'are'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    return str1.some(str => str.includes(sub_str));\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'test'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'searching'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"llo\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hey\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n  let result: boolean = false;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].includes(sub_str)) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    str1.forEach(function (value) {\n        if (value.includes(sub_str)) {\n            result = true;\n        }\n    });\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'are'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n  let result = false;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].includes(sub_str)) {\n      result = true;\n    }\n  }\n  return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['abc', 'def', 'ghi'], 'de'));\nconsole.log(find_substring(['abc', 'def', 'ghi'], 'xyz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'test'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\nconsole.log(find_substring(['hello', 'world'], 'he'));\nconsole.log(find_substring(['hello', 'world'], 'hi'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) >= 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"lo\"));\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"lor\"));\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"lorx\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'are'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hi\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nlet str1 = ['this', 'is', 'my', 'cat'];\nconsole.log(find_substring(str1, 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'orz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n  let result = false;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].includes(sub_str)) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    var i: number;\n    var j: number;\n    var k: number;\n    var flag: boolean = false;\n    for (i = 0; i < str1.length; i++) {\n        for (j = 0; j < str1[i].length; j++) {\n            for (k = 0; k < sub_str.length; k++) {\n                if (str1[i][j + k] == sub_str[k]) {\n                    flag = true;\n                }\n                else {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag == true) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nvar str1: string[] = [\"hello\", \"world\", \"hi\"];\nvar sub_str: string = \"hi\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    var i: number;\n    var j: number;\n    var k: number;\n    var flag: boolean = false;\n    for (i = 0; i < str1.length; i++) {\n        for (j = 0; j < str1[i].length; j++) {\n            if (str1[i][j] == sub_str[0]) {\n                for (k = 0; k < sub_str.length; k++) {\n                    if (str1[i][j + k] == sub_str[k]) {\n                        flag = true;\n                    }\n                    else {\n                        flag = false;\n                        break;\n                    }\n                }\n                if (flag == true) {\n                    break;\n                }\n            }\n        }\n        if (flag == true) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "../../../../tmp/tmpepgwewak.ts(26,44): error TS1002: Unterminated string literal.\n../../../../tmp/tmpepgwewak.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpepgwewak.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    return str1.some(str => str.includes(sub_str));\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'orx'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nlet str1: string[] = ['hello', 'world', 'hi'];\nlet sub_str: string = 'world';\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"hi\", \"how are you\"];\nlet sub_str: string = \"hi\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) >= 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122713,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'aaa'));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122715,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122715,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'test'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122715,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n        }\n    }\n    return found;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122715,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'foo'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hi\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].includes(sub_str)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'banana'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'na'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'Anna'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'no'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'not'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'banana'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            found = true;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"lo\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nconsole.log(find_substring(str1, \"ips\"));\nconsole.log(find_substring(str1, \"ip\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'z'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world'], 'hello'));\nconsole.log(find_substring(['hello', 'world'], 'hi'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    str1.forEach(function (value) {\n        if (value.includes(sub_str)) {\n            result = true;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122715,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'llo'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122710,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122716,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) !== -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122717,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122717,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['abc', 'def', 'ghi'], 'def'));\nconsole.log(find_substring(['abc', 'def', 'ghi'], 'xyz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122717,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510189,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"lo\"));\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"lor\"));\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"lorx\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122717,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n  let result: boolean = false;\n  str1.forEach(function(value) {\n    if (value.includes(sub_str)) {\n      result = true;\n    }\n  });\n  return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122717,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122707,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}