{
  "name": "mbpp_619_move_num",
  "language": "ts",
  "prompt": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"abcd1234\"));\n",
    "    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n",
    "    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n",
    "    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\nconsole.log(move_num(\"a1b2c3\"));\n",
    "    let num_str = \"\";\n    let alpha_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"));\n",
    "    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n",
    "    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n",
    "    let result = \"\";\n    let nums = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n",
    "  let nums = test_str.match(/\\d+/g);\n  let chars = test_str.match(/[a-zA-Z]+/g);\n  return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n",
    "    let str = test_str.split('');\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n",
    "    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\n",
    "    let num_str: string = \"\";\n    let alpha_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            alpha_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n",
    "    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n",
    "    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n",
    "    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return char_arr.join(\"\") + num_arr.join(\"\");\n}\n",
    "    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n",
    "    let str = test_str.split(\"\");\n    let num = [];\n    let char = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            char.push(str[i]);\n        } else {\n            num.push(str[i]);\n        }\n    }\n    return char.join(\"\") + num.join(\"\");\n}\n\nconsole.log(move_num(\"abcd1234\"));\n",
    "    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n",
    "    let new_str: string = \"\";\n    let num_str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n",
    "    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd123\"));\n"
  ]
}