{
  "name": "mbpp_130_max_occurrences",
  "language": "ts",
  "prompt": "//Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences(nums: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n        if (counts[num] > max) {\n            max = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n",
    "    let max: number = 0;\n    let max_num: number = 0;\n    let count: number = 0;\n    for (let i: number = 0; i < nums.length; i++) {\n        for (let j: number = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n",
    "  let max_count = 0;\n  let max_item = 0;\n  let counts = new Map<number, number>();\n  for (let num of nums) {\n    let count = counts.get(num) || 0;\n    counts.set(num, count + 1);\n    if (count + 1 > max_count) {\n      max_count = count + 1;\n      max_item = num;\n    }\n  }\n  return max_item;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n",
    "    let max_occurrences = 0;\n    let max_num = 0;\n    let occurrences = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (occurrences[nums[i]]) {\n            occurrences[nums[i]]++;\n        } else {\n            occurrences[nums[i]] = 1;\n        }\n        if (occurrences[nums[i]] > max_occurrences) {\n            max_occurrences = occurrences[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let num of nums) {\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]]++;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n        if (num_count[nums[i]] > max) {\n            max = num_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1",
    "    let max: number = 0;\n    let max_num: number = 0;\n    let count: number = 0;\n    let count_num: number = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count_num = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[j] === count_num) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = count_num;\n        }\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]] === undefined) {\n            num_count[nums[i]] = 1;\n        } else {\n            num_count[nums[i]] += 1;\n        }\n    }\n    for (let key in num_count) {\n        if (num_count[key] > max) {\n            max = num_count[key];\n            max_num = key;\n        }\n    }\n    return parseInt(max_num);\n}\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]] === undefined) {\n            num_count[nums[i]] = 1;\n        } else {\n            num_count[nums[i]] += 1;\n        }\n    }\n    for (let num in num_count) {\n        if (num_count[num] > max) {\n            max = num_count[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}",
    "    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
  ]
}