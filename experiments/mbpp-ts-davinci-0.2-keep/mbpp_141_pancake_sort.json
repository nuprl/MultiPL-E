{
  "name": "mbpp_141_pancake_sort",
  "language": "ts",
  "prompt": "//Write a function to sort a list of elements.\nfunction pancake_sort(nums: number[]): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pancake_sort;\n  assert.deepEqual(candidate([15, 79, 25, 38, 69]),[15, 25, 38, 69, 79]);\n  assert.deepEqual(candidate([98, 12, 54, 36, 85]),[12, 36, 54, 85, 98]);\n  assert.deepEqual(candidate([41, 42, 32, 12, 23]),[12, 23, 32, 41, 42]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    for (let i = nums.length - 1; i > 0; i--) {\n        let max_index = i;\n        for (let j = 0; j < i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        flip(nums, max_index);\n        flip(nums, i);\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i > 0; i--) {\n        let max_index = 0;\n        for (let j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index !== i) {\n            flip(nums, max_index);\n            flip(nums, i);\n        }\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i >= 1; i--) {\n        let max_idx = 0;\n        for (let j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_idx]) {\n                max_idx = j;\n            }\n        }\n        if (max_idx == i) continue;\n        flip(nums, max_idx);\n        flip(nums, i);\n    }\n    return nums;\n}\n",
    "    let n = nums.length;\n    while (n > 1) {\n        let max_index = 0;\n        for (let i = 1; i < n; i++) {\n            if (nums[i] > nums[max_index]) {\n                max_index = i;\n            }\n        }\n        flip(nums, max_index);\n        flip(nums, n - 1);\n        n--;\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i > 0; i--) {\n        let max_index = find_max_index(nums, i);\n        if (max_index !== i) {\n            flip(nums, max_index);\n            flip(nums, i);\n        }\n    }\n    return nums;\n}\n",
    "  for (let i = nums.length - 1; i > 0; i--) {\n    let max_index = 0;\n    for (let j = 0; j <= i; j++) {\n      if (nums[j] > nums[max_index]) {\n        max_index = j;\n      }\n    }\n    flip(nums, max_index);\n    flip(nums, i);\n  }\n  return nums;\n}\n",
    "    for (let i = nums.length - 1; i >= 0; i--) {\n        let max_index = find_max_index(nums, i);\n        if (max_index !== i) {\n            flip(nums, max_index);\n            flip(nums, i);\n        }\n    }\n    return nums;\n}\n",
    "    let n = nums.length;\n    for (let i = 0; i < n; i++) {\n        let max = Math.max(...nums.slice(0, n - i));\n        let maxIndex = nums.indexOf(max);\n        nums = flip(nums, maxIndex + 1);\n        nums = flip(nums, n - i);\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i >= 0; i--) {\n        let max_index = find_max_index(nums, i);\n        if (max_index !== i) {\n            flip(nums, max_index);\n            flip(nums, i);\n        }\n    }\n    return nums;\n}\n",
    "    let i = nums.length;\n    while (i > 1) {\n        let max_index = find_max_index(nums, i);\n        if (max_index != i - 1) {\n            flip(nums, max_index);\n            flip(nums, i - 1);\n        }\n        i--;\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i >= 0; i--) {\n        let max_index = find_max_index(nums, i);\n        flip(nums, max_index);\n        flip(nums, i);\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i > 0; i--) {\n        let max_index = 0;\n        for (let j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        flip(nums, max_index);\n        flip(nums, i);\n    }\n    return nums;\n}\n",
    "    let i = nums.length;\n    while (i > 0) {\n        let max = nums.indexOf(Math.max(...nums.slice(0, i)));\n        if (max !== i - 1) {\n            nums = flip(nums, max);\n            nums = flip(nums, i - 1);\n        }\n        i--;\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i >= 0; i--) {\n        let max_index = find_max_index(nums, i);\n        flip(nums, max_index);\n        flip(nums, i);\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i >= 1; i--) {\n        let max_idx = find_max_idx(nums, i);\n        if (max_idx !== i) {\n            flip(nums, max_idx);\n            flip(nums, i);\n        }\n    }\n    return nums;\n}\n",
    "  for (let i = nums.length - 1; i > 0; i--) {\n    let max_index = find_max_index(nums, i);\n    if (max_index !== i) {\n      flip(nums, max_index);\n      flip(nums, i);\n    }\n  }\n  return nums;\n}\n",
    "    for (let i = nums.length - 1; i >= 0; i--) {\n        let max = nums[0];\n        let maxIndex = 0;\n        for (let j = 0; j <= i; j++) {\n            if (nums[j] > max) {\n                max = nums[j];\n                maxIndex = j;\n            }\n        }\n        if (maxIndex !== i) {\n            flip(nums, maxIndex);\n            flip(nums, i);\n        }\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i > 0; i--) {\n        let max_index = find_max_index(nums, i);\n        if (max_index !== i) {\n            flip(nums, max_index);\n            flip(nums, i);\n        }\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i > 0; i--) {\n        let max_index = 0;\n        for (let j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        flip(nums, max_index);\n        flip(nums, i);\n    }\n    return nums;\n}\n",
    "    for (let i = nums.length - 1; i > 0; i--) {\n        let max_index = 0;\n        for (let j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        flip(nums, max_index);\n        flip(nums, i);\n    }\n    return nums;\n}\n"
  ]
}