{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "ts",
  "prompt": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let dirty_chars: string[] = second_string.split('');\n    let clean_string: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (dirty_chars.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('abcdef', 'ab'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "cdef\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n        if (second_string.indexOf(char) == -1) {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    let dirty_chars: string[] = second_string.split(\"\");\n    for (let i: number = 0; i < string.length; i++) {\n        if (dirty_chars.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('abcdefghijklmnopqrstuvwxyz', 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "defghijklmnopqrstuvwxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n        if (second_string.indexOf(char) == -1) {\n            result += char;\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    let dirty_chars: string[] = second_string.split(\"\");\n    let clean_chars: string[] = string.split(\"\");\n    for (let i: number = 0; i < clean_chars.length; i++) {\n        if (dirty_chars.indexOf(clean_chars[i]) == -1) {\n            result += clean_chars[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result = result + string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = string;\n    for (let i = 0; i < second_string.length; i++) {\n        clean_string = clean_string.replace(second_string[i], \"\");\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bascurve'\n\nshould loosely deep-equal\n\n'bacuve'\n    at test (/tmp/tmp7v1xlpdo.js:12:12)\n    at Object.<anonymous> (/tmp/tmp7v1xlpdo.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bascurve',\n  expected: 'bacuve',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    let dirty_chars: string[] = second_string.split(\"\");\n    for (let i: number = 0; i < string.length; i++) {\n        if (!dirty_chars.includes(string[i])) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string.charAt(i)) === -1) {\n            result += string.charAt(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = '';\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    let dirty_chars: string[] = second_string.split(\"\");\n    let clean_chars: string[] = string.split(\"\");\n    for (let i = 0; i < clean_chars.length; i++) {\n        if (dirty_chars.indexOf(clean_chars[i]) == -1) {\n            result += clean_chars[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('abcdef', 'ab'));\nconsole.log(remove_dirty_chars('abcdef', 'abcd'));\nconsole.log(remove_dirty_chars('abcdef', 'abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "cdef\nef\n\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n  let clean_string: string = \"\";\n  for (let i: number = 0; i < string.length; i++) {\n    if (second_string.indexOf(string[i]) === -1) {\n      clean_string += string[i];\n    }\n  }\n  return clean_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = '';\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string = string;\n    for (let i = 0; i < second_string.length; i++) {\n        new_string = new_string.replace(second_string[i], '');\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bascurve'\n\nshould loosely deep-equal\n\n'bacuve'\n    at test (/tmp/tmp44cmajd3.js:12:12)\n    at Object.<anonymous> (/tmp/tmp44cmajd3.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bascurve',\n  expected: 'bacuve',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "defghijklmnopqrstuvwxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let output: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            output += string[i];\n        }\n    }\n    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    let second_string_array = second_string.split('');\n    for (let i = 0; i < string.length; i++) {\n        if (second_string_array.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('abcdefghijklmnopqrstuvwxyz', 'xyz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "abcdefghijklmnopqrstuvw\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i: number = 0; i < string.length; i++) {\n        let char: string = string[i];\n        if (second_string.indexOf(char) == -1) {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"abcdef\", \"def\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "abc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = string;\n    for (let i = 0; i < second_string.length; i++) {\n        clean_string = clean_string.replace(second_string[i], \"\");\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bascurve'\n\nshould loosely deep-equal\n\n'bacuve'\n    at test (/tmp/tmp7v1xlpdo.js:12:12)\n    at Object.<anonymous> (/tmp/tmp7v1xlpdo.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bascurve',\n  expected: 'bacuve',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = '';\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string.charAt(i)) === -1) {\n            result += string.charAt(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124165,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) < 0) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    let second_string_array: string[] = second_string.split(\"\");\n    let string_array: string[] = string.split(\"\");\n    for (let i = 0; i < string_array.length; i++) {\n        if (second_string_array.indexOf(string_array[i]) == -1) {\n            result += string_array[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = string;\n    for (let i = 0; i < second_string.length; i++) {\n        result = result.replace(second_string[i], '');\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgeeks\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bascurve'\n\nshould loosely deep-equal\n\n'bacuve'\n    at test (/tmp/tmp4312lihk.js:13:12)\n    at Object.<anonymous> (/tmp/tmp4312lihk.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bascurve',\n  expected: 'bacuve',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let char: string = string[i];\n        if (second_string.indexOf(char) == -1) {\n            new_string += char;\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    let dirty_chars: string[] = second_string.split(\"\");\n    for (let i = 0; i < string.length; i++) {\n        if (dirty_chars.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"abcdef\", \"ab\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "cdef\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    let dirty_chars: string[] = second_string.split(\"\");\n    let string_chars: string[] = string.split(\"\");\n    for (let i = 0; i < string_chars.length; i++) {\n        if (dirty_chars.indexOf(string_chars[i]) == -1) {\n            clean_string += string_chars[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('abcdefghijklmnopqrstuvwxyz', 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "defghijklmnopqrstuvwxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"abcdef\", \"def\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "abc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i: number = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abc\"));\nconsole.log(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "defghijklmnopqrstuvwxyz\n\nabcdefghijklmnopqrstuvwxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let string_array = string.split('');\n    let second_string_array = second_string.split('');\n    let result = '';\n    for (let i = 0; i < string_array.length; i++) {\n        if (second_string_array.indexOf(string_array[i]) === -1) {\n            result += string_array[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) < 0) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let clean_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            clean_string += string[i];\n        }\n    }\n    return clean_string;\n}\n\nconsole.log(remove_dirty_chars(\"Battle of the Vowels: Hawaii vs. Grozny\", \"aeiou\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('Battle of the Vowels: Hawaii vs. Grozny', 'aeiou'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124165,
      "stdout": "Bttl f th Vwls: Hw vs. Grzny\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars(\"geeksforgeeks\", \"mask\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510639,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\nconsole.log(remove_dirty_chars('mask', 'geeksforgeeks'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "geeforgee\nma\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) === -1) {\n            result += string[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_dirty_chars('geeksforgeeks', 'mask'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "geeforgee\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string: string, second_string: string): string {\n    let new_string: string = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (second_string.indexOf(string[i]) == -1) {\n            new_string += string[i];\n        }\n    }\n    return new_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_dirty_chars;\n  assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");\n  assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");\n  assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}