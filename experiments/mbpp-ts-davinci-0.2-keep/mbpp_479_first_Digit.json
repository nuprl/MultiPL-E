{
  "name": "mbpp_479_first_Digit",
  "language": "ts",
  "prompt": "//Write a python function to find the first digit of a given number.\nfunction first_Digit(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_Digit;\n  assert.deepEqual(candidate(123),1);\n  assert.deepEqual(candidate(456),4);\n  assert.deepEqual(candidate(12),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let num = n.toString();\n    let first = num.charAt(0);\n    return parseInt(first);\n}\n",
    "    let firstDigit: number = 0;\n    while (n > 0) {\n        firstDigit = n % 10;\n        n = Math.floor(n / 10);\n    }\n    return firstDigit;\n}\n",
    "    let str = n.toString();\n    let first = str.charAt(0);\n    return parseInt(first);\n}\n",
    "    let num = n.toString();\n    let firstDigit = num.charAt(0);\n    return parseInt(firstDigit);\n}\nconsole.log(first_Digit(1234));\nconsole.log(first_Digit(0));\nconsole.log(first_Digit(12345));\n",
    "    let firstDigit: number = 0;\n    let num: number = n;\n    while (num >= 10) {\n        num = num / 10;\n    }\n    firstDigit = Math.floor(num);\n    return firstDigit;\n}\nconsole.log(first_Digit(12345));\nconsole.log(first_Digit(123.45));\nconsole.log(first_Digit(12345.67));\n",
    "    let num = n.toString();\n    let first = num.charAt(0);\n    return parseInt(first);\n}\n\nconsole.log(first_Digit(123));\nconsole.log(first_Digit(67.89));\n",
    "    let str = n.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] != \"0\") {\n            return parseInt(str[i]);\n        }\n    }\n}\nconsole.log(first_Digit(12345));\nconsole.log(first_Digit(6543));\nconsole.log(first_Digit(333));\n",
    "    let num = n.toString();\n    let first = num.charAt(0);\n    return parseInt(first);\n}\n",
    "    let num = n.toString();\n    let firstDigit = num.charAt(0);\n    return parseInt(firstDigit);\n}\n",
    "    let num = n.toString();\n    let firstDigit = num.charAt(0);\n    return parseInt(firstDigit);\n}\nconsole.log(first_Digit(1234));\n",
    "    let num = n.toString();\n    let firstDigit = num[0];\n    return parseInt(firstDigit);\n}\nconsole.log(first_Digit(1234));\nconsole.log(first_Digit(0));\nconsole.log(first_Digit(10));\nconsole.log(first_Digit(12345));\n",
    "    let num = n.toString();\n    let firstDigit = num.charAt(0);\n    return parseInt(firstDigit);\n}\n",
    "    let str: string = n.toString();\n    let first: number = parseInt(str[0]);\n    return first;\n}\n",
    "    let str = n.toString();\n    let first = str.charAt(0);\n    return parseInt(first);\n}\n",
    "    let first_Digit: number = 0;\n    while (n > 0) {\n        first_Digit = n % 10;\n        n = Math.floor(n / 10);\n    }\n    return first_Digit;\n}\n",
    "    let num = n.toString();\n    return parseInt(num[0]);\n}\n",
    "    let num = n.toString();\n    let firstDigit = num.charAt(0);\n    return parseInt(firstDigit);\n}\n\nconsole.log(first_Digit(1234));\nconsole.log(first_Digit(567));\nconsole.log(first_Digit(89));\nconsole.log(first_Digit(0));\n",
    "    let num: number = n;\n    while (num >= 10) {\n        num = num / 10;\n    }\n    return Math.floor(num);\n}\n",
    "    let num = n.toString();\n    let firstDigit = num.charAt(0);\n    return parseInt(firstDigit);\n}\n",
    "    while (n >= 10) {\n        n = n / 10;\n    }\n    return Math.trunc(n);\n}\n"
  ]
}