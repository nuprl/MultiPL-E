{
  "name": "mbpp_450_extract_string",
  "language": "ts",
  "prompt": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abc' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string(['abc', 'abcd', 'abcde', 'abcdef'], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let res: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            res.push(str[i]);\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"ab\", \"a\", \"xyz\"], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'ab' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abc' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl', 'mno' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"ab\", \"cde\", \"erty\"], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'ab' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\n\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl', 'mno' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_arr: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_arr.push(str[i]);\n        }\n    }\n    return new_arr;\n}\nconsole.log(extract_string([\"ab\", \"cde\", \"erty\"], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'ab' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"ab\", \"cde\", \"erty\"], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'ab' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"];\nconsole.log(extract_string(str1, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[\n  'abc', 'def',\n  'ghi', 'jkl',\n  'mno', 'pqr',\n  'stu', 'vwx'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nlet str_arr: string[] = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];\nconsole.log(extract_string(str_arr, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl', 'mno' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nlet str: string[] = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"];\nconsole.log(extract_string(str, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[\n  'abc', 'def',\n  'ghi', 'jkl',\n  'mno', 'pqr',\n  'stu', 'vwx'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let list: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            list.push(str[i]);\n        }\n    }\n    return list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(s => s.length == l);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl', 'mno' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nlet str: string[] = [\"abc\", \"def\", \"ghi\", \"jkl\"];\nconsole.log(extract_string(str, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\n\nconsole.log(extract_string(['abc', 'def', 'ghi', 'jkl', 'mno'], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123802,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl', 'mno' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123802,
      "stdout": "[ 'abc' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    return str.filter(x => x.length == l);\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123802,
      "stdout": "[ 'abc', 'def', 'ghi', 'jkl', 'mno' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string(['abc', 'abcd', 'abcde', 'abcdef'], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123802,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nlet str: string[] = [\"abc\", \"abcd\", \"abcde\", \"abcdef\"];\nconsole.log(extract_string(str, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123802,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    var new_str: string[] = [];\n    for (var i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "[ 'abcd' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"ab\", \"abcde\", \"abcdef\"], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1666123802,
      "stdout": "[ 'abc' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
      "timestamp": 1665509717,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}