{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "ts",
  "prompt": "//Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunction sum_Of_Subarray_Prod(arr: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_Of_Subarray_Prod;\n  assert.deepEqual(candidate([1, 2, 3]),20);\n  assert.deepEqual(candidate([1, 2]),5);\n  assert.deepEqual(candidate([1, 2, 3, 4]),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    let n: number = arr.length;\n    for (let i: number = 0; i < n; i++) {\n        let prod: number = 1;\n        for (let j: number = i; j < n; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\nconsole.log(sum_Of_Subarray_Prod([1, 2, 3, 4]));\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod: number = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\nconsole.log(sum_Of_Subarray_Prod([1, 2, 3, 4]));\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\nconsole.log(sum_Of_Subarray_Prod([1, 2, 3, 4]));\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    let n = arr.length;\n    for (let i = 0; i < n; i++) {\n        let prod = 1;\n        for (let j = i; j < n; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod: number = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            result += prod;\n        }\n    }\n    return result;\n}\n",
    "    let sum = 0;\n    let n = arr.length;\n    for (let i = 0; i < n; i++) {\n        let prod = 1;\n        for (let j = i; j < n; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod: number = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let prod = 1;\n        for (let j = i; j < arr.length; j++) {\n            prod *= arr[j];\n            sum += prod;\n        }\n    }\n    return sum;\n}\n"
  ]
}