{
  "name": "mbpp_450_extract_string",
  "language": "ts",
  "prompt": "//Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string(str: string[], l: number): string[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_string;\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);\n  assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n",
    "    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 3));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string(['abc', 'abcd', 'abcde', 'abcdef'], 4));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n",
    "    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3));\n",
    "    let res: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            res.push(str[i]);\n        }\n    }\n    return res;\n}\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n",
    "    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n",
    "    let new_str: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            new_str.push(str[i]);\n        }\n    }\n    return new_str;\n}\nconsole.log(extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == l) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nconsole.log(extract_string([\"abc\", \"abcd\", \"abcde\", \"abcdef\"], 4));\n"
  ]
}