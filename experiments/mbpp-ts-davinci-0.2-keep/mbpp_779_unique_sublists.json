{
  "name": "mbpp_779_unique_sublists",
  "language": "ts",
  "prompt": "//Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nfunction unique_sublists(list1: any): any {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_sublists;\n  assert.deepEqual(candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]),{[1, 3]: 2, [5, 7]: 2, [13, 15, 17]: 1, [9, 11]: 1});\n  assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),{[\"green\", \"orange\"]: 2, [\"black\"]: 1, [\"white\"]: 1});\n  assert.deepEqual(candidate([[1, 2], [3, 4], [4, 5], [6, 7]]),{[1, 2]: 1, [3, 4]: 1, [4, 5]: 1, [6, 7]: 1});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let dict: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        }\n        else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        }\n        else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for (var i = 0; i < list1.length; i++) {\n        var tuple = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        }\n        else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}",
    "    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (result[tuple] == undefined) {\n            result[tuple] = 1;\n        } else {\n            result[tuple] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (result[tuple] === undefined) {\n            result[tuple] = 1;\n        } else {\n            result[tuple] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let result: any = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        let key: any = JSON.stringify(list1[i]);\n        if (result[key] == undefined) {\n            result[key] = 1;\n        } else {\n            result[key] += 1;\n        }\n    }\n    return result;\n}\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]));\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2",
    "    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]] += 1;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],",
    "    let result: any = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (result[tuple] == undefined) {\n            result[tuple] = 1;\n        } else {\n            result[tuple] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let dict: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        }\n        else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (dict[list1[i]]) {\n            dict[list1[i]] += 1;\n        } else {\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6]]));\n",
    "    let dict: any = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        let key: any = list1[i];\n        if (dict[key] == undefined) {\n            dict[key] = 1;\n        } else {\n            dict[key] += 1;\n        }\n    }\n    return dict;\n}\n\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2,",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (tuple in dict) {\n            dict[tuple] += 1;\n        } else {\n            dict[tuple] = 1;\n        }\n    }\n    return dict;\n}\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        } else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for (var i = 0; i < list1.length; i++) {\n        var key = JSON.stringify(list1[i]);\n        if (dict[key] == undefined) {\n            dict[key] = 1;\n        } else {\n            dict[key] += 1;\n        }\n    }\n    return dict;\n}\n\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3",
    "    let result: any = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        result[list1[i]] = 0;\n    }\n    for (let i: number = 0; i < list1.length; i++) {\n        result[list1[i]] += 1;\n    }\n    return result;\n}\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key = JSON.stringify(list1[i]);\n        if (dict[key] == undefined) {\n            dict[key] = 1;\n        } else {\n            dict[key] += 1;\n        }\n    }\n    return dict;\n}\n\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3",
    "    let result: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (result[tuple] === undefined) {\n            result[tuple] = 1;\n        } else {\n            result[tuple] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (dict[tuple] === undefined) {\n            dict[tuple] = 1;\n        } else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let unique_sublists = {};\n    for (let i = 0; i < list1.length; i++) {\n        let sublist = tuple(list1[i]);\n        if (sublist in unique_sublists) {\n            unique_sublists[sublist] += 1;\n        } else {\n            unique_sublists[sublist] = 1;\n        }\n    }\n    return unique_sublists;\n}\n",
    "    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (result[tuple] == undefined) {\n            result[tuple] = 1;\n        }\n        else {\n            result[tuple]++;\n        }\n    }\n    return result;\n}\n"
  ]
}