{
  "name": "mbpp_95_Find_Min_Length",
  "language": "ts",
  "prompt": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_len = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_len) {\n            min_len = lst[i].length;\n        }\n    }\n    return min_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n  let min_length: number = lst[0].length;\n  for (let i: number = 0; i < lst.length; i++) {\n    if (lst[i].length < min_length) {\n      min_length = lst[i].length;\n    }\n  }\n  return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\nlet lst: number[][] = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]];\nconsole.log(Find_Min_Length(lst));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\nlet lst: number[][] = [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12]];\nconsole.log(Find_Min_Length(lst));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min_length: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\nlet lst: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]];\nconsole.log(Find_Min_Length(lst));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\nlet lst: number[][] = [[1, 2, 3], [4, 5], [6, 7, 8, 9]];\nconsole.log(Find_Min_Length(lst));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\nlet lst: number[][] = [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12]];\nconsole.log(Find_Min_Length(lst));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    var min: number = lst[0].length;\n    for (var i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length(lst: number[][]): number {\n    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (min_length > lst[i].length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
      "timestamp": 1665517641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}