{
  "name": "mbpp_129_magic_square_test",
  "language": "ts",
  "prompt": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_reverse_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_reverse_diagonal: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n            sum_of_all_elements_in_row += my_matrix[i][j];\n            sum_of_all_elements_in_column += my_matrix[j][i];\n            if (i === j) {\n                sum_of_all_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_all_elements_in_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_all_elements_in_row);\n        sum_of_columns.push(sum_of_all_elements_in_column);\n        sum_of_diagonals.push(sum_of_all_elements_in_diagonal);\n        sum_of_reverse_diagonals.push(sum_of_all_elements_in_reverse_diagonal);\n        sum_of_all_elements_in_row = 0;\n        sum_of_all_elements_in_column = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmpo39tfclb.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_diagonal_2_1: number = 0;\n    let sum_of_diagonal_2_2: number = 0;\n    let sum_of_diagonal_2_3: number = 0;\n    let sum_of_diagonal_2_4: number = 0;\n    let sum_of_diagonal_2_5: number = 0;\n    let sum_of_diagonal_2_6: number = 0;\n    let sum_of_diagonal_2_7: number = 0;\n    let sum_of_diagonal_2_8: number = 0;\n    let sum_of_diagonal_2_9: number = 0;\n    let sum_of_diagonal_2_10: number = 0;\n    let sum_of_diagonal_2_11: number = 0;\n    let sum_of_diagonal_2_12: number = 0;\n    let sum_of_diagonal_2_13: number = 0;\n    let sum_of_diagonal_2_14: number = 0;\n    let sum_of_diagonal_2_15: number = 0;\n    let sum_of_diagonal_2_16: number = 0;\n    let sum_of_diagonal_2_17: number = 0;\n    let sum_of_diagonal_2_18: number = 0;\n    let sum_of_diagonal_2_19: number = 0;\n    let sum_of_diagonal_2_20: number = 0;\n    let sum_of_diagonal_2_21: number = 0;\n    let sum_of\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmp5j9l9gjh.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_col) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diag_1 || sum !== sum_diag_2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let magic_number: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row_test: number = 0;\n    let sum_col_test: number = 0;\n    let sum_diag_test: number = 0;\n    let sum_diag_2_test: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = sum_row + my_matrix[0][i];\n        sum_col = sum_col + my_matrix[i][0];\n        sum_diag = sum_diag + my_matrix[i][i];\n        sum_diag_2 = sum_diag_2 + my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row_test = 0;\n        sum_col_test = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row_test = sum_row_test + my_matrix[i][j];\n            sum_col_test = sum_col_test + my_matrix[j][i];\n        }\n        if (sum_row_test != sum_row || sum_col_test != sum_col) {\n            magic_square = false;\n        }\n    }\n    if (sum_diag != sum_row || sum_diag_2 != sum_row) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_di\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmpb6m3gga1.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmpb6m3gga1.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] !== sum_of_cols[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diags.length; i++) {\n        if (sum_of_diags[i] !== sum_of_diags[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmp_by07zpp.ts(43,9): error TS1005: ']' expected.\n../../../../tmp/tmp_by07zpp.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        sum_of_rows.push(row_sum);\n        sum_of_columns.push(column_sum);\n    }\n    let diagonal_sum_1: number = 0;\n    let diagonal_sum_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        diagonal_sum_1 += my_matrix[i][i];\n        diagonal_sum_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(diagonal_sum_1);\n    sum_of_diagonals.push(diagonal_sum_2);\n\n    let sum_of_rows_set = new Set(sum_of_rows);\n    let sum_of_columns_set = new Set(sum_of_columns);\n    let sum_of_diagonals_set = new Set(sum_of_diagonals);\n\n    if (sum_of_rows_set.size == 1 && sum_of_columns_set.size == 1 && sum_of_diagonals_set.size == 1) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    let magic_square: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_col = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_of_diagonal = sum_of_row;\n        }\n        if (i == my_matrix.length - 1) {\n            sum_of_reverse_diagonal = sum_of_row;\n        }\n        if (sum_of_row != sum_of_diagonal || sum_of_col != sum_of_diagonal) {\n            magic_square = false;\n        }\n    }\n    if (sum_of_diagonal != sum_of_reverse_diagonal) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_diagonal_1 || sum_column != sum_diagonal_1) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk3n9nlt0.js:25:12)\n    at Object.<anonymous> (/tmp/tmpk3n9nlt0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row = 0;\n    let sum_of_col = 0;\n    let sum_of_diag = 0;\n    let sum_of_rev_diag = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_rev_diag += my_matrix[i][j];\n            }\n        }\n        if (sum_of_row != sum_of_col || sum_of_row != sum_of_diag || sum_of_row != sum_of_rev_diag) {\n            return false;\n        }\n        sum_of_row = 0;\n        sum_of_col = 0;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6i1o0ihz.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6i1o0ihz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(0);\n        sum_of_columns.push(0);\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n    sum_of_diagonals.push(0);\n    sum_of_diagonals.push(0);\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    let sum_of_all_sums: number = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        sum_of_all_sums += sum_of_rows[i];\n        sum_of_all_sums += sum_of_columns[i];\n    }\n    sum_of_all_sums += sum_of_diagonals[0];\n    sum_of_all_sums += sum_of_diagonals[1];\n    if (sum_of_all_sums / (sum_of_rows.length * 2 + 2) === sum_of_all_elements / (sum_of_rows.length * sum_of_rows.length)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzq0obmlh.js:39:12)\n    at Object.<anonymous> (/tmp/tmpzq0obmlh.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_columns[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n            if (i === j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n    sum_of_all = sum_of_rows[0];\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmposj642bp.js:42:12)\n    at Object.<anonymous> (/tmp/tmposj642bp.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_elements: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[0]) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmp_vmusryo.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number[] = [];\n    let sum_of_column: number[] = [];\n    let sum_of_diagonal: number[] = [];\n    let sum_of_reverse_diagonal: number[] = [];\n    let sum: number = 0;\n    let sum_of_all_elements: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_row.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_column.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonal.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_reverse_diagonal.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < sum_of_row.length; i++) {\n        if (sum_of_row[i] != sum_of_all_elements || sum_of_column[i] != sum_of_all_elements || sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmpv2np_feh.ts(47,1): error TS1005: ')' expected.\n../../../../tmp/tmpv2np_feh.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_row_2: number = 0;\n    let sum_col_2: number = 0;\n    let sum_row_3: number = 0;\n    let sum_col_3: number = 0;\n    let sum_row_4: number = 0;\n    let sum_col_4: number = 0;\n    let sum_row_5: number = 0;\n    let sum_col_5: number = 0;\n    let sum_row_6: number = 0;\n    let sum_col_6: number = 0;\n    let sum_row_7: number = 0;\n    let sum_col_7: number = 0;\n    let sum_row_8: number = 0;\n    let sum_col_8: number = 0;\n    let sum_row_9: number = 0;\n    let sum_col_9: number = 0;\n    let sum_row_10: number = 0;\n    let sum_col_10: number = 0;\n    let sum_row_11: number = 0;\n    let sum_col_11: number = 0;\n    let sum_row_12: number = 0;\n    let sum_col_12: number = 0;\n    let sum_row_13: number = 0;\n    let sum_col_13: number = 0;\n    let sum_row_14: number = 0;\n    let sum_col_14: number = 0;\n    let sum_row_15: number = 0;\n    let sum_col_15: number = 0;\n    let sum_row_16: number = 0;\n    let sum_col_16: number = 0;\n    let sum_row_17: number = 0;\n    let sum_col_17: number = 0;\n    let sum_row_18: number = 0;\n    let sum_col_18: number = 0;\n    let sum_row_19: number = 0;\n    let sum_col_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmpxab5xk_e.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_reverse_diagonal: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_row += my_matrix[i][j];\n            sum_of_elements_in_column += my_matrix[j][i];\n            if (i == j) {\n                sum_of_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_elements_in_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_elements_in_row);\n        sum_of_columns.push(sum_of_elements_in_column);\n        sum_of_elements_in_row = 0;\n        sum_of_elements_in_column = 0;\n    }\n    sum_of_diagonals.push(sum_of_elements_in_diagonal);\n    sum_of_diagonals.push(sum_of_elements_in_reverse_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmpaqhp5eva.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpaqhp5eva.ts(37,9): error TS1005: ',' expected.\n../../../../tmp/tmpaqhp5eva.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let magic_number: number = 0;\n    let magic_number2: number = 0;\n    let magic_number3: number = 0;\n    let magic_number4: number = 0;\n    let magic_number5: number = 0;\n    let magic_number6: number = 0;\n    let magic_number7: number = 0;\n    let magic_number8: number = 0;\n    let magic_number9: number = 0;\n    let magic_number10: number = 0;\n    let magic_number11: number = 0;\n    let magic_number12: number = 0;\n    let magic_number13: number = 0;\n    let magic_number14: number = 0;\n    let magic_number15: number = 0;\n    let magic_number16: number = 0;\n    let magic_number17: number = 0;\n    let magic_number18: number = 0;\n    let magic_number19: number = 0;\n    let magic_number20: number = 0;\n    let magic_number21: number = 0;\n    let magic_number22: number = 0;\n    let magic_number23: number = 0;\n    let magic_number24: number = 0;\n    let magic_number25: number = 0;\n    let magic_number26: number = 0;\n    let magic_number27: number = 0;\n    let magic_number28: number = 0;\n    let magic_number29: number = 0;\n    let magic_number30: number = 0;\n    let magic_number31: number = 0;\n    let magic_number32: number = 0;\n    let magic_number33: number = 0;\n    let magic_number34: number = 0;\n    let magic_number35: number = 0;\n    let magic_number36: number = 0;\n    let magic_number37: number = 0;\n    let magic_number38: number = 0;\n    let magic_number39: number =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmp7gv9nqjf.ts(46,9): error TS1005: ',' expected.\n../../../../tmp/tmp7gv9nqjf.ts(57,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_prev: number = 0;\n    let sum_col_prev: number = 0;\n    let sum_diag_prev: number = 0;\n    let sum_diag2_prev: number = 0;\n    let isMagic: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i == j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        if (i > 0) {\n            if (sum_row != sum_row_prev || sum_col != sum_col_prev || sum_diag != sum_diag_prev || sum_diag2 != sum_diag2_prev) {\n                isMagic = false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag_prev = sum_diag;\n        sum_diag2_prev = sum_diag2;\n        sum_row = 0;\n        sum_col = 0;\n    }\n    return isMagic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm3jjfsx3.js:40:12)\n    at Object.<anonymous> (/tmp/tmpm3jjfsx3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag_2: number[] = [];\n    let sum: number = 0;\n    let sum_2: number = 0;\n    let sum_3: number = 0;\n    let sum_4: number = 0;\n    let sum_5: number = 0;\n    let sum_6: number = 0;\n    let sum_7: number = 0;\n    let sum_8: number = 0;\n    let sum_9: number = 0;\n    let sum_10: number = 0;\n    let sum_11: number = 0;\n    let sum_12: number = 0;\n    let sum_13: number = 0;\n    let sum_14: number = 0;\n    let sum_15: number = 0;\n    let sum_16: number = 0;\n    let sum_17: number = 0;\n    let sum_18: number = 0;\n    let sum_19: number = 0;\n    let sum_20: number = 0;\n    let sum_21: number = 0;\n    let sum_22: number = 0;\n    let sum_23: number = 0;\n    let sum_24: number = 0;\n    let sum_25: number = 0;\n    let sum_26: number = 0;\n    let sum_27: number = 0;\n    let sum_28: number = 0;\n    let sum_29: number = 0;\n    let sum_30: number = 0;\n    let sum_31: number = 0;\n    let sum_32: number = 0;\n    let sum_33: number = 0;\n    let sum_34: number = 0;\n    let sum_35: number = 0;\n    let sum_36: number = 0;\n    let sum_37: number = 0;\n    let sum_38: number = 0;\n    let sum_39: number = 0;\n    let sum_40: number = 0;\n    let sum_41: number = 0;\n    let sum_42\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "../../../../tmp/tmpmyitixy7.ts(60,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_prev: number = 0;\n    let sum_col_prev: number = 0;\n    let sum_diag_prev: number = 0;\n    let sum_diag2_prev: number = 0;\n    let is_magic: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i == j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        if (sum_row_prev != 0 && sum_row_prev != sum_row) {\n            is_magic = false;\n        }\n        if (sum_col_prev != 0 && sum_col_prev != sum_col) {\n            is_magic = false;\n        }\n        if (sum_diag_prev != 0 && sum_diag_prev != sum_diag) {\n            is_magic = false;\n        }\n        if (sum_diag2_prev != 0 && sum_diag2_prev != sum_diag2) {\n            is_magic = false;\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag_prev = sum_diag;\n        sum_diag2_prev = sum_diag2;\n        sum_row = 0;\n        sum_col = 0;\n        sum_diag = 0;\n        sum_diag2 = 0;\n    }\n    return is_magic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgbnzx0ej.js:49:12)\n    at Object.<anonymous> (/tmp/tmpgbnzx0ej.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum += my_matrix[i][j];\n            }\n        }\n        sum_of_diagonals.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i + j == my_matrix.length - 1) {\n                sum += my_matrix[i][j];\n            }\n        }\n        sum_of_diagonals.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_cols.length; i++) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123159,
      "stdout": "../../../../tmp/tmpuoi_l7dd.ts(57,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_temp: number = 0;\n    let sum_col_temp: number = 0;\n    let sum_diag_temp: number = 0;\n    let sum_diag2_temp: number = 0;\n    let is_magic: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row_temp += my_matrix[i][j];\n            sum_col_temp += my_matrix[j][i];\n            if (i == j) {\n                sum_diag_temp += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2_temp += my_matrix[i][j];\n            }\n        }\n        if (i == 0) {\n            sum_row = sum_row_temp;\n            sum_col = sum_col_temp;\n            sum_diag = sum_diag_temp;\n            sum_diag2 = sum_diag2_temp;\n        }\n        else {\n            if (sum_row_temp != sum_row || sum_col_temp != sum_col || sum_diag_temp != sum_diag || sum_diag2_temp != sum_diag2) {\n                is_magic = false;\n            }\n        }\n        sum_row_temp = 0;\n        sum_col_temp = 0;\n        sum_diag_temp = 0;\n        sum_diag2_temp = 0;\n    }\n    return is_magic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu1ciw229.js:44:12)\n    at Object.<anonymous> (/tmp/tmpu1ciw229.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_anti_diag: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_diag: number = 0;\n    let sum_of_all_anti_diag: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_rows: number = 0;\n    let sum_of_all_elements_cols: number = 0;\n    let sum_of_all_elements_diag: number = 0;\n    let sum_of_all_elements_anti_diag: number = 0;\n    let sum_of_all_elements_all: number = 0;\n    let sum_of_all_elements_all_rows: number = 0;\n    let sum_of_all_elements_all_cols: number = 0;\n    let sum_of_all_elements_all_diag: number = 0;\n    let sum_of_all_elements_all_anti_diag: number = 0;\n    let sum_of_all_elements_all_all: number = 0;\n    let sum_of_all_elements_all_all_rows: number = 0;\n    let sum_of_all_elements_all_all_cols: number = 0;\n    let sum_of_all_elements_all_all_diag: number = 0;\n    let sum_of_all_elements_all_all_anti_diag: number = 0;\n    let sum_of_all_elements_all_all_all: number = 0;\n    let sum_of_all_elements_all_all_all_rows: number = 0;\n    let sum_of_all_elements_all_all_all_cols: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123159,
      "stdout": "../../../../tmp/tmp8kovgoft.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            result = false;\n        }\n    }\n    for (let i = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] != sum_of_cols[0]) {\n            result = false;\n        }\n    }\n    for (let i = 0; i < sum_of_diags.length; i++) {\n        if (sum_of_diags[i] != sum_of_diags[0]) {\n            result = false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123159,
      "stdout": "../../../../tmp/tmpapmv0369.ts(57,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let sum_of_diag: number = 0;\n    let sum_of_rev_diag: number = 0;\n    let sum_of_all: number = 0;\n    let sum_of_all_row: number = 0;\n    let sum_of_all_col: number = 0;\n    let sum_of_all_diag: number = 0;\n    let sum_of_all_rev_diag: number = 0;\n    let sum_of_all_diag_rev: number = 0;\n    let sum_of_all_rev_diag_rev: number = 0;\n    let sum_of_all_row_rev: number = 0;\n    let sum_of_all_col_rev: number = 0;\n    let sum_of_all_row_rev_rev: number = 0;\n    let sum_of_all_col_rev_rev: number = 0;\n    let sum_of_all_row_rev_rev_rev: number = 0;\n    let sum_of_all_col_rev_rev_rev: number = 0;\n    let sum_of_all_row_rev_rev_rev_rev: number = 0;\n    let sum_of_all_col_rev_rev_rev_rev: number = 0;\n    let sum_of_all_row_rev_rev_rev_rev_rev: number = 0;\n    let sum_of_all_col_rev_rev_rev_rev_rev: number = 0;\n    let sum_of_all_row_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_of_all_col_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_of_all_row_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_of_all_col_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_of_all_row_rev_rev_rev_rev_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123159,
      "stdout": "../../../../tmp/tmput200h1j.ts(40,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag1: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_col) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum !== sum_diag1 || sum !== sum_diag2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_diag_rev_col_rev: number = 0;\n    let sum_diag_rev_row_rev: number = 0;\n    let sum_row_col_rev_rev: number = 0;\n    let sum_diag_col_rev_rev: number = 0;\n    let sum_diag_row_rev_rev: number = 0;\n    let sum_diag_rev_col_rev_rev: number = 0;\n    let sum_diag_rev_row_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev: number = 0;\n    let sum_diag_rev_col_rev_rev_rev: number = 0;\n    let sum_diag_rev_row_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev_rev: number = 0;\n    let sum_diag_rev_col_rev_rev_rev_rev: number = 0;\n    let sum_diag_rev_row_rev_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmp_132t1vi.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_numbers: number = 0;\n    let sum_of_numbers_in_matrix: number = 0;\n    let sum_of_numbers_in_matrix_is_true: boolean = false;\n    let sum_of_rows_is_true: boolean = false;\n    let sum_of_columns_is_true: boolean = false;\n    let sum_of_diagonals_is_true: boolean = false;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_numbers_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_numbers += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_numbers);\n        sum_of_numbers = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_numbers += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_numbers);\n        sum_of_numbers = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_numbers += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum_of_numbers);\n    sum_of_numbers = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123159,
      "stdout": "../../../../tmp/tmpv6qfc9r2.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_row = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_col = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    let sum_diag = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    sum_diag = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_all_elements: boolean = true;\n    let sum_of_rows_is_equal_to_sum_of_all_elements: boolean = true;\n    let sum_of_columns_is_equal_to_sum_of_all_elements: boolean = true;\n    let sum_of_diagonals_is_equal_to_sum_of_all_elements: boolean = true;\n    let sum_of_rows_is_equal_to_sum_of_columns: boolean = true;\n    let sum_of_rows_is_equal_to_sum_of_diagonals: boolean = true;\n    let sum_of_columns_is_equal_to_sum_of_diagonals: boolean = true;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_all_elements_in_matrix_squared: boolean = true;\n    let sum_of_all_elements_in_matrix_squared: number = 0;\n    let sum_of_all_elements_in_matrix_cubed: number = 0;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_all_elements_in_matrix_cubed: boolean = true;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_all_elements_in_matrix_squared_plus_sum_of_all_elements_in_matrix_cubed: boolean = true;\n    let sum_of_all_elements_in_matrix_squared_plus_sum_of_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmpi54fxk81.ts(32,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_2: number[] = [];\n    let sum: number = 0;\n    let sum_2: number = 0;\n    let sum_3: number = 0;\n    let sum_4: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            sum_2 += my_matrix[j][i];\n            if (i == j) {\n                sum_3 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_4 += my_matrix[i][j];\n            }\n        }\n        sum_row.push(sum);\n        sum_col.push(sum_2);\n        sum_diag.push(sum_3);\n        sum_diag_2.push(sum_4);\n        sum = 0;\n        sum_2 = 0;\n        sum_3 = 0;\n        sum_4 = 0;\n    }\n    if (sum_row.every(sum => sum === sum_row[0]) && sum_col.every(sum => sum === sum_col[0]) && sum_diag.every(sum => sum === sum_diag[0]) && sum_diag_2.every(sum => sum === sum_diag_2[0])) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzrpnukax.js:41:12)\n    at Object.<anonymous> (/tmp/tmpzrpnukax.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_prev: number = 0;\n    let sum_col_prev: number = 0;\n    let sum_diag_prev: number = 0;\n    let sum_diag2_prev: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i === j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        if (i > 0) {\n            if (sum_row !== sum_row_prev || sum_col !== sum_col_prev || sum_diag !== sum_diag_prev || sum_diag2 !== sum_diag2_prev) {\n                return false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag_prev = sum_diag;\n        sum_diag2_prev = sum_diag2;\n        sum_row = 0;\n        sum_col = 0;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd_w6_2nj.js:39:12)\n    at Object.<anonymous> (/tmp/tmpd_w6_2nj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n\n    //check if the matrix is a square matrix\n    if (my_matrix.length !== my_matrix[0].length) {\n        return false;\n    }\n\n    //calculate the sum of each row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let sum: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n\n    //calculate the sum of each column\n    for (let i: number = 0; i < my_matrix[0].length; i++) {\n        let sum: number = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n    }\n\n    //calculate the sum of each diagonal\n    let sum_of_first_diagonal: number = 0;\n    let sum_of_second_diagonal: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_first_diagonal += my_matrix[i][i];\n        sum_of_second_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_first_diagonal);\n    sum_of_diagonals.push(sum_of_second_diagonal);\n\n    //check if all the sums are equal\n    if (sum_of_rows.every(e => e === sum_of_rows[0]) &&\n        sum_of_columns.every(e => e === sum_of_columns[0]) &&\n        sum_of_diagonals.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmpc4lm6qed.ts(43,26): error TS1003: Identifier expected.\n../../../../tmp/tmpc4lm6qed.ts(44,1): error TS1005: ')' expected.\n../../../../tmp/tmpc4lm6qed.ts(55,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let n: number = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_diagonal2: number = 0;\n    let is_magic_square: boolean = false;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_row = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_column);\n        sum_of_column = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal);\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal2);\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123159,
      "stdout": "../../../../tmp/tmpf00bo7ee.ts(51,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let sum_all_row: number = 0;\n    let sum_all_column: number = 0;\n    let sum_all_diagonal1: number = 0;\n    let sum_all_diagonal2: number = 0;\n    let sum_all_diagonal: number = 0;\n    let sum_all_row_column: number = 0;\n    let sum_all_row_column_diagonal: number = 0;\n    let sum_all_row_column_diagonal_final: number = 0;\n    let sum_all_row_column_diagonal_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmpyu8k22ik.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all_elements || sum_of_columns[i] !== sum_of_all_elements || sum_of_diagonals[i] !== sum_of_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmphgz74yh1.ts(36,1): error TS1005: ')' expected.\n../../../../tmp/tmphgz74yh1.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row = 0;\n    let sum_of_column = 0;\n    let sum_of_diagonal = 0;\n    let sum_of_reverse_diagonal = 0;\n    let sum_of_all = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let aa = 0;\n    let bb = 0;\n    let cc = 0;\n    let dd = 0;\n    let ee = 0;\n    let ff = 0;\n    let gg = 0;\n    let hh = 0;\n    let ii = 0;\n    let jj = 0;\n    let kk = 0;\n    let ll = 0;\n    let mm = 0;\n    let nn = 0;\n    let oo = 0;\n    let pp = 0;\n    let qq = 0;\n    let rr = 0;\n    let ss = 0;\n    let tt = 0;\n    let uu = 0;\n    let vv = 0;\n    let ww = 0;\n    let xx = 0;\n    let yy = 0;\n    let zz = 0;\n    let aaa = 0;\n    let bbb = 0;\n    let ccc = 0;\n    let ddd = 0;\n    let eee = 0;\n    let fff = 0;\n    let ggg = 0;\n    let hhh = 0;\n    let iii = 0;\n    let jjj = 0;\n    let kkk = 0;\n    let lll = 0;\n    let mmm = 0;\n    let nnn = 0;\n    let ooo = 0;\n    let ppp = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmpd9_kdxzh.ts(80,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    //check if matrix is square\n    if (my_matrix.length !== my_matrix[0].length) {\n        return false;\n    }\n    //check if matrix is magic square\n    let sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        let row_sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum !== sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        let col_sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum !== sum) {\n            return false;\n        }\n    }\n    let diag_sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum !== sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        diag_sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (diag_sum !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(0);\n        sum_of_columns.push(0);\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n    sum_of_diagonals.push(0);\n    sum_of_diagonals.push(0);\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_all_elements = sum_of_rows[0];\n    for (let i = 0; i < my_matrix.length; i++) {\n        if (sum_of_rows[i] != sum_of_all_elements || sum_of_columns[i] != sum_of_all_elements || sum_of_diagonals[0] != sum_of_all_elements || sum_of_diagonals[1] != sum_of_all_elements) {\n            is_magic_square = false;\n        }\n    }\n    if (sum_of_all_elements_in_matrix != sum_of_all_elements * my_matrix.length) {\n        is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmpva5mwwuv.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row || sum != sum_column) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum != sum_diagonal || sum != sum_reverse_diagonal) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_all += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row !== sum_all || sum_column !== sum_all) {\n            return false;\n        }\n    }\n    if (sum_diagonal_1 !== sum_all || sum_diagonal_2 !== sum_all) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppyrpqnuo.js:36:12)\n    at Object.<anonymous> (/tmp/tmppyrpqnuo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum: number = 0;\n    let is_magic: boolean = true;\n\n    //calculate the sum of each row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //calculate the sum of each column\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n\n    //calculate the sum of each diagonal\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diag.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diag.push(sum);\n    sum = 0;\n\n    //check if all sums are equal\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            is_magic = false;\n        }\n    }\n\n    for (let i: number = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] !== sum_of_cols[0]) {\n           \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmpszkwz33u.ts(61,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let sum_row: number = 0;\n        let sum_col: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i === j) {\n                sum_diag_1 += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_diag_2 += my_matrix[i][j];\n            }\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_col) {\n            return false;\n        }\n    }\n    if (sum !== sum_diag_1 || sum !== sum_diag_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let sum_all_row: number = 0;\n    let sum_all_column: number = 0;\n    let sum_all_diagonal: number = 0;\n    let sum_all_diagonal_2: number = 0;\n    let sum_all_row_column: number = 0;\n    let sum_all_row_column_2: number = 0;\n    let sum_all_row_column_3: number = 0;\n    let sum_all_row_column_4: number = 0;\n    let sum_all_row_column_5: number = 0;\n    let sum_all_row_column_6: number = 0;\n    let sum_all_row_column_7: number = 0;\n    let sum_all_row_column_8: number = 0;\n    let sum_all_row_column_9: number = 0;\n    let sum_all_row_column_10: number = 0;\n    let sum_all_row_column_11: number = 0;\n    let sum_all_row_column_12: number = 0;\n    let sum_all_row_column_13: number = 0;\n    let sum_all_row_column_14: number = 0;\n    let sum_all_row_column_15: number = 0;\n    let sum_all_row_column_16: number = 0;\n    let sum_all_row_column_17: number = 0;\n    let sum_all_row_column_18: number = 0;\n    let sum_all_row_column_19: number = 0;\n    let sum_all_row_column_20: number = 0;\n    let sum_all_row_column_21: number = 0;\n    let sum_all_row_column_22: number = 0;\n    let sum_all_row_column_23: number = 0;\n    let sum_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpvjm7gw34.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n    let sum_of_rows_set: Set<number> = new Set(sum_of_rows);\n    let sum_of_columns_set: Set<number> = new Set(sum_of_columns);\n    let sum_of_diagonals_set: Set<number> = new Set(sum_of_diagonals);\n    if (sum_of_rows_set.size === 1 && sum_of_columns_set.size === 1 && sum_of_diagonals_set.size === 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(magic_square_test(magic_square_matrix));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmp8hn9jvlr.ts(34,31): error TS2304: Cannot find name 'magic_square_matrix'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let magic_square: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            magic_square = false;\n        }\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp969woipz.js:42:12)\n    at Object.<anonymous> (/tmp/tmp969woipz.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmprxly6hnn.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmprxly6hnn.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_check: number = 0;\n    let sum_column_check: number = 0;\n    let sum_diagonal_1_check: number = 0;\n    let sum_diagonal_2_check: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum_row_check = sum_row;\n            sum_column_check = sum_column;\n        }\n        if (sum_row_check !== sum_row || sum_column_check !== sum_column) {\n            return false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 !== sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_column != sum) {\n            result = false;\n            break;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag2: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all2: number = 0;\n    let sum_of_all3: number = 0;\n    let sum_of_all4: number = 0;\n    let sum_of_all5: number = 0;\n    let sum_of_all6: number = 0;\n    let sum_of_all7: number = 0;\n    let sum_of_all8: number = 0;\n    let sum_of_all9: number = 0;\n    let sum_of_all10: number = 0;\n    let sum_of_all11: number = 0;\n    let sum_of_all12: number = 0;\n    let sum_of_all13: number = 0;\n    let sum_of_all14: number = 0;\n    let sum_of_all15: number = 0;\n    let sum_of_all16: number = 0;\n    let sum_of_all17: number = 0;\n    let sum_of_all18: number = 0;\n    let sum_of_all19: number = 0;\n    let sum_of_all20: number = 0;\n    let sum_of_all21: number = 0;\n    let sum_of_all22: number = 0;\n    let sum_of_all23: number = 0;\n    let sum_of_all24: number = 0;\n    let sum_of_all25: number = 0;\n    let sum_of_all26: number = 0;\n    let sum_of_all27: number = 0;\n    let sum_of_all28: number = 0;\n    let sum_of_all29: number = 0;\n    let sum_of_all30: number = 0;\n    let sum_of_all31: number = 0;\n    let sum_of_all32: number = 0;\n    let sum_of_all33\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmp60rnfzu2.ts(51,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag1: number = 0;\n    let sum_diag2: number = 0;\n    let magic_number: number = 0;\n    let is_magic: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_rows[i] = 0;\n        sum_cols[i] = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_rows[i] += my_matrix[i][j];\n            sum_cols[i] += my_matrix[j][i];\n            if (i == j) {\n                sum_diag1 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n    }\n\n    magic_number = sum_rows[0];\n\n    for (let i: number = 0; i < sum_rows.length; i++) {\n        if (sum_rows[i] != magic_number || sum_cols[i] != magic_number) {\n            is_magic = false;\n        }\n    }\n\n    if (sum_diag1 != magic_number || sum_diag2 != magic_number) {\n        is_magic = false;\n    }\n\n    return is_magic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_rev_diag: number[] = [];\n    let sum: number = 0;\n    let sum_of_all: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            sum_of_all += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diag.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_rev_diag.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_all / sum_of_rows.length || sum_of_cols[i] != sum_of_all / sum_of_cols.length || sum_of_diag[i] != sum_of_all / sum_of_diag.length || sum_of_rev_diag\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpbqjv58mm.ts(37,1): error TS1005: ')' expected.\n../../../../tmp/tmpbqjv58mm.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n\n    let first_sum: number = sum_of_rows[0];\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== first_sum || sum_of_columns[i] !== first_sum || sum_of_diagonals[i] !== first_sum) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet my_matrix: number[][] = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconsole.log(magic_square_test(my_matrix));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123163,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3fgfvys_.js:41:12)\n    at Object.<anonymous> (/tmp/tmp3fgfvys_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_array: number[] = [];\n    let sum_array_diagonal_1: number[] = [];\n    let sum_array_diagonal_2: number[] = [];\n    let sum_array_row: number[] = [];\n    let sum_array_column: number[] = [];\n    let sum_array_row_column: number[] = [];\n    let sum_array_diagonal_1_2: number[] = [];\n    let sum_array_row_column_diagonal_1_2: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column_diagonal_1_2: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column_diagonal_1_2: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column_diagonal_1_2: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column_diagonal_1_2_row_column: number[] = [];\n    let sum_array_row_column_diagonal_1_2_row_column_diagonal_1_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpx1xoe59u.ts(35,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    let sum_of_all: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum_of_all = sum_of_row;\n        }\n        if (sum_of_all !== sum_of_row || sum_of_all !== sum_of_column) {\n            return is_magic_square;\n        }\n        sum_of_diagonal += my_matrix[i][i];\n        sum_of_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_of_diagonal !== sum_of_all || sum_of_reverse_diagonal !== sum_of_all) {\n        return is_magic_square;\n    }\n    is_magic_square = true;\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_diagonals_2: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n            sum_of_all_rows += my_matrix[i][j];\n            sum_of_all_columns += my_matrix[j][i];\n            if (i === j) {\n                sum_of_all_diagonals += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_all_diagonals_2 += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_all_rows);\n        sum_of_columns.push(sum_of_all_columns);\n        sum_of_all_rows = 0;\n        sum_of_all_columns = 0;\n    }\n    sum_of_diagonals.push(sum_of_all_diagonals);\n    sum_of_diagonals.push(sum_of_all_diagonals_2);\n    let sum_of_all_rows_and_columns: number = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        sum_of_all_rows_and_columns += sum_of_rows[i];\n    }\n    let sum_of_all_diagonals_and_columns: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmptqeryej9.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmprxly6hnn.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmprxly6hnn.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_diagonals_2: number = 0;\n    let sum_of_all_diagonals_3: number = 0;\n    let sum_of_all_diagonals_4: number = 0;\n    let sum_of_all_diagonals_5: number = 0;\n    let sum_of_all_diagonals_6: number = 0;\n    let sum_of_all_diagonals_7: number = 0;\n    let sum_of_all_diagonals_8: number = 0;\n    let sum_of_all_diagonals_9: number = 0;\n    let sum_of_all_diagonals_10: number = 0;\n    let sum_of_all_diagonals_11: number = 0;\n    let sum_of_all_diagonals_12: number = 0;\n    let sum_of_all_diagonals_13: number = 0;\n    let sum_of_all_diagonals_14: number = 0;\n    let sum_of_all_diagonals_15: number = 0;\n    let sum_of_all_diagonals_16: number = 0;\n    let sum_of_all_diagonals_17: number = 0;\n    let sum_of_all_diagonals_18: number = 0;\n    let sum_of_all_diagonals_19: number = 0;\n    let sum_of_all_diagonals_20: number = 0;\n    let sum_of_all_diagonals_21: number = 0;\n    let sum_of_all_diagonals_22: number = 0;\n    let sum_of_all_di\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpi2okzbhn.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_test: number = 0;\n    let sum_column_test: number = 0;\n    let sum_diagonal_1_test: number = 0;\n    let sum_diagonal_2_test: number = 0;\n    let sum_test: number = 0;\n    let sum_test_2: number = 0;\n    let sum_test_3: number = 0;\n    let sum_test_4: number = 0;\n    let sum_test_5: number = 0;\n    let sum_test_6: number = 0;\n    let sum_test_7: number = 0;\n    let sum_test_8: number = 0;\n    let sum_test_9: number = 0;\n    let sum_test_10: number = 0;\n    let sum_test_11: number = 0;\n    let sum_test_12: number = 0;\n    let sum_test_13: number = 0;\n    let sum_test_14: number = 0;\n    let sum_test_15: number = 0;\n    let sum_test_16: number = 0;\n    let sum_test_17: number = 0;\n    let sum_test_18: number = 0;\n    let sum_test_19: number = 0;\n    let sum_test_20: number = 0;\n    let sum_test_21: number = 0;\n    let sum_test_22: number = 0;\n    let sum_test_23: number = 0;\n    let sum_test_24: number = 0;\n    let sum_test_25: number = 0;\n    let sum_test_26: number = 0;\n    let sum_test_27: number = 0;\n    let sum_test_28: number = 0;\n    let sum_test_29: number = 0;\n    let sum_test_30: number = 0;\n    let sum_test_31: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpza7hundj.ts(43,9): error TS1005: ',' expected.\n../../../../tmp/tmpza7hundj.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row[i] = 0;\n        sum_col[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row[i] += my_matrix[i][j];\n            sum_col[i] += my_matrix[j][i];\n        }\n    }\n\n    sum_diag[0] = 0;\n    sum_diag[1] = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag[0] += my_matrix[i][i];\n        sum_diag[1] += my_matrix[i][my_matrix.length - i - 1];\n    }\n\n    for (let i = 0; i < sum_row.length; i++) {\n        if (sum_row[i] !== sum_row[0] || sum_col[i] !== sum_col[0] || sum_diag[i] !== sum_diag[0]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphbr07byy.js:30:12)\n    at Object.<anonymous> (/tmp/tmphbr07byy.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[j] += my_matrix[i][j];\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        sum_of_all_rows += sum_of_rows[i];\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        sum_of_all_columns += sum_of_columns[i];\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        sum_of_all_diagonals += sum_of_diagonals[i];\n    }\n    if (sum_of_all_rows == sum_of_all_columns && sum_of_all_columns == sum_of_all_diagonals && sum_of_all_diagonals == sum_of_all) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(magic_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpgvmw_0im.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpgvmw_0im.ts(40,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row || sum != sum_column) {\n            result = false;\n            break;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum != sum_diagonal || sum != sum_reverse_diagonal) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row2: number = 0;\n    let sum_col2: number = 0;\n    let sum_diag3: number = 0;\n    let sum_diag4: number = 0;\n    let sum_row3: number = 0;\n    let sum_col3: number = 0;\n    let sum_diag5: number = 0;\n    let sum_diag6: number = 0;\n    let sum_row4: number = 0;\n    let sum_col4: number = 0;\n    let sum_diag7: number = 0;\n    let sum_diag8: number = 0;\n    let sum_row5: number = 0;\n    let sum_col5: number = 0;\n    let sum_diag9: number = 0;\n    let sum_diag10: number = 0;\n    let sum_row6: number = 0;\n    let sum_col6: number = 0;\n    let sum_diag11: number = 0;\n    let sum_diag12: number = 0;\n    let sum_row7: number = 0;\n    let sum_col7: number = 0;\n    let sum_diag13: number = 0;\n    let sum_diag14: number = 0;\n    let sum_row8: number = 0;\n    let sum_col8: number = 0;\n    let sum_diag15: number = 0;\n    let sum_diag16: number = 0;\n    let sum_row9: number = 0;\n    let sum_col9: number = 0;\n    let sum_diag17: number = 0;\n    let sum_diag18: number = 0;\n    let sum_row10: number = 0;\n    let sum_col10: number = 0;\n    let sum_diag19: number = 0;\n    let sum_diag20: number = 0;\n    let sum_row11: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmprqajanif.ts(45,9): error TS1005: ',' expected.\n../../../../tmp/tmprqajanif.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row || sum != sum_column) {\n            return false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum != sum_diagonal_1 || sum != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let sum_all_row: number = 0;\n    let sum_all_column: number = 0;\n    let sum_all_diagonal1: number = 0;\n    let sum_all_diagonal2: number = 0;\n    let sum_all_diagonal: number = 0;\n    let sum_all_row_column: number = 0;\n    let sum_all_row_column_diagonal: number = 0;\n    let sum_all_row_column_diagonal_final: number = 0;\n    let sum_all_row_column_diagonal_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_final_final_final_final_final_final_final_final: number = 0;\n    let sum_all_row_column_diagonal_final_final_final_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123160,
      "stdout": "../../../../tmp/tmpyu8k22ik.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_reverse_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_reverse_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_check: number = 0;\n    let sum_of_all_elements_in_matrix_check_2: number = 0;\n    let sum_of_all_elements_in_matrix_check_3: number = 0;\n    let sum_of_all_elements_in_matrix_check_4: number = 0;\n    let sum_of_all_elements_in_matrix_check_5: number = 0;\n    let sum_of_all_elements_in_matrix_check_6: number = 0;\n    let sum_of_all_elements_in_matrix_check_7: number = 0;\n    let sum_of_all_elements_in_matrix_check_8: number = 0;\n    let sum_of_all_elements_in_matrix_check_9: number = 0;\n    let sum_of_all_elements_in_matrix_check_10: number = 0;\n    let sum_of_all_elements_in_matrix_check_11: number = 0;\n    let sum_of_all_elements_in_matrix_check_12: number = 0;\n    let sum_of_all_elements_in_matrix_check_13: number = 0;\n    let sum_of_all_elements_in_matrix_check_14: number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpq5z6rnaz.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            result = false;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn7ea3kqf.js:42:12)\n    at Object.<anonymous> (/tmp/tmpn7ea3kqf.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let sum_all_test: number = 0;\n    let sum_row_test: number = 0;\n    let sum_column_test: number = 0;\n    let sum_diagonal_1_test: number = 0;\n    let sum_diagonal_2_test: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_all += my_matrix[i][j];\n            if (i == j) {\n                sum_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n        }\n    }\n    sum_all_test = sum_all / my_matrix.length;\n    sum_diagonal_1_test = sum_diagonal_1 / my_matrix.length;\n    sum_diagonal_2_test = sum_diagonal_2 / my_matrix.length;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        sum_row_test = sum_row / my_matrix.length;\n        sum_column_test = sum_column / my_matrix.length;\n        if (sum_row_test != sum_all_test || sum_column_test != sum_all_test) {\n            return false;\n        }\n    }\n    if (sum_diagonal_1_test != sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpe2sclk7l.ts(39,1): error TS1005: ')' expected.\n../../../../tmp/tmpe2sclk7l.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum = sum + my_matrix[i][j];\n        }\n        if (i === 0) {\n            sum_diagonal = sum;\n        }\n        if (sum !== sum_diagonal) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum = sum + my_matrix[j][i];\n        }\n        if (sum !== sum_diagonal) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 = sum_diagonal_2 + my_matrix[i][i];\n    }\n    if (sum_diagonal_2 !== sum_diagonal) {\n        return false;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 = sum_diagonal_2 + my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_2 !== sum_diagonal) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpidgqu10i.js:44:12)\n    at Object.<anonymous> (/tmp/tmpidgqu10i.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[i + 1]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[i + 1]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length - 1; i++) {\n        if (sum_of_diagonals[i] !== sum_of_diagonals[i +\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmpu7h5fnip.ts(43,9): error TS1005: ']' expected.\n../../../../tmp/tmpu7h5fnip.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number[] = [];\n    let sum_of_column: number[] = [];\n    let sum_of_diagonal: number[] = [];\n    let sum_of_reverse_diagonal: number[] = [];\n    let sum_of_all_row: number = 0;\n    let sum_of_all_column: number = 0;\n    let sum_of_all_diagonal: number = 0;\n    let sum_of_all_reverse_diagonal: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = false;\n    let is_square_matrix: boolean = false;\n    let is_matrix_length_equal_to_matrix_width: boolean = false;\n    let is_matrix_length_greater_than_zero: boolean = false;\n    let is_matrix_length_equal_to_matrix_width_greater_than_zero: boolean = false;\n    let is_matrix_length_equal_to_matrix_width_greater_than_zero_and_is_square_matrix: boolean = false;\n    let is_matrix_length_equal_to_matrix_width_greater_than_zero_and_is_square_matrix_and_is_magic_square: boolean = false;\n\n    //Check if the matrix is a square matrix.\n    is_square_matrix = square_matrix_test(my_matrix);\n\n    //Check if the matrix length is equal to the matrix width.\n    is_matrix_length_equal_to_matrix_width = matrix_length_equal_to_matrix_width_test(my_matrix);\n\n    //Check if the matrix length is greater than zero.\n    is_matrix_length_greater_than_zero = matrix_length_greater_than_zero_test(my_matrix);\n\n    //Check if the matrix length is equal to the matrix width and greater than zero.\n    is_matrix_length_equal_to_matrix_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123164,
      "stdout": "../../../../tmp/tmp1olvq6da.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0] || sum_of_columns[i] != sum_of_columns[0] || sum_of_diagonals[i] != sum_of_diagonals[0]) {\n            is_magic_square = false;\n        }\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc7_i2m7f.js:42:12)\n    at Object.<anonymous> (/tmp/tmpc7_i2m7f.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum = sum + my_matrix[i][i];\n        sum_diag = sum_diag + my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row = sum_row + my_matrix[i][j];\n            sum_column = sum_column + my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let magic: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diag !== sum_diag2) {\n        magic = false;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        if (sum !== sum_diag) {\n            magic = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        if (sum !== sum_diag) {\n            magic = false;\n        }\n    }\n    return magic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diag1 = 0;\n    let sum_diag2 = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_row_prev = 0;\n    let sum_col_prev = 0;\n    let n = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i > 0) {\n            if (sum_row != sum_row_prev || sum_col != sum_col_prev) {\n                return false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag1 != sum_diag2 || sum_diag1 != sum_row) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_columns[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n        sum_of_all += sum_of_rows[i];\n    }\n    sum_of_diagonals[0] = 0;\n    sum_of_diagonals[1] = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        if (sum_of_rows[i] != sum_of_all || sum_of_columns[i] != sum_of_all || sum_of_diagonals[0] != sum_of_all || sum_of_diagonals[1] != sum_of_all) {\n            result = false;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjtqip337.js:33:12)\n    at Object.<anonymous> (/tmp/tmpjtqip337.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag_rev_sum: number = 0;\n    let sum_diag_sum: number = 0;\n    let sum_row_sum: number = 0;\n    let sum_col_sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_rev_col_row: number = 0;\n    let sum_diag_col_row: number = 0;\n    let sum_diag_rev_col_row_sum: number = 0;\n    let sum_diag_col_row_sum: number = 0;\n    let sum_row_col_sum: number = 0;\n    let sum_diag_rev_col_row_sum_sum: number = 0;\n    let sum_diag_col_row_sum_sum: number = 0;\n    let sum_row_col_sum_sum: number = 0;\n    let sum_diag_rev_col_row_sum_sum_sum: number = 0;\n    let sum_diag_col_row_sum_sum_sum: number = 0;\n    let sum_row_col_sum_sum_sum: number = 0;\n    let sum_diag_rev_col_row_sum_sum_sum_sum: number = 0;\n    let sum_diag_col_row_sum_sum_sum_sum: number = 0;\n    let sum_row_col_sum_sum_sum_sum: number = 0;\n    let sum_diag_rev_col_row_sum_sum_sum_sum_sum: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmporwo00kh.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_2: number = 0;\n    let sum_column_2: number = 0;\n    let sum_row_3: number = 0;\n    let sum_column_3: number = 0;\n    let sum_row_4: number = 0;\n    let sum_column_4: number = 0;\n    let sum_row_5: number = 0;\n    let sum_column_5: number = 0;\n    let sum_row_6: number = 0;\n    let sum_column_6: number = 0;\n    let sum_row_7: number = 0;\n    let sum_column_7: number = 0;\n    let sum_row_8: number = 0;\n    let sum_column_8: number = 0;\n    let sum_row_9: number = 0;\n    let sum_column_9: number = 0;\n    let sum_row_10: number = 0;\n    let sum_column_10: number = 0;\n    let sum_row_11: number = 0;\n    let sum_column_11: number = 0;\n    let sum_row_12: number = 0;\n    let sum_column_12: number = 0;\n    let sum_row_13: number = 0;\n    let sum_column_13: number = 0;\n    let sum_row_14: number = 0;\n    let sum_column_14: number = 0;\n    let sum_row_15: number = 0;\n    let sum_column_15: number = 0;\n    let sum_row_16: number = 0;\n    let sum_column_16: number = 0;\n    let sum_row_17: number = 0;\n    let sum_column_17: number = 0;\n    let sum_row_18: number = 0;\n    let sum_column_18: number = 0;\n    let sum_row_19: number =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmp0awz9qlq.ts(43,9): error TS1005: ',' expected.\n../../../../tmp/tmp0awz9qlq.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (i = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] != sum_of_rows[i + 1]) {\n            return false;\n        }\n    }\n    for (i = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] != sum_of_columns[i + 1]) {\n            return false;\n        }\n    }\n    for (i = 0; i < sum_of_diagonals.length - 1; i++) {\n        if (sum_of_diagonals[i] != sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmpw7ktn5fx.ts(45,1): error TS1005: ')' expected.\n../../../../tmp/tmpw7ktn5fx.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let sum_of_diag: number = 0;\n    let sum_of_diag2: number = 0;\n    let sum_of_diag3: number = 0;\n    let sum_of_diag4: number = 0;\n    let sum_of_diag5: number = 0;\n    let sum_of_diag6: number = 0;\n    let sum_of_diag7: number = 0;\n    let sum_of_diag8: number = 0;\n    let sum_of_diag9: number = 0;\n    let sum_of_diag10: number = 0;\n    let sum_of_diag11: number = 0;\n    let sum_of_diag12: number = 0;\n    let sum_of_diag13: number = 0;\n    let sum_of_diag14: number = 0;\n    let sum_of_diag15: number = 0;\n    let sum_of_diag16: number = 0;\n    let sum_of_diag17: number = 0;\n    let sum_of_diag18: number = 0;\n    let sum_of_diag19: number = 0;\n    let sum_of_diag20: number = 0;\n    let sum_of_diag21: number = 0;\n    let sum_of_diag22: number = 0;\n    let sum_of_diag23: number = 0;\n    let sum_of_diag24: number = 0;\n    let sum_of_diag25: number = 0;\n    let sum_of_diag26: number = 0;\n    let sum_of_diag27: number = 0;\n    let sum_of_diag28: number = 0;\n    let sum_of_diag29: number =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmps6howmrb.ts(38,9): error TS1005: ',' expected.\n../../../../tmp/tmps6howmrb.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_diagonal += my_matrix[i][i];\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_diagonal_2 += my_matrix[i][n - i - 1];\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_column = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column != sum) {\n            return false;\n        }\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] != sum_of_cols[0]) {\n            magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diags.length; i++) {\n        if (sum_of\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmpyr0_1v5h.ts(44,1): error TS1005: ')' expected.\n../../../../tmp/tmpyr0_1v5h.ts(55,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_diagonals_index: number = 0;\n    let sum_of_cols_index: number = 0;\n    let sum_of_rows_index: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows[sum_of_rows_index] = sum;\n        sum_of_rows_index++;\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols[sum_of_cols_index] = sum;\n        sum_of_cols_index++;\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals[sum_of_diagonals_index] = sum;\n    sum_of_diagonals_index++;\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals[sum_of_diagonals_index] = sum;\n    sum_of_diagonals_index++;\n    sum = 0;\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmp56uyjljf.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_a_row: number = 0;\n    let sum_of_all_elements_in_a_column: number = 0;\n    let sum_of_all_elements_in_a_diagonal: number = 0;\n    let sum_of_all_elements_in_a_diagonal_2: number = 0;\n    let sum_of_all_elements_in_a_diagonal_3: number = 0;\n    let sum_of_all_elements_in_a_diagonal_4: number = 0;\n    let sum_of_all_elements_in_a_diagonal_5: number = 0;\n    let sum_of_all_elements_in_a_diagonal_6: number = 0;\n    let sum_of_all_elements_in_a_diagonal_7: number = 0;\n    let sum_of_all_elements_in_a_diagonal_8: number = 0;\n    let sum_of_all_elements_in_a_diagonal_9: number = 0;\n    let sum_of_all_elements_in_a_diagonal_10: number = 0;\n    let sum_of_all_elements_in_a_diagonal_11: number = 0;\n    let sum_of_all_elements_in_a_diagonal_12: number = 0;\n    let sum_of_all_elements_in_a_diagonal_13: number = 0;\n    let sum_of_all_elements_in_a_diagonal_14: number = 0;\n    let sum_of_all_elements_in_a_diagonal_15: number = 0;\n    let sum_of_all_elements_in_a_diagonal_16: number = 0;\n    let sum_of_all_elements_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmpukiqji0k.ts(37,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal_2 = 0;\n    let sum_column = 0;\n    let sum_row = 0;\n    let result = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n        sum_diagonal += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum != sum_diagonal) {\n        result = false;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_column = 0;\n        sum_row = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_column += my_matrix[j][i];\n            sum_row += my_matrix[i][j];\n        }\n        if (sum != sum_column || sum != sum_row) {\n            result = false;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row = 0;\n    let sum_of_col = 0;\n    let sum_of_diag = 0;\n    let sum_of_rev_diag = 0;\n    let sum_of_all = 0;\n    let sum_of_all_row = 0;\n    let sum_of_all_col = 0;\n    let sum_of_all_diag = 0;\n    let sum_of_all_rev_diag = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_rev_diag += my_matrix[i][j];\n            }\n        }\n        sum_of_all_row += sum_of_row;\n        sum_of_all_col += sum_of_col;\n        sum_of_all_diag += sum_of_diag;\n        sum_of_all_rev_diag += sum_of_rev_diag;\n        sum_of_all = sum_of_all_row + sum_of_all_col + sum_of_all_diag + sum_of_all_rev_diag;\n        if (sum_of_all_row == sum_of_all_col && sum_of_all_col == sum_of_all_diag && sum_of_all_diag == sum_of_all_rev_diag) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqqror3gb.js:39:12)\n    at Object.<anonymous> (/tmp/tmpqqror3gb.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            return false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let sum_all_row: number = 0;\n    let sum_all_column: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_all += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        sum_all_row += sum_row;\n        sum_row = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        sum_all_column += sum_column;\n        sum_column = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_all_row === sum_all_column && sum_all_row === sum_diagonal_1 && sum_all_row === sum_diagonal_2 && sum_all_row === sum_all) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2se0hk7i.js:45:12)\n    at Object.<anonymous> (/tmp/tmp2se0hk7i.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum2: number = 0;\n    let sum3: number = 0;\n    let sum4: number = 0;\n    let sum5: number = 0;\n    let sum6: number = 0;\n    let sum7: number = 0;\n    let sum8: number = 0;\n    let sum9: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum2 += my_matrix[j][i];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i === j) {\n                sum3 += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i + j === my_matrix.length - 1) {\n                sum4 += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i === 0) {\n                sum5 += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_mat\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "../../../../tmp/tmpiwr5_sti.ts(45,1): error TS1005: ';' expected.\n../../../../tmp/tmpiwr5_sti.ts(45,9): error TS1005: ')' expected.\n../../../../tmp/tmpiwr5_sti.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_rev_row_col: number = 0;\n    let sum_diag_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_diag_rev_row_col_rev: number = 0;\n    let sum_diag_row_col_rev: number = 0;\n    let sum_diag_col_rev_row: number = 0;\n    let sum_diag_row_rev_col: number = 0;\n    let sum_diag_rev_row_col_rev_row: number = 0;\n    let sum_diag_row_col_rev_row: number = 0;\n    let sum_diag_col_rev_row_col: number = 0;\n    let sum_diag_row_rev_col_row: number = 0;\n    let sum_diag_rev_row_col_rev_row_col: number = 0;\n    let sum_diag_row_col_rev_row_col: number = 0;\n    let sum_diag_col_rev_row_col_rev: number = 0;\n    let sum_diag_row_rev_col_row_rev: number = 0;\n    let sum_diag_rev_row_col_rev_row_col_rev: number = 0;\n    let sum_diag_row_col_rev_row_col_rev: number = 0;\n    let sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmpg_1a7qe3.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0] || sum_of_columns[i] != sum_of_columns[0] || sum_of_diagonals[i] != sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppuumct74.js:41:12)\n    at Object.<anonymous> (/tmp/tmppuumct74.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag2: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all2: number = 0;\n    let sum_of_all3: number = 0;\n    let sum_of_all4: number = 0;\n    let sum_of_all5: number = 0;\n    let sum_of_all6: number = 0;\n    let sum_of_all7: number = 0;\n    let sum_of_all8: number = 0;\n    let sum_of_all9: number = 0;\n    let sum_of_all10: number = 0;\n    let sum_of_all11: number = 0;\n    let sum_of_all12: number = 0;\n    let sum_of_all13: number = 0;\n    let sum_of_all14: number = 0;\n    let sum_of_all15: number = 0;\n    let sum_of_all16: number = 0;\n    let sum_of_all17: number = 0;\n    let sum_of_all18: number = 0;\n    let sum_of_all19: number = 0;\n    let sum_of_all20: number = 0;\n    let sum_of_all21: number = 0;\n    let sum_of_all22: number = 0;\n    let sum_of_all23: number = 0;\n    let sum_of_all24: number = 0;\n    let sum_of_all25: number = 0;\n    let sum_of_all26: number = 0;\n    let sum_of_all27: number = 0;\n    let sum_of_all28: number = 0;\n    let sum_of_all29: number = 0;\n    let sum_of_all30: number = 0;\n    let sum_of_all31: number = 0;\n    let sum_of_all32: number = 0;\n    let sum_of_all33\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmp60rnfzu2.ts(51,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    let sum_of_all: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        if (sum_of_row != sum_of_column) {\n            return false;\n        }\n        sum_of_all = sum_of_row;\n    }\n    if (sum_of_diagonal != sum_of_reverse_diagonal) {\n        return false;\n    }\n    if (sum_of_diagonal != sum_of_all) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row[i] = 0;\n        sum_col[i] = 0;\n        sum_diag[i] = 0;\n        sum_diag2[i] = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row[i] += my_matrix[i][j];\n            sum_col[i] += my_matrix[j][i];\n            sum_diag[i] += my_matrix[i][i];\n            sum_diag2[i] += my_matrix[i][my_matrix.length - 1 - i];\n        }\n    }\n    let sum_row_set = new Set(sum_row);\n    let sum_col_set = new Set(sum_col);\n    let sum_diag_set = new Set(sum_diag);\n    let sum_diag2_set = new Set(sum_diag2);\n    if (sum_row_set.size == 1 && sum_col_set.size == 1 && sum_diag_set.size == 1 && sum_diag2_set.size == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8r40iudd.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8r40iudd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_other_diagonal: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_other_diagonals: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n            if (i === j) {\n                sum_of_diagonal += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_other_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_all_rows += sum_of_row;\n        sum_of_all_columns += sum_of_column;\n        sum_of_all_diagonals += sum_of_diagonal;\n        sum_of_all_other_diagonals += sum_of_other_diagonal;\n        sum_of_row = 0;\n        sum_of_column = 0;\n        sum_of_diagonal = 0;\n        sum_of_other_diagonal = 0;\n    }\n    if (sum_of_all_rows / my_matrix.length === sum_of_all_columns / my_matrix.length && sum_of_all_rows / my_matrix.length === sum_of_all_diagonals / my_matrix.length && sum_of_all_rows / my_matrix.length === sum_of_all_other_diagonals / my_matrix.length) {\n        return true;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123167,
      "stdout": "../../../../tmp/tmpu6grvkjn.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_numbers: number = 0;\n    let sum_of_numbers_in_rows: number = 0;\n    let sum_of_numbers_in_columns: number = 0;\n    let sum_of_numbers_in_diagonals: number = 0;\n    let sum_of_numbers_in_diagonals_2: number = 0;\n    let sum_of_numbers_in_diagonals_3: number = 0;\n    let sum_of_numbers_in_diagonals_4: number = 0;\n    let sum_of_numbers_in_diagonals_5: number = 0;\n    let sum_of_numbers_in_diagonals_6: number = 0;\n    let sum_of_numbers_in_diagonals_7: number = 0;\n    let sum_of_numbers_in_diagonals_8: number = 0;\n    let sum_of_numbers_in_diagonals_9: number = 0;\n    let sum_of_numbers_in_diagonals_10: number = 0;\n    let sum_of_numbers_in_diagonals_11: number = 0;\n    let sum_of_numbers_in_diagonals_12: number = 0;\n    let sum_of_numbers_in_diagonals_13: number = 0;\n    let sum_of_numbers_in_diagonals_14: number = 0;\n    let sum_of_numbers_in_diagonals_15: number = 0;\n    let sum_of_numbers_in_diagonals_16: number = 0;\n    let sum_of_numbers_in_diagonals_17: number = 0;\n    let sum_of_numbers_in_diagonals_18: number = 0;\n    let sum_of_numbers_in_diagonals_19: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123167,
      "stdout": "../../../../tmp/tmpe0mse5dm.ts(29,9): error TS1005: ',' expected.\n../../../../tmp/tmpe0mse5dm.ts(40,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row !== sum || sum_col !== sum) {\n            magic_square = false;\n        }\n    }\n\n    if (sum_diag_1 !== sum || sum_diag_2 !== sum) {\n        magic_square = false;\n    }\n\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplsd_ebd2.js:37:12)\n    at Object.<anonymous> (/tmp/tmplsd_ebd2.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag2: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_elements2: number = 0;\n    let sum_of_elements3: number = 0;\n    let sum_of_elements4: number = 0;\n    let sum_of_elements5: number = 0;\n    let sum_of_elements6: number = 0;\n    let sum_of_elements7: number = 0;\n    let sum_of_elements8: number = 0;\n    let sum_of_elements9: number = 0;\n    let sum_of_elements10: number = 0;\n    let sum_of_elements11: number = 0;\n    let sum_of_elements12: number = 0;\n    let sum_of_elements13: number = 0;\n    let sum_of_elements14: number = 0;\n    let sum_of_elements15: number = 0;\n    let sum_of_elements16: number = 0;\n    let sum_of_elements17: number = 0;\n    let sum_of_elements18: number = 0;\n    let sum_of_elements19: number = 0;\n    let sum_of_elements20: number = 0;\n    let sum_of_elements21: number = 0;\n    let sum_of_elements22: number = 0;\n    let sum_of_elements23: number = 0;\n    let sum_of_elements24: number = 0;\n    let sum_of_elements25: number = 0;\n    let sum_of_elements26: number = 0;\n    let sum_of_elements27: number = 0;\n    let sum_of_elements28: number = 0;\n    let sum_of_elements29: number = 0;\n    let sum_of_elements30: number = 0;\n    let sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123167,
      "stdout": "../../../../tmp/tmp1_l9agft.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diag1 = 0;\n    let sum_diag2 = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_row_test = 0;\n    let sum_col_test = 0;\n    let sum_diag1_test = 0;\n    let sum_diag2_test = 0;\n    let sum_row_test_2 = 0;\n    let sum_col_test_2 = 0;\n    let sum_diag1_test_2 = 0;\n    let sum_diag2_test_2 = 0;\n    let sum_row_test_3 = 0;\n    let sum_col_test_3 = 0;\n    let sum_diag1_test_3 = 0;\n    let sum_diag2_test_3 = 0;\n    let sum_row_test_4 = 0;\n    let sum_col_test_4 = 0;\n    let sum_diag1_test_4 = 0;\n    let sum_diag2_test_4 = 0;\n    let sum_row_test_5 = 0;\n    let sum_col_test_5 = 0;\n    let sum_diag1_test_5 = 0;\n    let sum_diag2_test_5 = 0;\n    let sum_row_test_6 = 0;\n    let sum_col_test_6 = 0;\n    let sum_diag1_test_6 = 0;\n    let sum_diag2_test_6 = 0;\n    let sum_row_test_7 = 0;\n    let sum_col_test_7 = 0;\n    let sum_diag1_test_7 = 0;\n    let sum_diag2_test_7 = 0;\n    let sum_row_test_8 = 0;\n    let sum_col_test_8 = 0;\n    let sum_diag1_test_8 = 0;\n    let sum_diag2_test_8 = 0;\n    let sum_row_test_9 = 0;\n    let sum_col_test_9 = 0;\n    let sum_di\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmpeycfc0ec.ts(53,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diagonal1: number = 0;\n    let diagonal2: number = 0;\n    let row: number = 0;\n    let column: number = 0;\n    let n: number = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            row += my_matrix[i][j];\n            column += my_matrix[j][i];\n        }\n        if (row !== sum || column !== sum) {\n            return false;\n        }\n        row = 0;\n        column = 0;\n    }\n    for (let i = 0, j = n - 1; i < n; i++ , j--) {\n        diagonal1 += my_matrix[i][i];\n        diagonal2 += my_matrix[i][j];\n    }\n    if (diagonal1 !== sum || diagonal2 !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[i + 1]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[i + 1]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length - 1; i++) {\n        if (sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmp9pg5pqj_.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmp9pg5pqj_.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_diagonals_2: number = 0;\n    let sum_of_all_diagonals_3: number = 0;\n    let sum_of_all_diagonals_4: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n            sum_of_all_rows += my_matrix[i][j];\n            sum_of_all_columns += my_matrix[j][i];\n            sum_of_all_diagonals += my_matrix[i][j];\n            sum_of_all_diagonals_2 += my_matrix[i][my_matrix.length - 1 - j];\n            sum_of_all_diagonals_3 += my_matrix[my_matrix.length - 1 - i][j];\n            sum_of_all_diagonals_4 += my_matrix[my_matrix.length - 1 - i][my_matrix.length - 1 - j];\n            if (j == my_matrix[i].length - 1) {\n                sum_of_rows.push(sum_of_all_rows);\n                sum_of_all_rows = 0;\n            }\n            if (i == my_matrix.length - 1) {\n                sum_of_columns.push(sum_of_all_columns);\n                sum_of_all_columns = 0;\n            }\n        }\n    }\n    sum_of_diagonals.push(sum_of_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmpxwyz6gg9.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpxwyz6gg9.ts(33,9): error TS1005: ',' expected.\n../../../../tmp/tmpxwyz6gg9.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(0);\n        sum_of_cols.push(0);\n        sum_of_diags.push(0);\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[j] += my_matrix[i][j];\n            if (i == j) {\n                sum_of_diags[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diags[1] += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n        if (sum_of_cols[i] != sum_of_cols[0]) {\n            return false;\n        }\n        if (sum_of_diags[i] != sum_of_diags[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps7wyc4dp.js:39:12)\n    at Object.<anonymous> (/tmp/tmps7wyc4dp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_array: number[] = [];\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n            if (i === j) {\n                sum_diagonal1 += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_diagonal2 += my_matrix[i][j];\n            }\n        }\n        sum_array.push(sum_row);\n        sum_array.push(sum_column);\n        sum_row = 0;\n        sum_column = 0;\n    }\n    sum_array.push(sum_diagonal1);\n    sum_array.push(sum_diagonal2);\n\n    for (let i: number = 0; i < sum_array.length - 1; i++) {\n        if (sum_array[i] !== sum_array[i + 1]) {\n            is_magic_square = false;\n        }\n    }\n    return is_magic_square;\n}\n\nlet my_matrix: number[][] = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconsole.log(magic_square_test(my_matrix));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_anti_diag: number[] = [];\n    let sum_all: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_rows[i] = 0;\n        sum_cols[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_rows[i] += my_matrix[i][j];\n            sum_cols[i] += my_matrix[j][i];\n            if (i == j) {\n                sum_diag[i] = 0;\n                sum_diag[i] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_anti_diag[i] = 0;\n                sum_anti_diag[i] += my_matrix[i][j];\n            }\n            sum_all += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < sum_rows.length; i++) {\n        if (sum_rows[i] != sum_all || sum_cols[i] != sum_all || sum_diag[i] != sum_all || sum_anti_diag[i] != sum_all) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9o5faeac.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9o5faeac.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let magic_number: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (magic_number == 0) {\n            magic_number = sum_row;\n        }\n        if (magic_number != sum_row || magic_number != sum_column) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (magic_number != sum_diagonal || magic_number != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let sum_of_diag: number = 0;\n    let sum_of_diag2: number = 0;\n    let sum_of_diag3: number = 0;\n    let sum_of_diag4: number = 0;\n    let sum_of_diag5: number = 0;\n    let sum_of_diag6: number = 0;\n    let sum_of_diag7: number = 0;\n    let sum_of_diag8: number = 0;\n    let sum_of_diag9: number = 0;\n    let sum_of_diag10: number = 0;\n    let sum_of_diag11: number = 0;\n    let sum_of_diag12: number = 0;\n    let sum_of_diag13: number = 0;\n    let sum_of_diag14: number = 0;\n    let sum_of_diag15: number = 0;\n    let sum_of_diag16: number = 0;\n    let sum_of_diag17: number = 0;\n    let sum_of_diag18: number = 0;\n    let sum_of_diag19: number = 0;\n    let sum_of_diag20: number = 0;\n    let sum_of_diag21: number = 0;\n    let sum_of_diag22: number = 0;\n    let sum_of_diag23: number = 0;\n    let sum_of_diag24: number = 0;\n    let sum_of_diag25: number = 0;\n    let sum_of_diag26: number = 0;\n    let sum_of_diag27: number = 0;\n    let sum_of_diag28: number = 0;\n    let sum_of_diag29: number = 0;\n    let sum_of_diag30: number = 0;\n    let sum_of_diag31: number = 0;\n    let sum_of_diag32: number = 0;\n    let sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmpr69vw3ba.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    //check if matrix is square\n    if (my_matrix.length != my_matrix[0].length) {\n        return false;\n    }\n    //check if matrix is magic square\n    let sum = 0;\n    let sum_check = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_check += my_matrix[i][j];\n        }\n        if (sum_check != sum) {\n            return false;\n        }\n        sum_check = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_check += my_matrix[j][i];\n        }\n        if (sum_check != sum) {\n            return false;\n        }\n        sum_check = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_check += my_matrix[i][i];\n    }\n    if (sum_check != sum) {\n        return false;\n    }\n    sum_check = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_check += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_check != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_diagonals_2: number = 0;\n    let sum_of_all_diagonals_3: number = 0;\n    let sum_of_all_diagonals_4: number = 0;\n    let sum_of_all_diagonals_5: number = 0;\n    let sum_of_all_diagonals_6: number = 0;\n    let sum_of_all_diagonals_7: number = 0;\n    let sum_of_all_diagonals_8: number = 0;\n    let sum_of_all_diagonals_9: number = 0;\n    let sum_of_all_diagonals_10: number = 0;\n    let sum_of_all_diagonals_11: number = 0;\n    let sum_of_all_diagonals_12: number = 0;\n    let sum_of_all_diagonals_13: number = 0;\n    let sum_of_all_diagonals_14: number = 0;\n    let sum_of_all_diagonals_15: number = 0;\n    let sum_of_all_diagonals_16: number = 0;\n    let sum_of_all_diagonals_17: number = 0;\n    let sum_of_all_diagonals_18: number = 0;\n    let sum_of_all_diagonals_19: number = 0;\n    let sum_of_all_diagonals_20: number = 0;\n    let sum_of_all_diagonals_21: number = 0;\n    let sum_of_all_diagonals_22: number = 0;\n    let sum_of_all_di\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123162,
      "stdout": "../../../../tmp/tmpi2okzbhn.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row = 0;\n    let sum_of_column = 0;\n    let sum_of_diagonal = 0;\n    let sum_of_other_diagonal = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum_of_diagonal = sum_of_row;\n            sum_of_other_diagonal = sum_of_column;\n        }\n        if (sum_of_row !== sum_of_diagonal || sum_of_column !== sum_of_other_diagonal) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    let i: number;\n    let j: number;\n    let k: number;\n    let l: number;\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    for (k = 0; k < my_matrix.length; k++) {\n        sum_diagonal += my_matrix[k][k];\n    }\n    for (l = 0; l < my_matrix.length; l++) {\n        sum_reverse_diagonal += my_matrix[l][my_matrix.length - 1 - l];\n    }\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row !== sum) {\n            result = false;\n        }\n        sum_row = 0;\n    }\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column !== sum) {\n            result = false;\n        }\n        sum_column = 0;\n    }\n    if (sum_diagonal !== sum || sum_reverse_diagonal !== sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvmoxoxqc.js:50:12)\n    at Object.<anonymous> (/tmp/tmpvmoxoxqc.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_diagonals[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmpjb3vcjh7.ts(42,9): error TS1005: ']' expected.\n../../../../tmp/tmpjb3vcjh7.ts(53,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number[] = [];\n    let sum_of_col: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag_2: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_2: number = 0;\n    let sum_of_all_3: number = 0;\n    let sum_of_all_4: number = 0;\n    let sum_of_all_5: number = 0;\n    let sum_of_all_6: number = 0;\n    let sum_of_all_7: number = 0;\n    let sum_of_all_8: number = 0;\n    let sum_of_all_9: number = 0;\n    let sum_of_all_10: number = 0;\n    let sum_of_all_11: number = 0;\n    let sum_of_all_12: number = 0;\n    let sum_of_all_13: number = 0;\n    let sum_of_all_14: number = 0;\n    let sum_of_all_15: number = 0;\n    let sum_of_all_16: number = 0;\n    let sum_of_all_17: number = 0;\n    let sum_of_all_18: number = 0;\n    let sum_of_all_19: number = 0;\n    let sum_of_all_20: number = 0;\n    let sum_of_all_21: number = 0;\n    let sum_of_all_22: number = 0;\n    let sum_of_all_23: number = 0;\n    let sum_of_all_24: number = 0;\n    let sum_of_all_25: number = 0;\n    let sum_of_all_26: number = 0;\n    let sum_of_all_27: number = 0;\n    let sum_of_all_28: number = 0;\n    let sum_of_all_29: number = 0;\n    let sum_of_all_30: number = 0;\n    let sum_of_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmpoi746ul4.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n\n    //calculate sum of all elements in matrix\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of rows\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of columns\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n\n    //calculate sum of diagonals\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n\n    //check if all sums are equal\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmp4dk_wtiy.ts(45,1): error TS1005: ')' expected.\n../../../../tmp/tmp4dk_wtiy.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_elements: number = 0;\n    let is_magic_square: boolean = true;\n\n    //calculate sum of elements\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of diagonals\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n\n    //check if all sums are equal\n    for (let i: number = 0; i < sum_of_rows.length; i++)\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmp03pbuya7.ts(59,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            result = false;\n        }\n    }\n\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            result = false;\n        }\n    }\n\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "../../../../tmp/tmpmpxl72z0.ts(51,1): error TS1005: ')' expected.\n../../../../tmp/tmpmpxl72z0.ts(62,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbtvgpac7.js:41:12)\n    at Object.<anonymous> (/tmp/tmpbtvgpac7.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let sum_all_test: number = 0;\n    let test_result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_all = sum_row;\n        }\n        if (sum_all != sum_row || sum_all != sum_column) {\n            test_result = false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diagonal_1 != sum_all || sum_diagonal_2 != sum_all) {\n        test_result = false;\n    }\n    return test_result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col2: number = 0;\n    let sum_row_col3: number = 0;\n    let sum_row_col4: number = 0;\n    let sum_row_col5: number = 0;\n    let sum_row_col6: number = 0;\n    let sum_row_col7: number = 0;\n    let sum_row_col8: number = 0;\n    let sum_row_col9: number = 0;\n    let sum_row_col10: number = 0;\n    let sum_row_col11: number = 0;\n    let sum_row_col12: number = 0;\n    let sum_row_col13: number = 0;\n    let sum_row_col14: number = 0;\n    let sum_row_col15: number = 0;\n    let sum_row_col16: number = 0;\n    let sum_row_col17: number = 0;\n    let sum_row_col18: number = 0;\n    let sum_row_col19: number = 0;\n    let sum_row_col20: number = 0;\n    let sum_row_col21: number = 0;\n    let sum_row_col22: number = 0;\n    let sum_row_col23: number = 0;\n    let sum_row_col24: number = 0;\n    let sum_row_col25: number = 0;\n    let sum_row_col26: number = 0;\n    let sum_row_col27: number = 0;\n    let sum_row_col28: number = 0;\n    let sum_row_col29: number = 0;\n    let sum_row_col30: number = 0;\n    let sum_row_col31: number = 0;\n    let sum_row_col32: number = 0;\n    let sum_row_col33: number = 0;\n    let sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmp6a4e7ppz.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = true;\n\n    //calculate sum of rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of diagonals\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n\n    //check if all sums are equal\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            is_magic_square = false;\n        }\n    }\n\n    return is_magic_square;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7lb3vgxl.js:45:12)\n    at Object.<anonymous> (/tmp/tmp7lb3vgxl.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_diag = sum_row;\n            sum_diag2 = sum_col;\n        }\n        else {\n            if (sum_diag != sum_row || sum_diag != sum_col) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_rows_and_columns: number = 0;\n    let sum_of_diagonals_and_columns: number = 0;\n    let sum_of_rows_and_diagonals: number = 0;\n    let sum_of_rows_columns_and_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_minus_one: number = 0;\n    let sum_of_all_elements_in_matrix_minus_two: number = 0;\n    let sum_of_all_elements_in_matrix_minus_three: number = 0;\n    let sum_of_all_elements_in_matrix_minus_four: number = 0;\n    let sum_of_all_elements_in_matrix_minus_five: number = 0;\n    let sum_of_all_elements_in_matrix_minus_six: number = 0;\n    let sum_of_all_elements_in_matrix_minus_seven: number = 0;\n    let sum_of_all_elements_in_matrix_minus_eight: number = 0;\n    let sum_of_all_elements_in_matrix_minus_nine: number = 0;\n    let sum_of_all_elements_in_matrix_minus_ten: number = 0;\n    let sum_of_all_elements_in_matrix_minus_eleven: number = 0;\n    let sum_of_all_elements_in_matrix_minus_twelve: number = 0;\n    let sum_of_all_elements_in_matrix_minus_thirteen: number = 0;\n    let sum_of_all_elements_in_matrix_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "../../../../tmp/tmpqldo1qtp.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row = 0;\n    let sum_of_col = 0;\n    let sum_of_diag = 0;\n    let sum_of_rev_diag = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n            if (i === j) {\n                sum_of_diag += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_rev_diag += my_matrix[i][j];\n            }\n        }\n        if (sum_of_row !== sum_of_col || sum_of_row !== sum_of_diag || sum_of_row !== sum_of_rev_diag) {\n            return false;\n        }\n        sum_of_row = 0;\n        sum_of_col = 0;\n    }\n    return true;\n}\n\nconsole.log(magic_square_test(magic_square));\nconsole.log(magic_square_test(not_magic_square));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "../../../../tmp/tmpsslvfckd.ts(27,31): error TS2304: Cannot find name 'magic_square'.\n../../../../tmp/tmpsslvfckd.ts(28,31): error TS2304: Cannot find name 'not_magic_square'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_temp: number = 0;\n    let sum_column_temp: number = 0;\n    let sum_diagonal_1_temp: number = 0;\n    let sum_diagonal_2_temp: number = 0;\n    let sum_row_temp_2: number = 0;\n    let sum_column_temp_2: number = 0;\n    let sum_diagonal_1_temp_2: number = 0;\n    let sum_diagonal_2_temp_2: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row_temp += my_matrix[i][j];\n            sum_column_temp += my_matrix[j][i];\n            if (i == j) {\n                sum_diagonal_1_temp += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2_temp += my_matrix[i][j];\n            }\n        }\n        if (sum_row_temp == sum_row) {\n            sum_row_temp_2 += 1;\n        }\n        if (sum_column_temp == sum_column) {\n            sum_column_temp_2 += 1;\n        }\n        if (sum_diagonal_1_temp == sum_diagonal_1) {\n            sum_diagonal_1_temp_2 += 1;\n        }\n        if (sum_diagonal_2_temp == sum_diagonal_2) {\n            sum_diagonal_2_temp_2 += 1;\n        }\n        sum_row = sum_row_temp;\n        sum_column = sum_column_temp;\n        sum_diagonal_1 = sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "../../../../tmp/tmpju551nj3.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diagonal1: number = 0;\n    let diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = row_sum;\n        }\n        if (sum != row_sum || sum != column_sum) {\n            return false;\n        }\n        diagonal1 += my_matrix[i][i];\n        diagonal2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (diagonal1 != sum || diagonal2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_all += my_matrix[i][j];\n            if (i === j) {\n                sum_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n            if (i === 0) {\n                sum_row += my_matrix[i][j];\n            }\n            if (j === 0) {\n                sum_column += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_diagonal_1 !== sum_all / my_matrix.length || sum_diagonal_2 !== sum_all / my_matrix.length || sum_row !== sum_all / my_matrix.length || sum_column !== sum_all / my_matrix.length) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diag = 0;\n    let sum_diag2 = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][0];\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_row = 0;\n        let sum_col = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row !== sum || sum_col !== sum) {\n            return false;\n        }\n    }\n    if (sum_diag !== sum || sum_diag2 !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_numbers: number = 0;\n    let sum_of_all_numbers_in_matrix: number = 0;\n    let is_magic_square: boolean = true;\n\n    //Calculate the sum of all numbers in the matrix\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_numbers_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    //Calculate the sum of all rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n        }\n    }\n\n    //Calculate the sum of all columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n\n    //Calculate the sum of the diagonals\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    //Check if all sums are equal\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all_numbers) {\n            is_magic_square\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "../../../../tmp/tmpink996mf.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row[i] = 0;\n        sum_col[i] = 0;\n        sum_diag[i] = 0;\n        sum_diag_rev[i] = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row[i] += my_matrix[i][j];\n            sum_col[i] += my_matrix[j][i];\n            sum_diag[i] += my_matrix[i][i];\n            sum_diag_rev[i] += my_matrix[i][my_matrix.length - 1 - i];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        if (sum_row[i] != sum_row[0]) {\n            return false;\n        }\n        if (sum_col[i] != sum_col[0]) {\n            return false;\n        }\n        if (sum_diag[i] != sum_diag[0]) {\n            return false;\n        }\n        if (sum_diag_rev[i] != sum_diag_rev[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqgf_y78e.js:40:12)\n    at Object.<anonymous> (/tmp/tmpqgf_y78e.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_all: number = 0;\n    let is_magic_square: boolean = true;\n\n    //calculate sum of all numbers\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of rows\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of columns\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of diagonals\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    //check if all sums are equal\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "../../../../tmp/tmpyujvonth.ts(50,1): error TS1005: ')' expected.\n../../../../tmp/tmpyujvonth.ts(61,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_first_row = 0;\n    let sum_of_second_row = 0;\n    let sum_of_third_row = 0;\n    let sum_of_first_column = 0;\n    let sum_of_second_column = 0;\n    let sum_of_third_column = 0;\n    let sum_of_diagonal_1 = 0;\n    let sum_of_diagonal_2 = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            if (i == 0) {\n                sum_of_first_row += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_of_second_row += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_of_third_row += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_of_first_column += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_of_second_column += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_of_third_column += my_matrix[i][j];\n            }\n            if (i == j) {\n                sum_of_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j == 2) {\n                sum_of_diagonal_2 += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_of_first_row == sum_of_second_row && sum_of_second_row == sum_of_third_row && sum_of_third_row == sum_of_first_column && sum_of_first_column == sum_of_second_column && sum_of_second_column == sum_of_third_column && sum_of_third_column == sum_of_diagonal_1 && sum_of_di\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123170,
      "stdout": "../../../../tmp/tmprkuupj5n.ts(41,1): error TS1005: ')' expected.\n../../../../tmp/tmprkuupj5n.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_diag1: number = 0;\n    let sum_of_diag2: number = 0;\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_row = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_col += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum_of_col);\n        sum_of_col = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diag1 += my_matrix[i][i];\n    }\n    sum_of_diags.push(sum_of_diag1);\n    sum_of_diag1 = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diag2 += my_matrix[i][my_matrix.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "../../../../tmp/tmpyf_67az5.ts(42,48): error TS1003: Identifier expected.\n../../../../tmp/tmpyf_67az5.ts(43,1): error TS1005: ']' expected.\n../../../../tmp/tmpyf_67az5.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum: number = 0;\n    let i: number;\n    let j: number;\n    let k: number;\n    let l: number;\n    let m: number;\n    let n: number;\n    let o: number;\n    let p: number;\n    let q: number;\n    let r: number;\n    let s: number;\n    let t: number;\n    let u: number;\n    let v: number;\n    let w: number;\n    let x: number;\n    let y: number;\n    let z: number;\n    let aa: number;\n    let bb: number;\n    let cc: number;\n    let dd: number;\n    let ee: number;\n    let ff: number;\n    let gg: number;\n    let hh: number;\n    let ii: number;\n    let jj: number;\n    let kk: number;\n    let ll: number;\n    let mm: number;\n    let nn: number;\n    let oo: number;\n    let pp: number;\n    let qq: number;\n    let rr: number;\n    let ss: number;\n    let tt: number;\n    let uu: number;\n    let vv: number;\n    let ww: number;\n    let xx: number;\n    let yy: number;\n    let zz: number;\n    let aaa: number;\n    let bbb: number;\n    let ccc: number;\n    let ddd: number;\n    let eee: number;\n    let fff: number;\n    let ggg: number;\n    let hhh: number;\n    let iii: number;\n    let jjj: number;\n    let kkk: number;\n    let lll: number;\n    let mmm: number;\n    let nnn: number;\n    let ooo: number;\n    let ppp: number;\n    let qqq: number;\n    let rrr: number;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "../../../../tmp/tmpun5y7ioo.ts(81,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_prev: number = 0;\n    let sum_column_prev: number = 0;\n    let sum_row_curr: number = 0;\n    let sum_column_curr: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row_curr += my_matrix[i][j];\n            sum_column_curr += my_matrix[j][i];\n        }\n\n        if (i > 0) {\n            if (sum_row_curr !== sum_row_prev) {\n                is_magic_square = false;\n                break;\n            }\n            if (sum_column_curr !== sum_column_prev) {\n                is_magic_square = false;\n                break;\n            }\n        }\n\n        sum_row_prev = sum_row_curr;\n        sum_column_prev = sum_column_curr;\n        sum_row_curr = 0;\n        sum_column_curr = 0;\n    }\n\n    if (sum_diagonal_1 !== sum_diagonal_2) {\n        is_magic_square = false;\n    }\n\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let flag: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n        sum_all += my_matrix[i][i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        flag = false;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_all || sum_column != sum_all) {\n            flag = false;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpskwxpwvy.js:41:12)\n    at Object.<anonymous> (/tmp/tmpskwxpwvy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal_2 = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        if (i === 0) {\n            sum_diagonal = sum;\n        } else if (sum_diagonal !== sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        if (sum_diagonal !== sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 += my_matrix[i][i];\n    }\n    if (sum_diagonal_2 !== sum_diagonal) {\n        return false;\n    }\n    sum_diagonal_2 = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_2 !== sum_diagonal) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    let sum_of_all: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_of_all = sum_of_row;\n        }\n        if (sum_of_row != sum_of_all || sum_of_column != sum_of_all) {\n            return false;\n        }\n        sum_of_diagonal += my_matrix[i][i];\n        sum_of_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_of_diagonal != sum_of_all || sum_of_reverse_diagonal != sum_of_all) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number = 0;\n    let sum_of_columns: number = 0;\n    let sum_of_diagonals: number = 0;\n    let sum_of_diagonals_2: number = 0;\n    let sum_of_elements: number = 0;\n    let sum_of_elements_2: number = 0;\n    let sum_of_elements_3: number = 0;\n    let sum_of_elements_4: number = 0;\n    let sum_of_elements_5: number = 0;\n    let sum_of_elements_6: number = 0;\n    let sum_of_elements_7: number = 0;\n    let sum_of_elements_8: number = 0;\n    let sum_of_elements_9: number = 0;\n    let sum_of_elements_10: number = 0;\n    let sum_of_elements_11: number = 0;\n    let sum_of_elements_12: number = 0;\n    let sum_of_elements_13: number = 0;\n    let sum_of_elements_14: number = 0;\n    let sum_of_elements_15: number = 0;\n    let sum_of_elements_16: number = 0;\n    let sum_of_elements_17: number = 0;\n    let sum_of_elements_18: number = 0;\n    let sum_of_elements_19: number = 0;\n    let sum_of_elements_20: number = 0;\n    let sum_of_elements_21: number = 0;\n    let sum_of_elements_22: number = 0;\n    let sum_of_elements_23: number = 0;\n    let sum_of_elements_24: number = 0;\n    let sum_of_elements_25: number = 0;\n    let sum_of_elements_26: number = 0;\n    let sum_of_elements_27: number = 0;\n    let sum_of_elements_28: number = 0;\n    let sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "../../../../tmp/tmpzmukh5e3.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_inv: number[] = [];\n    let sum_total: number = 0;\n    let sum_total_inv: number = 0;\n    let sum_total_col: number = 0;\n    let sum_total_row: number = 0;\n    let sum_total_diag: number = 0;\n    let sum_total_diag_inv: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_total += my_matrix[i][j];\n            sum_total_inv += my_matrix[j][i];\n        }\n        sum_rows.push(sum_total);\n        sum_cols.push(sum_total_inv);\n        sum_total = 0;\n        sum_total_inv = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_total_row += sum_rows[i];\n        sum_total_col += sum_cols[i];\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_total_diag += my_matrix[i][i];\n        sum_total_diag_inv += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    sum_diag.push(sum_total_diag);\n    sum_diag_inv.push(sum_total_diag_inv);\n\n    if (sum_total_row === sum_total_col && sum_total_row === sum_total_diag && sum_total_row === sum_total_diag_inv) {\n        is_magic_square = true;\n    }\n\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpciy79clc.js:42:12)\n    at Object.<anonymous> (/tmp/tmpciy79clc.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_of_diagonal = my_matrix[i][i];\n            sum_of_reverse_diagonal = my_matrix[i][my_matrix.length - 1 - i];\n        } else {\n            sum_of_diagonal += my_matrix[i][i];\n            sum_of_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n        }\n        if (sum_of_row != sum_of_column || sum_of_row != sum_of_diagonal || sum_of_row != sum_of_reverse_diagonal) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1dl3_ti6.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1dl3_ti6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_rows_and_columns: number = 0;\n    let sum_of_all_diagonals_and_rows: number = 0;\n    let sum_of_all_diagonals_and_columns: number = 0;\n    let sum_of_all_diagonals_and_rows_and_columns: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_rows += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_all_rows);\n        sum_of_all_rows = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_columns += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_all_columns);\n        sum_of_all_columns = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i === j\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123171,
      "stdout": "../../../../tmp/tmperl149bg.ts(40,1): error TS1005: ')' expected.\n../../../../tmp/tmperl149bg.ts(51,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_columns[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_all += my_matrix[i][i];\n    }\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all) {\n            return false;\n        }\n    }\n\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_all) {\n            return false;\n        }\n    }\n\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_all) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf2dvhbni.js:42:12)\n    at Object.<anonymous> (/tmp/tmpf2dvhbni.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_diags: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_rows: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n            sum_of_all_rows += my_matrix[i][j];\n            sum_of_all_cols += my_matrix[j][i];\n            sum_of_all_diags += my_matrix[j][j];\n        }\n        sum_of_rows.push(sum_of_all_rows);\n        sum_of_cols.push(sum_of_all_cols);\n        sum_of_diags.push(sum_of_all_diags);\n        sum_of_all_rows = 0;\n        sum_of_all_cols = 0;\n        sum_of_all_diags = 0;\n    }\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all || sum_of_cols[i] !== sum_of_all || sum_of_diags[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx0tl5_pz.js:34:12)\n    at Object.<anonymous> (/tmp/tmpx0tl5_pz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let j: number = 0; j < my_matrix[0].length; j++) {\n        for (let i: number = 0; i < my_matrix.length; i++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            result = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            result = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123172,
      "stdout": "../../../../tmp/tmp8q1opmaj.ts(44,1): error TS1005: ')' expected.\n../../../../tmp/tmp8q1opmaj.ts(55,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n            sum_of_diagonal_1 += my_matrix[i][i];\n            sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n        sum_of_diagonals.push(sum_of_diagonal_1);\n        sum_of_diagonals.push(sum_of_diagonal_2);\n        sum_of_row = 0;\n        sum_of_column = 0;\n        sum_of_diagonal_1 = 0;\n        sum_of_diagonal_2 = 0;\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_elements || sum_of_columns[i] != sum_of_elements || sum_of_diagonals[i] != sum_of_elements) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwrkkp309.js:38:12)\n    at Object.<anonymous> (/tmp/tmpwrkkp309.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz:\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmp8pi0bwmh.ts(54,9): error TS1005: ',' expected.\n../../../../tmp/tmp8pi0bwmh.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            result = false;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa319v6xr.js:41:12)\n    at Object.<anonymous> (/tmp/tmpa319v6xr.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_anti_diag: number[] = [];\n    let sum_all: number = 0;\n    let sum_all_rows: number = 0;\n    let sum_all_cols: number = 0;\n    let sum_all_diag: number = 0;\n    let sum_all_anti_diag: number = 0;\n    let result: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_all += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_rows[i] = 0;\n        sum_cols[i] = 0;\n        sum_diag[i] = 0;\n        sum_anti_diag[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_rows[i] += my_matrix[i][j];\n            sum_cols[i] += my_matrix[j][i];\n            sum_diag[i] += my_matrix[i][i];\n            sum_anti_diag[i] += my_matrix[i][my_matrix.length - 1 - i];\n        }\n    }\n    for (let i: number = 0; i < sum_rows.length; i++) {\n        sum_all_rows += sum_rows[i];\n        sum_all_cols += sum_cols[i];\n        sum_all_diag += sum_diag[i];\n        sum_all_anti_diag += sum_anti_diag[i];\n    }\n    if (sum_all_rows === sum_all_cols && sum_all_cols === sum_all_diag && sum_all_diag\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmpzc200pp1.ts(38,1): error TS1005: ')' expected.\n../../../../tmp/tmpzc200pp1.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_rows.push(my_matrix[i].reduce((a, b) => a + b, 0));\n        sum_cols.push(my_matrix.reduce((a, b) => a + b[i], 0));\n        sum_diag.push(my_matrix[i][i]);\n        sum_diag2.push(my_matrix[i][my_matrix.length - 1 - i]);\n    }\n    let sum_diag_total: number = sum_diag.reduce((a, b) => a + b, 0);\n    let sum_diag2_total: number = sum_diag2.reduce((a, b) => a + b, 0);\n    let sum_rows_total: number = sum_rows.reduce((a, b) => a + b, 0);\n    let sum_cols_total: number = sum_cols.reduce((a, b) => a + b, 0);\n    if (sum_rows_total == sum_cols_total && sum_rows_total == sum_diag_total && sum_rows_total == sum_diag2_total) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjvfngwo0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpjvfngwo0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_diagon\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmp0u76go9v.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmp0u76go9v.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmprxly6hnn.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmprxly6hnn.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_rev_col_rev: number = 0;\n    let sum_diag_rev_row_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_diag_col_rev_rev: number = 0;\n    let sum_diag_row_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev_rev_rev_rev_rev_rev: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmpthog2346.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number = 0;\n    let sum_of_columns: number = 0;\n    let sum_of_diagonals: number = 0;\n    let sum_of_diagonals_2: number = 0;\n    let result: boolean = false;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows = 0;\n        sum_of_columns = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows += my_matrix[i][j];\n            sum_of_columns += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum_of_diagonals = sum_of_rows;\n            sum_of_diagonals_2 = sum_of_columns;\n        } else {\n            if (sum_of_diagonals !== sum_of_rows || sum_of_diagonals_2 !== sum_of_columns) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_not_magic_square: boolean = false;\n    let sum_of_rows_is_magic_square: boolean = false;\n    let sum_of_columns_is_magic_square: boolean = false;\n    let sum_of_diagonals_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_magic_square_and_sum_of_rows_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_magic_square_and_sum_of_columns_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_magic_square_and_sum_of_diagonals_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_magic_square_and_sum_of_rows_is_magic_square_and_sum_of_columns_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_magic_square_and_sum_of_rows_is_magic_square_and_sum_of_diagonals_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_magic_square_and_sum_of_columns_is_magic_square_and_sum_of_diagonals_is_magic_square: boolean = false;\n    let sum_of_all_elements_in_matrix_is_magic\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmp9jaz4leu.ts(31,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_column != sum) {\n            result = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmpf9ekf9fp.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmpf9ekf9fp.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let sum_of_diag: number = 0;\n    let sum_of_rev_diag: number = 0;\n    let sum_of_all: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_col = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_of_all = sum_of_row;\n        }\n        if (sum_of_row != sum_of_all || sum_of_col != sum_of_all) {\n            return false;\n        }\n        sum_of_diag += my_matrix[i][i];\n        sum_of_rev_diag += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_of_diag != sum_of_all || sum_of_rev_diag != sum_of_all) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag_2: number[] = [];\n    let sum: number = 0;\n    let sum_2: number = 0;\n    let sum_3: number = 0;\n    let sum_4: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            sum_2 += my_matrix[j][i];\n            if (i == j) {\n                sum_3 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_4 += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum);\n        sum_of_cols.push(sum_2);\n        sum_of_diag.push(sum_3);\n        sum_of_diag_2.push(sum_4);\n        sum = 0;\n        sum_2 = 0;\n        sum_3 = 0;\n        sum_4 = 0;\n    }\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0] || sum_of_cols[i] != sum_of_cols[0] || sum_of_diag[i] != sum_of_diag[0] || sum_of_diag_2[i] != sum_of_diag_2[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptc0ottv3.js:41:12)\n    at Object.<anonymous> (/tmp/tmptc0ottv3.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n    }\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            return false;\n        }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmp_ci24g3d.ts(57,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n        sum_diagonal += my_matrix[i][my_matrix.length - i - 1];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            return false;\n        }\n    }\n    if (sum_diagonal !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n            if (i == j) {\n                sum_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n        }\n        if (sum_row != sum || sum_column != sum) {\n            return false;\n        }\n        sum_row = 0;\n        sum_column = 0;\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp16bmdxre.js:34:12)\n    at Object.<anonymous> (/tmp/tmp16bmdxre.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_cols[i] = 0;\n        sum_of_diagonals[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[i] += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n        sum_of_all_rows += sum_of_rows[i];\n        sum_of_all_cols += sum_of_cols[i];\n        sum_of_all_diagonals += sum_of_diagonals[i];\n    }\n\n    if (sum_of_all_rows != sum_of_all_cols || sum_of_all_rows != sum_of_all_diagonals) {\n        magic_square = false;\n    }\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_all_rows || sum_of_cols[i] != sum_of_all_cols || sum_of_diagonals[i] != sum_of_all_diagonals) {\n            magic_square =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmpay5zjqpa.ts(37,9): error TS1005: ';' expected.\n../../../../tmp/tmpay5zjqpa.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = true;\n    let k: number = 0;\n    let l: number = 0;\n\n    //calculate sum of all elements in matrix\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n\n    //calculate sum of diagonals\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_of_diagonals[k] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[k + 1] += my_matrix[i][j];\n            }\n        }\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123173,
      "stdout": "../../../../tmp/tmpzstkr2kh.ts(55,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(my_matrix[i].reduce((a, b) => a + b, 0));\n        sum_of_columns.push(my_matrix.map(x => x[i]).reduce((a, b) => a + b, 0));\n    }\n    sum_of_diagonals.push(my_matrix.map((x, i) => x[i]).reduce((a, b) => a + b, 0));\n    sum_of_diagonals.push(my_matrix.map((x, i) => x[my_matrix.length - 1 - i]).reduce((a, b) => a + b, 0));\n    let sum_of_all: number = sum_of_rows[0];\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag1: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_col != sum) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_column != sum) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_reverse_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_reverse_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length - 1; i++) {\n        if (sum_of_rows[i] != sum_of_rows[i + 1] || sum_of_columns[i] != sum_of_columns[i + 1] || sum_of_diagonals[i] != sum_of_diagonals[i + 1] || sum_of_reverse_diagonals[i] != sum_of_reverse_diagonals[i + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsvbl88ul.js:44:12)\n    at Object.<anonymous> (/tmp/tmpsvbl88ul.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    let sum_row_2 = 0;\n    let sum_column_2 = 0;\n    let sum_row_3 = 0;\n    let sum_column_3 = 0;\n    let sum_row_4 = 0;\n    let sum_column_4 = 0;\n    let sum_row_5 = 0;\n    let sum_column_5 = 0;\n    let sum_row_6 = 0;\n    let sum_column_6 = 0;\n    let sum_row_7 = 0;\n    let sum_column_7 = 0;\n    let sum_row_8 = 0;\n    let sum_column_8 = 0;\n    let sum_row_9 = 0;\n    let sum_column_9 = 0;\n    let sum_row_10 = 0;\n    let sum_column_10 = 0;\n    let sum_row_11 = 0;\n    let sum_column_11 = 0;\n    let sum_row_12 = 0;\n    let sum_column_12 = 0;\n    let sum_row_13 = 0;\n    let sum_column_13 = 0;\n    let sum_row_14 = 0;\n    let sum_column_14 = 0;\n    let sum_row_15 = 0;\n    let sum_column_15 = 0;\n    let sum_row_16 = 0;\n    let sum_column_16 = 0;\n    let sum_row_17 = 0;\n    let sum_column_17 = 0;\n    let sum_row_18 = 0;\n    let sum_column_18 = 0;\n    let sum_row_19 = 0;\n    let sum_column_19 = 0;\n    let sum_row_20 = 0;\n    let sum_column_20 = 0;\n    let sum_row_21 = 0;\n    let sum_column_21 = 0;\n    let sum_row_22 = 0;\n    let sum_column_22 = 0;\n    let sum_row_23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123175,
      "stdout": "../../../../tmp/tmpk600teyy.ts(61,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_rev_col_rev: number = 0;\n    let sum_diag_rev_row_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_row_col_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev: number = 0;\n    let sum_row_col_rev_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123175,
      "stdout": "../../../../tmp/tmpimnerqsq.ts(40,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_all: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        sum_of_all += sum_of_rows[i];\n    }\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] === sum_of_all / sum_of_rows.length && sum_of_columns[i] === sum_of_all / sum_of_columns.length && sum_of_diagonals[i] === sum_of_all / sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123175,
      "stdout": "../../../../tmp/tmpo_cjglh0.ts(44,1): error TS1005: ')' expected.\n../../../../tmp/tmpo_cjglh0.ts(55,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n            sum_of_all_elements += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        sum_of_all_rows += sum_of_rows[i];\n        sum_of_all_columns += sum_of_columns[i];\n        sum_of_all_diagonals += sum_of_diagonals[i];\n    }\n    if (sum_of_all_rows == sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123175,
      "stdout": "../../../../tmp/tmpfkv1p1m2.ts(35,1): error TS1005: ')' expected.\n../../../../tmp/tmpfkv1p1m2.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_1: number = 0;\n    let sum_row_2: number = 0;\n    let sum_row_3: number = 0;\n    let sum_column_1: number = 0;\n    let sum_column_2: number = 0;\n    let sum_column_3: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n            if (i == 0) {\n                sum_row_1 += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_row_2 += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_row_3 += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_column_1 += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_column_2 += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_column_3 += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_diagonal_1 == sum_diagonal_2 && sum_diagonal_1 == sum_row_1 && sum_diagonal_1 == sum_row_2 && sum_diagonal_1 == sum_row_3 && sum_diagonal_1 == sum_column_1 && sum_diagonal_1 == sum_column_2 && sum_diagonal_1 == sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmp1nw087vw.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmp1nw087vw.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_rev_col_rev: number = 0;\n    let sum_diag_rev_row_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_row_col_rev_diag: number = 0;\n    let sum_diag_rev_col_rev_diag: number = 0;\n    let sum_diag_rev_row_rev_diag: number = 0;\n    let sum_diag_col_rev_diag: number = 0;\n    let sum_diag_row_rev_diag: number = 0;\n    let sum_row_col_rev_diag_rev: number = 0;\n    let sum_diag_rev_col_rev_diag_rev: number = 0;\n    let sum_diag_rev_row_rev_diag_rev: number = 0;\n    let sum_diag_col_rev_diag_rev: number = 0;\n    let sum_diag_row_rev_diag_rev: number = 0;\n    let sum_row_col_rev_diag_rev_diag: number = 0;\n    let sum_diag_rev_col_rev_diag_rev_diag: number = 0;\n    let sum_diag_rev_row_rev_diag_rev_diag: number = 0;\n    let sum_diag_col_rev_diag_rev_di\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmpomafbkn5.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let magic_square: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            magic_square = false;\n        }\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyhmgkwwo.js:37:12)\n    at Object.<anonymous> (/tmp/tmpyhmgkwwo.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_row.push(sum);\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_col.push(sum);\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_diag.push(sum);\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum += my_matrix[i][n - 1 - j];\n        }\n        sum_diag_rev.push(sum);\n    }\n    for (let i: number = 0; i < n; i++) {\n        if (sum_row[i] !== sum_row[0]) {\n            return false;\n        }\n        if (sum_col[i] !== sum_col[0]) {\n            return false;\n        }\n        if (sum_diag[i] !== sum_diag[0]) {\n            return false;\n        }\n        if (sum_diag_rev[i] !== sum_diag_rev[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            magic_square = false;\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n\n    if (sum !== sum_diagonal || sum !== sum_diagonal_2) {\n        magic_square = false;\n    }\n\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n\n    //calculate sum of rows\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n\n    //calculate sum of cols\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n    }\n\n    //calculate sum of diagonals\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n\n    //check if all sums are equal\n    let sum_of_rows_first_element: number = sum_of_rows[0];\n    let sum_of_cols_first_element: number = sum_of_cols[0];\n    let sum_of_diagonals_first_element: number = sum_of_diagonals[0];\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmp6ha3cu2o.ts(42,1): error TS1005: ')' expected.\n../../../../tmp/tmp6ha3cu2o.ts(53,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_diagonal_2: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n            sum_of_elements_in_row += my_matrix[i][j];\n            sum_of_elements_in_column += my_matrix[j][i];\n            if (i === j) {\n                sum_of_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_elements_in_diagonal_2 += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_elements_in_row);\n        sum_of_columns.push(sum_of_elements_in_column);\n        sum_of_elements_in_row = 0;\n        sum_of_elements_in_column = 0;\n    }\n    sum_of_diagonals.push(sum_of_elements_in_diagonal);\n    sum_of_diagonals.push(sum_of_elements_in_diagonal_2);\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_elements / sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmp3dkbgn9y.ts(35,1): error TS1005: ')' expected.\n../../../../tmp/tmp3dkbgn9y.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0] || sum_of_columns[i] != sum_of_columns[0] || sum_of_diagonals[i] != sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu4dymonf.js:41:12)\n    at Object.<anonymous> (/tmp/tmpu4dymonf.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_columns[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n            if (i === j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n        sum_of_all += sum_of_rows[i];\n    }\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_all) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(magic_square_test(magic_square_3));\nconsole.log(magic_square_test(magic_square_4));\nconsole.log(magic_square_test(magic_square_5));\nconsole.log(magic_square_test(magic_square_6));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmpz59ctwwq.ts(42,31): error TS2304: Cannot find name 'magic_square_3'.\n../../../../tmp/tmpz59ctwwq.ts(43,31): error TS2304: Cannot find name 'magic_square_4'.\n../../../../tmp/tmpz59ctwwq.ts(44,31): error TS2304: Cannot find name 'magic_square_5'.\n../../../../tmp/tmpz59ctwwq.ts(45,31): error TS2304: Cannot find name 'magic_square_6'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_diagonal += my_matrix[i][i];\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_diagonal_2 += my_matrix[i][n - i - 1];\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_column = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column != sum) {\n            return false;\n        }\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_first_row: number = 0;\n    let sum_of_second_row: number = 0;\n    let sum_of_third_row: number = 0;\n    let sum_of_first_column: number = 0;\n    let sum_of_second_column: number = 0;\n    let sum_of_third_column: number = 0;\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i == 0) {\n                sum_of_first_row += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_of_second_row += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_of_third_row += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_of_first_column += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_of_second_column += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_of_third_column += my_matrix[i][j];\n            }\n            if (i == j) {\n                sum_of_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j == 2) {\n                sum_of_diagonal_2 += my_matrix[i][j];\n            }\n        }\n    }\n    sum_of_all_rows = sum_of_first_row + sum_of_second_row + sum_of_third_row;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmpdzs59myr.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_diag_rev_index: number = my_matrix.length - 1;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            sum_diag += my_matrix[i][j];\n            sum_diag_rev += my_matrix[i][sum_diag_rev_index];\n            sum_diag_rev_index--;\n        }\n        sum_row.push(sum);\n        sum_col.push(sum);\n        sum = 0;\n        sum_diag_rev_index = my_matrix.length - 1;\n    }\n    return sum_row.every((val, i, arr) => val === arr[0]) && sum_col.every((val, i, arr) => val === arr[0]) && sum_diag.every((val, i, arr) => val === arr[0]) && sum_diag_rev.every((val, i, arr) => val === arr[0]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmp7cn4iil9.ts(12,13): error TS2365: Operator '+=' cannot be applied to types 'number[]' and 'number'.\n../../../../tmp/tmp7cn4iil9.ts(13,13): error TS2365: Operator '+=' cannot be applied to types 'number[]' and 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diag != sum_diag2) {\n        magic_square = false;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        if (sum != sum_diag) {\n            magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        if (sum != sum_diag) {\n            magic_square = false;\n        }\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_row_col_rev_diag: number = 0;\n    let sum_row_col_rev_diag_rev: number = 0;\n    let sum_row_col_rev_diag_rev_col: number = 0;\n    let sum_row_col_rev_diag_rev_row: number = 0;\n    let sum_row_col_rev_diag_col: number = 0;\n    let sum_row_col_rev_diag_row: number = 0;\n    let sum_row_col_rev_diag_col_rev: number = 0;\n    let sum_row_col_rev_diag_row_rev: number = 0;\n    let sum_row_col_rev_diag_col_rev_row: number = 0;\n    let sum_row_col_rev_diag_row_rev_col: number = 0;\n    let sum_row_col_rev_diag_col_rev_row_rev: number = 0;\n    let sum_row_col_rev_diag_row_rev_col_rev: number = 0;\n    let sum_row_col_rev_diag_col_rev_row_rev_col: number = 0;\n    let sum_row_col_rev_diag_row_rev_col_rev_row: number = 0;\n    let sum_row_col_rev_diag\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmp5oj8viyc.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_reverse_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let number_of_rows: number = my_matrix.length;\n    let number_of_cols: number = my_matrix[0].length;\n    for (let i: number = 0; i < number_of_rows; i++) {\n        for (let j: number = 0; j < number_of_cols; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < number_of_rows; i++) {\n        for (let j: number = 0; j < number_of_cols; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diagonal += my_matrix[i][j];\n            }\n            if (i + j == number_of_rows - 1) {\n                sum_of_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_all_rows += sum_of_row;\n        sum_of_all_cols += sum_of_col;\n        sum_of_all_diagonals += sum_of_diagonal;\n        sum_of_all_reverse_diagonals += sum_of_reverse_diagonal;\n        sum_of_row = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmpguavt1eu.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_antidiagonal: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_elements_in_row);\n        sum_of_elements_in_row = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_column += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_elements_in_column);\n        sum_of_elements_in_column = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_of_elements_in_diagonal +=\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmpqlvx0arx.ts(39,9): error TS1005: ';' expected.\n../../../../tmp/tmpqlvx0arx.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let magic_square: boolean = false;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n    }\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] === sum_of_rows[0]) {\n            magic_square = true;\n        } else {\n            magic_square = false;\n            break;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] === sum_of_columns[0]) {\n            magic_square = true;\n        } else {\n            magic_square = false;\n            break;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmpf5oby7hv.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag1: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123176,
      "stdout": "../../../../tmp/tmpi2e4f2en.ts(68,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = false;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n            if (i == j) {\n                sum_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n        }\n        if (sum_row == sum_column) {\n            sum = sum_row;\n            is_magic_square = true;\n        } else {\n            is_magic_square = false;\n            break;\n        }\n    }\n    if (sum == sum_diagonal_1 && sum == sum_diagonal_2) {\n        is_magic_square = true;\n    } else {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            return false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum !== sum_diagonal || sum !== sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    let sum_row_2 = 0;\n    let sum_column_2 = 0;\n    let sum_row_3 = 0;\n    let sum_column_3 = 0;\n    let sum_row_4 = 0;\n    let sum_column_4 = 0;\n    let sum_row_5 = 0;\n    let sum_column_5 = 0;\n    let sum_row_6 = 0;\n    let sum_column_6 = 0;\n    let sum_row_7 = 0;\n    let sum_column_7 = 0;\n    let sum_row_8 = 0;\n    let sum_column_8 = 0;\n    let sum_row_9 = 0;\n    let sum_column_9 = 0;\n    let sum_row_10 = 0;\n    let sum_column_10 = 0;\n    let sum_row_11 = 0;\n    let sum_column_11 = 0;\n    let sum_row_12 = 0;\n    let sum_column_12 = 0;\n    let sum_row_13 = 0;\n    let sum_column_13 = 0;\n    let sum_row_14 = 0;\n    let sum_column_14 = 0;\n    let sum_row_15 = 0;\n    let sum_column_15 = 0;\n    let sum_row_16 = 0;\n    let sum_column_16 = 0;\n    let sum_row_17 = 0;\n    let sum_column_17 = 0;\n    let sum_row_18 = 0;\n    let sum_column_18 = 0;\n    let sum_row_19 = 0;\n    let sum_column_19 = 0;\n    let sum_row_20 = 0;\n    let sum_column_20 = 0;\n    let sum_row_21 = 0;\n    let sum_column_21 = 0;\n    let sum_row_22 = 0;\n    let sum_column_22 = 0;\n    let sum_row_23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123175,
      "stdout": "../../../../tmp/tmpk600teyy.ts(61,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}