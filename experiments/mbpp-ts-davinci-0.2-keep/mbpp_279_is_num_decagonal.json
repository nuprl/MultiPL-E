{
  "name": "mbpp_279_is_num_decagonal",
  "language": "ts",
  "prompt": "//Write a function to find the nth decagonal number.\nfunction is_num_decagonal(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_num_decagonal;\n  assert.deepEqual(candidate(3),27);\n  assert.deepEqual(candidate(7),175);\n  assert.deepEqual(candidate(10),370);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let num: number = 0;\n    for (let i: number = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\nconsole.log(is_num_decagonal(5));\nconsole.log(is_num_decagonal(6));\nconsole.log(is_num_decagonal(7));\n",
    "    return n * (3 * n - 2);\n}\n",
    "    if (n < 0) {\n        return -1;\n    }\n    else {\n        return n * (3 * n - 2);\n    }\n}\n",
    "    let decagonal: number = 0;\n    let i: number = 1;\n    while (decagonal < n) {\n        decagonal = i * (3 * i - 1) / 2;\n        i++;\n    }\n    return decagonal;\n}\n",
    "    let num = 0;\n    let i = 1;\n    while (num < n) {\n        num = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if (num == n) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    return (3 * n * n - n) / 2;\n}\n",
    "    return (Math.sqrt(4 * n + 1) + 1) / 2;\n}\n\nconsole.log(is_num_decagonal(10));\nconsole.log(is_num_decagonal(20));\nconsole.log(is_num_decagonal(30));\nconsole.log(is_num_decagonal(40));\nconsole.log(is_num_decagonal(50));\nconsole.log(is_num_decagonal(60));\nconsole.log(is_num_decagonal(70));\nconsole.log(is_num_decagonal(80));\nconsole.log(is_num_decagonal(90));\nconsole.log(is_num_decagonal(100));\n",
    "    return n * (3 * n - 2);\n}\n",
    "  if (n < 0) {\n    return 0;\n  } else {\n    return n * (3 * n - 2);\n  }\n}\nconsole.log(is_num_decagonal(5));\n",
    "    return (Math.sqrt(4 * n + 1) + 1) / 2;\n}\n\nconsole.log(is_num_decagonal(10));\n",
    "    return n * (3 * n - 2);\n}\n",
    "    return n * (3 * n - 2);\n}\n",
    "    return n * (3 * n - 2);\n}\n",
    "    let num = 0;\n    for (let i = 0; i < n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\n",
    "    let i = 1;\n    let num = 0;\n    while (i <= n) {\n        num = i * (3 * i - 1) / 2;\n        i++;\n    }\n    return num;\n}\n",
    "    return (Math.sqrt(4 * n + 1) + 1) / 2;\n}\n",
    "    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\nconsole.log(is_num_decagonal(4));\n",
    "    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\nconsole.log(is_num_decagonal(4));\n",
    "    let num = 0;\n    let i = 1;\n    while (num < n) {\n        num = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if (num == n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n",
    "    let num: number = 0;\n    for (let i = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\nconsole.log(is_num_decagonal(5));\n"
  ]
}