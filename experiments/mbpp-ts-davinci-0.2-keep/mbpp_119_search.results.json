{
  "name": "mbpp_119_search",
  "language": "ts",
  "prompt": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        let mid: number = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1]) {\n            index = i;\n            break;\n        }\n    }\n    return arr[index];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpla1vf6gt.js:16:12)\n    at Object.<anonymous> (/tmp/tmpla1vf6gt.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n      return arr[i];\n    }\n    i++;\n  }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmprt0buemn.js:33:12)\n    at Object.<anonymous> (/tmp/tmprt0buemn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            }\n            else {\n                high = mid;\n            }\n        }\n        else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start < end) {\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return arr[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        let mid: number = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let n: number = arr.length;\n    let i: number;\n    for (i = 0; i < n; i++) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nlet arr: number[] = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\nconsole.log(search(arr));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start <= end) {\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else if (arr[mid] == arr[mid - 1]) {\n                end = mid - 2;\n            } else {\n                return arr[mid];\n            }\n        } else {\n            if (arr[mid] == arr[mid + 1]) {\n                end = mid - 1;\n            } else if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                return arr[mid];\n            }\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                right = mid - 2;\n            } else {\n                left = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                left = mid + 2;\n            } else {\n                right = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let n = arr.length;\n    let i = 0;\n    while (i < n) {\n        if (arr[i] == arr[i + 1]) {\n            i = i + 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1]) {\n            result = arr[i];\n            break;\n        }\n        i++;\n    }\n    return result;\n}\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number;\n    for (i = 0; i < arr.length; i++) {\n        if (arr[i] != arr[i + 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                i = mid + 1;\n            } else {\n                j = mid - 2;\n            }\n        } else {\n            if ((mid + 1) % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpp61vcevh.js:32:12)\n    at Object.<anonymous> (/tmp/tmpp61vcevh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                right = mid - 2;\n            } else {\n                left = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                left = mid + 2;\n            } else {\n                right = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2);\n    if (arr[mid] == arr[mid - 1]) {\n      if (mid % 2 == 0) {\n        j = mid - 2;\n      } else {\n        i = mid + 1;\n      }\n    } else if (arr[mid] == arr[mid + 1]) {\n      if (mid % 2 == 0) {\n        i = mid + 2;\n      } else {\n        j = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[i];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    let mid = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmprsyhy2ms.js:33:12)\n    at Object.<anonymous> (/tmp/tmprsyhy2ms.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n      result = arr[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == arr[i + 1]) {\n            i++;\n        }\n        else {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === arr[i + 1]) {\n      i += 2;\n    } else {\n      return arr[i];\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start: number = 0;\n    let end: number = arr.length - 1;\n    let mid: number = Math.floor((start + end) / 2);\n    while (start < end) {\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return arr[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      i++;\n    } else {\n      result = arr[i];\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        let mid: number = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low: number = 0;\n  let high: number = arr.length - 1;\n  while (low <= high) {\n    let mid: number = Math.floor((low + high) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\nconsole.log(search([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            result = arr[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let n = arr.length;\n    let i = 0;\n    while (i < n) {\n        if (i == n - 1)\n            return arr[i];\n        if (arr[i] != arr[i + 1])\n            return arr[i];\n        i += 2;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid === 0 || mid === arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        } else {\n            if (mid % 2 === 0) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpqnu0lkvz.js:36:12)\n    at Object.<anonymous> (/tmp/tmpqnu0lkvz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                start = mid + 1;\n            } else {\n                end = mid - 2;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp3ddtqc37.js:35:12)\n    at Object.<anonymous> (/tmp/tmp3ddtqc37.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let n = arr.length;\n    let i = 0;\n    while (i < n) {\n        if (arr[i] != arr[i + 1]) {\n            return arr[i];\n        }\n        i = i + 2;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid;\n    while (start <= end) {\n        mid = Math.floor((start + end) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    if (arr.length === 1) {\n        return arr[0];\n    }\n    for (let i = 0; i < arr.length; i += 2) {\n        if (arr[i] !== arr[i + 1]) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66]));\nconsole.log(search([1]));\nconsole.log(search([1, 1]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "../../../../tmp/tmpyjk967ml.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpyjk967ml.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let i: number;\n  for (i = 0; i < arr.length; i++) {\n    if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n      return arr[i];\n    }\n  }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid;\n    while (start <= end) {\n        mid = Math.floor((start + end) / 2);\n        if (mid === 0 || arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n            return arr[mid];\n        } else if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    let mid = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        else if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0)\n                i = mid + 1;\n            else\n                j = mid - 2;\n        }\n        else if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0)\n                i = mid + 2;\n            else\n                j = mid - 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpg428nd6h.js:28:12)\n    at Object.<anonymous> (/tmp/tmpg428nd6h.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            }\n            else {\n                end = mid;\n            }\n        }\n        else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            }\n            else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else if (mid % 2 == 1) {\n      if (arr[mid] == arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start: number = 0;\n    let end: number = arr.length - 1;\n    while (start <= end) {\n        let mid: number = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpsyjai4qk.js:33:12)\n    at Object.<anonymous> (/tmp/tmpsyjai4qk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n  while (start < end) {\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\nconsole.log(search([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "1\n6\n3\n3\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\nundefined\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpdxrjhwze.js:48:12)\n    at Object.<anonymous> (/tmp/tmpdxrjhwze.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                right = mid - 2;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (mid % 2 === 0) {\n                left = mid + 2;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start: number = 0;\n    let end: number = arr.length - 1;\n    while (start <= end) {\n        let mid: number = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                start = mid + 1;\n            }\n            else {\n                end = mid - 1;\n            }\n        }\n        else {\n            if (mid % 2 == 0) {\n                end = mid - 1;\n            }\n            else {\n                start = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp48y55fi3.js:35:12)\n    at Object.<anonymous> (/tmp/tmp48y55fi3.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start < end) {\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return arr[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    while (i < arr.length - 1) {\n        if (arr[i] == arr[i + 1]) {\n            i = i + 2;\n        }\n        else {\n            return arr[i];\n        }\n    }\n    return arr[i];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123355,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        else if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 2;\n        }\n        else if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpb6mraoyp.js:28:12)\n    at Object.<anonymous> (/tmp/tmpb6mraoyp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    if (arr.length === 1) {\n        return arr[0];\n    }\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start: number = 0;\n    let end: number = arr.length - 1;\n    while (start <= end) {\n        let mid: number = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                start = mid + 1;\n            }\n            else {\n                end = mid - 1;\n            }\n        }\n        else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 1;\n            }\n            else {\n                start = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123355,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpahatrq7a.js:35:12)\n    at Object.<anonymous> (/tmp/tmpahatrq7a.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    let mid = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmprsyhy2ms.js:33:12)\n    at Object.<anonymous> (/tmp/tmprsyhy2ms.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === arr[i + 1]) {\n      i += 2;\n    } else {\n      return arr[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = -1;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let n = arr.length;\n    let i = 0;\n    while (i < n) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i = i + 2;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    while (i < arr.length) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        result = result ^ arr[i];\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] == arr[mid - 1]) {\n      if (mid % 2 == 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] == arr[mid + 1]) {\n      if (mid % 2 == 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == arr[i + 1]) {\n            i++;\n        } else {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      i++;\n    } else {\n      result = arr[i];\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123350,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n      result = arr[i];\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123358,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            result = arr[i];\n        }\n    }\n    return result;\n}\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123358,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                start = mid + 1;\n            } else {\n                end = mid - 2;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        let mid: number = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123358,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp7cyea5i8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp7cyea5i8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconsole.log(search([1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "4\n8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "4\n8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123353,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpnngj0o0x.js:36:12)\n    at Object.<anonymous> (/tmp/tmpnngj0o0x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            result = arr[i];\n        }\n    }\n    return result;\n}\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let left: number = 0;\n    let right: number = arr.length - 1;\n    while (left < right) {\n        let mid: number = Math.floor((left + right) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                right = mid - 2;\n            } else {\n                left = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                left = mid + 2;\n            } else {\n                right = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === arr[i + 1]) {\n      i += 2;\n    } else {\n      return arr[i];\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\nconsole.log(search([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123360,
      "stdout": "4\n2\n3\n3\n4\n5\n-1\n4\n-1\n3\n-1\n2\n-1\n1\n-1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start <= end) {\n        if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        } else {\n            if (mid % 2 === 0) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpjy2m3me1.js:34:12)\n    at Object.<anonymous> (/tmp/tmpjy2m3me1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result: number = 0;\n    let i: number = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "4\n8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] !== arr[i + 1] && arr[i] !== arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low < high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517444,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpueh0daeq.js:36:12)\n    at Object.<anonymous> (/tmp/tmpueh0daeq.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                start = mid + 1;\n            } else {\n                end = mid - 2;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        let mid: number = Math.floor((i + j) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                i = mid + 1;\n            }\n            else {\n                j = mid - 2;\n            }\n        }\n        else {\n            if (mid % 2 == 0) {\n                i = mid + 2;\n            }\n            else {\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    mid = Math.floor((low + high) / 2);\n    if (mid === 0 || arr[mid - 1] < arr[mid] && arr[mid + 1] > arr[mid]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        high = mid - 1;\n      } else {\n        low = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp7sjoqpi1.js:34:12)\n    at Object.<anonymous> (/tmp/tmp7sjoqpi1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123347,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid == 0 || mid == arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] == arr[mid - 1]) {\n      if (mid % 2 == 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] == arr[mid + 1]) {\n      if (mid % 2 == 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] != arr[i + 1] && arr[i] != arr[i - 1]) {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        result = result ^ arr[i];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123361,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] == arr[i + 1]) {\n            i += 2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517429,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}