{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "ts",
  "prompt": "//Write a python function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a: number, b: number): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = differ_At_One_Bit_Pos;\n  assert.deepEqual(candidate(13, 9),true);\n  assert.deepEqual(candidate(15, 8),false);\n  assert.deepEqual(candidate(2, 4),false);\n  assert.deepEqual(candidate(2, 3),true);\n  assert.deepEqual(candidate(5, 1),true);\n  assert.deepEqual(candidate(1, 5),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count += 1;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    return (a ^ b) && !((a ^ b) & ((a ^ b) - 1));\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    if (a == b) {\n        return false;\n    }\n    let c = a ^ b;\n    if (c & (c - 1) == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1) == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    var c: number = a ^ b;\n    var count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    } else {\n        return true;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n"
  ]
}