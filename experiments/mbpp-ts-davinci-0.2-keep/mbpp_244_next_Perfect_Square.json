{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "ts",
  "prompt": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next perfect square greater than given number is: \" + next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(12));\n"
  ]
}