{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "ts",
  "prompt": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next perfect square greater than given number is: \" + next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i += 1;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow(Math.ceil(sqrt_N), 2);\n    return next_Perfect_Square;\n}\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let next_Perfect_Square: number = 0;\n    while (i * i <= N) {\n        i++;\n    }\n    next_Perfect_Square = i * i;\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt = Math.sqrt(N);\n    if (sqrt % 1 == 0) {\n        return (sqrt + 1) * (sqrt + 1);\n    }\n    else {\n        return -1;\n    }\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    if (sqrt_N % 1 == 0) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        return -1;\n    }\n}\n\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\n",
    "    let next_Perfect_Square = Math.ceil(Math.sqrt(N));\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(49));\nconsole.log(next_Perfect_Square(64));\nconsole.log(next_Perfect_Square(81));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(121));\nconsole.log(next_Perfect_Square(144));\nconsole.log(next_Perfect_Square(169));\nconsole.log(next_Perfect_Square(196));\nconsole.log(next_Perfect_Square(225));\nconsole.log(next_Perfect_Square(256));\nconsole.log(next_Perfect_Square(289));\nconsole.log(next_Perfect_Square(324));\nconsole.log(next_Perfect_Square(361));\nconsole.log(next_Perfect_Square(400));\nconsole.log(next_Perfect_Square(441));\nconsole.log(next_Perfect_Square(484));\nconsole.log(next_Perfect_Square(529));\nconsole.log(next_Perfect_Square(576));\nconsole.log(next_Perfect_Square(625));\nconsole.log(next_Perfect_Square(676));\nconsole.log(next_Perfect_Square(729));\nconsole.log(next_Perfect_Square(784));\nconsole.log(next_Perfect_Square(841));\nconsole.log(next_Perfect_Square(900));\nconsole.log(next_Perfect_Square(961));\nconsole.log(next_Perfect_Square(1024));\nconsole.log(next_Perfect_Square(1089));",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    var next_Perfect_Square: number = 0;\n    var i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(\"Next Perfect Square is: \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i += 1;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = 0;\n    if (sqrt_N % 1 == 0) {\n        next_Perfect_Square = (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        next_Perfect_Square = (sqrt_N + 2) * (sqrt_N + 2);\n    }\n    return next_Perfect_Square;\n}\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i += 1;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\nconsole.log(next_Perfect_Square(10));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    var i = N;\n    while (true) {\n        if (Math.sqrt(i) % 1 == 0) {\n            return i;\n        }\n        i++;\n    }\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square = Math.ceil(Math.sqrt(N));\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let next_Perfect_Square = 0;\n    for (let i = 1; i < N; i++) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n    }\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let next_Perfect_Square: number = 0;\n    let square_root: number = Math.sqrt(N);\n    if (square_root % 1 == 0) {\n        next_Perfect_Square = (square_root + 1) * (square_root + 1);\n    }\n    else {\n        next_Perfect_Square = -1;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\n",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_perfect_square = 0;\n    let i = 1;\n    while (i < N) {\n        i++;\n    }\n    next_perfect_square = i * i;\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));",
    "    let sqrt: number = Math.sqrt(N);\n    let next_sqrt: number = Math.ceil(sqrt);\n    let next_perfect_square: number = next_sqrt * next_sqrt;\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square = 0;\n    let i = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next Perfect Square: \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(10));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let num = N;\n    while (true) {\n        let sqrt = Math.sqrt(num);\n        if (sqrt % 1 === 0) {\n            return num;\n        }\n        num++;\n    }\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let num = N;\n    let sqrt = Math.sqrt(num);\n    let next_sqrt = Math.ceil(sqrt);\n    let next_perfect_square = next_sqrt * next_sqrt;\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log",
    "    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i = i + 1;\n    }\n    return result;\n}\nconsole.log(\"Next perfect square is: \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N = Math.sqrt(N);\n    if (sqrt_N % 1 === 0) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    } else {\n        return (Math.floor(sqrt_N) + 1) * (Math.floor(sqrt_N) + 1);\n    }\n}\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var num = Math.ceil(Math.sqrt(N));\n    return num * num;\n}\n",
    "    let sqrt = Math.sqrt(N);\n    let next_sqrt = Math.ceil(sqrt);\n    let next_perfect_square = Math.pow(next_sqrt, 2);\n    return next_perfect_square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let next_Perfect_Square = 0;\n    let i = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(41));\nconsole.log(next_Perfect",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\n",
    "    let next_Perfect_Square = N;\n    while (true) {\n        next_Perfect_Square++;\n        if (Math.sqrt(next_Perfect_Square) % 1 == 0) {\n            return next_Perfect_Square;\n        }\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(17));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow(Math.ceil(sqrt_N), 2);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(9));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i = i + 1;\n    }\n    return result;\n}\n\nconsole.log(next_Perfect_Square(10));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    var sqrt_N = Math.sqrt(N);\n    var next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\nconsole.log(next_Perfect_Square(180));\nconsole.log(next_Perfect_Square",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(10));\n",
    "    let num: number = N;\n    while (true) {\n        if (Math.sqrt(num) % 1 == 0) {\n            return num;\n        }\n        else {\n            num++;\n        }\n    }\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_sqrt_N = Math.ceil(sqrt_N);\n    return next_sqrt_N * next_sqrt_N;\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(10));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow(Math.ceil(sqrt_N), 2);\n    return next_Perfect_Square;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(7));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i = i + 1;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    if (sqrt_N % 1 == 0) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        return (Math.floor(sqrt_N) + 1) * (Math.floor(sqrt_N) + 1);\n    }\n}\n",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let num: number = N;\n    let sqrt: number = Math.sqrt(num);\n    let next_Perfect_Square: number = Math.pow(sqrt + 1, 2);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i < N) {\n        i++;\n    }\n    next_Perfect_Square = i * i;\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(36));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var num: number = N;\n    var sqr: number = 0;\n    while (sqr <= num) {\n        sqr = Math.pow(num, 2);\n        num++;\n    }\n    return sqr;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(10));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_perfect_square = 0;\n    let i = 1;\n    while (next_perfect_square < N) {\n        next_perfect_square = i * i;\n        i++;\n    }\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N) ** 2;\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow((sqrt_N + 1), 2);\n    return next_Perfect_Square;\n}\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (i <= N) {\n        if (i * i > N) {\n            result = i * i;\n            break;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\nconsole.log(next_Perfect_Square(180));\nconsole.log(next_Perfect",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var sqrt_N: number = Math.sqrt(N);\n    var next_Perfect_Square: number = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt = Math.sqrt(N);\n    let next_sqrt = Math.ceil(sqrt);\n    return next_sqrt * next_sqrt;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\n",
    "    let num = N;\n    while (true) {\n        if (Math.sqrt(num) % 1 === 0) {\n            return num;\n        }\n        num++;\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next Perfect Square: \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let num = N;\n    while (true) {\n        let sqrt = Math.sqrt(num);\n        if (sqrt % 1 === 0) {\n            return num;\n        }\n        num++;\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    var next_Perfect_Square = 0;\n    var sqrt = Math.sqrt(N);\n    if (sqrt % 1 === 0) {\n        next_Perfect_Square = (sqrt + 1) * (sqrt + 1);\n    }\n    else {\n        next_Perfect_Square = -1;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(\"Next Perfect Square is : \" + next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square: number = 0;\n    let square_root: number = 0;\n    let square: number = 0;\n    square_root = Math.sqrt(N);\n    square = Math.pow(square_root, 2);\n    if (square == N) {\n        next_Perfect_Square = Math.pow((square_root + 1), 2);\n    }\n    else {\n        next_Perfect_Square = Math.pow((square_root + 1), 2);\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(100));\n",
    "    let num: number = N;\n    while (true) {\n        num++;\n        if (Math.sqrt(num) % 1 == 0) {\n            return num;\n        }\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next",
    "    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n"
  ]
}