{
  "name": "mbpp_586_split_Arr",
  "language": "ts",
  "prompt": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let arr = l.slice(n);\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 3));\n",
    "    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    let arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    return l.slice(n).concat(l.slice(0, n));\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n",
    "    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n",
    "    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n",
    "    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\n",
    "    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let arr = [];\n    let arr1 = [];\n    let arr2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        }\n        else {\n            arr2.push(l[i]);\n        }\n    }\n    arr = arr2.concat(arr1);\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    let new_list = second_part.concat(first_part);\n    return new_list;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n",
    "    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    if (n < 0) {\n        return l;\n    }\n    else {\n        let first = l.slice(0, n);\n        let second = l.slice(n);\n        return second.concat(first);\n    }\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n",
    "    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n",
    "    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n",
    "    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n"
  ]
}