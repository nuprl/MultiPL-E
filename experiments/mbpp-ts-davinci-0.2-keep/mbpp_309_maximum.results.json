{
  "name": "mbpp_309_maximum",
  "language": "ts",
  "prompt": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(4, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(3, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(3, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n  if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(3, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(\"Maximum of two numbers is \" + maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "Maximum of two numbers is 20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    return a > b ? a : b;\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(3, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(3, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    return a > b ? a : b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(5, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\nconsole.log(maximum(10, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "20\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\nconsole.log(maximum(4, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "3\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconsole.log(maximum(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1665510489,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the maximum of two numbers.\nfunction maximum(a: number, b: number): number {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n\nconsole.log(maximum(1, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate(5, 10),10);\n  assert.deepEqual(candidate(-1, -2),-1);\n  assert.deepEqual(candidate(9, 7),9);\n}\n\ntest();",
      "timestamp": 1666123240,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}