{
  "name": "mbpp_627_find_First_Missing",
  "language": "ts",
  "prompt": "//Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunction find_First_Missing(array: number[]): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_First_Missing;\n  assert.deepEqual(candidate([0, 1, 2, 3]),4);\n  assert.deepEqual(candidate([0, 1, 2, 6, 9]),3);\n  assert.deepEqual(candidate([2, 3, 5, 8, 9]),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let i: number;\n    for (i = 0; i < array.length; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i: number = 0;\n    for (i = 0; i < array.length; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let n = array.length;\n    let i = 0;\n    while (i < n) {\n        if (array[i] != i + 1) {\n            return i + 1;\n        }\n        i++;\n    }\n    return n + 1;\n}\n",
    "    let n = array.length;\n    let i = 0;\n    for (i = 0; i < n; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let min = 0;\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] != min) {\n            return min;\n        }\n        min++;\n    }\n    return min;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    for (i = 0; i < array.length; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i: number = 0;\n    while (i < array.length) {\n        if (array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i: number = 0;\n    for (i = 0; i < array.length; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let min = 0;\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] > min) {\n            return min;\n        }\n        min++;\n    }\n    return min;\n}\n\nconsole.log(find_First_Missing([0,1,2,3,4,5,6,7,8,9,10]));\nconsole.log(find_First_Missing([1,2,3,4,5,6,7,8,9,10]));\nconsole.log(find_First_Missing([0,1,2,3,4,5,6,7,8,9,11]));\nconsole.log(find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,12,13,14,15]));\nconsole.log(find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16]));\nconsole.log(find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16]));\n",
    "    let i: number = 0;\n    while (array[i] === i + 1) {\n        i++;\n    }\n    return i + 1;\n}\n\nconsole.log(find_First_Missing([1, 2, 3, 4, 6, 7, 8]));\nconsole.log(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 10]));\n",
    "    let i: number = 0;\n    while (i < array.length) {\n        if (array[i] != i + 1) {\n            return i + 1;\n        }\n        i++;\n    }\n    return i + 1;\n}\n\nconsole.log(find_First_Missing([1, 2, 3, 4, 6, 7, 8]));\nconsole.log(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i: number;\n    let n: number = array.length;\n    for (i = 0; i < n; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([10, 11, 12, 13, 14, 15]));\n",
    "    let n = array.length;\n    let i = 0;\n    for (i = 0; i < n; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return i;\n}\n",
    "    let n = array.length;\n    let i = 0;\n    while (i < n) {\n        if (array[i] != i + 1) {\n            return i + 1;\n        }\n        i++;\n    }\n    return n + 1;\n}\n\nconsole.log(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n"
  ]
}