{
  "name": "mbpp_430_parabola_directrix",
  "language": "ts",
  "prompt": "//Write a function to find the directrix of a parabola.\nfunction parabola_directrix(a: number, b: number, c: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parabola_directrix;\n  assert.deepEqual(candidate(5, 3, 2),-198);\n  assert.deepEqual(candidate(9, 8, 4),-2336);\n  assert.deepEqual(candidate(2, 4, 6),-130);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return -4 * a * c / (b * b);\n}\n",
    "    return (b * b - 4 * a * c) / (4 * a);\n}\n",
    "    return -c / b;\n}\n",
    "    return -b / (2 * a);\n}\n",
    "    return -b / (2 * a);\n}\n",
    "    return -(b / (2 * a));\n}\n",
    "    return -c / b;\n}\n",
    "    return -b / (2 * a);\n}\n",
    "    return -(b / (2 * a));\n}\n",
    "    return (a * a - b) / (2 * a);\n}\n",
    "    return -c / b;\n}\n",
    "    return (a * a - 4 * b * c) / (4 * a);\n}\n",
    "    return -(b / (2 * a));\n}\n",
    "    return -c / b;\n}\n",
    "    return -c / b;\n}\n",
    "    return -c / b;\n}\n",
    "    return -a / b;\n}\n",
    "    return -c / b;\n}\n",
    "    return -c / b;\n}\n",
    "  return -c / b;\n}\n"
  ]
}