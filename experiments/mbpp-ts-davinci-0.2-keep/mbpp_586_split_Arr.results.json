{
  "name": "mbpp_586_split_Arr",
  "language": "ts",
  "prompt": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpv3wcaiwo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpv3wcaiwo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.slice(n);\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    let arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    return l.slice(n).concat(l.slice(0, n));\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpv3wcaiwo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpv3wcaiwo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    let arr1 = [];\n    let arr2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        }\n        else {\n            arr2.push(l[i]);\n        }\n    }\n    arr = arr2.concat(arr1);\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    let new_list = second_part.concat(first_part);\n    return new_list;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    if (n < 0) {\n        return l;\n    }\n    else {\n        let first = l.slice(0, n);\n        let second = l.slice(n);\n        return second.concat(first);\n    }\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.splice(0, n);\n    let second: number[] = l;\n    let result: number[] = second.concat(first);\n    return result;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            arr.push(l[i]);\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[\n  1, 2, 3, 4,\n  4, 5, 5\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  5,\n  6,\n  6,\n  52,\n  52,\n  36,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpcqxmygct.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcqxmygct.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    12, 10,  5,  5,  6,\n     6, 52, 52, 36, 36\n  ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    let result = secondPart.concat(firstPart);\n    return result;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    let arr3: number[] = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    let arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n, l.length);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    let arr3: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        } else {\n            arr2.push(l[i]);\n        }\n    }\n    arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    let arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    let arr1 = [];\n    let arr2 = [];\n    let arr3 = [];\n    for (let i = 0; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr1.push(arr[i]);\n    }\n    for (let i = n; i < arr.length; i++) {\n        arr2.push(arr[i]);\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        arr3.push(arr1[i]);\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        arr3.push(arr2[i]);\n    }\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp0z9_lbt_.js:28:12)\n    at Object.<anonymous> (/tmp/tmp0z9_lbt_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    let result = secondPart.concat(firstPart);\n    return result;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n, l.length);\n    let result = second.concat(first);\n    return result;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        }\n        else {\n            arr2.push(l[i]);\n        }\n    }\n    arr = arr2.concat(arr1);\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpv3wcaiwo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpv3wcaiwo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n, l.length);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    return [...l.slice(n), ...l.slice(0, n)];\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122417,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    let result = second.concat(first);\n    return result;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            arr.push(l[i]);\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[\n  1, 2, 3, 3,\n  4, 4, 5, 5\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  5,\n  6,\n  6,\n  52,\n  52,\n  36,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp2h1otz9u.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2h1otz9u.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    12, 10,  5,  5,  6,\n     6, 52, 52, 36, 36\n  ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(n);\n    return arr.concat(l);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    return l.slice(n).concat(l.slice(0, n));\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.slice(n);\n    let arr2 = l.slice(0, n);\n    return arr.concat(arr2);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.slice(0, n);\n    let secondPart: number[] = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    let arr1 = [];\n    let arr2 = [];\n    for (let i = 0; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr1.push(arr[i]);\n    }\n    for (let i = n; i < arr.length; i++) {\n        arr2.push(arr[i]);\n    }\n    let result = arr2.concat(arr1);\n    return result;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        }\n        else {\n            arr2.push(l[i]);\n        }\n    }\n    arr = arr2.concat(arr1);\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffcb1688810\n 1: 0x2b966a372727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b966af0728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b966a841f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b966a9d3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b966a9db0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b966abc57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b966a5247f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.slice(n);\n    let arr2 = l.slice(0, n);\n    return arr.concat(arr2);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122421,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffd0851e1e0\n 1: 0x2b953f283727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b953fe1828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b953f752f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b953f8e4760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b953f8ec0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b953fad67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b953f4357f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.slice(0, n);\n    let secondPart: number[] = l.slice(n);\n    let result: number[] = secondPart.concat(firstPart);\n    return result;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    let arr3: number[] = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        } else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffde3837370\n 1: 0x2b32eb0fe727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b32ebc9328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b32eb5cdf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b32eb75f760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b32eb7670cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b32eb9517db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b32eb2b07f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffc87983050\n 1: 0x2b276c0c1727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b276cc5628e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b276c590f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b276c722760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b276c72a0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b276c9147db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b276c2737f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffc87983050\n 1: 0x2b276c0c1727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b276cc5628e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b276c590f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b276c722760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b276c72a0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b276c9147db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b276c2737f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            newArr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7fff35137e40\n 1: 0x2ae0c507c727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ae0c5c1128e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2ae0c554bf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2ae0c56dd760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2ae0c56e50cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2ae0c58cf7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2ae0c522e7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let arr = [];\n  for (let i = n; i < l.length; i++) {\n    arr.push(l[i]);\n  }\n  for (let i = 0; i < n; i++) {\n    arr.push(l[i]);\n  }\n  return arr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffdcfb13220\n 1: 0x2b6e557e6727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b6e5637b28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b6e55cb5f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b6e55e47760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b6e55e4f0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b6e560397db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b6e559987f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpv3wcaiwo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpv3wcaiwo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    let newArr = secondPart.concat(firstPart);\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122420,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.splice(0, n);\n    let second = l.splice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 1, 2, 3 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  52,\n  36,\n  12,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp7q7pmg6r.js:11:12)\n    at Object.<anonymous> (/tmp/tmp7q7pmg6r.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 52, 36, 12, 10 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.slice(0, n);\n    let secondPart: number[] = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffdcfb13220\n 1: 0x2b6e557e6727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b6e5637b28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b6e55cb5f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b6e55e47760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b6e55e4f0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b6e560397db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b6e559987f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffdcfb13220\n 1: 0x2b6e557e6727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b6e5637b28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b6e55cb5f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b6e55e47760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b6e55e4f0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b6e560397db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b6e559987f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    let arr3: number[] = [];\n    let arr4: number[] = [];\n    let arr5: number[] = [];\n    let arr6: number[] = [];\n    let arr7: number[] = [];\n    let arr8: number[] = [];\n    let arr9: number[] = [];\n    let arr10: number[] = [];\n    let arr11: number[] = [];\n    let arr12: number[] = [];\n    let arr13: number[] = [];\n    let arr14: number[] = [];\n    let arr15: number[] = [];\n    let arr16: number[] = [];\n    let arr17: number[] = [];\n    let arr18: number[] = [];\n    let arr19: number[] = [];\n    let arr20: number[] = [];\n    let arr21: number[] = [];\n    let arr22: number[] = [];\n    let arr23: number[] = [];\n    let arr24: number[] = [];\n    let arr25: number[] = [];\n    let arr26: number[] = [];\n    let arr27: number[] = [];\n    let arr28: number[] = [];\n    let arr29: number[] = [];\n    let arr30: number[] = [];\n    let arr31: number[] = [];\n    let arr32: number[] = [];\n    let arr33: number[] = [];\n    let arr34: number[] = [];\n    let arr35: number[] = [];\n    let arr36: number[] = [];\n    let arr37: number[] = [];\n    let arr38: number[] = [];\n    let arr39: number[] = [];\n    let arr40: number[] = [];\n    let arr41: number[] = [];\n    let arr42: number[] = [];\n    let arr43: number[] = [];\n    let arr44: number[] = [];\n    let arr45: number[] = [];\n    let arr46: number[] = [];\n    let arr47: number[] = [];\n    let arr48: number[] = [];\n    let arr49: number[] = [];\n    let arr50: number[] = [];\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "../../../../tmp/tmpxvnld__4.ts(55,9): error TS1005: ',' expected.\n../../../../tmp/tmpxvnld__4.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n, l.length);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.slice(0, n);\n    let secondPart: number[] = l.slice(n);\n    let newArr: number[] = secondPart.concat(firstPart);\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp1stpnmxl.js:20:12)\n    at Object.<anonymous> (/tmp/tmp1stpnmxl.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    let i: number;\n    for (i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let l1 = l.slice(0, n);\n    let l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.slice(n);\n    let arr1 = l.slice(0, n);\n    arr = arr.concat(arr1);\n    return arr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.slice(n);\n    let arr2 = l.slice(0, n);\n    return arr.concat(arr2);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.slice(0, n);\n    let secondPart: number[] = l.slice(n);\n    let newArr: number[] = secondPart.concat(firstPart);\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.slice(0, n);\n    let secondPart: number[] = l.slice(n);\n    let result: number[] = secondPart.concat(firstPart);\n    return result;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr1: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            arr1.push(l[i]);\n        }\n    }\n    return arr1.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        }\n        else {\n            arr2.push(l[i]);\n        }\n    }\n    arr = arr2.concat(arr1);\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.slice(n);\n    let arr1 = l.slice(0, n);\n    return arr.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    let newArr = secondPart.concat(firstPart);\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let l1: number[] = l.slice(0, n);\n    let l2: number[] = l.slice(n);\n    let l3: number[] = l2.concat(l1);\n    return l3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n, l.length);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        }\n        else {\n            arr2.push(l[i]);\n        }\n    }\n    arr = arr2.concat(arr1);\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            arr2.push(l[i]);\n        }\n    }\n    return arr2.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffdcfb13220\n 1: 0x2b6e557e6727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b6e5637b28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b6e55cb5f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b6e55e47760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b6e55e4f0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b6e560397db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b6e559987f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    let arr3: number[] = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        l.shift();\n    }\n    return l;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122426,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7fffeabfc860\n 1: 0x2b643d97e727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b643e51328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b643de4df8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b643dfdf760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b643dfe70cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b643e1d17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b643db307f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    return [...l.slice(n), ...l.slice(0, n)];\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(n);\n    return arr.concat(l);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (i >= n) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmppbhyca8m.js:19:12)\n    at Object.<anonymous> (/tmp/tmppbhyca8m.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    return l.slice(n).concat(l.slice(0, n));\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr: number[] = [];\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    let arr3: number[] = [];\n    arr = l;\n    arr1 = arr.slice(0, n);\n    arr2 = arr.slice(n, arr.length);\n    arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122419,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510012,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n        else {\n            arr.push(l[i]);\n            arr.push(l[i - n]);\n        }\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122424,
      "stdout": "[\n  1, 2, 3, 1, 4,\n  2, 5, 3, 6, 4\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  12,\n  6,\n  10,\n  52,\n  5,\n  36,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp5m31ouan.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5m31ouan.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    12, 10, 5, 12, 6,\n    10, 52, 5, 36, 6\n  ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    let arr3: number[] = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122416,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}