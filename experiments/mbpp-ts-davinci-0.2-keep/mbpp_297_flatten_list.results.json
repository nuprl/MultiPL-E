{
  "name": "mbpp_297_flatten_list",
  "language": "ts",
  "prompt": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            for (let j: number = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], 5], 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2], [3, 4], [5, 6], [7, 8]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        } else {\n            flat_list.push(list1[i]);\n        }\n    }\n    return flat_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "../../../../tmp/tmpjisey8i4.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(function (element: any) {\n        if (element instanceof Array) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([1, [2, 2, 2], 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 1, 2, 1, 1 ]\n[ 1, 2, 2, 2, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[2, 3], [4, 5], [6, 7]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 2, 3, 4, 5, 6, 7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]));\nconsole.log(flatten_list([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n   1,  2, 3, 4,  5,\n   6,  7, 8, 9, 10,\n  11, 12\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], 2, [1, 4], [[5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[\n  3, 2, 1, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            for (let j: number = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6, 7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4], [5, 6]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1 = [1, [2, [3, 4], 5], 6];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4], [5, [6, 7]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3, [8, [[10], [[[9]]]]]], 7]]));\nconsole.log(flatten_list([]));\nconsole.log(flatten_list([1, 2, 3]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 8, 10, 9, 7 ]\n[]\n[ 1, 2, 3 ]\n[ 1, 1, 2, 1, 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6, 7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(function (element: any) {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2], [3, 4], [5, 6]]));\nconsole.log(flatten_list([[1, [8, 9]], [3, 4], [5, 6]]));\nconsole.log(flatten_list([[[3], [4], [5], 6]]));\nconsole.log(flatten_list([[[3], [4], [5], 6], 7, 8, 9]));\nconsole.log(flatten_list([[[3], [4], [5], 6], 7, 8, 9, [10, 11, 12]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[\n  1, 8, 9, 3,\n  4, 5, 6\n]\n[ 3, 4, 5, 6 ]\n[\n  3, 4, 5, 6,\n  7, 8, 9\n]\n[\n  3, 4,  5,  6,  7,\n  8, 9, 10, 11, 12\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([a, [b, [c, d], e]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "../../../../tmp/tmp4vuuhmo1.ts(14,27): error TS2304: Cannot find name 'a'.\n../../../../tmp/tmp4vuuhmo1.ts(14,31): error TS2304: Cannot find name 'b'.\n../../../../tmp/tmp4vuuhmo1.ts(14,35): error TS2304: Cannot find name 'c'.\n../../../../tmp/tmp4vuuhmo1.ts(14,38): error TS2304: Cannot find name 'd'.\n../../../../tmp/tmp4vuuhmo1.ts(14,42): error TS2304: Cannot find name 'e'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let flatList: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            flatList = flatList.concat(flatten_list(element));\n        } else {\n            flatList.push(element);\n        }\n    });\n    return flatList;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 5], 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[ 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 1, 2, 1, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]));\nconsole.log(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], [5, 6]], [[[7, 8], 9], 10]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], [5, 6]], [[[7, 8], 9], 10]]));\nconsole.log(flatten_list([]));\nconsole.log(flatten_list([]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "../../../../tmp/tmpliiq4uig.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]], 7, [8, [9]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\nconsole.log(flatten_list([[[3, 4], 2, 2, [2, 4]], [5, 6]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5, 6]]]));\nconsole.log(flatten_list([[[3, [4], 2, 2, [2, 4]], [5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "../../../../tmp/tmpiycrshvj.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpiycrshvj.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        } else {\n            flat_list.push(list1[i]);\n        }\n    }\n    return flat_list;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let newList: number[] = [];\n    list1.forEach(element => {\n        if (typeof element === 'number') {\n            newList.push(element);\n        } else {\n            newList = newList.concat(flatten_list(element));\n        }\n    });\n    return newList;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 5], 6]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10, [11, 12]]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16]]]]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18]]]]]]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20]]]]]]]]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10, [11, 12, [13, 14, [15, 16, [17, 18, [19, 20, [21, 22]]]]]]]]]]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, 8, [9, 10, [11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "../../../../tmp/tmpndfhxccv.ts(21,99): error TS1005: ',' expected.\n../../../../tmp/tmpndfhxccv.ts(22,109): error TS1005: ',' expected.\n../../../../tmp/tmpndfhxccv.ts(22,110): error TS1135: Argument expression expected.\n../../../../tmp/tmpndfhxccv.ts(23,119): error TS1005: ',' expected.\n../../../../tmp/tmpndfhxccv.ts(23,120): error TS1135: Argument expression expected.\n../../../../tmp/tmpndfhxccv.ts(23,121): error TS1135: Argument expression expected.\n../../../../tmp/tmpndfhxccv.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmpndfhxccv.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], 2, 1, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 2, 1, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [4, 5], 6], 7], 8, [9, 10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[\n  3, 4, 5,  6,\n  7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6, 7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6, 7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1: any = [[1, 1], 2, [1, 1], [1, [1, [1, 1], 1], 1]];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[\n  1, 1, 2, 1, 1,\n  1, 1, 1, 1, 1,\n  1\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 5], 6]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, [8, 9]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, [8, 9]], 10]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, [8, 9]], 10, [11, [12, [13, [14, [15]]]]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [7, [8, 9]], 10, [11, [12, [13, [14, [15]]]]], 16]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[ 3, 4, 5, 6 ]\n[\n  3, 4, 5, 6,\n  7, 8, 9\n]\n[\n  3, 4, 5,  6,\n  7, 8, 9, 10\n]\n[\n   3,  4,  5,  6,  7,  8,\n   9, 10, 11, 12, 13, 14,\n  15\n]\n[\n   3,  4,  5,  6,  7,  8,\n   9, 10, 11, 12, 13, 14,\n  15, 16\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([1, [2, 2, 2], 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 1, 2, 1, 1 ]\n[ 1, 2, 2, 2, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[\n  3, 4, 2, 2,\n  4, 2, 2, 1\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123910,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[\n  3, 4, 2, 2,\n  4, 2, 2, 1\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], 2, 1, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123910,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 2, 1, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9], 10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123910,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], [5, 6]], [7, 8], [9, 10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[\n  3, 4, 5,  6,\n  7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 5], 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123910,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[ 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (element instanceof Array) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([1, [2, 2, 2], 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 1, 2, 1, 1 ]\n[ 1, 2, 2, 2, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    return list1.reduce((a, b) => a.concat(Array.isArray(b) ? flatten_list(b) : b), []);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j: number = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6, 7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, [2, 3]], 4, [5, 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[\n  3, 4, 2, 2,\n  4, 2, 2, 1\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11], 1, [1, [1]]], 2, [1, 1]], 2, [1, 1]]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "../../../../tmp/tmpvhywne3h.ts(16,84): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(17,84): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(18,84): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(19,84): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(20,84): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(21,84): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(22,84): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(24,1): error TS1005: ',' expected.\n../../../../tmp/tmpvhywne3h.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            flat_list.push(list1[i]);\n        } else {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        }\n    }\n    return flat_list;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9, 10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            flat_list.push(list1[i]);\n        } else {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        }\n    }\n    return flat_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 5], 6]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[7, 8], 9], 10]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[7, 8], 9], 10], 11]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[7, 8], 9], 10], 11, [[[12, 13], 14], 15]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[7, 8], 9], 10], 11, [[[12, 13], 14], 15], 16]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[7, 8], 9], 10], 11, [[[12, 13], 14], 15], 16, [[[17, 18], 19], 20]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[7, 8], 9], 10], 11, [[[12, 13], 14], 15], 16, [[[17, 18], 19], 20], 21]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[7, 8], 9], 10], 11, [[[12, 13], 14], 15], 16, [[[17, 18], 19], 20], 21, [[[22, 23], 24], 25]]));\nconsole.log(flatten_list([[[3, 4], 5], 6, [[[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "../../../../tmp/tmpdvpw8bl6.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], 2, [1, 4], [[5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[\n  3, 2, 1, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1: any = [1, 2, [3, 5], [[4, 3], 2]];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[\n  1, 2, 3, 5,\n  4, 3, 2\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1: any = [1, [2, [3, 4], 5], 6, [7, 8]];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(function (element: any) {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123910,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[\n  3, 4, 2, 2,\n  4, 2, 2, 1\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], [[5]]], [1, [2, [3, 4], [[5]]]]]));\nconsole.log(flatten_list([[[3, 4], [[5]]], [1, [2, [3, 4], [[5]]]]]));\nconsole.log(flatten_list([[1, 2, 3], 4, [5, 6]]));\nconsole.log(flatten_list([[1, [1, 1]], 2, [1, 1]]));\nconsole.log(flatten_list([1, [2, 1, 1], 3, [1, 1, [1, 1, 1]]]));\nconsole.log(flatten_list([1, [2, 1, 1], 3, [1, 1, [1, 1, 1]]]));\nconsole.log(flatten_list([[[3]], 4, [[5], 6]]));\nconsole.log(flatten_list([[[3]], 4, [[5], 6]]));\nconsole.log(flatten_list([1, [2, 1, 1], 3, [1, 1, [1, 1, 1]]]));\nconsole.log(flatten_list([1, [2, 1, 1], 3, [1, 1, [1, 1, 1]]]));\nconsole.log(flatten_list([1, [2, 1, 1], 3, [1, 1, [1, 1, 1]]]));\nconsole.log(flatten_list([1, [2, 1, 1], 3, [\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "../../../../tmp/tmpq19fjopy.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (typeof list1[i] === \"number\") {\n      result.push(list1[i]);\n    } else {\n      result = result.concat(flatten_list(list1[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1: any = [1, [2, [3, 4], 5], 6];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2], [3, 4], [5, 6], [7, 8]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8, 9]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8, 9], [10, 11]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21]]));\nconsole.log(flatten_list([[1, [2, 3]], [4, 5], [6, 7], [8,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "../../../../tmp/tmp6_0jvnrv.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4], [5, 6]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 5], 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123910,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[ 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let newList: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            newList.push(list1[i]);\n        } else {\n            newList = newList.concat(flatten_list(list1[i]));\n        }\n    }\n    return newList;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3, 4], 2, [2, 4], [2]], [2, 1]]));\nconsole.log(flatten_list([[[3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "../../../../tmp/tmp9ziqwobe.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2], [3, 4], [5, 6], [7, 8]]));\nconsole.log(flatten_list([[1, [2]], [3, 4], [5, 6], [7, 8]]));\nconsole.log(flatten_list([[1, [2]], [3, 4], [5, 6], [7, 8], [9, 10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let newList: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            newList.push(list1[i]);\n        } else {\n            newList = newList.concat(flatten_list(list1[i]));\n        }\n    }\n    return newList;\n}\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof (list1[i]) === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            for (let j: number = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], 5], 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, 1], 2, [1, 1]]));\nconsole.log(flatten_list([[[3, [8, [[10], 11]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 2, 1, 1 ]\n[ 3, 8, 10, 11 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123908,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510619,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested list structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123913,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}