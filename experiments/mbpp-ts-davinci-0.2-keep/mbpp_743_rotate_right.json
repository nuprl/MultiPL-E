{
  "name": "mbpp_743_rotate_right",
  "language": "ts",
  "prompt": "//Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunction rotate_right(list: number[], m: number): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(n - r + i) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let rotated_list = [];\n    for (let i = 0; i < n; i++) {\n        rotated_list[(i + m) % n] = list[i];\n    }\n    return rotated_list;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let length = list.length;\n    for (let i = 0; i < length; i++) {\n        result[(i + m) % length] = list[i];\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    return list.slice(n - r, n).concat(list.slice(0, n - r));\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let temp = list.slice(n - m, n);\n    let temp2 = list.slice(0, n - m);\n    return temp.concat(temp2);\n}\n",
    "    let n = list.length;\n    let gcd = gcd_func(n, m);\n    for (let i = 0; i < gcd; i++) {\n        let j = i;\n        let temp = list[i];\n        while (true) {\n            let k = j + m;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let length = list.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        result[(i + m) % length] = list[i];\n    }\n    return result;\n}\n",
    "    let length = list.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        result[(i + m) % length] = list[i];\n    }\n    return result;\n}\n",
    "    let list_length = list.length;\n    let new_list = [];\n    for (let i = 0; i < list_length; i++) {\n        new_list[(i + m) % list_length] = list[i];\n    }\n    return new_list;\n}\n",
    "  let n: number = list.length;\n  let r: number = m % n;\n  let g_c_d: number = gcd(r, n);\n  for (let i: number = 0; i < g_c_d; i++) {\n    let j: number = i;\n    let temp: number = list[i];\n    while (true) {\n      let k: number = j + r;\n      if (k >= n) {\n        k = k - n;\n      }\n      if (k == i) {\n        break;\n      }\n      list[j] = list[k];\n      j = k;\n    }\n    list[j] = temp;\n  }\n  return list;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + m) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    return list.slice(n - r).concat(list.slice(0, n - r));\n}\n",
    "    let result: number[] = [];\n    let length = list.length;\n    for (let i = 0; i < length; i++) {\n        result[(i + m) % length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let length = list.length;\n    let new_list = [];\n    for (let i = 0; i < length; i++) {\n        new_list[(i + m) % length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let temp = list.slice(n - m, n);\n    let temp2 = list.slice(0, n - m);\n    return temp.concat(temp2);\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n: number = list.length;\n    let r: number = m % n;\n    let result: number[] = [];\n    for (let i: number = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let length: number = list.length;\n    for (let i = 0; i < length; i++) {\n        result[(i + m) % length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let temp: number[] = [];\n    for (let i = 0; i < m; i++) {\n        temp.push(list.pop());\n    }\n    for (let i = 0; i < m; i++) {\n        list.unshift(temp[i]);\n    }\n    return list;\n}\n",
    "    let n: number = list.length;\n    let r: number = m % n;\n    let result: number[] = [];\n    for (let i: number = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let len: number = list.length;\n    for (let i = 0; i < len; i++) {\n        result[(i + m) % len] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let rotated_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        rotated_list[(i + m) % list.length] = list[i];\n    }\n    return rotated_list;\n}\n",
    "    let reverse = (list: number[], start: number, end: number): void => {\n        while (start < end) {\n            let temp = list[start];\n            list[start] = list[end];\n            list[end] = temp;\n            start++;\n            end--;\n        }\n    }\n    reverse(list, 0, list.length - 1);\n    reverse(list, 0, m - 1);\n    reverse(list, m, list.length - 1);\n    return list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res[i] = list[(i + r) % n];\n    }\n    return res;\n}\n",
    "    for (let i = 0; i < m; i++) {\n        let last = list.pop();\n        list.unshift(last);\n    }\n    return list;\n}\n",
    "  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    result[(i + m) % list.length] = list[i];\n  }\n  return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let len = list.length;\n    let rotated_list = list.slice(len - m, len);\n    rotated_list = rotated_list.concat(list.slice(0, len - m));\n    return rotated_list;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let g_c_d = gcd(r, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let j = i;\n        let temp = list[i];\n        while (true) {\n            let k = j + r;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(list[(n + i - r) % n]);\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let g_c_d = gcd(m, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let j = i;\n        let temp = list[i];\n        while (true) {\n            let k = j + m;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    return list.slice(n - r).concat(list.slice(0, n - r));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let l = list.length;\n    let r = m % l;\n    let res = [];\n    for (let i = 0; i < l; i++) {\n        res[i] = list[(i + r) % l];\n    }\n    return res;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let len = list.length;\n    let new_list = [];\n    for (let i = 0; i < len; i++) {\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(list[(i + r) % n]);\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    let length = list.length;\n    for (let i = 0; i < length; i++) {\n        new_list[(i + m) % length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = list.slice(n - r, n).concat(list.slice(0, n - r));\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let temp = list.slice(list.length - m, list.length);\n    let temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n",
    "    for (let i = 0; i < m; i++) {\n        let last = list.pop();\n        list.unshift(last);\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        new_list[(i + m) % n] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n: number = list.length;\n    let r: number = m % n;\n    let result: number[] = [];\n    for (let i: number = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res[i] = list[(i + r) % n];\n    }\n    return res;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let len: number = list.length;\n    let mod: number = m % len;\n    let result: number[] = [];\n    for (let i: number = 0; i < len; i++) {\n        result[i] = list[(i + mod) % len];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let g_c_d = gcd(r, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let j = i;\n        let temp = list[i];\n        while (true) {\n            let k = j + r;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let len = list.length;\n    for (let i = 0; i < len; i++) {\n        result[(i + m) % len] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let g_c_d = gcd(r, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let temp = list[n - i - 1];\n        let j = n - i - 1;\n        while (true) {\n            let k = j - r;\n            if (k < 0) {\n                k = k + n;\n            }\n            if (k == n - i - 1) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let new_list = [];\n    for (let i = 0; i < n; i++) {\n        new_list[(i + m) % n] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let len = list.length;\n    let result = [];\n    for (let i = 0; i < len; i++) {\n        result[(i + m) % len] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let result = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let gcd = gcd_recursive(n, m);\n    for (let i = 0; i < gcd; i++) {\n        let temp = list[n - i - 1];\n        let j = n - i - 1;\n        while (true) {\n            let k = j - m;\n            if (k < 0) {\n                k = k + n;\n            }\n            if (k == n - i - 1) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let gcd = gcd_function(n, m);\n    for (let i = 0; i < gcd; i++) {\n        let temp = list[n - 1];\n        for (let j = n - 1; j > 0; j--) {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let new_list = [];\n    for (let i = 0; i < n; i++) {\n        new_list[(i + m) % n] = list[i];\n    }\n    return new_list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(n + i - r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let gcd = gcd_recursive(m, n);\n    for (let i = 0; i < gcd; i++) {\n        let temp = list[n - 1];\n        for (let j = n - 1; j > 0; j--) {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n    }\n    return list;\n}\n",
    "    let len = list.length;\n    let new_list = [];\n    for (let i = 0; i < len; i++) {\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let length: number = list.length;\n    for (let i = 0; i < length; i++) {\n        let index: number = (i + m) % length;\n        result[index] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let length = list.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        result[(i + m) % length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let rotated_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        rotated_list.push(list[(i + m) % list.length]);\n    }\n    return rotated_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let g_c_d = gcd(r, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let j = i;\n        let temp = list[i];\n        while (true) {\n            let k = j + r;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(list[(i + r) % n]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let g_c_d = gcd(r, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let temp = list[n - i - 1];\n        let j = n - i - 1;\n        while (true) {\n            let k = j - r;\n            if (k < 0) {\n                k = k + n;\n            }\n            if (k == n - i - 1) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let result: number[] = [];\n    let n = list.length;\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    return list.slice(n - r).concat(list.slice(0, n - r));\n}\n",
    "    let len = list.length;\n    let result = [];\n    for (let i = 0; i < len; i++) {\n        result[(i + m) % len] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    return list.slice(list.length - m).concat(list.slice(0, list.length - m));\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    const n = list.length;\n    const rotated = [];\n    for (let i = 0; i < n; i++) {\n        rotated[(i + m) % n] = list[i];\n    }\n    return rotated;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    return list.slice(n - r, n).concat(list.slice(0, n - r));\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let len = list.length;\n    let new_list = [];\n    for (let i = 0; i < len; i++) {\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(n + i - r) % n];\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result.push(list[(i + m) % list.length]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let result: number[] = [];\n    let length: number = list.length;\n    for (let i = 0; i < length; i++) {\n        result[(i + m) % length] = list[i];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let len = list.length;\n    let result = [];\n    for (let i = 0; i < len; i++) {\n        result[(i + m) % len] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(list[(i + r) % n]);\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = new Array(n);\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let g_c_d = gcd(r, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let j = i;\n        let temp = list[i];\n        while (true) {\n            let k = j + r;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let rotated_list = [];\n    for (let i = 0; i < n; i++) {\n        rotated_list[(i + m) % n] = list[i];\n    }\n    return rotated_list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let len = list.length;\n    let result = [];\n    for (let i = 0; i < len; i++) {\n        result[(i + m) % len] = list[i];\n    }\n    return result;\n}\n",
    "    let rotated_list = [];\n    for (let i = 0; i < list.length; i++) {\n        rotated_list[(i + m) % list.length] = list[i];\n    }\n    return rotated_list;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let mod = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + mod) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let rotated_list = [];\n    for (let i = 0; i < list.length; i++) {\n        rotated_list[(i + m) % list.length] = list[i];\n    }\n    return rotated_list;\n}\n",
    "    let result = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let new_list: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + m) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let g_c_d = gcd(r, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let temp = list[n - i - 1];\n        let j = n - i - 1;\n        while (true) {\n            let k = j - r;\n            if (k < 0) {\n                k = k + n;\n            }\n            if (k == n - i - 1) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        result[i] = list[(i + m) % list.length];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let g_c_d = gcd(m, n);\n    for (let i = 0; i < g_c_d; i++) {\n        let j = i;\n        let temp = list[i];\n        while (true) {\n            let k = j + m;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n",
    "    let n = list.length;\n    let r = m % n;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[i] = list[(i + r) % n];\n    }\n    return result;\n}\n",
    "    let n = list.length;\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n"
  ]
}