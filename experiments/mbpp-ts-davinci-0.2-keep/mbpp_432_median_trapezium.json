{
  "name": "mbpp_432_median_trapezium",
  "language": "ts",
  "prompt": "//Write a function to find the median length of a trapezium.\nfunction median_trapezium(base1: number, base2: number, height: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_trapezium;\n  assert.deepEqual(candidate(15, 25, 35),20);\n  assert.deepEqual(candidate(10, 20, 30),15);\n  assert.deepEqual(candidate(6, 9, 4),7.5);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n\nconsole.log(median_trapezium(2, 4, 5));\n",
    "    return (base1 + base2) * height / 2;\n}\nconsole.log(median_trapezium(5, 6, 7));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\nconsole.log(median_trapezium(4, 6, 5));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n\nconsole.log(median_trapezium(3, 5, 4));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\nconsole.log(median_trapezium(5, 7, 6));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\nconsole.log(median_trapezium(2, 3, 4));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\nconsole.log(median_trapezium(2, 3, 4));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\nconsole.log(median_trapezium(5, 10, 5));\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\nconsole.log(median_trapezium(4, 5, 6));\n",
    "    return (base1 + base2) * height / 2;\n}\nconsole.log(median_trapezium(5, 10, 5));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\nconsole.log(median_trapezium(2, 3, 4));\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n"
  ]
}