{
  "name": "mbpp_167_next_power_of_2",
  "language": "ts",
  "prompt": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\nconsole.log(next_power_of_2(4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "8\n16\n32\n64\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "8\n16\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i: number = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "8\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    while (p < n) {\n        p *= 2;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(15));\nconsole.log(next_power_of_2(16));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "8\n16\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(15));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(17));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "8\n16\n16\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    let result = 1;\n    while (result < n) {\n        result = Math.pow(2, i);\n        i++;\n    }\n    return result;\n}\n\nconsole.log(next_power_of_2(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "8\n16\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmptwpnjuae.js:8:12)\n    at Object.<anonymous> (/tmp/tmptwpnjuae.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(12));\nconsole.log(next_power_of_2(50));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "8\n16\n64\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    while (p < n) {\n        p *= 2;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    if (n < 0) {\n        throw \"n must be a positive integer\";\n    }\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp6lphhotm.js:11:12)\n    at Object.<anonymous> (/tmp/tmp6lphhotm.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.log(next\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "../../../../tmp/tmp_3dtdbbp.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp_3dtdbbp.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    else if (n & (n - 1) === 0) {\n        return n;\n    }\n    else {\n        while (n & (n - 1) > 0) {\n            n &= (n - 1);\n        }\n        return n << 1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "../../../../tmp/tmp87sj8cz3.ts(6,18): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp87sj8cz3.ts(10,20): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (n > Math.pow(2, i)) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(4));\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(33));\nconsole.log(next_power_of_2(0));\nconsole.log(next_power_of_2(1));\nconsole.log(next_power_of_2(2));\nconsole.log(next_power_of_2(3));\nconsole.log(next_power_of_2(6));\nconsole.log(next_power_of_2(7));\nconsole.log(next_power_of_2(8));\nconsole.log(next_power_of_2(9));\nconsole.log(next_power_of_2(10));\nconsole.log(next_power_of_2(11));\nconsole.log(next_power_of_2(12));\nconsole.log(next_power_of_2(13));\nconsole.log(next_power_of_2(14));\nconsole.log(next_power_of_2(15));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(17));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(19));\nconsole.log(next_power_of_2(20));\nconsole.log(next_power_of_2(21));\nconsole.log(next_power_of_2(22));\nconsole.log(next_power_of_2(23));\nconsole.log(next_power_of_2(24));\nconsole.log(next_power_of_2(25));\nconsole.log(next_power_of_2(26));\nconsole.log(next_power_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "../../../../tmp/tmp60hw9b7k.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmp60hw9b7k.ts(44,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(24));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "8\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "8\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    else if (n & (n - 1) === 0) {\n        return n;\n    }\n    else {\n        while (n & (n - 1) > 0) {\n            n &= (n - 1);\n        }\n        return n << 1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "../../../../tmp/tmp87sj8cz3.ts(6,18): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp87sj8cz3.ts(10,20): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    while (p < n) {\n        p *= 2;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.log(next\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "../../../../tmp/tmp_3dtdbbp.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp_3dtdbbp.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    let power = 0;\n    while (n !== 1) {\n        n = n >> 1;\n        power += 1;\n    }\n    return 1 << power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp5mzenj22.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5mzenj22.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    let count = 0;\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "8\n16\n32\n64\n128\n256\n512\n1024\n2048\n4096\n8192\n16384\n32768\n65536\n131072\n262144\n524288\n1048576\n2097152\n4194304\n8388608\n16777216\n33554432\n67108864\n134217728\n268435456\n536870912\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(6));\nconsole.log(next_power_of_2(7));\nconsole.log(next_power_of_2(8));\nconsole.log(next_power_of_2(9));\nconsole.log(next_power_of_2(10));\nconsole.log(next_power_of_2(11));\nconsole.log(next_power_of_2(12));\nconsole.log(next_power_of_2(13));\nconsole.log(next_power_of_2(14));\nconsole.log(next_power_of_2(15));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(17));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(19));\nconsole.log(next_power_of_2(20));\nconsole.log(next_power_of_2(21));\nconsole.log(next_power_of_2(22));\nconsole.log(next_power_of_2(23));\nconsole.log(next_power_of_2(24));\nconsole.log(next_power_of_2(25));\nconsole.log(next_power_of_2(26));\nconsole.log(next_power_of_2(27));\nconsole.log(next_power_of_2(28));\nconsole.log(next_power_of_2(29));\nconsole.log(next_power_of_2(30));\nconsole.log(next_power_of_2(31));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(33));\nconsole.log(next_power_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "../../../../tmp/tmpoka4h3n0.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpoka4h3n0.ts(44,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(6));\nconsole.log(next_power_of_2(8));\nconsole.log(next_power_of_2(16));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "8\n8\n8\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(10));\nconsole.log(next_power_of_2(15));\nconsole.log(next_power_of_2(20));\nconsole.log(next_power_of_2(25));\nconsole.log(next_power_of_2(30));\nconsole.log(next_power_of_2(35));\nconsole.log(next_power_of_2(40));\nconsole.log(next_power_of_2(45));\nconsole.log(next_power_of_2(50));\nconsole.log(next_power_of_2(55));\nconsole.log(next_power_of_2(60));\nconsole.log(next_power_of_2(65));\nconsole.log(next_power_of_2(70));\nconsole.log(next_power_of_2(75));\nconsole.log(next_power_of_2(80));\nconsole.log(next_power_of_2(85));\nconsole.log(next_power_of_2(90));\nconsole.log(next_power_of_2(95));\nconsole.log(next_power_of_2(100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "8\n16\n16\n32\n32\n32\n64\n64\n64\n64\n64\n64\n128\n128\n128\n128\n128\n128\n128\n128\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i: number = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(12));\nconsole.log(next_power_of_2(50));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "8\n16\n64\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    else {\n        return Math.pow(2, Math.ceil(Math.log2(n)));\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpagpvl9z6.js:13:12)\n    at Object.<anonymous> (/tmp/tmpagpvl9z6.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    while (p < n) {\n        p *= 2;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(17));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(33));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(65));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(129));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(257));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(513));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(1025));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(2049));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(4097));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(8193));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(16385));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(32769));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(65537));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(131073));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "8\n16\n32\n32\n64\n64\n128\n128\n256\n256\n512\n512\n1024\n1024\n2048\n2048\n4096\n4096\n8192\n8192\n16384\n16384\n32768\n32768\n65536\n65536\n131072\n131072\n262144\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    while (p < n) {\n        p *= 2;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log2(n)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc9fn53hr.js:8:12)\n    at Object.<anonymous> (/tmp/tmpc9fn53hr.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmptwpnjuae.js:8:12)\n    at Object.<anonymous> (/tmp/tmptwpnjuae.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    while (p < n) {\n        p *= 2;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i: number = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    while (p < n) {\n        p *= 2;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (n > Math.pow(2, i)) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count: number = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "../../../../tmp/tmp033ist8h.ts(41,9): error TS1003: Identifier expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmptwpnjuae.js:8:12)\n    at Object.<anonymous> (/tmp/tmptwpnjuae.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 0;\n    while (Math.pow(2, i) < n) {\n        i++;\n    }\n    return Math.pow(2, i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(15));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(17));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "8\n16\n16\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}