{
  "name": "mbpp_758_unique_sublists",
  "language": "ts",
  "prompt": "//Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nfunction unique_sublists(list1: any): any {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_sublists;\n  assert.deepEqual(candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]),{[1, 3]: 2, [5, 7]: 2, [13, 15, 17]: 1, [9, 11]: 1});\n  assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),{[\"green\", \"orange\"]: 2, [\"black\"]: 1, [\"white\"]: 1});\n  assert.deepEqual(candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]),{[10, 20, 30, 40]: 1, [60, 70, 50, 50]: 1, [90, 100, 200]: 1});\n  assert.deepEqual(candidate([[\"john\"]]),{[\"john\"]: 1});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let dict: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        }\n        else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key = JSON.stringify(list1[i]);\n        if (dict[key] == undefined) {\n            dict[key] = 1;\n        } else {\n            dict[key] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (dict[tuple] === undefined) {\n            dict[tuple] = 1;\n        } else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let result: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (result[tuple] == undefined) {\n            result[tuple] = 1;\n        }\n        else {\n            result[tuple]++;\n        }\n    }\n    return result;\n}\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key = JSON.stringify(list1[i]);\n        if (dict[key] === undefined) {\n            dict[key] = 1;\n        } else {\n            dict[key] += 1;\n        }\n    }\n    return dict;\n}\n\nconsole.log(unique_sublists([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40], [42], [10, 42]]));\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        }\n        else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let dict: any = {};\n    list1.forEach(element => {\n        if (dict[element] == undefined) {\n            dict[element] = 1;\n        }\n        else {\n            dict[element] += 1;\n        }\n    });\n    return dict;\n}\n\nconsole.log(unique_sublists([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [",
    "    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key = JSON.stringify(list1[i]);\n        if (result[key] == undefined) {\n            result[key] = 1;\n        } else {\n            result[key] += 1;\n        }\n    }\n    return result;\n}\n\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3",
    "    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key = list1[i];\n        if (typeof key == \"object\") {\n            key = tuple(key);\n        }\n        if (result[key] == undefined) {\n            result[key] = 1;\n        } else {\n            result[key] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let result: any = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (result[tuple] == undefined) {\n            result[tuple] = 1;\n        } else {\n            result[tuple] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let result: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key: any = JSON.stringify(list1[i]);\n        if (result[key] == undefined) {\n            result[key] = 1;\n        } else {\n            result[key]++;\n        }\n    }\n    return result;\n}\n\nconsole.log(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6]]));\n",
    "    let dict: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (dict[tuple] == undefined) {\n            dict[tuple] = 1;\n        } else {\n            dict[tuple] += 1;\n        }\n    }\n    return dict;\n}\n",
    "    let result: any = {};\n    list1.forEach(function (item: any) {\n        let key: any = JSON.stringify(item);\n        if (result[key]) {\n            result[key]++;\n        } else {\n            result[key] = 1;\n        }\n    });\n    return result;\n}\n\nlet list1: any = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1,",
    "    let result: any = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        let list2: any = list1[i];\n        let tuple: any = tuplefy(list2);\n        if (result[tuple] == undefined) {\n            result[tuple] = 1;\n        } else {\n            result[tuple] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let result: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key: any = list1[i];\n        if (result[key] == undefined) {\n            result[key] = 1;\n        } else {\n            result[key] += 1;\n        }\n    }\n    return result;\n}\nconsole.log(unique_sublists([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]));\n",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (dict[list1[i]]) {\n            dict[list1[i]] += 1;\n        } else {\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n",
    "    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (result[tuple] == undefined) {\n            result[tuple] = 1;\n        } else {\n            result[tuple] += 1;\n        }\n    }\n    return result;\n}\n",
    "    let result: any = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        let tuple: any = tuplefy(list1[i]);\n        if (result.hasOwnProperty(tuple)) {\n            result[tuple] += 1;\n        } else {\n            result[tuple] = 1;\n        }\n    }\n    return result;\n}\n",
    "    let result: any = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key = JSON.stringify(list1[i]);\n        if (result[key] === undefined) {\n            result[key] = 1;\n        } else {\n            result[key] += 1;\n        }\n    }\n    return result;\n}\n\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list17",
    "    let dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let tuple = tuplefy(list1[i]);\n        if (dict[tuple]) {\n            dict[tuple]++;\n        } else {\n            dict[tuple] = 1;\n        }\n    }\n    return dict;\n}\n"
  ]
}