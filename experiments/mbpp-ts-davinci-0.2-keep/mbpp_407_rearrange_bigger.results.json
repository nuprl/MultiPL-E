{
  "name": "mbpp_407_rearrange_bigger",
  "language": "ts",
  "prompt": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplmyrizl3.js:35:12)\n    at Object.<anonymous> (/tmp/tmplmyrizl3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpojnu_8h2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpojnu_8h2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2y_p3pfl.js:32:12)\n    at Object.<anonymous> (/tmp/tmp2y_p3pfl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpojnu_8h2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpojnu_8h2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_big\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "../../../../tmp/tmpb430fpwu.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpb430fpwu.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    let n_sorted = parseInt(n_arr_sorted_str);\n    if (n_sorted === n) {\n        return -1;\n    } else {\n        return n_sorted;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "../../../../tmp/tmp2rcl31tw.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp2rcl31tw.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) return -1;\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqqm8urcc.js:31:12)\n    at Object.<anonymous> (/tmp/tmpqqm8urcc.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(1234567908));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "123456879\n123456798\n1234567980\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmps21rd5wx.js:35:12)\n    at Object.<anonymous> (/tmp/tmps21rd5wx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num = parseInt(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num > n) {\n        return n_arr_num_sorted_num;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9rf10hzh.js:20:12)\n    at Object.<anonymous> (/tmp/tmp9rf10hzh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num: string = n.toString();\n    let numArr: string[] = num.split(\"\");\n    let numArrNum: number[] = numArr.map(Number);\n    let numArrNumSorted: number[] = numArrNum.sort(function (a, b) { return a - b });\n    let numArrNumSortedReverse: number[] = numArrNumSorted.reverse();\n    let numArrNumSortedReverseString: string = numArrNumSortedReverse.join(\"\");\n    let numArrNumSortedReverseNumber: number = parseInt(numArrNumSortedReverseString);\n    if (numArrNumSortedReverseNumber > n) {\n        return numArrNumSortedReverseNumber;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpje8dg91i.js:21:12)\n    at Object.<anonymous> (/tmp/tmpje8dg91i.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpyom11brf.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpyom11brf.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_sorted = n_arr.sort();\n    let n_arr_sorted_str = n_arr_sorted.join('');\n    let n_arr_sorted_str_rev = n_arr_sorted_str.split('').reverse().join('');\n    let n_arr_sorted_str_rev_num = parseInt(n_arr_sorted_str_rev);\n    if (n_arr_sorted_str_rev_num === n) {\n        return -1;\n    } else {\n        return n_arr_sorted_str_rev_num;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkugj6xxx.js:20:12)\n    at Object.<anonymous> (/tmp/tmpkugj6xxx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) i--;\n  if (i <= 0) return -1;\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) j--;\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2v6kd3_8.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2v6kd3_8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str = n.toString();\n    let arr = str.split('');\n    let arr2 = arr.slice();\n    let arr3 = arr.slice();\n    let arr4 = arr.slice();\n    let arr5 = arr.slice();\n    let arr6 = arr.slice();\n    let arr7 = arr.slice();\n    let arr8 = arr.slice();\n    let arr9 = arr.slice();\n    let arr10 = arr.slice();\n    let arr11 = arr.slice();\n    let arr12 = arr.slice();\n    let arr13 = arr.slice();\n    let arr14 = arr.slice();\n    let arr15 = arr.slice();\n    let arr16 = arr.slice();\n    let arr17 = arr.slice();\n    let arr18 = arr.slice();\n    let arr19 = arr.slice();\n    let arr20 = arr.slice();\n    let arr21 = arr.slice();\n    let arr22 = arr.slice();\n    let arr23 = arr.slice();\n    let arr24 = arr.slice();\n    let arr25 = arr.slice();\n    let arr26 = arr.slice();\n    let arr27 = arr.slice();\n    let arr28 = arr.slice();\n    let arr29 = arr.slice();\n    let arr30 = arr.slice();\n    let arr31 = arr.slice();\n    let arr32 = arr.slice();\n    let arr33 = arr.slice();\n    let arr34 = arr.slice();\n    let arr35 = arr.slice();\n    let arr36 = arr.slice();\n    let arr37 = arr.slice();\n    let arr38 = arr.slice();\n    let arr39 = arr.slice();\n    let arr40 = arr.slice();\n    let arr41 = arr.slice();\n    let arr42 = arr.slice();\n    let arr43 = arr.slice();\n    let arr44 = arr.slice();\n    let arr45 = arr.slice();\n    let arr46 = arr.slice();\n    let arr47 = arr.slice();\n    let arr48 = arr.slice();\n    let arr49 = arr.slice();\n    let arr50 = arr.slice();\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "../../../../tmp/tmpgrtmhay8.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpj6t8mp4v.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpj6t8mp4v.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(19000));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "12354\n12435\n1243\n1324\n90001\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsdi_3m7p.js:51:12)\n    at Object.<anonymous> (/tmp/tmpsdi_3m7p.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234567890));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "1234567908\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpik8wtf_6.js:33:12)\n    at Object.<anonymous> (/tmp/tmpik8wtf_6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2y_p3pfl.js:32:12)\n    at Object.<anonymous> (/tmp/tmp2y_p3pfl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2y_p3pfl.js:32:12)\n    at Object.<anonymous> (/tmp/tmp2y_p3pfl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(2071));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "1243\n-1\n536479\n21\n2107\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpacj41x2b.js:37:12)\n    at Object.<anonymous> (/tmp/tmpacj41x2b.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\").map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4tgcmzp9.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4tgcmzp9.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split(\"\");\n    let i = num.length - 1;\n    while (i > 0 && num[i] <= num[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb82nixm3.js:32:12)\n    at Object.<anonymous> (/tmp/tmpb82nixm3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(543));\nconsole.log(rearrange_bigger(5));\nconsole.log(rearrange_bigger(1));\nconsole.log(rearrange_bigger(0));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(12345678901));\nconsole.log(rearrange_bigger(123456789012));\nconsole.log(rearrange_bigger(1234567890123));\nconsole.log(rearrange_bigger(12345678901234));\nconsole.log(rearrange_bigger(123456789012345));\nconsole.log(rearrange_bigger(1234567890123456));\nconsole.log(rearrange_bigger(12345678901\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpetxpq0pt.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpetxpq0pt.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    let n_bigger = parseInt(n_arr_sorted_str);\n    if (n_bigger > n) {\n        return n_bigger;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmp3nl36j4n.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3nl36j4n.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let numArr = n.toString().split('');\n    let newArr = [];\n    let newNum = 0;\n    for (let i = 0; i < numArr.length; i++) {\n        newArr.push(parseInt(numArr[i]));\n    }\n    newArr.sort(function (a, b) { return a - b });\n    for (let i = 0; i < newArr.length; i++) {\n        newNum += newArr[i] * Math.pow(10, newArr.length - i - 1);\n    }\n    if (newNum > n) {\n        return newNum;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n21\n    at test (/tmp/tmpbj16fas9.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbj16fas9.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 21,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split(\"\").map(Number);\n    let i: number = nums.length - 1;\n    let j: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfa8oygm0.js:32:12)\n    at Object.<anonymous> (/tmp/tmpfa8oygm0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join('');\n    let n_arr_sorted_num = parseInt(n_arr_sorted_str);\n    if (n_arr_sorted_num === n) {\n        return -1;\n    }\n    else {\n        return n_arr_sorted_num;\n    }\n}\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpg8koi6xo.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpg8koi6xo.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8zfqgp_8.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8zfqgp_8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt7m0p_so.js:35:12)\n    at Object.<anonymous> (/tmp/tmpt7m0p_so.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_string = n.toString();\n    let n_array = n_string.split('');\n    let n_array_length = n_array.length;\n    let n_array_sorted = n_array.sort((a, b) => b - a);\n    let n_array_sorted_string = n_array_sorted.join('');\n    let n_array_sorted_number = parseInt(n_array_sorted_string);\n    if (n_array_sorted_number == n) {\n        return -1;\n    } else {\n        for (let i = n_array_length - 1; i > 0; i--) {\n            if (n_array[i] > n_array[i - 1]) {\n                let temp = n_array[i];\n                n_array[i] = n_array[i - 1];\n                n_array[i - 1] = temp;\n                break;\n            }\n        }\n        return parseInt(n_array.join(''));\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpernvdiiz.ts(6,49): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpernvdiiz.ts(6,53): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpojnu_8h2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpojnu_8h2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let arr2: number[] = [];\n    let arr3: number[] = [];\n    let arr4: number[] = [];\n    let arr5: number[] = [];\n    let arr6: number[] = [];\n    let arr7: number[] = [];\n    let arr8: number[] = [];\n    let arr9: number[] = [];\n    let arr10: number[] = [];\n    let arr11: number[] = [];\n    let arr12: number[] = [];\n    let arr13: number[] = [];\n    let arr14: number[] = [];\n    let arr15: number[] = [];\n    let arr16: number[] = [];\n    let arr17: number[] = [];\n    let arr18: number[] = [];\n    let arr19: number[] = [];\n    let arr20: number[] = [];\n    let arr21: number[] = [];\n    let arr22: number[] = [];\n    let arr23: number[] = [];\n    let arr24: number[] = [];\n    let arr25: number[] = [];\n    let arr26: number[] = [];\n    let arr27: number[] = [];\n    let arr28: number[] = [];\n    let arr29: number[] = [];\n    let arr30: number[] = [];\n    let arr31: number[] = [];\n    let arr32: number[] = [];\n    let arr33: number[] = [];\n    let arr34: number[] = [];\n    let arr35: number[] = [];\n    let arr36: number[] = [];\n    let arr37: number[] = [];\n    let arr38: number[] = [];\n    let arr39: number[] = [];\n    let arr40: number[] = [];\n    let arr41: number[] = [];\n    let arr42: number[] = [];\n    let arr43: number[] = [];\n    let arr44: number[] = [];\n    let arr45: number[] = [];\n    let arr46: number[] = [];\n    let arr47: number[] = [];\n    let arr48: number[] = [];\n    let arr49: number[] = [];\n    let arr50: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpdie_4vcb.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str = n.toString();\n    let arr = str.split('');\n    let arr2 = arr.slice();\n    let arr3 = arr.slice();\n    let arr4 = arr.slice();\n    let arr5 = arr.slice();\n    let arr6 = arr.slice();\n    let arr7 = arr.slice();\n    let arr8 = arr.slice();\n    let arr9 = arr.slice();\n    let arr10 = arr.slice();\n    let arr11 = arr.slice();\n    let arr12 = arr.slice();\n    let arr13 = arr.slice();\n    let arr14 = arr.slice();\n    let arr15 = arr.slice();\n    let arr16 = arr.slice();\n    let arr17 = arr.slice();\n    let arr18 = arr.slice();\n    let arr19 = arr.slice();\n    let arr20 = arr.slice();\n    let arr21 = arr.slice();\n    let arr22 = arr.slice();\n    let arr23 = arr.slice();\n    let arr24 = arr.slice();\n    let arr25 = arr.slice();\n    let arr26 = arr.slice();\n    let arr27 = arr.slice();\n    let arr28 = arr.slice();\n    let arr29 = arr.slice();\n    let arr30 = arr.slice();\n    let arr31 = arr.slice();\n    let arr32 = arr.slice();\n    let arr33 = arr.slice();\n    let arr34 = arr.slice();\n    let arr35 = arr.slice();\n    let arr36 = arr.slice();\n    let arr37 = arr.slice();\n    let arr38 = arr.slice();\n    let arr39 = arr.slice();\n    let arr40 = arr.slice();\n    let arr41 = arr.slice();\n    let arr42 = arr.slice();\n    let arr43 = arr.slice();\n    let arr44 = arr.slice();\n    let arr45 = arr.slice();\n    let arr46 = arr.slice();\n    let arr47 = arr.slice();\n    let arr48 = arr.slice();\n    let arr49 = arr.slice();\n    let arr50 = arr.slice();\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "../../../../tmp/tmpgrtmhay8.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpj6t8mp4v.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpj6t8mp4v.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join('');\n    let n_bigger = parseInt(n_arr_sorted_str);\n    if (n_bigger > n) {\n        return n_bigger;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpw74spqv0.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpw74spqv0.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "12354\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp7qu_oi6.js:35:12)\n    at Object.<anonymous> (/tmp/tmpp7qu_oi6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "../../../../tmp/tmpj9lksqxk.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpj9lksqxk.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').sort((a, b) => b - a);\n    let result = parseInt(arr.join(''));\n    return result > n ? result : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpejg0f2j6.ts(3,53): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpejg0f2j6.ts(3,57): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    [nums[i - 1], nums[j]] = [nums[j], nums[i - 1]];\n    j = nums.length - 1;\n    while (i < j) {\n        [nums[i], nums[j]] = [nums[j], nums[i]];\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbn905w06.js:28:12)\n    at Object.<anonymous> (/tmp/tmpbn905w06.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpye4e_m8w.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i] <= arr[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(19000));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "12354\n12435\n1243\n1324\n90001\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppqxm22av.js:38:12)\n    at Object.<anonymous> (/tmp/tmppqxm22av.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let n_str = n.toString();\n  let n_arr = n_str.split('');\n  let n_arr_sort = n_arr.sort((a, b) => b - a);\n  let n_arr_sort_join = n_arr_sort.join('');\n  let n_arr_sort_join_num = parseInt(n_arr_sort_join);\n  if (n_arr_sort_join_num === n) {\n    return -1;\n  } else {\n    let n_arr_sort_join_num_str = n_arr_sort_join_num.toString();\n    let n_arr_sort_join_num_str_arr = n_arr_sort_join_num_str.split('');\n    let n_arr_sort_join_num_str_arr_sort = n_arr_sort_join_num_str_arr.sort((a, b) => a - b);\n    let n_arr_sort_join_num_str_arr_sort_join = n_arr_sort_join_num_str_arr_sort.join('');\n    let n_arr_sort_join_num_str_arr_sort_join_num = parseInt(n_arr_sort_join_num_str_arr_sort_join);\n    return n_arr_sort_join_num_str_arr_sort_join_num;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122878,
      "stdout": "../../../../tmp/tmpqe71trhm.ts(5,41): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpqe71trhm.ts(5,45): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpqe71trhm.ts(13,87): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpqe71trhm.ts(13,91): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split(\"\");\n  let i = arr.length - 1;\n  while (i > 0 && arr[i] <= arr[i - 1]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122883,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsnxa3h7d.js:32:12)\n    at Object.<anonymous> (/tmp/tmpsnxa3h7d.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\").map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4tgcmzp9.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4tgcmzp9.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122883,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp358v1537.js:32:12)\n    at Object.<anonymous> (/tmp/tmp358v1537.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_big\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpkp21oi7_.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpkp21oi7_.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpojnu_8h2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpojnu_8h2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp63ixvlxw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp63ixvlxw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let arr2 = arr.slice();\n    let arr3 = arr.slice();\n    let arr4 = arr.slice();\n    let arr5 = arr.slice();\n    let arr6 = arr.slice();\n    let arr7 = arr.slice();\n    let arr8 = arr.slice();\n    let arr9 = arr.slice();\n    let arr10 = arr.slice();\n    let arr11 = arr.slice();\n    let arr12 = arr.slice();\n    let arr13 = arr.slice();\n    let arr14 = arr.slice();\n    let arr15 = arr.slice();\n    let arr16 = arr.slice();\n    let arr17 = arr.slice();\n    let arr18 = arr.slice();\n    let arr19 = arr.slice();\n    let arr20 = arr.slice();\n    let arr21 = arr.slice();\n    let arr22 = arr.slice();\n    let arr23 = arr.slice();\n    let arr24 = arr.slice();\n    let arr25 = arr.slice();\n    let arr26 = arr.slice();\n    let arr27 = arr.slice();\n    let arr28 = arr.slice();\n    let arr29 = arr.slice();\n    let arr30 = arr.slice();\n    let arr31 = arr.slice();\n    let arr32 = arr.slice();\n    let arr33 = arr.slice();\n    let arr34 = arr.slice();\n    let arr35 = arr.slice();\n    let arr36 = arr.slice();\n    let arr37 = arr.slice();\n    let arr38 = arr.slice();\n    let arr39 = arr.slice();\n    let arr40 = arr.slice();\n    let arr41 = arr.slice();\n    let arr42 = arr.slice();\n    let arr43 = arr.slice();\n    let arr44 = arr.slice();\n    let arr45 = arr.slice();\n    let arr46 = arr.slice();\n    let arr47 = arr.slice();\n    let arr48 = arr.slice();\n    let arr49 = arr.slice();\n    let arr50 = arr.slice();\n    let arr51 = arr.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmped31148j.ts(53,21): error TS1003: Identifier expected.\n../../../../tmp/tmped31148j.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split(\"\");\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) i--;\n  if (i <= 0) return -1;\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) j--;\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1jp27hxe.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1jp27hxe.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "123456798\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcspxs59t.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcspxs59t.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxd7o5wxo.js:32:12)\n    at Object.<anonymous> (/tmp/tmpxd7o5wxo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpojnu_8h2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpojnu_8h2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let arr2 = arr.slice(0);\n    let arr3 = arr.slice(0);\n    let arr4 = arr.slice(0);\n    arr2.sort((a, b) => b - a);\n    if (arr.join(\"\") == arr2.join(\"\")) {\n        return -1;\n    }\n    for (let i = arr.length - 1; i >= 0; i--) {\n        for (let j = i - 1; j >= 0; j--) {\n            if (arr[i] > arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                arr3 = arr.slice(0, j + 1);\n                arr4 = arr.slice(j + 1);\n                arr4.sort((a, b) => a - b);\n                arr = arr3.concat(arr4);\n                return parseInt(arr.join(\"\"));\n            }\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmpw5udfex_.ts(7,25): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpw5udfex_.ts(7,29): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpw5udfex_.ts(19,37): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpw5udfex_.ts(19,41): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i] <= num[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpugixu754.js:32:12)\n    at Object.<anonymous> (/tmp/tmpugixu754.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2y_p3pfl.js:32:12)\n    at Object.<anonymous> (/tmp/tmp2y_p3pfl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2y_p3pfl.js:32:12)\n    at Object.<anonymous> (/tmp/tmp2y_p3pfl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdc17w5x1.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdc17w5x1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv1c760xa.js:35:12)\n    at Object.<anonymous> (/tmp/tmpv1c760xa.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return nums.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1sxtg71s.js:32:12)\n    at Object.<anonymous> (/tmp/tmp1sxtg71s.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpojnu_8h2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpojnu_8h2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplmyrizl3.js:35:12)\n    at Object.<anonymous> (/tmp/tmplmyrizl3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return nums.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1sxtg71s.js:32:12)\n    at Object.<anonymous> (/tmp/tmp1sxtg71s.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split(\"\").map(Number);\n    let arr2: number[] = [];\n    let arr3: number[] = [];\n    let arr4: number[] = [];\n    let arr5: number[] = [];\n    let arr6: number[] = [];\n    let arr7: number[] = [];\n    let arr8: number[] = [];\n    let arr9: number[] = [];\n    let arr10: number[] = [];\n    let arr11: number[] = [];\n    let arr12: number[] = [];\n    let arr13: number[] = [];\n    let arr14: number[] = [];\n    let arr15: number[] = [];\n    let arr16: number[] = [];\n    let arr17: number[] = [];\n    let arr18: number[] = [];\n    let arr19: number[] = [];\n    let arr20: number[] = [];\n    let arr21: number[] = [];\n    let arr22: number[] = [];\n    let arr23: number[] = [];\n    let arr24: number[] = [];\n    let arr25: number[] = [];\n    let arr26: number[] = [];\n    let arr27: number[] = [];\n    let arr28: number[] = [];\n    let arr29: number[] = [];\n    let arr30: number[] = [];\n    let arr31: number[] = [];\n    let arr32: number[] = [];\n    let arr33: number[] = [];\n    let arr34: number[] = [];\n    let arr35: number[] = [];\n    let arr36: number[] = [];\n    let arr37: number[] = [];\n    let arr38: number[] = [];\n    let arr39: number[] = [];\n    let arr40: number[] = [];\n    let arr41: number[] = [];\n    let arr42: number[] = [];\n    let arr43: number[] = [];\n    let arr44: number[] = [];\n    let arr45: number[] = [];\n    let arr46: number[] = [];\n    let arr47: number[] = [];\n    let arr48: number[] = [];\n    let arr49: number[] = [];\n    let arr50: number[] = [];\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122883,
      "stdout": "../../../../tmp/tmpvp462ky_.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str = n.toString();\n    let arr = str.split('');\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122883,
      "stdout": "../../../../tmp/tmpo6_li01l.ts(87,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str: string = n.toString();\n    let n_arr: string[] = n_str.split('');\n    let n_arr_num: number[] = [];\n    for (let i: number = 0; i < n_arr.length; i++) {\n        n_arr_num.push(parseInt(n_arr[i]));\n    }\n    let n_arr_num_sorted: number[] = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str: string = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num: number = parseInt(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num > n) {\n        return n_arr_num_sorted_num;\n    } else {\n        return -1;\n    }\n}\nconsole.log(rearrange_bigger(1234567890));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "9876543210\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcdwgtjdj.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcdwgtjdj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join('');\n    let n_arr_sorted_num = parseInt(n_arr_sorted_str);\n    if (n_arr_sorted_num > n) {\n        return n_arr_sorted_num;\n    } else {\n        return -1;\n    }\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmpvqqymw0c.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpvqqymw0c.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5349\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmppr67zocw.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmppr67zocw.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122883,
      "stdout": "../../../../tmp/tmp4zs4hgxi.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zs4hgxi.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num: string = n.toString();\n    let arr: string[] = num.split('');\n    let arr2: string[] = [];\n    let arr3: string[] = [];\n    let arr4: string[] = [];\n    let arr5: string[] = [];\n    let arr6: string[] = [];\n    let arr7: string[] = [];\n    let arr8: string[] = [];\n    let arr9: string[] = [];\n    let arr10: string[] = [];\n    let arr11: string[] = [];\n    let arr12: string[] = [];\n    let arr13: string[] = [];\n    let arr14: string[] = [];\n    let arr15: string[] = [];\n    let arr16: string[] = [];\n    let arr17: string[] = [];\n    let arr18: string[] = [];\n    let arr19: string[] = [];\n    let arr20: string[] = [];\n    let arr21: string[] = [];\n    let arr22: string[] = [];\n    let arr23: string[] = [];\n    let arr24: string[] = [];\n    let arr25: string[] = [];\n    let arr26: string[] = [];\n    let arr27: string[] = [];\n    let arr28: string[] = [];\n    let arr29: string[] = [];\n    let arr30: string[] = [];\n    let arr31: string[] = [];\n    let arr32: string[] = [];\n    let arr33: string[] = [];\n    let arr34: string[] = [];\n    let arr35: string[] = [];\n    let arr36: string[] = [];\n    let arr37: string[] = [];\n    let arr38: string[] = [];\n    let arr39: string[] = [];\n    let arr40: string[] = [];\n    let arr41: string[] = [];\n    let arr42: string[] = [];\n    let arr43: string[] = [];\n    let arr44: string[] = [];\n    let arr45: string[] = [];\n    let arr46: string[] = [];\n    let arr47: string[] = [];\n    let arr48: string[] = [];\n    let arr49: string[] = [];\n    let arr50:\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmpgg0d94zy.ts(54,9): error TS1005: ',' expected.\n../../../../tmp/tmpgg0d94zy.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\").sort((a, b) => b - a);\n    let result = parseInt(arr.join(\"\"));\n    return result > n ? result : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmpyauw9bug.ts(3,53): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpyauw9bug.ts(3,57): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp63ixvlxw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp63ixvlxw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(2071));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "1243\n-1\n536479\n21\n2107\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo0_i638j.js:37:12)\n    at Object.<anonymous> (/tmp/tmpo0_i638j.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    let n_sorted = parseInt(n_arr_sorted_str);\n    if (n_sorted == n) {\n        return -1;\n    }\n    else {\n        return n_sorted;\n    }\n}\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmp05k84ijt.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp05k84ijt.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return nums.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzx3lttz_.js:32:12)\n    at Object.<anonymous> (/tmp/tmpzx3lttz_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2y_p3pfl.js:32:12)\n    at Object.<anonymous> (/tmp/tmp2y_p3pfl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(x => parseInt(x));\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpytox7ikw.js:32:12)\n    at Object.<anonymous> (/tmp/tmpytox7ikw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(53421));\nconsole.log(rearrange_bigger(53412));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(53421));\nconsole.log(rearrange_bigger(53412));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(53421));\nconsole.log(rearrange_bigger(53412));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(53421));\nconsole.log(rearrange_bigger(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmpvw6qc11u.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpvw6qc11u.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split(\"\").map(Number);\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqfjru0pl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpqfjru0pl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort();\n    let n_sorted = parseInt(n_arr_sorted.join(\"\"));\n    if (n_sorted === n) {\n        return -1;\n    }\n    else {\n        return n_sorted;\n    }\n}\n\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(132));\nconsole.log(rearrange_bigger(321));\nconsole.log(rearrange_bigger(531));\nconsole.log(rearrange_bigger(532));\nconsole.log(rearrange_bigger(534));\nconsole.log(rearrange_bigger(543));\nconsole.log(rearrange_bigger(541));\nconsole.log(rearrange_bigger(542));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearrange_bigger(547));\nconsole.log(rearr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmprhua3gjg.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmprhua3gjg.ts(43,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "123456798\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcspxs59t.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcspxs59t.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split(\"\").map(Number);\n    let sorted: number[] = digits.sort((a, b) => b - a);\n    let result: number = parseInt(sorted.join(\"\"));\n    return result > n ? result : -1;\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(12345\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "../../../../tmp/tmpcw127tgl.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpcw127tgl.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(123456798));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "123456879\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdelxan_p.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdelxan_p.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    let n_bigger = parseInt(n_arr_sorted_str);\n    if (n_bigger > n) {\n        return n_bigger;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmp3nl36j4n.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3nl36j4n.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return nums.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzx3lttz_.js:32:12)\n    at Object.<anonymous> (/tmp/tmpzx3lttz_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return Number(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpamq40hyc.js:32:12)\n    at Object.<anonymous> (/tmp/tmpamq40hyc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517261,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplmyrizl3.js:35:12)\n    at Object.<anonymous> (/tmp/tmplmyrizl3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let index = -1;\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (+arr[i] > +arr[i - 1]) {\n            index = i - 1;\n            break;\n        }\n    }\n    if (index == -1) {\n        return index;\n    } else {\n        let smallest = index + 1;\n        for (let i = index + 2; i < arr.length; i++) {\n            if (+arr[i] > +arr[index] && +arr[i] < +arr[smallest]) {\n                smallest = i;\n            }\n        }\n        let temp = arr[index];\n        arr[index] = arr[smallest];\n        arr[smallest] = temp;\n        let endArray = arr.splice(index + 1);\n        endArray.sort();\n        arr = arr.concat(endArray);\n        return +arr.join('');\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6tdpjv2b.js:34:12)\n    at Object.<anonymous> (/tmp/tmp6tdpjv2b.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i] <= num[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpugixu754.js:32:12)\n    at Object.<anonymous> (/tmp/tmpugixu754.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\n\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(531));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "12354\n1243\n21\n-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9skmanb3.js:36:12)\n    at Object.<anonymous> (/tmp/tmp9skmanb3.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(12345678));\nconsole.log(rearrange_bigger(1234567));\nconsole.log(rearrange_bigger(123456));\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(1));\nconsole.log(rearrange_bigger(0));\nconsole.log(rearrange_bigger(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "../../../../tmp/tmpp3l4ee84.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpp3l4ee84.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split(\"\").map(Number);\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpof30iifb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpof30iifb.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.slice().sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    if (n_str === n_arr_num_sorted_str) {\n        return -1;\n    }\n    let n_arr_num_sorted_str_arr = n_arr_num_sorted_str.split('');\n    let n_arr_num_sorted_str_arr_num = n_arr_num_sorted_str_arr.map(Number);\n    let n_arr_num_sorted_str_arr_num_sorted = n_arr_num_sorted_str_arr_num.slice().sort((a, b) => a - b);\n    let n_arr_num_sorted_str_arr_num_sorted_str = n_arr_num_sorted_str_arr_num_sorted.join('');\n    return n_arr_num_sorted_str_arr_num_sorted_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'12'\n\nshould loosely deep-equal\n\n21\n    at test (/tmp/tmph7oudf82.js:20:12)\n    at Object.<anonymous> (/tmp/tmph7oudf82.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '12',\n  expected: 21,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let digits = n.toString().split('');\n  let i = digits.length - 1;\n  while (i > 0 && digits[i - 1] >= digits[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = digits.length - 1;\n  while (digits[j] <= digits[i - 1]) {\n    j--;\n  }\n  let temp = digits[i - 1];\n  digits[i - 1] = digits[j];\n  digits[j] = temp;\n  j = digits.length - 1;\n  while (i < j) {\n    temp = digits[i];\n    digits[i] = digits[j];\n    digits[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(digits.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp89q9eeeo.js:35:12)\n    at Object.<anonymous> (/tmp/tmp89q9eeeo.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i] <= num[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdvituj3a.js:35:12)\n    at Object.<anonymous> (/tmp/tmpdvituj3a.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdc17w5x1.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdc17w5x1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let nums: number[] = n.toString().split(\"\").map(Number);\n  let i = nums.length - 1;\n  while (nums[i - 1] >= nums[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = nums.length - 1;\n  while (nums[j] <= nums[i - 1]) {\n    j--;\n  }\n  let temp = nums[i - 1];\n  nums[i - 1] = nums[j];\n  nums[j] = temp;\n  j = nums.length - 1;\n  while (i < j) {\n    temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(nums.join(\"\"));\n}\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "12354\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3eyac08a.js:35:12)\n    at Object.<anonymous> (/tmp/tmp3eyac08a.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\").map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpko91okur.js:32:12)\n    at Object.<anonymous> (/tmp/tmpko91okur.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let arr2: number[] = arr.slice();\n    let arr3: number[] = arr.slice();\n    let arr4: number[] = arr.slice();\n    let arr5: number[] = arr.slice();\n    let arr6: number[] = arr.slice();\n    let arr7: number[] = arr.slice();\n    let arr8: number[] = arr.slice();\n    let arr9: number[] = arr.slice();\n    let arr10: number[] = arr.slice();\n    let arr11: number[] = arr.slice();\n    let arr12: number[] = arr.slice();\n    let arr13: number[] = arr.slice();\n    let arr14: number[] = arr.slice();\n    let arr15: number[] = arr.slice();\n    let arr16: number[] = arr.slice();\n    let arr17: number[] = arr.slice();\n    let arr18: number[] = arr.slice();\n    let arr19: number[] = arr.slice();\n    let arr20: number[] = arr.slice();\n    let arr21: number[] = arr.slice();\n    let arr22: number[] = arr.slice();\n    let arr23: number[] = arr.slice();\n    let arr24: number[] = arr.slice();\n    let arr25: number[] = arr.slice();\n    let arr26: number[] = arr.slice();\n    let arr27: number[] = arr.slice();\n    let arr28: number[] = arr.slice();\n    let arr29: number[] = arr.slice();\n    let arr30: number[] = arr.slice();\n    let arr31: number[] = arr.slice();\n    let arr32: number[] = arr.slice();\n    let arr33: number[] = arr.slice();\n    let arr34: number[] = arr.slice();\n    let arr35: number[] = arr.slice();\n    let arr36: number[] = arr.slice();\n    let arr37: number[] = arr.slice();\n    let arr38: number[] = arr.slice();\n    let arr39: number[] = arr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "../../../../tmp/tmpcyibit0d.ts(53,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp73pgv2_x.js:32:12)\n    at Object.<anonymous> (/tmp/tmp73pgv2_x.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122883,
      "stdout": "../../../../tmp/tmp4zs4hgxi.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zs4hgxi.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split(\"\");\n    let i = num.length - 1;\n    while (i > 0 && num[i] <= num[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb82nixm3.js:32:12)\n    at Object.<anonymous> (/tmp/tmpb82nixm3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}