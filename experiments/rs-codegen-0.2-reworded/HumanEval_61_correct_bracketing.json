{
  "name": "HumanEval_61_correct_bracketing",
  "language": "rs",
  "prompt": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
  "completions": [
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      close_brackets += 1\n    }\n    bracket_count = (bracket_count + 1) % 2\n  }\n\n  return open_brackets == close_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else {\n        bracket_count -= 1\n        if bracket_count == 0 {\n          bracket_stack.pop()\n        }\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == '(' {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == ')' {\n      if !open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack: List[String] = []\n  let bracket_count: int = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(brackets[i])\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != '(' {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if len(bracket_stack) == 0 {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n    }\n  }\n  if len(bracket_stack) != 0 {\n    return false\n  }\n  return true",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets.charAt(0) != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets.charAt(0) != ')') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == '(' {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if last_bracket != '(' {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n\n  return opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count += 1\n      } else if (brackets[0] == ')') {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if brackets.char(0) == '(' {\n        bracket_stack.push(0)\n      } else {\n        return false\n      }\n    } else if bracket_count == 1 {\n      if brackets.char(0) == ')' {\n        if bracket_stack.pop() != 0 {\n          return false\n        }\n      } else {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true",
    "  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.peek().type == BracketType::Open {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.peek().type == BracketType::Close {\n      bracket_stack.pop()\n    } else {\n      panic(\"Invalid bracketing\")\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if len(bracket_stack) == 0 {\n        return false\n      }\n      bracket_stack.pop()\n    }\n  }\n  return len(bracket_stack) == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let bracket_open = false\n  let bracket_close = false\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if (c == \"(\") {\n      if (bracket_open) {\n        bracket_stack.push(c)\n      } else {\n        bracket_open = true\n      }\n    } else if (c == \")\") {\n      if (bracket_close) {\n        bracket_stack.pop()\n      } else {\n        bracket_close = true\n      }\n    } else {\n      if (bracket_open) {\n        if (bracket_stack.length == 0) {\n          return false\n        } else {\n          bracket_count += 1\n        }\n      }\n    }\n  }\n  return bracket_count == bracket_stack.length",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if last_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      opening_bracket_index = i\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n      closing_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket_index < closing_bracket_index",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if bracket_count > 1 {\n      if opening_bracket == String.fromCharCode(c) {\n        bracket_count -= 1\n      } else if closing_bracket == String.fromCharCode(c) {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      close_brackets += 1\n    }\n    bracket_count += 1\n  }\n\n  return open_brackets == close_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for i in brackets.chars() {\n    if i == '(' {\n      opening_bracket_count += 1\n    } else if i == ')' {\n      closing_bracket_count += 1\n    } else {\n      // ignore\n    }\n\n    if opening_bracket_count > closing_bracket_count {\n      return false\n    }\n\n    if opening_bracket_count < closing_bracket_count {\n      bracket_stack.push(i)\n    } else if opening_bracket_count > closing_bracket_count {\n      if bracket_stack.pop() != '(' {\n        return false\n      }\n    }\n  }\n\n  if opening_bracket_count != closing_bracket_count {\n    return false\n  }\n\n  return true",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if brackets[i] == '(' {\n        bracket_stack.push(brackets[i])\n      } else if brackets[i] == ')' {\n        if bracket_stack.empty() {\n          return false\n        } else if bracket_stack.pop() != '(' {\n          return false\n        }\n      }\n    } else {\n      if brackets[i] == ')' {\n        bracket_count -= 1\n      } else if brackets[i] == '(' {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n\n  return opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_size = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n    }\n\n    if (bracket_count == 0) {\n      bracket_stack_index += 1\n      bracket_stack.push(brackets[i])\n    } else if (bracket_count < 0) {\n      if (bracket_stack_index == 0) {\n        return false\n      } else {\n        bracket_stack_index -= 1\n        bracket_stack.pop()\n      }\n    }\n  }\n\n  if (bracket_stack_index != 0) {\n    return false\n  }\n\n  return true",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"(\") {\n      opening_bracket_index = i\n      opening_bracket = brackets[i]\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      closing_bracket_index = i\n      closing_bracket = brackets[i]\n      bracket_count -= 1\n    }\n    if (bracket_count == 0) {\n      return opening_bracket_index == closing_bracket_index\n    }\n  }\n  return false",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if (bracket_count == 0) {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == '(') {\n      opening_brackets += 1\n    } else if (brackets[i] == ')') {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let open_bracket_index = bracket_stack.pop()\n      if i != open_bracket_index + 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 && opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_top = 0\n  let bracket_stack_top_index = 0\n  let bracket_stack_top_index_next = 0\n\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if (c == \"(\") {\n      bracket_count += 1\n      bracket_stack_top_index_next = bracket_stack_index\n      bracket_stack_index += 1\n      bracket_stack_top += 1\n    } else if (c == \")\") {\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        if (bracket_stack_top == 0) {\n          return false\n        }\n        bracket_stack_top -= 1\n        bracket_stack_top_index = bracket_stack_top_index_next\n      }\n    } else {\n      if (bracket_stack_top > 0) {\n        bracket_stack[bracket_stack_top - 1] += c\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack = []\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket_count += 1\n      opening_bracket_stack.push(0)\n    } else if (bracket_count == 1) {\n      closing_bracket_count += 1\n      closing_bracket_stack.push(0)\n    } else if (bracket_count > 1) {\n      if (opening_bracket_stack.pop() == 0) {\n        opening_bracket_count -= 1\n      } else {\n        closing_bracket_count -= 1\n      }\n    }\n    bracket_count += 1\n  }\n\n  return opening_bracket_count == 0 && closing_bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n      if (bracket_count < 0) {\n        return false\n      }\n      if (bracket_stack.pop() != i) {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_stack.length == 0 && bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      opening_bracket_index = i\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      closing_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket_index < closing_bracket_index",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      opening_bracket_count += 1\n      if bracket_stack.length > 0 {\n        closing_bracket = bracket_stack.pop()\n        closing_bracket_count += 1\n      }\n    } else if c == \")\" {\n      closing_bracket = c\n      closing_bracket_count += 1\n      if bracket_stack.length == 0 {\n        return false\n      }\n      opening_bracket = bracket_stack.pop()\n      opening_bracket_count += 1\n    } else {\n      if opening_bracket_count == 0 {\n        bracket_stack.push(c)\n      } else if closing_bracket_count == 0 {\n        bracket_stack.push(c)\n      } else if opening_bracket_count > closing_bracket_count {\n        bracket_stack.push(c)\n      } else {\n        return false\n      }\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"(\" {\n      opening_bracket = \"(\"\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if i == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[i] == '(') {\n        bracket_count += 1\n      } else if (brackets[i] == ')') {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_top = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == '(') {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == ')') {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack_top = bracket_stack.pop()\n      if (bracket_stack_top != i) {\n        return false\n      }\n    }\n  }\n\n  if (bracket_count != 0) {\n    return false\n  }\n\n  return true",
    "  let bracket_count = 0\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_count == 0 {\n        bracket_stack.pop()\n        if bracket_stack.empty() {\n          return true\n        }\n        opening_bracket = bracket_stack.pop()\n        closing_bracket = bracket_stack.pop()\n      } else {\n        opening_bracket = bracket_stack.pop()\n        closing_bracket = bracket_stack.pop()\n      }\n    } else {\n      bracket_stack.push(c)\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_brackets = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      if (open_brackets == 0) {\n        return false\n      } else {\n        open_brackets -= 1\n      }\n    } else if (bracket_count == 2) {\n      if (open_brackets == 0) {\n        return false\n      } else {\n        open_brackets -= 1\n      }\n    }\n    bracket_count += 1\n  }\n  return open_brackets == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        bracket_count -= 1\n        if bracket_count == 0 {\n          bracket_stack.pop()\n        }\n      }\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count - 2] != '(' || brackets[bracket_count - 1] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == brackets.count + 2",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 1) {\n      closing_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 2) {\n      if (opening_bracket == \"(\" && closing_bracket == \")\") {\n        bracket_count = 0\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets.char_at(0) != '(') {\n        return false\n      }\n    } else {\n      if (brackets.char_at(0) == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let open_bracket = bracket_stack.pop()\n      if open_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if bracket_stack.is_empty() {\n    return true\n  }\n  return false",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 && opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"(\" {\n      opening_bracket = i\n      closing_bracket = \")\"\n    } else if i == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = \")\"\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          closing_bracket = i\n        }\n      } else {\n        opening_bracket = i\n      }\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"(\" {\n      opening_bracket_count += 1\n      opening_bracket_index = i\n    } else if brackets[i] == \")\" {\n      closing_bracket_count += 1\n      closing_bracket_index = i\n    }\n  }\n  if opening_bracket_count != closing_bracket_count {\n    return false\n  }\n  for i in range(0, brackets.length) {\n    if i == opening_bracket_index {\n      bracket_count += 1\n    }\n    if i == closing_bracket_index {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return true",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_bracket = bracket_stack.pop()\n        if last_bracket != \"(\" {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          opening_bracket = \"\"\n        }\n      }\n    }\n    if opening_bracket != \"\" {\n      bracket_stack.push(opening_bracket)\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.empty()",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      opening_bracket_index = i\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n      closing_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket_index < closing_bracket_index",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] == \")\") {\n        bracket_count--\n      } else if (brackets[i] == \"(\") {\n        bracket_count++\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      if opening_bracket != \"\") {\n        bracket_stack.push(opening_bracket)\n        opening_bracket = \"\"\n      }\n      opening_bracket = c\n    } else if c == \")\" {\n      if closing_bracket != \"\") {\n        if bracket_stack.pop() != closing_bracket {\n          return false\n        }\n        closing_bracket = \"\"\n      }\n      closing_bracket = c\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  if closing_bracket != \"\" {\n    return false\n  }\n  return true",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if brackets[i] == '(' {\n        bracket_stack.push(bracket_count)\n      } else {\n        if bracket_stack.is_empty() {\n          return false\n        }\n        let top = bracket_stack.pop()\n        if top != bracket_count {\n          return false\n        }\n      }\n    } else {\n      if brackets[i] == ')' {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 && opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_stack.is_empty() && bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_stack.is_empty() && bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == '(') {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == ')') {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count > 1) {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == \"(\" && closing_bracket == \")\"",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if (i == \"(\") {\n      opening_bracket = \"(\"\n      closing_bracket = \")\"\n      bracket_stack.push(opening_bracket)\n      bracket_count += 1\n    } else if (i == \")\") {\n      opening_bracket = bracket_stack.pop()\n      if (opening_bracket != closing_bracket) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.last().type == BracketType::Open {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.last().type == BracketType::Close {\n      bracket_stack.pop()\n    } else {\n      return false\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if bracket_stack.is_empty() {\n        return true\n      }\n      bracket_stack.pop()\n    } else {\n      bracket_stack.push(bracket_count)\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let j = bracket_stack.pop()\n      if i != j {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_stack.push(opening_bracket)\n      bracket_count += 1\n    } else if c == \")\" {\n      if bracket_stack.empty() {\n        return false\n      }\n      opening_bracket = bracket_stack.pop()\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets.charAt(opening_brackets) == '(') {\n      opening_brackets += 1\n    } else if (brackets.charAt(opening_brackets) == ')') {\n      opening_brackets -= 1\n    }\n    if (brackets.charAt(closing_brackets) == '(') {\n      closing_brackets += 1\n    } else if (brackets.charAt(closing_brackets) == ')') {\n      closing_brackets -= 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_brackets += 1\n    } else {\n      if (bracket_stack.pop() == '(') {\n        opening_brackets -= 1\n      } else {\n        closing_brackets += 1\n      }\n    }\n    if (opening_brackets == 0 && closing_brackets == 0) {\n      return true\n    }\n  }\n  return false",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_brackets = []\n  let close_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] == \"(\" || brackets[i] == \"{\") {\n        open_brackets.push(brackets[i])\n      } else if (brackets[i] == \")\" || brackets[i] == \"}\") {\n        close_brackets.push(brackets[i])\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] == \")\") {\n        open_brackets.pop()\n      } else if (brackets[i] == \"}\") {\n        open_brackets.pop()\n      }\n    } else if (bracket_count == 2) {\n      if (brackets[i] == \")\") {\n        open_brackets.pop()\n      } else if (brackets[i] == \"}\") {\n        open_brackets.pop()\n      }\n    }\n    bracket_count += 1 if brackets[i] == \"(\" else -1\n  }\n  return open_brackets.length == 0",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          return false\n        }\n      }\n    }\n    if opening_bracket != \"\" {\n      bracket_stack.push(opening_bracket)\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  return bracket_stack.length == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      if brackets[bracket_stack.pop()] != '(' {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      opening_bracket = brackets[i]\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      opening_bracket = \"(\"\n      closing_bracket = brackets[i]\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      if opening_bracket == \"\") {\n        opening_bracket = c\n      } else {\n        bracket_stack.push(opening_bracket)\n        opening_bracket = c\n      }\n    } else if c == \")\" {\n      if closing_bracket == \"\") {\n        closing_bracket = c\n      } else {\n        if bracket_stack.pop() != opening_bracket {\n          return false\n        }\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n  }\n  if bracket_stack.pop() != opening_bracket {\n    return false\n  }\n  return true",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 1) {\n      closing_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 2) {\n      if (opening_bracket == \"(\" && closing_bracket == \")\") {\n        bracket_count = 0\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n\n    if opening_bracket.is_empty() {\n      if bracket_stack.is_empty() {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        opening_bracket = bracket_stack.pop()\n      }\n    }\n\n    if closing_bracket.is_empty() {\n      if bracket_stack.is_empty() {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        closing_bracket = bracket_stack.pop()\n      }\n    }\n\n    if bracket_stack.is_empty() {\n      bracket_count += 1\n    } else {\n      bracket_count -= 1\n    }\n\n    if opening_bracket == \"(\" and closing_bracket == \")\") {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = String.fromChar(c)\n    } else if (bracket_count == 1) {\n      closing_bracket = String.fromChar(c)\n    } else if (c == '(') {\n      bracket_count += 1\n    } else if (c == ')') {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == '(') {\n      bracket_stack.push(brackets[i])\n      bracket_count += 1\n    } else if (brackets[i] == ')') {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != '(') {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n\n  return bracket_stack.length == 0 && bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == '(') {\n      opening_brackets += 1\n    } else if (brackets[i] == ')') {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\" {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \")\" {\n      if bracket_stack.empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n\n  if bracket_stack.is_empty() {\n    return true\n  }\n  return false",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          opening_bracket = \"\"\n        }\n      }\n    }\n    if opening_bracket != \"\" {\n      bracket_stack.push(opening_bracket)\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if _ == '(' {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if _ == ')' {\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          return false\n        }\n      }\n    }\n    if c == \"(\" {\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  if bracket_stack.length() != 0 {\n    return false\n  }\n  return true",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_index = bracket_stack.pop()\n        if brackets[last_index] != \"(\":\n          return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else if (bracket_count > 1) {\n      return false\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack: List[String] = []\n  let open_brackets: List[String] = []\n  for _ in brackets.split(\"\") {\n    if (bracket_stack.isEmpty()) {\n      open_brackets.append(brackets.charAt(0))\n    } else {\n      if (bracket_stack.last() == \"(\" && brackets.charAt(0) == \")\") {\n        bracket_stack.pop()\n      } else {\n        bracket_stack.append(brackets.charAt(0))\n      }\n    }\n  }\n  return open_brackets.isEmpty()",
    "  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      close_brackets += 1\n    }\n    bracket_count += 1\n  }\n\n  return open_brackets == close_brackets",
    "  let bracket_count = 0\n  let open_bracket_index = 0\n  let close_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      open_bracket_index = i\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      close_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && open_bracket_index == close_bracket_index",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if opening_brackets == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if closing_brackets == 0 {\n      closing_bracket = String.fromCharCode(c)\n    } else if opening_bracket == closing_bracket {\n      opening_brackets -= 1\n      closing_brackets -= 1\n    } else {\n      opening_brackets += 1\n    }\n  }\n  return opening_brackets == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\") {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \")\") {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let top_bracket = bracket_stack.pop()\n      if top_bracket != \"(\") {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0"
  ],
  "stop_tokens": [
    "\n}"
  ]
}