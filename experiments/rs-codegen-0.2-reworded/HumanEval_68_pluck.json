{
  "name": "HumanEval_68_pluck",
  "language": "rs",
  "prompt": "/// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n/// your task is to pluck one of the nodes and return it.\n/// The plucked node should be the node with the smallest even value.\n/// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n/// The plucked node should be returned in a vector, [ smalest_value, its index ],\n/// If there are no even values or the given vector is empty, return [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n/// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n/// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n/// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]), vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n    assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7, 9, 7, 1]), Vec::<isize>::new());\n}\n",
  "completions": [
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_value = arr.reduce((a, b) => a + b)\n  let smallest_index = arr.find(x => x % 2 == 0)\n  let smallest_value_index = arr.find(x => x == smallest_value)\n  if smallest_value_index == -1 {\n    return []\n  } else {\n    return [smallest_value, smallest_index]\n  }",
    "  let min_even = 0\n  let min_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_even {\n        min_even = i\n        min_index = i\n      }\n    }\n  }\n  if min_even == 0 {\n    return []\n  }\n  return [min_even, min_index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "    let smallest_value = arr.min()\n    let smallest_index = arr.index(smallest_value)\n    let smallest_even_value = smallest_value % 2\n    let smallest_even_index = smallest_index % 2\n    let smallest_even_value_index = smallest_even_index\n    if smallest_even_value == 0 {\n        smallest_even_value_index = smallest_even_index + 1\n    }\n    let smallest_value_index = smallest_even_value_index\n    if smallest_even_value == 0 {\n        smallest_value_index = smallest_even_index + 1\n    }\n    let smallest_value_index_vec = Vec::new(smallest_value_index)\n    return smallest_value_index_vec",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return Vec::new(smallest_value, smallest_index)",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_even = arr.filter(x => x % 2 == 0).min()\n  let index = arr.index_of(smallest_even)\n  let plucked = arr.filter(x => x == smallest_even).min()\n  return [plucked, index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x % 2 == smallest_even_value)\n  let result = [smallest_even_value, smallest_index]\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  let result = [value, index]\n  return result",
    "  let smallest_value = arr.reduce((a, b) => a + b)\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value_index_index_index_index",
    "    let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n    let smallest_index = arr.reduce((a, b) => a + b)\n    let index = arr.find(x => x == smallest_even_value)\n    let value = arr[index]\n    return Vec::<isize>::new(value, index)",
    "    let smallest_value = arr[0]\n    let smallest_index = 0\n    for i in arr {\n        if i % 2 == 0 {\n            if i < smallest_value {\n                smallest_value = i\n                smallest_index = i\n            }\n        }\n    }\n    return [ smallest_value, smallest_index ]",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  return [value, index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let index = arr.find(x => x % 2 == smallest_even_value)\n  return Vec::<isize>::new(smallest_even_value, index)",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "    let min_even = arr.reduce((a, b) => a + b) % 2\n    let min_index = arr.reduce((a, b) => a + b)\n    let min_even_index = arr.reduce((a, b) => a + b) % 2\n    let min_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value)\n  if result.length == 0 {\n    return []\n  } else if result.length == 1 {\n    return [result[0], smallest_index]\n  } else {\n    let smallest_index_of_even_value = arr.filter((x) => x % 2 == smallest_even_value).reduce((a, b) => a + b)\n    return [smallest_index_of_even_value, smallest_index]\n  }",
    "  let min_even = arr.find(x => x % 2 == 0)\n  let min_index = arr.find(x => x == min_even)\n  let min_value = min_even.value\n  let min_index_value = min_index.value\n  let min_index_index = min_index.index\n  let min_index_index_value = min_index_index.value\n  let min_index_index_index = min_index_index.index\n  let min_index_index_index_value = min_index_index_index.value\n  let min_index_index_index_index = min_index_index_index.index\n  let min_index_index_index_index_value = min_index_index_index_index.value\n  let min_index_index_index_index_index = min_index_index_index_index.index\n  let min_index_index_index_index_index_value = min_index_index_index_index_index.value\n  let min_index_index_index_index_index_index = min_index_index_index_index_index_index.index\n  let min_index_index_index_index_index_index_value = min_index_index_index_index_index_index_index.value\n  let min_index_index_index_index_index_index_index = min_index_index_index_index_index_index_index_index.index\n  let min_index_index_index_index_index_index_index_value = min_index_index_index_index_index_index_index_index_index.value\n  let min_index_index_index_index_index_index_index_index = min_index_index_index_index_index_index_index_index_index_index.index\n  let min_index_index_index_index_index_index_index_index_value = min_index_index_index_index_index_index_index_index_index_index_index.value\n  let min_index_index_index_index_index_index_index_index_index = min_index_index_index_index_",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let smallest_value = arr.reduce((a, b) => a + b)\n  let index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [smallest_value, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even = arr.find(x => x % 2 == 0)\n  let smallest_index = arr.find(x => x == smallest_even)\n  if smallest_even == arr.nth(0) {\n    return [smallest_even, smallest_index]\n  } else {\n    return [smallest_even, smallest_index - 1]\n  }",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  let result = [value, index]\n  return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_value = arr.reduce((a, b) => a + b)\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = 0\n  let result = []\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      } else if i == smallest_value {\n        if i < smallest_index {\n          smallest_index = i\n        }\n      }\n    }\n  }\n  result = [ smallest_value, smallest_index ]\n  return result",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "    let min_even = arr.reduce((a, b) => a + b) % 2\n    let min_index = arr.reduce((a, b) => a + b)\n    let min_value = arr.reduce((a, b) => a + b)\n    let min_index_value = arr.reduce((a, b) => a + b)\n    let min_index_value_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a,",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let smallest_value = arr.reduce((a, b) => a + b)\n  let index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [smallest_value, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even_value = arr.reduce((acc, node) => acc + node, 0)\n  let smallest_index = arr.reduce((acc, node) => acc + node, 0)\n  let index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_even_value {\n        smallest_even_value = i\n        smallest_index = i\n      } else if i == smallest_even_value {\n        if i < smallest_index {\n          smallest_index = i\n        }\n      }\n    }\n  }\n  return [smallest_even_value, smallest_index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "    let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n    let smallest_index = arr.reduce((a, b) => a + b)\n    let result = []\n    for i in arr {\n        if i % 2 == smallest_even_value {\n            result.push(i)\n            if i < smallest_index {\n                smallest_index = i\n            }\n        }\n    }\n    return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if arr[i] == smallest_even_value {\n      result = [arr[i], i]\n      break\n    }\n  }\n  return result",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_even = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index_val = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index_val_even = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index_val_even_index = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index_val_even_index_val = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index_val_even_index_val_even = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index_val_even_index_val_even_index = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_even_index_val_even_index_val_even_index_val_even_index_val = arr.reduce",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value).sort((a, b) => a - b)\n  if (result.length == 0) {\n    return Vec::new()\n  } else {\n    return Vec::new(result[0], smallest_index)\n  }",
    "  let min_index = 0\n  let min_value = arr[0]\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_value {\n        min_value = i\n        min_index = i\n      }\n    }\n  }\n  return [min_value, min_index]",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  arr.remove(index)\n  return [value, index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even = arr.find(x => x % 2 == 0)\n  let smallest_index = arr.find(x => x == smallest_even)\n  let smallest_value = smallest_even.value\n  let result = [smallest_value, smallest_index]\n  return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  let result = [value, index]\n  return result",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a,",
    "  let smallest_even_value = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index = arr.reduce((acc, val) => acc + val)\n  let result = []\n  for i in arr {\n    if i % 2 == 0 {\n      if smallest_even_value == i {\n        result = [i, smallest_index]\n        break\n      } else if smallest_even_value > i {\n        result = [i, smallest_index]\n        break\n      }\n    }\n  }\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value)\n  if result.length == 0 {\n    return []\n  } else if result.length == 1 {\n    return [result[0], smallest_index]\n  } else {\n    let smallest_index_of_result = result.reduce((a, b) => a + b)\n    return [result[smallest_index_of_result], smallest_index_of_result]\n  }",
    "  let min_even = arr.reduce((acc, val) => acc + val % 2)\n  let min_index = arr.reduce((acc, val) => acc + val)\n  let min_even_index = arr.reduce((acc, val) => acc + val * val)\n  let min_index_index = arr.reduce((acc, val) => acc + val * val)\n  if min_even == 0 {\n    return []\n  }\n  if min_even_index == min_index_index {\n    return [min_even, min_index]\n  }\n  return [min_even, min_index_index]",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let min_index = 0\n  let min_value = arr[0]\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_value {\n        min_value = i\n        min_index = i\n      }\n    }\n  }\n  return Vec::<isize>::new(min_value, min_index)",
    "  let smallest_even = arr.filter(x => x % 2 == 0).min()\n  let smallest_index = arr.index_of(smallest_even)\n  let smallest_value = arr[smallest_index]\n  let plucked = [ smallest_value, smallest_index ]\n  return plucked",
    "  let smallest_even_value = 0\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_even_value {\n        smallest_even_value = i\n        smallest_index = i\n      }\n    }\n  }\n  if smallest_even_value == 0 {\n    return []\n  }\n  return [smallest_even_value, smallest_index]",
    "  let smallest_even = arr.reduce((acc, val) => {\n    if (val % 2 == 0) {\n      acc = val\n    }\n    return acc\n  })\n  let smallest_index = arr.reduce((acc, val) => {\n    if (val == smallest_even) {\n      acc = val\n    }\n    return acc\n  })\n  return [smallest_even, smallest_index]",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return Vec::<isize>::new(smallest_value, smallest_index)",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value)\n  if result.length == 0 {\n    return []\n  } else if result.length == 1 {\n    return [result[0], smallest_index]\n  } else {\n    let smallest_index_of_smallest_even_value = arr.indexOf(result[0])\n    return [result[smallest_index_of_smallest_even_value], smallest_index]\n  }",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "    let smallest_value = arr[0];\n    let smallest_index = 0;\n    for i in arr {\n        if i % 2 == 0 {\n            if i < smallest_value {\n                smallest_value = i;\n                smallest_index = i;\n            }\n        }\n    }\n    return [smallest_value, smallest_index];",
    "  let smallest_even = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let min_even = arr.find(x => x % 2 == 0)\n  let min_index = arr.find(x => x == min_even)\n  if min_even == -1 || min_index == -1 {\n    return Vec::new()\n  }\n  return Vec::new(min_even, min_index)",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_value = arr.min()\n  let smallest_index = arr.index_of(smallest_value)\n  let result = []\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      } else if i == smallest_value {\n        if i < smallest_index {\n          smallest_index = i\n        }\n      }\n    }\n  }\n  result = [ smallest_value, smallest_index ]\n  return result",
    "  let smallest_even = arr.filter(x => x % 2 == 0).min()\n  let smallest_index = arr.indexOf(smallest_even)\n  let smallest_value = arr[smallest_index]\n  let result = [smallest_value, smallest_index]\n  return result",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  let result = [value, index]\n  return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index = arr.reduce((a, b) =>",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_index = 0\n  let min_value = arr[0]\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_value {\n        min_value = i\n        min_index = i\n      }\n    }\n  }\n  return [min_value, min_index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_value_index = arr.find(x => x % 2 == min_even_value)\n  let min_index_index = arr.find(x => x == min_index)\n  let min_even_value_index_index = arr.find(x => x == min_even_value_index)\n  if (min_even_value_index_index == -1) {\n    return []\n  } else {\n    return [min_even_value_index, min_index_index]\n  }",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  return Vec::new([value, index])",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let smallest_index_value = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_index_value)\n  let value = arr[index]\n  let index_value = arr[index]\n  let index_index = arr[index]\n  let index_index_value = arr[index]\n  let index_index_index = arr[index]\n  let index_index_index_value = arr[index]\n  let index_index_index_index = arr[index]\n  let index_index_index_index_value = arr[index]\n  let index_index_index_index_index = arr[index]\n  let index_index_index_index_index_value = arr[index]\n  let index_index_index_index_index_index = arr[index]\n  let index_index_index_index_index_index_value = arr[index]\n  let index_index_index_index_index_index_index = arr[index]\n  let index_index_index_index_index_index_index_value = arr[index]\n  let index_index_index_index_index_index_index_index = arr[index]\n  let index_index_index_index_index_index_index_index_value = arr[index]\n  let index_index_index_index_index_index_index_index_index = arr[index]\n  let index_index_index_index_index_index_index_index_index_value = arr[index]\n  let index_index_index_index_index_index_index_index_index_index = arr[index]\n  let index_index_index_index_index_index_index_index_index_index_value = arr[index]\n  let index_index_index_index_index_index_index_index_index_index_index = arr[index]\n  let index_index_index_index_index_index_index",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value).sort((a, b) => a - b)\n  if (result.length == 0) {\n    return Vec::new()\n  } else {\n    return Vec::new(result[0], smallest_index)\n  }",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if (i % 2 == smallest_even_value) {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "    let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n    let smallest_index = arr.reduce((a, b) => a + b)\n    let index = arr.find(x => x == smallest_even_value)\n    let value = arr[index]\n    return Vec::<isize>::new(value, smallest_index)",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_index_index",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_even = 0\n  let smallest_index = 0\n  let result = []\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_even {\n        smallest_even = i\n        smallest_index = i\n      } else if i == smallest_even {\n        if i < smallest_index {\n          smallest_index = i\n        }\n      }\n    }\n  }\n  result = [smallest_even, smallest_index]\n  return result",
    "  let smallest_even_value = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_value_index_index",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even = arr.reduce((acc, val) => acc + (val % 2 == 0), 0)\n  let min_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_val = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_index_val = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_val_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_index_val_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_val_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_index_val_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_val_index_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_index_val_index_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_val_index_index_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_index_val_index_index_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_val_index_index_index_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_index_val_index_index_index_index_index = arr.reduce((acc, val) => acc + (val % 2 == 0) * val, 0)\n  let min_val_index_index",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  return [value, index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "    let smallest_value = arr[0]\n    let smallest_index = 0\n    for i in arr {\n        if i % 2 == 0 {\n            if i < smallest_value {\n                smallest_value = i\n                smallest_index = i\n            }\n        }\n    }\n    return Vec::<isize>::new(smallest_value, smallest_index)",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value)\n  if result.length == 0 {\n    return Vec::new()\n  } else if result.length == 1 {\n    return Vec::new(result[0], smallest_index)\n  } else {\n    let smallest_index_of_even_value = arr.filter((x) => x % 2 == smallest_even_value).reduce((a, b) => a + b)\n    return Vec::new(result[smallest_index_of_even_value], smallest_index)\n  }",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_value = arr.reduce((a, b) => a if a % 2 == 0 else b)\n  let smallest_index = arr.reduce((a, b) => a if a % 2 == 0 else b)\n  let index = arr.find(x => x == smallest_index)\n  let value = arr[index]\n  let result = [value, index]\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  let result = [value, index]\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value)\n  if result.length == 0 {\n    return []\n  } else {\n    return [smallest_index, smallest_even_value]\n  }",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index",
    "  let min_even = 0\n  let min_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_even {\n        min_even = i\n        min_index = i\n      }\n    }\n  }\n  return Vec::new([min_even, min_index])",
    "  let smallest_value = arr.min()\n  let smallest_index = 0\n  let smallest_even_value = smallest_value\n  let smallest_even_index = 0\n  let even_values = []\n  let even_indices = []\n  for i in arr {\n    if i % 2 == 0 {\n      even_values.append(i)\n      even_indices.append(i)\n    } else {\n      if i < smallest_even_value {\n        smallest_even_value = i\n        smallest_even_index = i\n      }\n    }\n  }\n  if even_values.length == 0 {\n    return []\n  }\n  if even_values.length == 1 {\n    return [smallest_even_value, smallest_even_index]\n  }\n  for i in even_indices {\n    if i < smallest_even_index {\n      smallest_even_index = i\n    }\n  }\n  return [smallest_even_value, smallest_even_index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even_value = 0\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_even_value {\n        smallest_even_value = i\n        smallest_index = i\n      }\n    }\n  }\n  if smallest_even_value == 0 {\n    return Vec::new()\n  }\n  return Vec::new(smallest_index, smallest_even_value)",
    "  let smallest_even_value = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2 = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_mod_2_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2 = arr.reduce((acc, val) => acc + val % 2)\n  let smallest_index_val_mod_2_index_mod_2_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2_index_mod_2 = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2_index_mod_2_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2_index_mod_2_index_mod_2 = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2_index_mod_2_index_mod_2_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2_index_mod_2_index_mod_2_index_mod_2 = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2_index_mod_2_index_mod_2_index_mod_2_index = arr.reduce((acc, val) => acc + val)\n  let smallest_index_val_mod_2_index_mod_2_index_mod_2_index_mod_2_index_mod_2_index_mod",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_even_value = arr.reduce((a, b) => a + b)\n  let min_index_even_index = arr.reduce((a, b) => a + b) % 2\n\n  if min_even_value == 0 {\n    return Vec::new(min_index, min_index_even_index)\n  } else {\n    return Vec::new(min_index_even_index, min_index_even_value)\n  }",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let smallest_value = arr[0];\n  let smallest_index = 0;\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i;\n        smallest_index = i;\n      }\n    }\n  }\n  return [smallest_value, smallest_index];",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if i % 2 == smallest_even_value {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let min_index = 0\n  let min_value = arr[0]\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_value {\n        min_value = i\n        min_index = i\n      }\n    }\n  }\n  return Vec::new(min_value, min_index)",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr.iter() {\n    if i.value % 2 == 0 {\n      if i.value < smallest_value {\n        smallest_value = i.value\n        smallest_index = i.index\n      }\n    }\n  }\n  return Vec::<isize>::new(smallest_value, smallest_index)",
    "  let min_even = 0\n  let min_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_even {\n        min_even = i\n        min_index = i\n      }\n    }\n  }\n  return Vec::new([min_even, min_index])",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let smallest_value = arr.reduce((a, b) => a + b)\n  let index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if arr[i] == smallest_even_value {\n      result = [arr[i], i]\n      break\n    }\n  }\n  return result",
    "    let smallest_value = arr.min();\n    let smallest_index = arr.index(smallest_value);\n    let plucked_node = arr[smallest_index];\n    let plucked_index = smallest_index;\n    for i in arr {\n        if i == smallest_value {\n            continue;\n        }\n        if i % 2 == 0 {\n            if i < smallest_value {\n                smallest_value = i;\n                smallest_index = i;\n            }\n        } else {\n            if i < smallest_value {\n                smallest_value = i;\n                smallest_index = i;\n            }\n        }\n    }\n    return [smallest_value, smallest_index];",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_even_value = 0\n  let min_index = 0\n  let min_value = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_even_value {\n        min_even_value = i\n        min_index = i\n      }\n    }\n  }\n  if min_even_value == 0 {\n    return Vec::new()\n  }\n  return Vec::new(min_index)",
    "  let smallest_even_value = 0\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_even_value {\n        smallest_even_value = i\n        smallest_index = i\n      } else if i == smallest_even_value {\n        if i < arr[smallest_index] {\n          smallest_index = i\n        }\n      }\n    }\n  }\n  return [smallest_even_value, smallest_index]",
    "  let min_index = 0\n  let min_value = arr[0]\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_value {\n        min_value = i\n        min_index = i\n      }\n    }\n  }\n  return Vec::new(min_value, min_index)",
    "  let smallest_even_value = 0\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_even_value {\n        smallest_even_value = i\n        smallest_index = i\n      } else if i == smallest_even_value {\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_even_value, smallest_index]",
    "  let smallest_even_value = arr.reduce((acc, val) => acc + val % 2, 0)\n  let smallest_index = arr.reduce((acc, val) => acc + val, 0)\n  let smallest_index_value = arr.reduce((acc, val) => acc + val, 0)\n  let index = arr.reduce((acc, val) => acc + val, 0)\n  let index_value = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value_index = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value_index_value = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value_index_value_index = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value_index_value_index_value = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value_index_value_index_value_index = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value_index_value_index_value_index_value = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_value_index_value_index_value_index_value_index_value_index = arr.reduce((acc, val) => acc + val, 0)\n  let index_value_index_",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = arr.filter((x) => x % 2 == smallest_even_value).sort((a, b) => a - b)\n  if (result.length == 0) {\n    return Vec::new()\n  }\n  return Vec::new(result[0], smallest_index)",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let result = arr.filter(x => x == smallest_even_value)\n  if (result.length == 0) {\n    return []\n  } else if (result.length == 1) {\n    return [smallest_even_value, smallest_index]\n  } else {\n    return [smallest_even_value, smallest_index]\n  }",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  let result = [value, index]\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  arr.remove(index)\n  return [value, index]",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_even_index_value_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_value_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_value_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_value_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [ smallest_value, smallest_index ]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even = 0\n  let min_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_even {\n        min_even = i\n        min_index = i\n      }\n    }\n  }\n  return [min_even, min_index]",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value_index_value = arr.reduce((",
    "  let smallest_value = arr.min()\n  let smallest_index = 0\n  let smallest_index_value = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n        smallest_index_value = i\n      } else if i == smallest_value {\n        if i < smallest_index_value {\n          smallest_index_value = i\n          smallest_index = i\n        }\n      }\n    }\n  }\n  if smallest_index_value == 0 {\n    return Vec::new()\n  }\n  return Vec::new(smallest_index, smallest_index_value)",
    "  let smallest_value = arr.reduce((a, b) => a if a % 2 == 0 else b)\n  let smallest_index = arr.reduce((a, b) => a if a % 2 == 0 else b)\n  let index = arr.find(x => x == smallest_value)\n  let value = arr[index]\n  return [value, index]",
    "    let smallest_value = arr[0]\n    let smallest_index = 0\n    for i in arr {\n        if i % 2 == 0 {\n            if i < smallest_value {\n                smallest_value = i\n                smallest_index = i\n            }\n        }\n    }\n    return Vec::<isize>::new(smallest_value, smallest_index)",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  return [value, index]",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return Vec::new(smallest_value, smallest_index)",
    "  let smallest_value = arr.min();\n  let smallest_index = 0;\n  let smallest_index_found = false;\n  for i in arr {\n    if i % 2 == 0 {\n      if !smallest_index_found {\n        smallest_value = i;\n        smallest_index = i;\n        smallest_index_found = true;\n      } else if i < smallest_value {\n        smallest_value = i;\n        smallest_index = i;\n      }\n    }\n  }\n  if smallest_index_found {\n    return [smallest_value, smallest_index]\n  } else {\n    return []\n  }",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let smallest_value = arr.reduce((a, b) => a + b)\n  let index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if (i % 2 == smallest_even_value) {\n      result = [smallest_value, smallest_index]\n      break\n    }\n  }\n  return result",
    "    let min_even_value = arr.reduce((a, b) => a + b) % 2\n    let min_index = arr.reduce((a, b) => a + b)\n    let min_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_value = arr.reduce((a, b) => a + b)\n    let min_index_index_index_index_index_index_index_index_index = arr",
    "  let smallest_value = arr.min()\n  let smallest_index = arr.index(smallest_value)\n  let result = []\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  result = [smallest_value, smallest_index]\n  return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_value = arr.min()\n  let smallest_index = arr.index(smallest_value)\n  let plucked_node = arr[smallest_index]\n  let plucked_index = smallest_index\n  for i in arr {\n    if i == smallest_value {\n      continue\n    }\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  return Vec::<isize>::new([value, index])",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b) % 2\n  let min_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_index = arr.reduce((a, b) => a + b)\n\n  let result = []\n  for i in arr {\n    if i % 2 == min_even_value {\n      result = [i, min_index]\n      break\n    }\n  }\n\n  if result == [] {\n    result = [0, 0]\n  }\n\n  return result",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr.iter() {\n    if i.value % 2 == 0 {\n      if i.value < smallest_value {\n        smallest_value = i.value\n        smallest_index = i.index\n      }\n    }\n  }\n  return Vec::new(smallest_value, smallest_index)",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a,",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if (i % 2 == smallest_even_value) {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  return Vec::<isize>::new(value, smallest_index)",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index",
    "  let smallest_value = arr.min()\n  let smallest_index = arr.index(smallest_value)\n  let even_values = arr.filter((x) => x % 2 == 0)\n  let even_values_index = even_values.index(smallest_value)\n  let smallest_even_value = even_values[even_values_index]\n  let smallest_even_index = even_values.index(smallest_even_value)\n  let smallest_even_value_index = arr.index(smallest_even_value)\n  if smallest_even_value_index == smallest_index {\n    return [smallest_even_value, smallest_even_index]\n  } else {\n    return [smallest_value, smallest_index]\n  }",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_value = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_value = arr.reduce((a, b) => a + b) % 2\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_even_index_index_index_index_index = arr.reduce((a, b) =>",
    "  let smallest_even_value = arr.reduce((acc, node) => acc + node, 0)\n  let smallest_index = arr.reduce((acc, node) => acc + node, 0)\n  let smallest_node = arr.find(node => node % 2 == 0)\n  if smallest_even_value == 0 || arr.isEmpty() {\n    return Vec::new()\n  }\n  return Vec::new(smallest_node, smallest_index)",
    "  let min_even = 0\n  let min_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_even {\n        min_even = i\n        min_index = i\n      }\n    }\n  }\n  return Vec::new(min_index, min_even)",
    "  let smallest_value = arr[0]\n  let smallest_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < smallest_value {\n        smallest_value = i\n        smallest_index = i\n      }\n    }\n  }\n  return [smallest_value, smallest_index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a,",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_value_index_value_index_value_index_value_index_value_index_value = arr.reduce((a,",
    "    let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n    let smallest_index = arr.reduce((a, b) => a + b)\n    let index = arr.find(x => x == smallest_even_value)\n    let value = arr[index]\n    return [value, index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x % 2 == smallest_even_value)\n  let value = arr[index]\n  return [value, index]",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let min_even_value = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_value = arr.reduce((a, b) => a + b)\n  let min_index_value = arr.reduce((a, b) => a + b)\n  let min_index_value_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_value_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let index = arr.find(x => x == smallest_even_value)\n  let value = arr[index]\n  return Vec::<isize>::new([value, index])",
    "  let min_even_value = 0\n  let min_index = 0\n  for i in arr {\n    if i % 2 == 0 {\n      if i < min_even_value {\n        min_even_value = i\n        min_index = i\n      }\n    }\n  }\n  return Vec::new(min_index, min_even_value)",
    "  let smallest_value = arr.reduce((a, b) => a if a % 2 == 0 else b)\n  let index = arr.find(x => x % 2 == 0)\n  return Vec::new(smallest_value, index)",
    "    let smallest_even_value = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index_value = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index_value_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index_value_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index_value_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value_index_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index_value_index_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index_value_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_index_value_index_index_index_index_index_index = arr.reduce((a, b) => a + b) % 2;\n    let smallest_value_index_index_index_index_index_index_index = arr.reduce((a, b",
    "  let smallest_even_value = arr.reduce((a, b) => a + b) % 2\n  let smallest_index = arr.reduce((a, b) => a + b)\n  let result = []\n  for i in arr {\n    if (i % 2 == smallest_even_value) {\n      result = [i, smallest_index]\n      break\n    }\n  }\n  return result",
    "  let min_even = arr.reduce((a, b) => a + b) % 2\n  let min_index = arr.reduce((a, b) => a + b)\n  let min_even_index = arr.reduce((a, b) => a + b) % 2\n  let min_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.reduce((a, b) => a + b)\n  let min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = arr.red"
  ],
  "stop_tokens": [
    "\n}"
  ]
}