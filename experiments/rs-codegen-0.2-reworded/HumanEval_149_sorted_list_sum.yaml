name: HumanEval_149_sorted_list_sum
language: rs
prompt: "/// Write a function that accepts a vector of strings as a parameter,\n///\
  \ deletes the strings that have odd lengths from it,\n/// and returns the resulted\
  \ vector with a sorted order,\n/// The vector is always a vector of strings and\
  \ never a vector of numbers,\n/// and it may contain duplicates.\n/// The order\
  \ of the vector should be ascending by length of each word, and you\n/// should\
  \ return the vector sorted by that rule.\n/// If two words have the same length,\
  \ sort the vector alphabetically.\n/// The function should return a vector of strings\
  \ in sorted order.\n/// You may assume that all words will have the same length.\n\
  /// For example:\n/// >>> list_sort(vec![String::from(\"aa\"), String::from(\"a\"\
  ), String::from(\"aaa\")])\n/// vec![String::from(\"aa\")]\n/// >>> list_sort(vec![String::from(\"\
  ab\"), String::from(\"a\"), String::from(\"aaa\"), String::from(\"cd\")])\n/// vec![String::from(\"\
  ab\"), String::from(\"cd\")]\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
  aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\")]);\n\
  \    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"AI\"), String::from(\"\
  asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"), String::from(\"asdf\"\
  ), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"d\"\
  ), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
  \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
  abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
  )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"),\
  \ String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
  au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
  ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
  a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"aaaa\"\
  ), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]), vec![String::from(\"\
  cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"bbbb\")]);\n\
  }\n"
completions: []
stop_tokens:
- "\n}"
