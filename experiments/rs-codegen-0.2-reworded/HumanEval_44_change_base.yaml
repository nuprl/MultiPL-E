name: HumanEval_44_change_base
language: rs
prompt: "/// Change numerical base of input number x to base.\n/// return string representation\
  \ after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8,\
  \ 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n/// String::from(\"1000\"\
  )\n/// >>> change_base(7, 2)\n/// String::from(\"111\")\nfn change_base(x: isize,\
  \ base: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
  \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
  ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
  \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
  1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
  \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
  ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
  \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
  ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
completions: ["  let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 0;\n  let d = 0;\n  let e\
    \ = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let l = 0;\n  let m = 0;\n\
    \  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t\
    \ = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n\
    \  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e\
    \ = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n\
    \  let k = 0;\n  let l = 0;\n  let m = 0;\n  let o = 0;\n  let p = 0;\n  let q\
    \ = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n\
    \  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b\
    \ = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n\
    \  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m\
    \ = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n\
    \  let t = 0;\n  let u = 0;\n  let v = 0", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let digits = [0];\n  for (let i = 0; i < n; i++) {\n    let\
    \ d = s[i];\n    if (d >= '0' && d <= '9') {\n      digits.push(d - '0');\n  \
    \  } else {\n      digits.push(d - 'A' + 10);\n    }\n  }\n  let result = [0];\n\
    \  let power = 1;\n  for (let i = n - 1; i >= 0; i--) {\n    let d = digits[i];\n\
    \    let digit = d * power;\n    result.push(digit % base);\n    power = power\
    \ * base;\n  }\n  let sb = String::from(result);\n  return sb;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let r = String::from(0);\n  let i = 0;\n  let j = 0;\n\
    \  let k = 0;\n  let m = 0;\n  let p = 0;\n  let q = 0;\n  let c = 0;\n  let d\
    \ = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let l = 0;\n\
    \  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c1 = 0;\n  let c2 = 0;\n  let\
    \ c3 = 0;\n  let c4 = 0;\n  let c5 = 0;\n  let c6 = 0;\n  let c7 = 0;\n  let c8\
    \ = 0;\n  let c9 = 0;\n  let c10 = 0;\n  let c11 = 0;\n  let c12 = 0;\n  let c13\
    \ = 0;\n  let c14 = 0;\n  let c15 = 0;\n  let c16 = 0;\n  let c17 = 0;\n  let\
    \ c18 = 0;\n  let c19 = 0;\n  let c20 = 0;\n  let c21 = 0;\n  let c22 = 0;\n \
    \ let c23 = 0;\n  let c24 = 0;\n  let c25 = 0;\n  let c26 = 0;\n  let c27 = 0;\n\
    \  let c28 = 0;\n  let c29 = 0;\n  let c30 = 0;\n  let c31 = 0;\n  let c32 = 0;\n\
    \  let c33 = 0;\n  let c34 = 0;\n  let c35 = 0;\n  let c36 = 0;\n  let c37 = 0;\n\
    \  let c38 = 0;\n  let c39 = 0;\n  let c40 = 0;\n  let c41 = 0;\n  let c42 = 0;\n\
    \  let c43 = 0;\n  let c44 = 0;\n  let c45 = 0;\n  let c46 = 0;\n  ", "  let n\
    \ = x;\n  let s = String::from(n);\n  let b = String::from(base);\n  let i = 0;\n\
    \  let j = 0;\n  let k = 0;\n  let m = 0;\n  let r = String::from(\"\");\n  while\
    \ (i < s.len) {\n    m = s[i];\n    j = i + 1;\n    k = 0;\n    while (k < b.len)\
    \ {\n      if (m < base) {\n        r = r.concat(b[k]);\n      } else {\n    \
    \    r = r.concat(b[k]);\n        r = r.concat(b[k]);\n      }\n      k = k +\
    \ 1;\n    }\n    i = j;\n  }\n  return r;", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let res = String::alloc(n * base);\n  let i = 0;\n  for (; i\
    \ < n; i++) {\n    let digit = s[i];\n    let digit_base = digit.to_i() * base;\n\
    \    let digit_base_str = String::from(digit_base);\n    res.set_sub(i * base,\
    \ digit_base_str);\n  }\n  return res;", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n\
    \    if (d >= base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i,\
    \ i + 1) + String::from(r);\n    i += 1;\n  }\n  return s;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let r = String::from(\"0\");\n  for i in 0..n {\n    let\
    \ d = s[i];\n    let c = d.to_i() * base;\n    r = r.concat(String::from(c));\n\
    \  }\n  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let i =\
    \ 0;\n  let j = 0;\n  let r = String::from(\"0\");\n  let c = String::from(\"\
    0\");\n  let d = String::from(\"0\");\n  let k = String::from(\"0\");\n  let l\
    \ = String::from(\"0\");\n  let m = String::from(\"0\");\n  let p = String::from(\"\
    0\");\n  let q = String::from(\"0\");\n  let r_ = String::from(\"0\");\n  let\
    \ c_ = String::from(\"0\");\n  let d_ = String::from(\"0\");\n  let k_ = String::from(\"\
    0\");\n  let l_ = String::from(\"0\");\n  let m_ = String::from(\"0\");\n  let\
    \ p_ = String::from(\"0\");\n  let q_ = String::from(\"0\");\n  let r__ = String::from(\"\
    0\");\n  let c__ = String::from(\"0\");\n  let d__ = String::from(\"0\");\n  let\
    \ k__ = String::from(\"0\");\n  let l__ = String::from(\"0\");\n  let m__ = String::from(\"\
    0\");\n  let p__ = String::from(\"0\");\n  let q__ = String::from(\"0\");\n  let\
    \ r___ = String::from(\"0\");\n  let c___ = String::from(\"0\");\n  let d___ =\
    \ String::from(\"0\");\n  let k___ = String::from(\"0\");\n  let l___ = String::from(\"\
    0\");\n  let m___ = String::from(\"0\");\n  let p___ = String::from(\"0\");\n\
    \  let q___ = String::from(\"0\");\n  let r_____ = String::from(\"0\");\n  let\
    \ c_____ = String::from(\"0\");\n  let d_____ = String::from(\"0\");\n  let k_____\
    \ = String::from(\"0\");\n  let l_____ = String::from(\"0\");\n  let m_____ =\
    \ String::from(\"0\");\n  let p_____ = String::from(\"0\");\n  let q_____ = String::from(\"\
    0\");\n  let r______ =", "  let s = String::from(x);\n  let n = s.len;\n  let\
    \ r = String::from(\"0\");\n  for (let i = n - 1; i >= 0; i--) {\n    let c =\
    \ s[i];\n    let d = c - '0';\n    let m = base ** i;\n    let r = String::from(d\
    \ * m + r);\n  }\n  return r;", "  let result = String::from(x);\n  for (i in\
    \ 0..base - 1) {\n    result = result.pad_left(base, '0');\n  }\n  return result;",
  "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let j = 0;\n  let\
    \ k = 0;\n  let r = String::from(\"0\");\n  let result = String::from(\"\");\n\
    \  while (i < n) {\n    let c = s[i];\n    let d = c - '0';\n    if (d < 0 ||\
    \ d >= base) {\n      throw \"Invalid base number.\";\n    }\n    let d_pow =\
    \ 1;\n    while (i + 1 < n) {\n      let c = s[i + 1];\n      let d_pow_next =\
    \ d_pow * base;\n      let d_next = c - '0';\n      if (d_next < 0 || d_next >=\
    \ base) {\n        throw \"Invalid base number.\";\n      }\n      d = d * base\
    \ + d_next;\n      d_pow = d_pow_next;\n      i += 1;\n    }\n    let d_pow_next\
    \ = d_pow * base;\n    let d_next = 0;\n    if (i + 1 < n) {\n      d_next = s[i\
    \ + 1] - '0';\n      if (d_next < 0 || d_next >= base) {\n        throw \"Invalid\
    \ base number.\";\n      }\n      d = d * base + d_next;\n      d_pow = d_pow_next;\n\
    \      i += 1;\n    }\n    let d_pow_next_next = d_pow_next * base;\n    let d_next_next\
    \ = 0;\n    if (i + 2 < n) {\n      d_next_next = s[i + 2] - '0';\n      if (d_next_next\
    \ < 0 || d_next_next >= base) {\n        throw \"Invalid base number.\";\n   \
    \   }\n      d = d * base + d_next_next;\n      d_pow = d_pow_next_next;\n   \
    \   i += 2;\n    }\n    let d_pow_next_next_next = d_pow_next_next *", "  let\
    \ s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let result = String::new(n);\n\
    \  while (i < n) {\n    let digit = s[i];\n    let d = digit.to_i() * base;\n\
    \    let d_str = String::from(d);\n    let j = 0;\n    while (j < d_str.len())\
    \ {\n      let c = d_str[j];\n      result.set(i, c);\n      i += 1;\n      j\
    \ += 1;\n    }\n  }\n  return result;", "    let result = String::from(x);\n \
    \   for i in 0..result.len() {\n        let digit = result[i];\n        let new_digit\
    \ = digit.to_i() * base;\n        result = result.replace(digit, String::from(new_digit));\n\
    \    }\n    return result;", "  let n = x;\n  let s = String::from(n);\n  let\
    \ i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n   \
    \ let e = d * base;\n    s = s.sub(i, i + 1) + String::from(e);\n    i += 1;\n\
    \  }\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n  let digits\
    \ = [0];\n  for (let i = 0; i < n; i++) {\n    let d = s[i];\n    if (d >= '0'\
    \ && d <= '9') {\n      digits.push(d - '0');\n    } else if (d >= 'a' && d <=\
    \ 'z') {\n      digits.push(d - 'a' + 10);\n    } else if (d >= 'A' && d <= 'Z')\
    \ {\n      digits.push(d - 'A' + 10);\n    } else {\n      digits.push(0);\n \
    \   }\n  }\n  let result = [0];\n  let power = 1;\n  for (let i = n - 1; i >=\
    \ 0; i--) {\n    let d = digits[i];\n    let digit = d * power;\n    result.push(digit\
    \ % base);\n    power = power * base;\n  }\n  let result_str = String::from(result);\n\
    \  return result_str;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n\
    \  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n    if (d >=\
    \ base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i, i + 1)\
    \ + String::from(r);\n    i += 1;\n  }\n  return s;", "  let n = x;\n  let s =\
    \ String::from(n);\n  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n \
    \   let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n    let r = d\
    \ * base;\n    s = s.sub(i, 1) + String::from(r);\n    i += 1;\n  }\n  return\
    \ s;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  let j = 0;\n\
    \  let r = String::from(\"0\");\n  while (i < s.len) {\n    let c = s[i];\n  \
    \  let d = base;\n    let k = 0;\n    while (k < d) {\n      c = c * base + k;\n\
    \      k = k + 1;\n    }\n    r = r + String::from(c);\n    i = i + 1;\n  }\n\
    \  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n\
    \  let r = String::from(0);\n  let c = String::from(0);\n  let b = String::from(0);\n\
    \  let d = String::from(0);\n  let m = String::from(0);\n  let e = String::from(0);\n\
    \  let f = String::from(0);\n  let g = String::from(0);\n  let h = String::from(0);\n\
    \  let j = String::from(0);\n  let k = String::from(0);\n  let l = String::from(0);\n\
    \  let m = String::from(0);\n  let n = String::from(0);\n  let o = String::from(0);\n\
    \  let p = String::from(0);\n  let q = String::from(0);\n  let r = String::from(0);\n\
    \  let s = String::from(0);\n  let t = String::from(0);\n  let u = String::from(0);\n\
    \  let v = String::from(0);\n  let w = String::from(0);\n  let x = String::from(0);\n\
    \  let y = String::from(0);\n  let z = String::from(0);\n  let a = String::from(0);\n\
    \  let b = String::from(0);\n  let c = String::from(0);\n  let d = String::from(0);\n\
    \  let e = String::from(0);\n  let f = String::from(0);\n  let g = String::from(0);\n\
    \  let h = String::from(0);\n  let i = String::from(0);\n  let j = String::from(0);\n\
    \  let k = String::from(0);\n  let l = String::from(0);\n  let m = String::from(0);\n\
    \  let n = String::from(0);\n  let o = String::from(0);\n  let p = String::from(0);\n\
    \  let q = String::from(0);\n  let r = String::from(0);\n  ", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let digits = [0];\n  let i = 0;\n  while (i < n) {\n  \
    \  let d = s[i];\n    if (d.is_digit()) {\n      let dn = d.to_i() * base;\n \
    \     digits.push(dn);\n    } else {\n      digits.push(0);\n    }\n    i += 1;\n\
    \  }\n  let sb = String::from(digits);\n  return sb;", "  let n = x;\n  let s\
    \ = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n\
    \    let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n    let r =\
    \ d * base;\n    s = s.sub(i, 1) + String::from(r);\n    i += 1;\n  }\n  return\
    \ s;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  let j = 0;\n\
    \  let k = 0;\n  let m = 0;\n  let r = 0;\n  let c = 0;\n  let d = 0;\n  let e\
    \ = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let l = 0;\n  let z = 0;\n\
    \  let q = 0;\n  let p = 0;\n  let o = 0;\n  let n1 = 0;\n  let n2 = 0;\n  let\
    \ n3 = 0;\n  let n4 = 0;\n  let n5 = 0;\n  let n6 = 0;\n  let n7 = 0;\n  let n8\
    \ = 0;\n  let n9 = 0;\n  let n10 = 0;\n  let n11 = 0;\n  let n12 = 0;\n  let n13\
    \ = 0;\n  let n14 = 0;\n  let n15 = 0;\n  let n16 = 0;\n  let n17 = 0;\n  let\
    \ n18 = 0;\n  let n19 = 0;\n  let n20 = 0;\n  let n21 = 0;\n  let n22 = 0;\n \
    \ let n23 = 0;\n  let n24 = 0;\n  let n25 = 0;\n  let n26 = 0;\n  let n27 = 0;\n\
    \  let n28 = 0;\n  let n29 = 0;\n  let n30 = 0;\n  let n31 = 0;\n  let n32 = 0;\n\
    \  let n33 = 0;\n  let n34 = 0;\n  let n35 = 0;\n  let n36 = 0;\n  let n37 = 0;\n\
    \  let n38 = 0;\n  let n39 = 0;\n  let n40 = 0;\n  let n41 = 0;\n  let n42 = 0;\n\
    \  let n43 = 0;\n  let n44 = 0;\n  let n45 = 0;\n  let n46 = 0;\n  let n47 = 0;\n\
    \  let n48 = 0", "  let n = x;\n  let s = String::from(n);\n  let n_base = n;\n\
    \  let s_base = s;\n  let n_base_len = 0;\n  let s_base_len = 0;\n  let s_base_len_max\
    \ = 0;\n  let s_base_len_min = 0;\n  let s_base_len_sum = 0;\n  let s_base_len_avg\
    \ = 0;\n  let s_base_len_max_idx = 0;\n  let s_base_len_min_idx = 0;\n  let s_base_len_sum_idx\
    \ = 0;\n  let s_base_len_avg_idx = 0;\n  let s_base_len_max_idx_idx = 0;\n  let\
    \ s_base_len_min_idx_idx = 0;\n  let s_base_len_sum_idx_idx = 0;\n  let s_base_len_avg_idx_idx\
    \ = 0;\n  let s_base_len_max_idx_idx_idx = 0;\n  let s_base_len_min_idx_idx_idx\
    \ = 0;\n  let s_base_len_sum_idx_idx_idx = 0;\n  let s_base_len_avg_idx_idx_idx\
    \ = 0;\n  let s_base_len_max_idx_idx_idx_idx = 0;\n  let s_base_len_min_idx_idx_idx_idx\
    \ = 0;\n  let s_base_len_sum_idx_idx_idx_idx = 0;\n  let s_base_len_avg_idx_idx_idx_idx\
    \ = 0;\n  let s_base_len_max_idx_idx_idx_idx_idx = 0;\n  let s_base_len_min_idx_idx_idx_idx_idx\
    \ = 0;\n  let s_base_len_sum_idx_", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let r = String::from(0);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m\
    \ = 0;\n  let p = 0;\n  let q = 0;\n  let r_i = 0;\n  let r_j = 0;\n  let r_k\
    \ = 0;\n  let r_m = 0;\n  let r_p = 0;\n  let r_q = 0;\n  let r_r = 0;\n  let\
    \ r_s = 0;\n  let r_t = 0;\n  let r_u = 0;\n  let r_v = 0;\n  let r_w = 0;\n \
    \ let r_x = 0;\n  let r_y = 0;\n  let r_z = 0;\n  let r_A = 0;\n  let r_B = 0;\n\
    \  let r_C = 0;\n  let r_D = 0;\n  let r_E = 0;\n  let r_F = 0;\n  let r_G = 0;\n\
    \  let r_H = 0;\n  let r_I = 0;\n  let r_J = 0;\n  let r_K = 0;\n  let r_L = 0;\n\
    \  let r_M = 0;\n  let r_N = 0;\n  let r_O = 0;\n  let r_P = 0;\n  let r_Q = 0;\n\
    \  let r_R = 0;\n  let r_S = 0;\n  let r_T = 0;\n  let r_U = 0;\n  let r_V = 0;\n\
    \  let r_W = 0;\n  let r_X = 0;\n  let r_Y = 0;\n  let r_Z = 0;\n  let r_0 = 0;\n\
    \  let r_1 = 0;\n  let r_2 = 0;\n  let r_3 = 0;\n  let r_4 = 0;\n  let r_5 = 0;\n\
    \  let r_6 = 0;\n  let r_7 = 0", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let r = String::from(\"0\");\n  let\
    \ m = String::from(\"0\");\n  let n_base = String::from(\"0\");\n  let n_base_len\
    \ = 0;\n  let n_base_len_max = 0;\n  let n_base_len_min = 0;\n  let n_base_len_max_min\
    \ = 0;\n  let n_base_len_max_min_max = 0;\n  let n_base_len_max_min_max_min =\
    \ 0;\n  let n_base_len_max_min_max_min_max = 0;\n  let n_base_len_max_min_max_min_max_min\
    \ = 0;\n  let n_base_len_max_min_max_min_max_min_max = 0;\n  let n_base_len_max_min_max_min_max_min_max_min\
    \ = 0;\n  let n_base_len_max_min_max_min_max_min_max_min_max = 0;\n  let n_base_len_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n  let n_base_len_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let\
    \ n_base_len_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n  let n_base_len_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n  let n_base_len_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n  let n_base_len_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n  let n_base_len", "  let s = String::from(x);\n  let n = s.len();\n \
    \ let i = 0;\n  let r = String::from(\"0\");\n  let r_len = r.len();\n  let r_i\
    \ = 0;\n  let r_j = 0;\n  let r_carry = 0;\n  let r_carry_len = r_len;\n  let\
    \ r_carry_i = 0;\n  let r_carry_j = 0;\n  let r_carry_carry = 0;\n  let r_carry_carry_len\
    \ = r_carry_len;\n  let r_carry_carry_i = 0;\n  let r_carry_carry_j = 0;\n  let\
    \ r_carry_carry_carry = 0;\n  let r_carry_carry_carry_len = r_carry_carry_len;\n\
    \  let r_carry_carry_carry_i = 0;\n  let r_carry_carry_carry_j = 0;\n  let r_carry_carry_carry_carry\
    \ = 0;\n  let r_carry_carry_carry_carry_len = r_carry_carry_carry_len;\n  let\
    \ r_carry_carry_carry_carry_i = 0;\n  let r_carry_carry_carry_carry_j = 0;\n \
    \ let r_carry_carry_carry_carry_carry = 0;\n  let r_carry_carry_carry_carry_carry_len\
    \ = r_carry_carry_carry_carry_len;\n  let r_carry_carry_carry_carry_carry_i =\
    \ 0;\n  let r_carry_carry_carry_carry_carry_j = 0;\n  let r_carry_carry_carry_carry_carry_carry\
    \ = 0;\n  let r_carry_carry_carry_carry_carry_carry_len = r_carry_carry_carry_carry_carry_len;\n\
    \  let r_carry_carry_carry_carry_carry_carry_i = 0;\n  let r_carry_carry_carry_carry_carry_carry_j\
    \ = 0;\n  let r_carry_carry_carry_carry_carry_carry_carry = 0;\n  let r_carry_carry_carry_",
  "  let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n  for\
    \ i in 0..n {\n    let d = s[i];\n    let c = d.to_i() * base;\n    r = r.cat(String::from(c));\n\
    \  }\n  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let i =\
    \ 0;\n  let s2 = String::alloc(n * base);\n  for (; i < n; i++) {\n    let c =\
    \ s[i];\n    let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n   \
    \ s2.store_char(i * base, c);\n  }\n  for (; i < n; i++) {\n    let c = s[i];\n\
    \    let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n    s2.store_char(i\
    \ * base, c);\n  }\n  return s2;", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n\
    \    let e = d * base;\n    let f = e + '0';\n    s = s.sub(i, 1) + f;\n    i\
    \ += 1;\n  }\n  return s;", "  let n = x;\n  let s = String::from(n);\n  let i\
    \ = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n\
    \  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t\
    \ = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n\
    \  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e\
    \ = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n\
    \  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p\
    \ = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n\
    \  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a\
    \ = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n\
    \  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l\
    \ = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n\
    \  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w\
    \ = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a =", "  let n = x;\n\
    \  let s = String::from(n);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l\
    \ = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n\
    \  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w\
    \ = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n\
    \  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h\
    \ = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n\
    \  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s\
    \ = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n\
    \  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d\
    \ = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n\
    \  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o\
    \ = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n\
    \  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z\
    \ = 0;\n  let a =", "  let s = String::from(x);\n  let n = s.len();\n  let i =\
    \ 0;\n  let r = 0;\n  let c = 0;\n  let sb = String::from(\"\");\n  let sb_len\
    \ = 0;\n  let sb_i = 0;\n  let sb_r = 0;\n  let sb_c = 0;\n  let sb_len_i = 0;\n\
    \  let sb_len_r = 0;\n  let sb_len_c = 0;\n  let sb_len_len = 0;\n  let sb_len_len_i\
    \ = 0;\n  let sb_len_len_r = 0;\n  let sb_len_len_c = 0;\n  let sb_len_len_len\
    \ = 0;\n  let sb_len_len_len_i = 0;\n  let sb_len_len_len_r = 0;\n  let sb_len_len_len_c\
    \ = 0;\n  let sb_len_len_len_len = 0;\n  let sb_len_len_len_len_i = 0;\n  let\
    \ sb_len_len_len_len_r = 0;\n  let sb_len_len_len_len_c = 0;\n  let sb_len_len_len_len_len\
    \ = 0;\n  let sb_len_len_len_len_len_i = 0;\n  let sb_len_len_len_len_len_r =\
    \ 0;\n  let sb_len_len_len_len_len_c = 0;\n  let sb_len_len_len_len_len_len =\
    \ 0;\n  let sb_len_len_len_len_len_len_i = 0;\n  let sb_len_len_len_len_len_len_r\
    \ = 0;\n  let sb_len_len_len_len_len_len_c = 0;\n  let sb_len_len_len_len_len_len_len\
    \ = 0;\n  let sb_len_len_len_len", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = String::from(0);\n  let c = String::from(0);\n  let d\
    \ = String::from(0);\n  let p = String::from(0);\n  let q = String::from(0);\n\
    \  let m = String::from(0);\n  let n_ = String::from(0);\n  let r_ = String::from(0);\n\
    \  let c_ = String::from(0);\n  let d_ = String::from(0);\n  let p_ = String::from(0);\n\
    \  let q_ = String::from(0);\n  let m_ = String::from(0);\n  let n_ = String::from(0);\n\
    \  let r_ = String::from(0);\n  let c_ = String::from(0);\n  let d_ = String::from(0);\n\
    \  let p_ = String::from(0);\n  let q_ = String::from(0);\n  let m_ = String::from(0);\n\
    \  let n_ = String::from(0);\n  let r_ = String::from(0);\n  let c_ = String::from(0);\n\
    \  let d_ = String::from(0);\n  let p_ = String::from(0);\n  let q_ = String::from(0);\n\
    \  let m_ = String::from(0);\n  let n_ = String::from(0);\n  let r_ = String::from(0);\n\
    \  let c_ = String::from(0);\n  let d_ = String::from(0);\n  let p_ = String::from(0);\n\
    \  let q_ = String::from(0);\n  let m_ = String::from(0);\n  let n_ = String::from(0);\n\
    \  let r_ = String::from(0);\n  let c_ = String::from(0);\n  let d_ = String::from(0);\n\
    \  let p_ = String::from(0);\n  let q_ = String::from(0);\n  let m_ = String::from(0);",
  "  let n = x;\n  let s = String::from(n);\n  let n = n % base;\n  let s = String::from(n);\n\
    \  let s = s.pad_left(base, '0');\n  return s;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let digits = [0];\n  let i = 0;\n  let j = 0;\n  let k\
    \ = 0;\n  let carry = 0;\n  let digit;\n  let digit_base;\n  let digit_value;\n\
    \  let digit_value_base;\n  let digit_value_base_i;\n  let digit_value_base_i_base;\n\
    \  let digit_value_base_i_base_i;\n  let digit_value_base_i_base_i_base;\n  let\
    \ digit_value_base_i_base_i_base_i;\n  let digit_value_base_i_base_i_base_i_base;\n\
    \  let digit_value_base_i_base_i_base_i_base_i;\n  let digit_value_base_i_base_i_base_i_base_i_base;\n\
    \  let digit_value_base_i_base_i_base_i_base_i_base_i;\n  let digit_value_base_i_base_i_base_i_base_i_base_i_base;\n\
    \  let digit_value_base_i_base_i_base_i_base_i_base_i_base_i;\n  let digit_value_base_i_base_i_base_i_base_i_base_i_base_i_base;\n\
    \  let digit_value_base_i_base_i_base_i_base_i_base_i_base_i_base_i;\n  let digit_value_base_i_base_i_base_i_base_i_base_i_base_i_base_i_base;\n\
    \  let digit_value_base_i_base_i_base_i_base_i_base_i_base_i_base_i_base_i;\n\
    \  let digit_value_base_i_base_i_base_i_base_i_base_i_base_i_base_i_base_i_base;\n\
    \  let digit_value_base_i_base_", "    let n = x;\n    let s = String::from(n);\n\
    \    let s_len = s.len();\n    let s_base = s.chars();\n    let s_base_len = s_base.len();\n\
    \    let s_base_chars = s_base.chars();\n    let s_base_chars_len = s_base_chars.len();\n\
    \    let s_base_chars_base = s_base_chars.chars();\n    let s_base_chars_base_len\
    \ = s_base_chars_base.len();\n    let s_base_chars_base_base = s_base_chars_base.chars();\n\
    \    let s_base_chars_base_base_len = s_base_chars_base_base.len();\n    let s_base_chars_base_base_base\
    \ = s_base_chars_base_base.chars();\n    let s_base_chars_base_base_base_len =\
    \ s_base_chars_base_base_base.len();\n    let s_base_chars_base_base_base_base\
    \ = s_base_chars_base_base_base.chars();\n    let s_base_chars_base_base_base_base_len\
    \ = s_base_chars_base_base_base_base.len();\n    let s_base_chars_base_base_base_base_base\
    \ = s_base_chars_base_base_base_base_base.chars();\n    let s_base_chars_base_base_base_base_base_len\
    \ = s_base_chars_base_base_base_base_base.len();\n    let s_base_chars_base_base_base_base_base_base\
    \ = s_base_chars_base_base_base_base_base_base.chars();\n    let s_base_chars_base_base_base_base_base_base_len\
    \ = s_base_chars_base_base_base_base_base_base.len();\n    let s_base_chars_base_base",
  "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  let c = String::from(\"0\");\n  let b = String::from(base);\n  let bn\
    \ = b.len();\n  let bb = String::from(base);\n  let bb_len = bb.len();\n  let\
    \ bb_digits = String::from(base);\n  let bb_digits_len = bb_digits.len();\n  let\
    \ bb_digits_digits = String::from(base);\n  let bb_digits_digits_len = bb_digits_digits.len();\n\
    \  let bb_digits_digits_digits = String::from(base);\n  let bb_digits_digits_digits_len\
    \ = bb_digits_digits_digits.len();\n  let bb_digits_digits_digits_digits = String::from(base);\n\
    \  let bb_digits_digits_digits_digits_len = bb_digits_digits_digits_digits.len();\n\
    \  let bb_digits_digits_digits_digits_digits = String::from(base);\n  let bb_digits_digits_digits_digits_digits_len\
    \ = bb_digits_digits_digits_digits_digits.len();\n  let bb_digits_digits_digits_digits_digits_digits\
    \ = String::from(base);\n  let bb_digits_digits_digits_digits_digits_digits_len\
    \ = bb_digits_digits_digits_digits_digits_digits.len();\n  let bb_digits_digits_digits_digits_digits_digits_digits\
    \ = String::from(base);\n  let bb_digits_digits_digits_digits_digits_digits_digits_len\
    \ = bb_digits_digits_digits_digits_digits", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let i = 0;\n  let r = String::from(\"0\");\n  let c = String::from(\"\
    0\");\n  let b = String::from(\"0\");\n  let r_i = 0;\n  let c_i = 0;\n  let b_i\
    \ = 0;\n  let r_b = 0;\n  let c_b = 0;\n  let b_b = 0;\n  let r_c = 0;\n  let\
    \ c_c = 0;\n  let b_c = 0;\n  let r_n = 0;\n  let c_n = 0;\n  let b_n = 0;\n \
    \ let r_x = 0;\n  let c_x = 0;\n  let b_x = 0;\n  let r_b_i = 0;\n  let c_b_i\
    \ = 0;\n  let b_b_i = 0;\n  let r_c_i = 0;\n  let c_c_i = 0;\n  let b_c_i = 0;\n\
    \  let r_n_i = 0;\n  let c_n_i = 0;\n  let b_n_i = 0;\n  let r_x_i = 0;\n  let\
    \ c_x_i = 0;\n  let b_x_i = 0;\n  let r_b_b = 0;\n  let c_b_b = 0;\n  let b_b_b\
    \ = 0;\n  let r_c_b = 0;\n  let c_c_b = 0;\n  let b_c_b = 0;\n  let r_n_b = 0;\n\
    \  let c_n_b = 0;\n  let b_n_b = 0;\n  let r_x_b = 0;\n  let c_x_b = 0;\n  let\
    \ b_x_b = 0;\n  let r_b_c = 0;\n  let c_b_c = 0;\n  let b_b_c = 0;\n  let r_c_c\
    \ = 0;\n  let c_c_c = 0", "  let s = String::from(x);\n  let n = s.len();\n  let\
    \ i = 0;\n  let r = String::new(n);\n  for (; i < n; i++) {\n    let c = s[i];\n\
    \    let d = c - '0';\n    let m = base;\n    let p = 1;\n    for (; m > 0; m\
    \ /= base) {\n      p *= base;\n    }\n    d = d * p;\n    r[i] = d + '0';\n \
    \ }\n  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let i =\
    \ 0;\n  let res = String::alloc(n);\n  for (; i < n; i++) {\n    let c = s[i];\n\
    \    let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n    let r =\
    \ d;\n    for (let j = base; j > 1; j--) {\n      r *= base;\n      if (r >= 10)\
    \ {\n        r -= 10;\n      }\n    }\n    res[i] = r + '0';\n  }\n  for (; i\
    \ < n; i++) {\n    res[i] = '0';\n  }\n  return res;", "  let s = String::from(x);\n\
    \  let n = s.len;\n  let i = 0;\n  let j = 0;\n  let r = 0;\n  let c = 0;\n  let\
    \ d = 1;\n  let sb = String::from(base);\n  let sb_len = sb.len;\n  let sb_digits\
    \ = sb.digits;\n  let sb_digits_len = sb_digits.len;\n  let sb_digits_digits =\
    \ sb_digits.digits;\n  let sb_digits_digits_len = sb_digits_digits.len;\n  let\
    \ sb_digits_digits_digits = sb_digits_digits.digits;\n  let sb_digits_digits_digits_len\
    \ = sb_digits_digits_digits.len;\n  let sb_digits_digits_digits_digits = sb_digits_digits_digits.digits;\n\
    \  let sb_digits_digits_digits_digits_len = sb_digits_digits_digits_digits.len;\n\
    \  let sb_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits.digits;\n\
    \  let sb_digits_digits_digits_digits_digits_len = sb_digits_digits_digits_digits_digits.len;\n\
    \  let sb_digits_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits_digits.digits;\n\
    \  let sb_digits_digits_digits_digits_digits_digits_len = sb_digits_digits_digits_digits_digits_digits.len;\n\
    \  let sb_digits_digits_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits_digits_digits.dig",
  "    let s = String::from(x);\n    let n = s.len();\n    let r = String::from(0);\n\
    \    for i in 0..n {\n        let d = s[i];\n        let c = d.to_char();\n  \
    \      let cn = c.to_i() * base;\n        let rn = r.len();\n        let rd =\
    \ rn + 1;\n        let rd2 = rd * base;\n        let rd3 = rd2 + 1;\n        let\
    \ rd4 = rd3 * base;\n        let rd5 = rd4 + 1;\n        let rd6 = rd5 * base;\n\
    \        let rd7 = rd6 + 1;\n        let rd8 = rd7 * base;\n        let rd9 =\
    \ rd8 + 1;\n        let rd10 = rd9 * base;\n        let rd11 = rd10 + 1;\n   \
    \     let rd12 = rd11 * base;\n        let rd13 = rd12 + 1;\n        let rd14\
    \ = rd13 * base;\n        let rd15 = rd14 + 1;\n        let rd16 = rd15 * base;\n\
    \        let rd17 = rd16 + 1;\n        let rd18 = rd17 * base;\n        let rd19\
    \ = rd18 + 1;\n        let rd20 = rd19 * base;\n        let rd21 = rd20 + 1;\n\
    \        let rd22 = rd21 * base;\n        let rd23 = rd22 + 1;\n        let rd24\
    \ = rd23 * base;\n        let rd25 = rd24 + 1;\n        let rd26 = rd25 * base;\n\
    \        let rd27 = rd26 + 1;\n        let rd28 = rd27 * base;\n        let rd29\
    \ = rd28 + 1;\n        let rd30 = rd29 * base;\n        let rd31 = rd30 + 1;\n\
    \        let rd32 = rd31 * base;\n        let rd33 = rd32 + 1;\n        ", " \
    \ let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n\
    \    let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n      break;\n\
    \    }\n    let r = d * base;\n    s = s.sub(i, 1) + String::from(r);\n    i +=\
    \ 1;\n  }\n  return s;", "    let s = String::from(x);\n    let n = s.len();\n\
    \    let r = String::new(n);\n    let i = 0;\n    for (; i < n; i++) {\n     \
    \   let c = s[i];\n        let d = c - '0';\n        if (d < 0 || d >= base) {\n\
    \            break;\n        }\n        let j = i + 1;\n        for (; j < n;\
    \ j++) {\n            let e = s[j];\n            if (e < '0' || e > '9') {\n \
    \               break;\n            }\n            let f = e - '0';\n        \
    \    if (f >= base) {\n                break;\n            }\n            let\
    \ g = f * base + d;\n            if (g < 0 || g >= base) {\n                break;\n\
    \            }\n            let h = g * base + c;\n            if (h < 0 || h\
    \ >= base) {\n                break;\n            }\n            let k = h * base\
    \ + e;\n            if (k < 0 || k >= base) {\n                break;\n      \
    \      }\n            let l = k * base + f;\n            if (l < 0 || l >= base)\
    \ {\n                break;\n            }\n            let m = l * base + g;\n\
    \            if (m < 0 || m >= base) {\n                break;\n            }\n\
    \            let n = m * base + h;\n            if (n < 0 || n >= base) {\n  \
    \              break;\n            }\n            let o = n * base + k;\n    \
    \        if (o < 0 || o >= base) {\n                break;\n            }\n  \
    \          let p = o * base + l;\n            if (p < 0 || p >= base) {\n    \
    \            break;\n            }\n            let q = p * base + m;\n      \
    \      if (q < 0 || q >= base) {\n                break;\n            }\n    \
    \        let r = q * base + n;\n            if (r < 0 || r >= base) {\n      \
    \          break;\n            }\n            let s = r * base + o;\n        \
    \    if (s < 0 || s >= base) {\n                break;\n            }\n      \
    \      let t", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while\
    \ (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n\
    \      break;\n    }\n    let r = d * base;\n    s = s.sub(i, 1) + String::from(r);\n\
    \    i += 1;\n  }\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = String::new(n);\n  for (; i < n; i++) {\n    let d =\
    \ s[i];\n    let c = d.to_i() * base;\n    r.set(i, c.to_s());\n  }\n  return\
    \ r;", "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r\
    \ = String::from(\"0\");\n  let c = String::from(\"0\");\n  let m = String::from(\"\
    0\");\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let z = 0;\n  let p = 0;\n\
    \  let q = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x\
    \ = 0;\n  let y = 0;\n  let z = 0;\n  let p = 0;\n  let q = 0;\n  let t = 0;\n\
    \  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z\
    \ = 0;\n  let p = 0;\n  let q = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n\
    \  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let p = 0;\n  let q\
    \ = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n\
    \  let y = 0;\n  let z = 0;\n  let p = 0;\n  let q = 0;\n  let t = 0;\n  let u\
    \ = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n\
    \  let p = 0;\n  let q = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w\
    \ = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let p = 0;\n  let q = 0;\n\
    \  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x =", "  let s\
    \ = String::from(x);\n  let n = s.len();\n  let res = String::alloc(n * base);\n\
    \  for (let i = 0; i < n; i++) {\n    let c = s[i];\n    let d = c - '0';\n  \
    \  if (d >= base) {\n      d -= base;\n    }\n    res.store_char(d);\n  }\n  return\
    \ res;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i <\
    \ s.len) {\n    let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n  \
    \    break;\n    }\n    let r = d * base;\n    s = s.sub(i, 1) + String::from(r);\n\
    \    i += 1;\n  }\n  return s;", "  let n = x;\n  let s = String::from(n);\n \
    \ let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n\
    \    if (d >= base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i,\
    \ 1) + String::from(r);\n    i += 1;\n  }\n  return s;", "  let n = x;\n  let\
    \ s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n\
    \    let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n    let r =\
    \ d * base;\n    s = s.sub(i, 1) + String::from(r);\n    i += 1;\n  }\n  return\
    \ s;", "  let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n\
    \  for (let i = n - 1; i >= 0; i--) {\n    let d = s[i] - '0';\n    let m = base;\n\
    \    let c = 0;\n    while (d >= m) {\n      c += 1;\n      m *= base;\n    }\n\
    \    r = String::concat(r, String::from(c));\n    r = String::concat(r, String::from(d));\n\
    \  }\n  return r;", "  let s = String::from(x);\n  let n = s.len;\n  let r = String::from(0);\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n\
    \ = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n\
    \  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y\
    \ = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n\
    \  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j\
    \ = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n\
    \  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u\
    \ = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n\
    \  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f\
    \ = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\
    \  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q\
    \ = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n\
    \  let w = 0;\n  let x = 0;\n  let y = 0", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let r = String::from(\"\
    0\");\n  let c = String::from(\"0\");\n  let d = String::from(\"0\");\n  let e\
    \ = String::from(\"0\");\n  let f = String::from(\"0\");\n  let g = String::from(\"\
    0\");\n  let h = String::from(\"0\");\n  let l = String::from(\"0\");\n  let m\
    \ = String::from(\"0\");\n  let o = String::from(\"0\");\n  let p = String::from(\"\
    0\");\n  let q = String::from(\"0\");\n  let r = String::from(\"0\");\n  let s\
    \ = String::from(\"0\");\n  let t = String::from(\"0\");\n  let u = String::from(\"\
    0\");\n  let v = String::from(\"0\");\n  let w = String::from(\"0\");\n  let x\
    \ = String::from(\"0\");\n  let y = String::from(\"0\");\n  let z = String::from(\"\
    0\");\n  let a = String::from(\"0\");\n  let b = String::from(\"0\");\n  let c\
    \ = String::from(\"0\");\n  let d = String::from(\"0\");\n  let e = String::from(\"\
    0\");\n  let f = String::from(\"0\");\n  let g = String::from(\"0\");\n  let h\
    \ = String::from(\"0\");\n  let i = String::from(\"0\");\n  let j = String::from(\"\
    0\");\n  let k = String::from(\"0\");\n  let l = String::from(\"0\");\n  let m\
    \ = String::from(\"0\");\n  let n = String::from(\"0\");\n  let o = String::from(\"\
    0\");\n  let p = String::from(\"0\");\n  let q = String::from(\"0\");\n  let r\
    \ = String::from(\"0\");\n  let s = String::from(\"0\");\n  let t = String::from(\"\
    0\");\n  let u = String::from(\"0\");\n  let v = String::from(\"0", "  let n =\
    \ x;\n  let s = String::from(n);\n  let b = String::from(base);\n  let i = 0;\n\
    \  let j = 0;\n  let k = 0;\n  let r = String::new(0);\n  while (i < s.len) {\n\
    \    let c = s.data[i];\n    let d = c - '0';\n    if (d >= base) {\n      throw\
    \ \"Invalid base\";\n    }\n    let e = d * base + k;\n    k = e / base;\n   \
    \ r = r.concat(String::from(e % base));\n    i += 1;\n  }\n  r = r.concat(b);\n\
    \  return r;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  let\
    \ r = String::from(\"0\");\n  while (n > 0) {\n    let d = n % base;\n    n =\
    \ n / base;\n    r = String::from(d) + r;\n    i++;\n  }\n  if (i == 0) {\n  \
    \  return r;\n  }\n  let r2 = String::from(\"0\");\n  while (i > 0) {\n    let\
    \ d = r[i - 1];\n    r2 = String::from(d) + r2;\n    i--;\n  }\n  return r2;",
  "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n\
    \    let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n      break;\n\
    \    }\n    let r = d * base;\n    s = s.sub(i, 1) + String::from(r);\n    i +=\
    \ 1;\n  }\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n  let\
    \ r = String::from(\"0\");\n  for i in 0..n {\n    let d = s[i];\n    let c =\
    \ d.to_i() * base;\n    r = r.concat(String::from(c));\n  }\n  return r;", " \
    \ let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n \
    \ let i = 0;\n  let j = 0;\n  let k = 0;\n  let m = 0;\n  let c = 0;\n  let d\
    \ = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let l = 0;\n\
    \  let z = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s\
    \ = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n\
    \  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d\
    \ = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n\
    \  let j = 0;\n  let k = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p\
    \ = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n\
    \  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a\
    \ = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n\
    \  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m\
    \ = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n\
    \  let s = 0;\n  let t = 0;\n  let u = 0", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let r = String::from(\"0\");\n  while\
    \ (i < s.len) {\n    let c = s[i];\n    let d = base;\n    let e = 0;\n    while\
    \ (e < d) {\n      let f = c - '0';\n      let g = f % d;\n      r = r.concat(String::from(g));\n\
    \      c = c - '0';\n      e = e + 1;\n    }\n    i = i + 1;\n  }\n  return r;",
  "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  let b = String::from(base);\n  let bn = b.len();\n  while (i < n) {\n\
    \    let d = s[i];\n    let j = i + 1;\n    while (j < n && d == s[j]) {\n   \
    \   j += 1;\n    }\n    let k = j - i;\n    let c = String::from(d);\n    let\
    \ cn = c.len();\n    let rn = r.len();\n    let rn_1 = rn - 1;\n    let rn_2 =\
    \ rn - 2;\n    let rn_3 = rn - 3;\n    let rn_4 = rn - 4;\n    let rn_5 = rn -\
    \ 5;\n    let rn_6 = rn - 6;\n    let rn_7 = rn - 7;\n    let rn_8 = rn - 8;\n\
    \    let rn_9 = rn - 9;\n    let rn_10 = rn - 10;\n    let rn_11 = rn - 11;\n\
    \    let rn_12 = rn - 12;\n    let rn_13 = rn - 13;\n    let rn_14 = rn - 14;\n\
    \    let rn_15 = rn - 15;\n    let rn_16 = rn - 16;\n    let rn_17 = rn - 17;\n\
    \    let rn_18 = rn - 18;\n    let rn_19 = rn - 19;\n    let rn_20 = rn - 20;\n\
    \    let rn_21 = rn - 21;\n    let rn_22 = rn - 22;\n    let rn_23 = rn - 23;\n\
    \    let rn_24 = rn - 24;\n    let rn_25 = rn - 25;\n    let rn_26 = rn - 26;\n\
    \    let rn_27 = rn - 27;\n    let rn_28 = rn - 28", "  let n = x;\n  let s =\
    \ String::from(n);\n  let b = String::from(base);\n  let sb = String::from(b);\n\
    \  let sb_len = sb.len();\n  let sb_digits = sb.chars();\n  let sb_digits_len\
    \ = sb_digits.len();\n  let sb_digits_digits = sb_digits.chars();\n  let sb_digits_digits_len\
    \ = sb_digits_digits.len();\n  let sb_digits_digits_digits = sb_digits_digits.chars();\n\
    \  let sb_digits_digits_digits_len = sb_digits_digits_digits.len();\n  let sb_digits_digits_digits_digits\
    \ = sb_digits_digits_digits.chars();\n  let sb_digits_digits_digits_digits_len\
    \ = sb_digits_digits_digits_digits.len();\n  let sb_digits_digits_digits_digits_digits\
    \ = sb_digits_digits_digits_digits.chars();\n  let sb_digits_digits_digits_digits_digits_len\
    \ = sb_digits_digits_digits_digits_digits.len();\n  let sb_digits_digits_digits_digits_digits_digits\
    \ = sb_digits_digits_digits_digits_digits.chars();\n  let sb_digits_digits_digits_digits_digits_digits_len\
    \ = sb_digits_digits_digits_digits_digits_digits.len();\n  let sb_digits_digits_digits_digits_digits_digits_digits\
    \ = sb_digits_digits_digits_digits_digits_digits.chars();\n  let sb_digits_digits_digits_digits_digits_digits_",
  "  let s = String::from(x);\n  let n = s.len;\n  let r = String::from(\"0\");\n\
    \  let i = 0;\n  while (i < n) {\n    let d = s[i];\n    let c = d.to_i();\n \
    \   let r = String::from(c);\n    let r = r + r;\n    let r = r + r;\n    let\
    \ r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n   \
    \ let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n    let r = r + r;\n\
    \    let r = r + r;\n    let r = r + r;\n    let", "  let result = String::from(x);\n\
    \  let n = base;\n  while (n > 1) {\n    let d = x % n;\n    x = x / n;\n    result\
    \ = String::from(d) + result;\n    n = n / base;\n  }\n  return result;", "  let\
    \ s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  let c = String::from(\"0\");\n  let b = String::from(base);\n  for (i\
    \ = n - 1; i >= 0; i--) {\n    let d = s[i] - '0';\n    let p = b[i] - '0';\n\
    \    r = String::from(d * p) + r;\n    c = String::from(d) + c;\n  }\n  return\
    \ c + r;", "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let\
    \ s2 = String::from(0);\n  let s3 = String::from(0);\n  let s4 = String::from(0);\n\
    \  let s5 = String::from(0);\n  let s6 = String::from(0);\n  let s7 = String::from(0);\n\
    \  let s8 = String::from(0);\n  let s9 = String::from(0);\n  let s10 = String::from(0);\n\
    \  let s11 = String::from(0);\n  let s12 = String::from(0);\n  let s13 = String::from(0);\n\
    \  let s14 = String::from(0);\n  let s15 = String::from(0);\n  let s16 = String::from(0);\n\
    \  let s17 = String::from(0);\n  let s18 = String::from(0);\n  let s19 = String::from(0);\n\
    \  let s20 = String::from(0);\n  let s21 = String::from(0);\n  let s22 = String::from(0);\n\
    \  let s23 = String::from(0);\n  let s24 = String::from(0);\n  let s25 = String::from(0);\n\
    \  let s26 = String::from(0);\n  let s27 = String::from(0);\n  let s28 = String::from(0);\n\
    \  let s29 = String::from(0);\n  let s30 = String::from(0);\n  let s31 = String::from(0);\n\
    \  let s32 = String::from(0);\n  let s33 = String::from(0);\n  let s34 = String::from(0);\n\
    \  let s35 = String::from(0);\n  let s36 = String::from(0);\n  let s37 = String::from(0);\n\
    \  let s38 = String::from(0);\n  let s39 = String::from(0);\n  let s40 = String::from(0);\n\
    \  let s41 = String::from(0);\n  let s42 =", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let i = 0;\n  let r = String::from(\"0\");\n  let r_len = r.len();\n\
    \  let r_i = 0;\n  let r_j = 0;\n  let r_k = 0;\n  let r_l = 0;\n  let r_m = 0;\n\
    \  let r_n = 0;\n  let r_o = 0;\n  let r_p = 0;\n  let r_q = 0;\n  let r_r = 0;\n\
    \  let r_s = 0;\n  let r_t = 0;\n  let r_u = 0;\n  let r_v = 0;\n  let r_w = 0;\n\
    \  let r_x = 0;\n  let r_y = 0;\n  let r_z = 0;\n  let r_a = 0;\n  let r_b = 0;\n\
    \  let r_c = 0;\n  let r_d = 0;\n  let r_e = 0;\n  let r_f = 0;\n  let r_g = 0;\n\
    \  let r_h = 0;\n  let r_i = 0;\n  let r_j = 0;\n  let r_k = 0;\n  let r_l = 0;\n\
    \  let r_m = 0;\n  let r_n = 0;\n  let r_o = 0;\n  let r_p = 0;\n  let r_q = 0;\n\
    \  let r_r = 0;\n  let r_s = 0;\n  let r_t = 0;\n  let r_u = 0;\n  let r_v = 0;\n\
    \  let r_w = 0;\n  let r_x = 0;\n  let r_y = 0;\n  let r_z = 0;\n  let r_a = 0;\n\
    \  let r_b = 0;\n  let r_c = 0;\n  let r_d = 0;\n  let r_e = 0;\n  let r_f = 0;\n\
    \  let r_g = 0;\n  let r_", "  let s = String::from(x);\n  let n = s.len;\n  let\
    \ i = 0;\n  let r = String::from(\"0\");\n  let c = String::from(\"0\");\n  let\
    \ b = String::from(base);\n  while (i < n) {\n    let d = s[i];\n    let p = b.len;\n\
    \    let q = 0;\n    while (q < p) {\n      let e = b[q];\n      if (d < e) {\n\
    \        r = r.concat(String::from(d));\n        i++;\n        if (i < n) {\n\
    \          r = r.concat(String::from(s[i]));\n        }\n        break;\n    \
    \  }\n      q++;\n    }\n    if (q == p) {\n      r = r.concat(String::from(d));\n\
    \      i++;\n    }\n  }\n  return r;", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = 0;\n    if\
    \ (c >= '0' && c <= '9') {\n      d = c - '0';\n    } else if (c >= 'a' && c <=\
    \ 'z') {\n      d = c - 'a' + 10;\n    } else if (c >= 'A' && c <= 'Z') {\n  \
    \    d = c - 'A' + 10;\n    } else {\n      d = 0;\n    }\n    let r = d * base;\n\
    \    s = s.sub(i, 1) + String::from(r);\n    i += 1;\n  }\n  return s;", "  let\
    \ s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::new(n);\n\
    \  let j = 0;\n  let k = 0;\n  let m = 0;\n  let c = 0;\n  let d = 0;\n  let e\
    \ = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let l = 0;\n  let p = 0;\n\
    \  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v\
    \ = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n\
    \  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g\
    \ = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m = 0;\n\
    \  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s\
    \ = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n\
    \  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d\
    \ = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n\
    \  let j = 0;\n  let k = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p\
    \ = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n\
    \  let v = 0;\n  let w = 0", "  let result = String::from(x);\n  let base_digits\
    \ = String::from(base);\n  let base_digits_len = base_digits.len();\n  let result_len\
    \ = result.len();\n  let result_digits = String::from(0);\n  let result_digits_len\
    \ = result_digits.len();\n  let result_digits_index = 0;\n  let result_digits_index_base\
    \ = 0;\n  let result_digits_index_base_len = 0;\n  let result_digits_index_base_len_base\
    \ = 0;\n  let result_digits_index_base_len_base_len = 0;\n  let result_digits_index_base_len_base_len_base\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len = 0;\n  let result_digits_index_base_len_base_len_base_len_base\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len = 0;\n \
    \ let result_digits_index_base_len_base_len_base_len_base_len_base = 0;\n  let\
    \ result_digits_index_base_len_base_len_base_len_base_len_base_len = 0;\n  let\
    \ result_digits_index_base_len_base_len_base_len_base_len_base_len_base = 0;\n\
    \  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len_base\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len_base_len\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len_base_len_base",
  "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let result = String::new(n\
    \ * base);\n  while (i < n) {\n    let digit = s[i];\n    let digit_value = digit.to_i();\n\
    \    let digit_value_in_base = digit_value.to_i() * base;\n    let digit_value_in_base_str\
    \ = String::from(digit_value_in_base);\n    let digit_value_in_base_str_len =\
    \ digit_value_in_base_str.len();\n    let digit_value_in_base_str_str = String::from(digit_value_in_base_str);\n\
    \    let digit_value_in_base_str_str_len = digit_value_in_base_str_str.len();\n\
    \    let digit_value_in_base_str_str_str = String::from(digit_value_in_base_str_str);\n\
    \    let digit_value_in_base_str_str_str_len = digit_value_in_base_str_str_str.len();\n\
    \    let digit_value_in_base_str_str_str_str = String::from(digit_value_in_base_str_str_str);\n\
    \    let digit_value_in_base_str_str_str_str_len = digit_value_in_base_str_str_str_str.len();\n\
    \    let digit_value_in_base_str_str_str_str_str = String::from(digit_value_in_base_str_str_str_str);\n\
    \    let digit_value_in_base_str_str_str_str_str_len = digit_value_in_base_str_str_str_str_str.len();\n\
    \    let digit_value_in_base_str_str_str_str_str_str = String::from(digit_value_in_base_str_str_str_str_str);\n\
    \    let digit_value_in_base_str_str_str_str_str_str_len = digit_value_in_base_str_",
  "  let n = x;\n  let s = String::from(n);\n  let b = String::from(base);\n  let\
    \ r = String::from(0);\n  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n\
    \    let d = b[i];\n    let e = c - d;\n    if (e < 0) {\n      e = e + 10;\n\
    \    }\n    r = r + String::from(e);\n    i = i + 1;\n  }\n  return r;", "  let\
    \ s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  let c = String::from(\"0\");\n  let b = String::from(\"0\");\n  let m\
    \ = String::from(\"0\");\n  let r_ = String::from(\"0\");\n  let c_ = String::from(\"\
    0\");\n  let b_ = String::from(\"0\");\n  let m_ = String::from(\"0\");\n  let\
    \ r_n = String::from(\"0\");\n  let c_n = String::from(\"0\");\n  let b_n = String::from(\"\
    0\");\n  let m_n = String::from(\"0\");\n  let r_n_ = String::from(\"0\");\n \
    \ let c_n_ = String::from(\"0\");\n  let b_n_ = String::from(\"0\");\n  let m_n_\
    \ = String::from(\"0\");\n  let r_n_n = String::from(\"0\");\n  let c_n_n = String::from(\"\
    0\");\n  let b_n_n = String::from(\"0\");\n  let m_n_n = String::from(\"0\");\n\
    \  let r_n_n_ = String::from(\"0\");\n  let c_n_n_ = String::from(\"0\");\n  let\
    \ b_n_n_ = String::from(\"0\");\n  let m_n_n_ = String::from(\"0\");\n  let r_n_n_n\
    \ = String::from(\"0\");\n  let c_n_n_n = String::from(\"0\");\n  let b_n_n_n\
    \ = String::from(\"0\");\n  let m_n_n_n = String::from(\"0\");\n  let r_n_n_n_\
    \ = String::from(\"0\");\n  let c_n_n_n_ = String::from(\"0\");\n  let b_n_n_n_\
    \ = String::from(\"0\");\n  let m_n_n_n_ = String::from(\"0\");\n  let r_n_n_n_n\
    \ = String::from(\"0\");\n  let", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = 0;\n  let r_str = String::from(0);\n  let r_str_len =\
    \ 0;\n  let r_str_str = String::from(0);\n  let r_str_str_len = 0;\n  let r_str_str_str\
    \ = String::from(0);\n  let r_str_str_str_len = 0;\n  let r_str_str_str_str =\
    \ String::from(0);\n  let r_str_str_str_str_len = 0;\n  let r_str_str_str_str_str\
    \ = String::from(0);\n  let r_str_str_str_str_str_len = 0;\n  let r_str_str_str_str_str_str\
    \ = String::from(0);\n  let r_str_str_str_str_str_str_len = 0;\n  let r_str_str_str_str_str_str_str\
    \ = String::from(0);\n  let r_str_str_str_str_str_str_str_len = 0;\n  let r_str_str_str_str_str_str_str_str\
    \ = String::from(0);\n  let r_str_str_str_str_str_str_str_str_len = 0;\n  let\
    \ r_str_str_str_str_str_str_str_str_str = String::from(0);\n  let r_str_str_str_str_str_str_str_str_str_len\
    \ = 0;\n  let r_str_str_str_str_str_str_str_str_str_str = String::from(0);\n \
    \ let r_str_str_str_str_str_str_str_str_str_str_len = 0;\n  let r_str_str_str_str_str_str_str_str_str_str_str\
    \ = String::from(0);\n  let r_str_str_str_str_str_str_str_str_str_str_str", " \
    \ let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n \
    \ let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let p\
    \ = 0;\n  let q = 0;\n  let r_ = 0;\n  let s_ = 0;\n  let t_ = 0;\n  let u_ =\
    \ 0;\n  let v_ = 0;\n  let w_ = 0;\n  let x_ = 0;\n  let y_ = 0;\n  let z_ = 0;\n\
    \  let a_ = 0;\n  let b_ = 0;\n  let c_ = 0;\n  let d_ = 0;\n  let e_ = 0;\n \
    \ let f_ = 0;\n  let g_ = 0;\n  let h_ = 0;\n  let i_ = 0;\n  let j_ = 0;\n  let\
    \ k_ = 0;\n  let l_ = 0;\n  let m_ = 0;\n  let n_ = 0;\n  let o_ = 0;\n  let p_\
    \ = 0;\n  let q_ = 0;\n  let r__ = 0;\n  let s__ = 0;\n  let t__ = 0;\n  let u__\
    \ = 0;\n  let v__ = 0;\n  let w__ = 0;\n  let x__ = 0;\n  let y__ = 0;\n  let\
    \ z__ = 0;\n  let a__ = 0;\n  let b__ = 0;\n  let c__ = 0;\n  let d__ = 0;\n \
    \ let e__ = 0;\n  let f__ = 0;\n  let g__ = 0;\n  let h__ = 0;\n  let i__ = 0;\n\
    \  let j__ = 0;\n  let k__ = 0;\n  let l__ = 0;\n  let m__ = 0;\n  let n__ = 0;\n\
    \  let o__ = 0;\n  let p__ = 0;\n  let q__ = 0;\n  let r___ = 0;\n  let s___ =\
    \ 0;\n", "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let\
    \ j = 0;\n  let sb = String::from(\"0\");\n  let sb_len = sb.len();\n  let sb_i\
    \ = 0;\n  let sb_j = 0;\n  let sb_base = base;\n  let sb_base_len = sb_base.len();\n\
    \  let sb_base_i = 0;\n  let sb_base_j = 0;\n  let sb_base_base = sb_base.len();\n\
    \  let sb_base_base_len = sb_base_base.len();\n  let sb_base_base_i = 0;\n  let\
    \ sb_base_base_j = 0;\n  let sb_base_base_base = sb_base_base.len();\n  let sb_base_base_base_len\
    \ = sb_base_base_base.len();\n  let sb_base_base_base_i = 0;\n  let sb_base_base_base_j\
    \ = 0;\n  let sb_base_base_base_base = sb_base_base_base.len();\n  let sb_base_base_base_base_len\
    \ = sb_base_base_base_base.len();\n  let sb_base_base_base_base_i = 0;\n  let\
    \ sb_base_base_base_base_j = 0;\n  let sb_base_base_base_base_base = sb_base_base_base_base.len();\n\
    \  let sb_base_base_base_base_base_len = sb_base_base_base_base_base.len();\n\
    \  let sb_base_base_base_base_base_i = 0;\n  let sb_base_base_base_base_base_j\
    \ = 0;\n  let sb_base_base_base_base_base_base = sb_base_base_base_base_base.len();\n\
    \  let sb_base_base_base_base_", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = 0;\n  let sb = String::from(base);\n  let b = sb.len();\n\
    \  let rb = 0;\n  let rb_len = 0;\n  let rb_str = String::from(base);\n  let rb_str_len\
    \ = rb_str.len();\n  let rb_str_str = String::from(base);\n  let rb_str_str_len\
    \ = rb_str_str.len();\n  let rb_str_str_str = String::from(base);\n  let rb_str_str_str_len\
    \ = rb_str_str_str.len();\n  let rb_str_str_str_str = String::from(base);\n  let\
    \ rb_str_str_str_str_len = rb_str_str_str_str.len();\n  let rb_str_str_str_str_str\
    \ = String::from(base);\n  let rb_str_str_str_str_str_len = rb_str_str_str_str_str.len();\n\
    \  let rb_str_str_str_str_str_str = String::from(base);\n  let rb_str_str_str_str_str_str_len\
    \ = rb_str_str_str_str_str_str.len();\n  let rb_str_str_str_str_str_str_str =\
    \ String::from(base);\n  let rb_str_str_str_str_str_str_str_len = rb_str_str_str_str_str_str_str.len();\n\
    \  let rb_str_str_str_str_str_str_str_str = String::from(base);\n  let rb_str_str_str_str_str_str_str_str_len\
    \ = rb_str_str_str_str_str_str_str_str.len();\n  let rb_str_str_str_str_str_str_str_str_str",
  "  let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n  for\
    \ (i in 0..n) {\n    let d = s[i];\n    let c = d.to_i() * base;\n    r = r.concat(String::from(c));\n\
    \  }\n  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let r =\
    \ String::from(0);\n  let i = 0;\n  while (i < n) {\n    let d = s[i];\n    let\
    \ c = String::from(d);\n    let j = 0;\n    while (j < c.len()) {\n      let e\
    \ = c[j];\n      let f = String::from(e);\n      let m = String::from(0);\n  \
    \    let k = 0;\n      while (k < base) {\n        let g = String::from(k);\n\
    \        let h = String::from(0);\n        let l = 0;\n        while (l < g.len())\
    \ {\n          let p = g[l];\n          let q = String::from(p);\n          let\
    \ n = String::from(0);\n          let o = 0;\n          while (o < q.len()) {\n\
    \            let r = q[o];\n            let s = String::from(r);\n           \
    \ let t = String::from(0);\n            let u = 0;\n            while (u < s.len())\
    \ {\n              let v = s[u];\n              let w = String::from(v);\n   \
    \           let x = String::from(0);\n              let y = 0;\n             \
    \ while (y < w.len()) {\n                let z = w[y];\n                let A\
    \ = String::from(z);\n                let B = String::from(0);\n             \
    \   let C = 0;\n                while (C < A.len()) {\n                  let D\
    \ = A[C];\n                  let E = String::from(D);\n                  let F\
    \ = String::from(0);\n                  let G = 0;\n                  while (G\
    \ < E.len()) {\n                    let H = E[G];\n                    let I =\
    \ String::from(H);\n                    let J = String::from(0);\n           \
    \         let K = 0;\n                    while (K < I.len()) {\n            \
    \          let L = I[K];\n                      let M = String::from(L);\n   \
    \                   let N = String::from(0);\n                      let O = 0;\n\
    \                      while (O < M.len", "  let s = String::from(x);\n  let n\
    \ = s.len();\n  let r = String::from(0);\n  for (i in 0..n) {\n    let c = s[i];\n\
    \    let d = c - '0';\n    let m = base ** i;\n    r = r.concat(String::from(d\
    \ * m));\n  }\n  return r;", "  let n = x;\n  let s = String::from(n);\n  let\
    \ i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = base;\n    let\
    \ r = 0;\n    while (d > 0) {\n      d = d / 10;\n      r = r * 10 + c % 10;\n\
    \      c = c / 10;\n    }\n    s = s.sub(i, i + 1);\n    s = String::from(r);\n\
    \    i = 0;\n  }\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = String::from(\"0\");\n  let m = String::from(\"\");\n\
    \  let c = String::from(\"\");\n  let d = String::from(\"\");\n  let t = String::from(\"\
    \");\n  let r_len = r.len();\n  let m_len = m.len();\n  let c_len = c.len();\n\
    \  let d_len = d.len();\n  let t_len = t.len();\n  let r_pos = 0;\n  let m_pos\
    \ = 0;\n  let c_pos = 0;\n  let d_pos = 0;\n  let t_pos = 0;\n  let r_pos_end\
    \ = r_len - 1;\n  let m_pos_end = m_len - 1;\n  let c_pos_end = c_len - 1;\n \
    \ let d_pos_end = d_len - 1;\n  let t_pos_end = t_len - 1;\n  let r_pos_start\
    \ = 0;\n  let m_pos_start = 0;\n  let c_pos_start = 0;\n  let d_pos_start = 0;\n\
    \  let t_pos_start = 0;\n  let r_pos_inc = 1;\n  let m_pos_inc = 1;\n  let c_pos_inc\
    \ = 1;\n  let d_pos_inc = 1;\n  let t_pos_inc = 1;\n  let r_pos_dec = -1;\n  let\
    \ m_pos_dec = -1;\n  let c_pos_dec = -1;\n  let d_pos_dec = -1;\n  let t_pos_dec\
    \ = -1;\n  let r_pos_dec_end = -1;\n  let m_pos_dec_end = -1;\n  let c_pos_dec_end\
    \ = -1;\n  let d_pos_dec_end = -1;\n  let t_pos_dec_end = -1;\n  let r_pos_dec_start\
    \ = 0;\n  let m_pos_", "  let s = String::from(x);\n  let n = s.len();\n  let\
    \ r = String::from(0);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m = 0;\n\
    \  let p = 0;\n  let q = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w\
    \ = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n\
    \  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h\
    \ = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n\
    \  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s\
    \ = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n\
    \  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d\
    \ = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n\
    \  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o\
    \ = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n\
    \  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z\
    \ = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0", "  let s = String::from(x);\n\
    \  let n = s.len;\n  let i = 0;\n  let r = 0;\n  let c = 0;\n  let r_str = String::from(\"\
    \");\n  let c_str = String::from(\"\");\n  let r_str_len = 0;\n  let c_str_len\
    \ = 0;\n  let r_str_len_max = 0;\n  let c_str_len_max = 0;\n  let r_str_len_min\
    \ = 0;\n  let c_str_len_min = 0;\n  let r_str_len_max_min = 0;\n  let c_str_len_max_min\
    \ = 0;\n  let r_str_len_max_min_max = 0;\n  let c_str_len_max_min_max = 0;\n \
    \ let r_str_len_max_min_max_min = 0;\n  let c_str_len_max_min_max_min = 0;\n \
    \ let r_str_len_max_min_max_min_max = 0;\n  let c_str_len_max_min_max_min_max\
    \ = 0;\n  let r_str_len_max_min_max_min_max_min = 0;\n  let c_str_len_max_min_max_min_max_min\
    \ = 0;\n  let r_str_len_max_min_max_min_max_min_max = 0;\n  let c_str_len_max_min_max_min_max_min_max\
    \ = 0;\n  let r_str_len_max_min_max_min_max_min_max_min = 0;\n  let c_str_len_max_min_max_min_max_min_max_min\
    \ = 0;\n  let r_str_len_max_min_max_min_max_min_max_min_max = 0;\n  let c_str_len_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n  let r_str_len_max_min_max_min_max_min", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c.to_i()\
    \ * base;\n    s = s.sub(i, 1) + String::from(d);\n    i += 1;\n  }\n  return\
    \ s;", "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r\
    \ = String::from(\"0\");\n  let c = String::from(\"0\");\n  let m = String::from(\"\
    0\");\n  let d = String::from(\"0\");\n  let e = String::from(\"0\");\n  let f\
    \ = String::from(\"0\");\n  let g = String::from(\"0\");\n  let h = String::from(\"\
    0\");\n  let j = String::from(\"0\");\n  let k = String::from(\"0\");\n  let l\
    \ = String::from(\"0\");\n  let m1 = String::from(\"0\");\n  let m2 = String::from(\"\
    0\");\n  let m3 = String::from(\"0\");\n  let m4 = String::from(\"0\");\n  let\
    \ m5 = String::from(\"0\");\n  let m6 = String::from(\"0\");\n  let m7 = String::from(\"\
    0\");\n  let m8 = String::from(\"0\");\n  let m9 = String::from(\"0\");\n  let\
    \ m10 = String::from(\"0\");\n  let m11 = String::from(\"0\");\n  let m12 = String::from(\"\
    0\");\n  let m13 = String::from(\"0\");\n  let m14 = String::from(\"0\");\n  let\
    \ m15 = String::from(\"0\");\n  let m16 = String::from(\"0\");\n  let m17 = String::from(\"\
    0\");\n  let m18 = String::from(\"0\");\n  let m19 = String::from(\"0\");\n  let\
    \ m20 = String::from(\"0\");\n  let m21 = String::from(\"0\");\n  let m22 = String::from(\"\
    0\");\n  let m23 = String::from(\"0\");\n  let m24 = String::from(\"0\");\n  let\
    \ m25 = String::from(\"0\");\n  let m26 = String::from(\"0\");\n  let m27 = String::from(\"\
    0\");\n  let m28 = String::from(\"0\");\n  let m29 = String::from(\"0\");\n  let\
    \ m30 = String::from(\"0\");\n  let m31", "  let s = String::from(x);\n  let n\
    \ = s.len();\n  let i = 0;\n  let r = String::from(\"0\");\n  while (i < n) {\n\
    \    let c = s[i];\n    let d = base;\n    while (d > 10) {\n      d /= 10;\n\
    \    }\n    let r = String::from(d) + r;\n    i += 1;\n  }\n  return r;", "  let\
    \ result = String::from(x);\n  let base_digits = String::from(base);\n  let base_len\
    \ = base_digits.len;\n  let result_len = result.len;\n  let result_digits = String::from(0);\n\
    \  let result_digits_len = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let\
    \ carry = 0;\n  while (i < result_len) {\n    let digit = result[i];\n    let\
    \ digit_base = digit.to_i() * base;\n    let digit_base_len = digit_base.len;\n\
    \    let digit_base_digits = String::from(digit_base);\n    let digit_base_digits_len\
    \ = digit_base_digits.len;\n    let digit_base_digits_i = 0;\n    let digit_base_digits_j\
    \ = 0;\n    let digit_base_digits_k = 0;\n    while (digit_base_digits_i < digit_base_digits_len)\
    \ {\n      let digit_base_digit = digit_base_digits[digit_base_digits_i];\n  \
    \    let digit_base_digit_base = digit_base_digit.to_i();\n      let digit_base_digit_base_len\
    \ = digit_base_digit_base.len;\n      let digit_base_digit_base_digits = String::from(digit_base_digit_base);\n\
    \      let digit_base_digit_base_digits_len = digit_base_digit_base_digits.len;\n\
    \      let digit_base_digit_base_digits_i = 0;\n      let digit_base_digit_base_digits_j\
    \ = 0;\n      let digit_base_digit_base_digits_k = 0;\n      while (digit_base_digit_base_digits_i\
    \ < digit_base_digit_base_digits_len) {\n        let digit_base_digit_base_digit\
    \ = digit_base_digit_base_digits[digit_base_digit_base_digits_i];\n        let\
    \ digit_base_digit", "  let result = String::from(x);\n  for i in 0..result.len()\
    \ {\n    let digit = result[i];\n    let new_digit = digit.to_i() * base;\n  \
    \  let new_digit_str = String::from(new_digit);\n    result = result.replace(i,\
    \ 1, new_digit_str);\n  }\n  return result;", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let digits = [0];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\
    \  let carry = 0;\n  while (i < n) {\n    let digit = s[i];\n    if (digit >=\
    \ '0' && digit <= '9') {\n      digits[j] = digit - '0';\n      j += 1;\n    }\
    \ else if (digit >= 'a' && digit <= 'z') {\n      digits[j] = digit - 'a' + 10;\n\
    \      j += 1;\n    } else if (digit >= 'A' && digit <= 'Z') {\n      digits[j]\
    \ = digit - 'A' + 10;\n      j += 1;\n    } else {\n      digits[j] = 0;\n   \
    \   j += 1;\n    }\n    i += 1;\n  }\n  while (j > 0) {\n    let digit = digits[j\
    \ - 1];\n    if (digit > 0) {\n      digits[k] = digit;\n      k += 1;\n    }\
    \ else {\n      digits[k] = carry;\n      carry = 0;\n      k += 1;\n    }\n \
    \   j -= 1;\n  }\n  if (carry > 0) {\n    digits[k] = carry;\n    k += 1;\n  }\n\
    \  let sb = String::from(base);\n  let nb = sb.len();\n  let sb_digits = [0];\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let carry = 0;\n  while (i < nb)\
    \ {\n    let digit = sb[i];\n    if (digit >= '0' && digit <= '9') {\n      sb_digits[j]\
    \ = digit - '0';\n      j += 1;\n    } else {\n      sb_digits[j] = 0;\n     \
    \ j += 1;\n    }\n    i += 1;\n  }\n  while (j > 0) {\n    let digit = sb_digits[j\
    \ - 1];", "  let result = String::from(x);\n  let base_digits = String::from(base);\n\
    \  let base_digits_len = base_digits.len;\n  let result_len = result.len;\n  let\
    \ result_digits = String::from(0);\n  let result_digits_len = result_digits.len;\n\
    \  let result_digits_index = 0;\n  let result_digits_index_end = 0;\n  let result_digits_index_start\
    \ = 0;\n  let result_digits_index_start_end = 0;\n  let result_digits_index_start_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end = 0;\n  let result_digits_index_start_end_end_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end_end_end = 0;\n  let result_digits_index_start_end_end_end_end_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end_end_end_end_end = 0;\n  let\
    \ result_digits_index_start_end_end_end_end_end_end_end_end = 0;\n  let result_digits_index_start_end_end_end_end_end_end_end_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n  let result_digits_index_start_end_end_end_end_end_end_end", "  let s\
    \ = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  let c = String::from(\"0\");\n  let m = String::from(\"0\");\n  let d\
    \ = String::from(\"0\");\n  let p = String::from(\"0\");\n  let q = String::from(\"\
    0\");\n  let r_ = String::from(\"0\");\n  let c_ = String::from(\"0\");\n  let\
    \ m_ = String::from(\"0\");\n  let d_ = String::from(\"0\");\n  let p_ = String::from(\"\
    0\");\n  let q_ = String::from(\"0\");\n  let r__ = String::from(\"0\");\n  let\
    \ c__ = String::from(\"0\");\n  let m__ = String::from(\"0\");\n  let d__ = String::from(\"\
    0\");\n  let p__ = String::from(\"0\");\n  let q__ = String::from(\"0\");\n  let\
    \ r___ = String::from(\"0\");\n  let c___ = String::from(\"0\");\n  let m___ =\
    \ String::from(\"0\");\n  let d___ = String::from(\"0\");\n  let p___ = String::from(\"\
    0\");\n  let q___ = String::from(\"0\");\n  let r____ = String::from(\"0\");\n\
    \  let c____ = String::from(\"0\");\n  let m____ = String::from(\"0\");\n  let\
    \ d____ = String::from(\"0\");\n  let p____ = String::from(\"0\");\n  let q____\
    \ = String::from(\"0\");\n  let r_____ = String::from(\"0\");\n  let c_____ =\
    \ String::from(\"0\");\n  let m_____ = String::from(\"0\");\n  let d_____ = String::from(\"\
    0\");\n  let p_____ = String::from(\"0\");\n  let q_____ = String::from(\"0\"\
    );\n  let r______ = String::from(\"0\");\n  let c______ = String::from(\"0\");\n\
    \  let m______ =", "  let result = String::from(x);\n  let digits = result.chars();\n\
    \  let n = digits.len();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let carry\
    \ = 0;\n  let digit = 0;\n  let digit_base = 0;\n  let digit_value = 0;\n  let\
    \ digit_value_base = 0;\n  let digit_value_base_new = 0;\n  let digit_value_base_new_new\
    \ = 0;\n  let digit_value_base_new_new_new = 0;\n  let digit_value_base_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new_new_new = 0;\n  let digit_value_base_new_new_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new_new_new_new_new = 0;\n  let digit_value_base_new_new_new_new_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new_new_new_new_new_new_new = 0;\n  let\
    \ digit_value_base_new_new_new_new_new_new_new_new_new_new = 0;\n  let digit_value_base_new_new_new_new_new_new_new_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new_new_new_new_new_new_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new_new_new_new_new_new_new_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new_new_new_new_new_new_new_new_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new\
    \ = 0;\n  let digit_value_base_new_new_new", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let digits = [0];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\
    \  while (i < n) {\n    let c = s[i];\n    if (c >= '0' && c <= '9') {\n     \
    \ digits[j] = digits[j] * base + c - '0';\n      i += 1;\n    } else if (c >=\
    \ 'a' && c <= 'z') {\n      digits[j] = digits[j] * base + c - 'a' + 10;\n   \
    \   i += 1;\n    } else if (c >= 'A' && c <= 'Z') {\n      digits[j] = digits[j]\
    \ * base + c - 'A' + 10;\n      i += 1;\n    } else {\n      digits[j] = digits[j]\
    \ * base + 10;\n      i += 1;\n    }\n    j += 1;\n  }\n  let s = String::from(digits[k]);\n\
    \  while (j < k) {\n    s = s + String::from(digits[j]);\n    j += 1;\n  }\n \
    \ return s;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  let r\
    \ = String::from(\"0\");\n  while (i < s.len) {\n    let c = s[i];\n    let d\
    \ = c - '0';\n    let m = base;\n    let p = 1;\n    while (m > d) {\n      m\
    \ /= base;\n      p *= base;\n    }\n    r = String::concat(r, String::from(p));\n\
    \    i += 1;\n  }\n  return r;", "  let n = x;\n  let s = String::from(n);\n \
    \ let i = 0;\n  let j = 0;\n  let k = 0;\n  let r = String::from(\"0\");\n  while\
    \ (i < s.len) {\n    let c = s[i];\n    if (c >= '0' && c <= '9') {\n      let\
    \ d = c - '0';\n      let m = d * base;\n      r = r.concat(String::from(m));\n\
    \    } else {\n      let d = c - 'A' + 10;\n      let m = d * base;\n      r =\
    \ r.concat(String::from(m));\n    }\n    i += 1;\n  }\n  return r;", "  let s\
    \ = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = 0;\n  let c\
    \ = 0;\n  let sb = String::from(base);\n  let sb_len = sb.len();\n  let sb_digits\
    \ = sb.digits();\n  let sb_digits_len = sb_digits.len();\n  let sb_digits_digits\
    \ = sb_digits.digits();\n  let sb_digits_digits_len = sb_digits_digits.len();\n\
    \  let sb_digits_digits_digits = sb_digits_digits.digits();\n  let sb_digits_digits_digits_len\
    \ = sb_digits_digits_digits.len();\n  let sb_digits_digits_digits_digits = sb_digits_digits_digits.digits();\n\
    \  let sb_digits_digits_digits_digits_len = sb_digits_digits_digits_digits.len();\n\
    \  let sb_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits.digits();\n\
    \  let sb_digits_digits_digits_digits_digits_len = sb_digits_digits_digits_digits_digits.len();\n\
    \  let sb_digits_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits_digits.digits();\n\
    \  let sb_digits_digits_digits_digits_digits_digits_len = sb_digits_digits_digits_digits_digits_digits.len();\n\
    \  let sb_digits_digits_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits_digits_digits.digits();\n\
    \  let sb_digits_digits_", "  let n = x;\n  let s = String::from(n);\n  let i\
    \ = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n    if\
    \ (d >= base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i,\
    \ 1) + String::from(r);\n    i += 1;\n  }\n  return s;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let res = String::alloc(n * base);\n  let i = 0;\n  for\
    \ (; i < n; i++) {\n    let c = s[i];\n    let d = c - '0';\n    if (d >= base)\
    \ {\n      break;\n    }\n    let r = d;\n    for (let j = base - 1; j >= 1; j--)\
    \ {\n      r = r * base + c - '0';\n    }\n    res.store_char(i * base, r);\n\
    \  }\n  for (; i < n; i++) {\n    res.store_char(i * base, 0);\n  }\n  return\
    \ res;", "  let s = String::from(x);\n  let n = s.len();\n  let digits = s.as_bytes();\n\
    \  let result = [0];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let carry =\
    \ 0;\n  let digit;\n  let digit_base;\n  let digit_value;\n  let digit_value_base;\n\
    \  let digit_value_base_power;\n  let digit_value_base_power_base;\n  let digit_value_base_power_base_power;\n\
    \  let digit_value_base_power_base_power_base;\n  let digit_value_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base;\n  let digit_value_base_power_base_power_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base_power_base;\n\
    \  let digit_value_base_power_base_power_base_power_base_power_base_power_base_",
  "  let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n  for\
    \ i in 0..n {\n    let d = s[i] - '0';\n    let m = base;\n    let c = 0;\n  \
    \  while d > 0 {\n      c += d % m;\n      d /= m;\n      m *= base;\n    }\n\
    \    r += String::from(c);\n  }\n  return r;", "    let s = String::from(x);\n\
    \    let n = s.len();\n    let res = String::alloc(n * base);\n    for (let i\
    \ = 0; i < n; i++) {\n        let d = s[i];\n        let c = d.to_i() * base;\n\
    \        res.store_char(c);\n    }\n    return res;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let i = 0;\n  let r = String::from(\"0\");\n  let c = String::from(\"\
    0\");\n  let b = String::from(\"0\");\n  let m = String::from(\"0\");\n  let p\
    \ = String::from(\"0\");\n  let q = String::from(\"0\");\n  let r_ = String::from(\"\
    0\");\n  let c_ = String::from(\"0\");\n  let b_ = String::from(\"0\");\n  let\
    \ m_ = String::from(\"0\");\n  let p_ = String::from(\"0\");\n  let q_ = String::from(\"\
    0\");\n  let r__ = String::from(\"0\");\n  let c__ = String::from(\"0\");\n  let\
    \ b__ = String::from(\"0\");\n  let m__ = String::from(\"0\");\n  let p__ = String::from(\"\
    0\");\n  let q__ = String::from(\"0\");\n  let r___ = String::from(\"0\");\n \
    \ let c___ = String::from(\"0\");\n  let b___ = String::from(\"0\");\n  let m___\
    \ = String::from(\"0\");\n  let p___ = String::from(\"0\");\n  let q___ = String::from(\"\
    0\");\n  let r_____ = String::from(\"0\");\n  let c_____ = String::from(\"0\"\
    );\n  let b_____ = String::from(\"0\");\n  let m_____ = String::from(\"0\");\n\
    \  let p_____ = String::from(\"0\");\n  let q_____ = String::from(\"0\");\n  let\
    \ r______ = String::from(\"0\");\n  let c______ = String::from(\"0\");\n  let\
    \ b______ = String::from(\"0\");\n  let m______ = String::from(\"0\");\n  let\
    \ p______ = String::from(\"0\");\n  let q______ = String::from(\"0\");\n  let\
    \ r_______ = String::from(\"0\");\n  let c_______ = String::from(\"0\");\n  let\
    \ b_______ = String::from(\"0\");\n  let m_______ = String::from(\"0\");\n  ",
  "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n\
    \    let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n      break;\n\
    \    }\n    let r = d * base;\n    s = s.sub(i, i + 1) + String::from(r);\n  \
    \  i += 1;\n  }\n  return s;", "  let n = x;\n  let s = String::from(n);\n  let\
    \ sb = String::from(base);\n  let sb_len = sb.len();\n  let sb_digits = sb.to_i32();\n\
    \  let sb_digits_len = sb_digits.len();\n  let sb_digits_digits = sb_digits.to_i32();\n\
    \  let sb_digits_digits_len = sb_digits_digits.len();\n  let sb_digits_digits_digits\
    \ = sb_digits_digits.to_i32();\n  let sb_digits_digits_digits_len = sb_digits_digits_digits.len();\n\
    \  let sb_digits_digits_digits_digits = sb_digits_digits_digits.to_i32();\n  let\
    \ sb_digits_digits_digits_digits_len = sb_digits_digits_digits_digits.len();\n\
    \  let sb_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits.to_i32();\n\
    \  let sb_digits_digits_digits_digits_digits_len = sb_digits_digits_digits_digits_digits.len();\n\
    \  let sb_digits_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits_digits.to_i32();\n\
    \  let sb_digits_digits_digits_digits_digits_digits_len = sb_digits_digits_digits_digits_digits_digits.len();\n\
    \  let sb_digits_digits_digits_digits_digits_digits_digits = sb_digits_digits_digits_digits_digits_digits.to_i32();\n\
    \  let sb_digits_digits_digits_digits_digits_", "    let s = String::from(x);\n\
    \    let n = s.len();\n    let result = String::alloc(n);\n    let i = 0;\n  \
    \  for (; i < n; i++) {\n        let digit = s[i];\n        let digit_value =\
    \ digit.to_i() - '0';\n        let digit_value_in_base = digit_value < base ?\
    \ digit_value : digit_value - base;\n        let digit_value_in_base_str = String::from(digit_value_in_base);\n\
    \        result.set(i, digit_value_in_base_str);\n    }\n    return result;",
  "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  let b = String::from(base);\n  while (i < n) {\n    let c = s[i];\n \
    \   let d = b.index(c);\n    r = r.concat(String::from(d));\n    i += 1;\n  }\n\
    \  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n\
    \  for (i in 0..n) {\n    let c = s[i];\n    let d = c - '0';\n    let m = base\
    \ ** i;\n    let e = m / 10;\n    let f = m % 10;\n    r = r.concat(String::from(f));\n\
    \    r = r.concat(String::from(e));\n  }\n  return r;", "  let n = x;\n  let s\
    \ = String::from(n);\n  let sb = String::from(base);\n  let i = 0;\n  let j =\
    \ 0;\n  let k = 0;\n  let r = String::from(\"\");\n  while (i < s.len) {\n   \
    \ let c = s[i];\n    let d = sb[j];\n    let m = sb[k];\n    let n = c - '0';\n\
    \    let o = d - '0';\n    let p = m - '0';\n    let q = n * o;\n    let r = q\
    \ + p;\n    r = r.to_i();\n    r = r.to_s();\n    r = String::from(r);\n    r\
    \ = r.pad_left(2, '0');\n    r = r.pad_right(2, '0');\n    r = r.pad_left(1, '0');\n\
    \    r = r.pad_right(1, '0');\n    r = r.pad_left(1, '0');\n    r = r.pad_right(1,\
    \ '0');\n    r = r.pad_left(1, '0');\n    r = r.pad_right(1, '0');\n    r = r.pad_left(1,\
    \ '0');\n    r = r.pad_right(1, '0');\n    r = r.pad_left(1, '0');\n    r = r.pad_right(1,\
    \ '0');\n    r = r.pad_left(1, '0');\n    r = r.pad_right(1, '0');\n    r = r.pad_left(1,\
    \ '0');\n    r = r.pad_right(1, '0');\n    r = r.pad_left(1, '0');\n    r = r.pad_right(1,\
    \ '0');\n    r = r.pad_left(1, '0');\n    r = r.pad_right(1, '0');\n    r = r.pad_left(1,\
    \ '0');\n    r = r.pad_right(1, '0');\n    r =", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n\
    \    if (d >= base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i,\
    \ i + 1) + String::from(r);\n    i += 1;\n  }\n  return s;", "  let n = x;\n \
    \ let s = String::from(n);\n  let i = 0;\n  let r = String::from(\"0\");\n  while\
    \ (n > 0) {\n    let d = n % base;\n    n = n / base;\n    r = String::from(d)\
    \ + r;\n    i++;\n  }\n  for (; i > 0; i--) {\n    r = \"0\" + r;\n  }\n  return\
    \ r;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len)\
    \ {\n    let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n      break;\n\
    \    }\n    let r = d * base;\n    s = s.sub(i, i + 1) + String::from(r);\n  \
    \  i += 1;\n  }\n  return s;", "  let n = x;\n  let s = String::from(n);\n  let\
    \ i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c.to_i() - base;\n\
    \    if (d < 0) {\n      break;\n    }\n    s = s.sub(i, 1).cat(d.to_i());\n \
    \   i += 1;\n  }\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let r = String::from(0);\n  for i in 0..n {\n    let d = s[i];\n    let c =\
    \ d.to_i() * base;\n    r = r.cat(String::from(c));\n  }\n  return r;", "  let\
    \ s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  for (; i < n; i++) {\n    let c = s[i];\n    let d = c - '0';\n    let\
    \ m = base;\n    let j = 0;\n    while (d >= m) {\n      d -= m;\n      j++;\n\
    \      m *= base;\n    }\n    r = r.concat(String::from(j));\n    r = r.concat(String::from(d));\n\
    \  }\n  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let r =\
    \ String::from(\"\");\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n\
    \  let m = 0;\n  let p = 0;\n  let q = 0;\n  let rn = 0;\n  let rd = 0;\n  let\
    \ rn2 = 0;\n  let rd2 = 0;\n  let rn3 = 0;\n  let rd3 = 0;\n  let rn4 = 0;\n \
    \ let rd4 = 0;\n  let rn5 = 0;\n  let rd5 = 0;\n  let rn6 = 0;\n  let rd6 = 0;\n\
    \  let rn7 = 0;\n  let rd7 = 0;\n  let rn8 = 0;\n  let rd8 = 0;\n  let rn9 = 0;\n\
    \  let rd9 = 0;\n  let rn10 = 0;\n  let rd10 = 0;\n  let rn11 = 0;\n  let rd11\
    \ = 0;\n  let rn12 = 0;\n  let rd12 = 0;\n  let rn13 = 0;\n  let rd13 = 0;\n \
    \ let rn14 = 0;\n  let rd14 = 0;\n  let rn15 = 0;\n  let rd15 = 0;\n  let rn16\
    \ = 0;\n  let rd16 = 0;\n  let rn17 = 0;\n  let rd17 = 0;\n  let rn18 = 0;\n \
    \ let rd18 = 0;\n  let rn19 = 0;\n  let rd19 = 0;\n  let rn20 = 0;\n  let rd20\
    \ = 0;\n  let rn21 = 0;\n  let rd21 = 0;\n  let rn22 = 0;\n  let rd22 = 0;\n \
    \ let rn23 = 0;\n  let rd23 = 0;\n  let rn24 = 0;\n  let rd24 = 0;\n  let r",
  "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n\
    \    let c = s[i];\n    let d = base;\n    let r = 0;\n    while (d > 0) {\n \
    \     r = r * 10 + c % d;\n      c = c / d;\n      d = d / 10;\n    }\n    s =\
    \ s.sub(i, i + 1) + String::from(r);\n    i = i + 1;\n  }\n  return s;", "  let\
    \ n = x;\n  let s = \"\";\n  while (n > 0) {\n    let d = n % base;\n    n /=\
    \ base;\n    s = String::from(d) + s;\n  }\n  return s;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let digits = [0];\n  let i = 0;\n  while (i < n) {\n  \
    \  let d = s[i];\n    if (d.is_digit()) {\n      let d = d.to_i();\n      let\
    \ digit = d * base;\n      digits.push(digit);\n    } else {\n      digits.push(0);\n\
    \    }\n    i += 1;\n  }\n  let s = String::from(digits);\n  return s;", "  let\
    \ n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n  \
    \  let c = s[i];\n    let d = c.to_i();\n    let r = d.div(base);\n    let c2\
    \ = r.to_i();\n    s = s.sub(i, 1) + c2.to_str();\n    i = i + 1;\n  }\n  return\
    \ s;", "  let s = String::from(x);\n  let n = s.len();\n  let res = String::alloc(n\
    \ * base);\n  for (let i = 0; i < n; i++) {\n    let c = s[i];\n    let d = 0;\n\
    \    if (c >= '0' && c <= '9') {\n      d = c - '0';\n    } else if (c >= 'a'\
    \ && c <= 'z') {\n      d = c - 'a' + 10;\n    } else if (c >= 'A' && c <= 'Z')\
    \ {\n      d = c - 'A' + 10;\n    }\n    let r = d * base;\n    if (r >= base)\
    \ {\n      r = r % base;\n    }\n    res.set(i, r);\n  }\n  return res;", "  let\
    \ n = x;\n  let s = String::from(n);\n  let i = 0;\n  let j = 0;\n  while (i <\
    \ s.len) {\n    let c = s[i];\n    if (c >= '0' && c <= '9') {\n      let d =\
    \ c - '0';\n      let r = d * base;\n      s = s.slice(0, i) + String::from(r)\
    \ + s.slice(i + 1);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n\
    \  return s;", "    let n = x;\n    let s = String::from(n);\n    let i = 0;\n\
    \    while (i < s.len) {\n        let c = s[i];\n        let d = c - '0';\n  \
    \      if (d >= base) {\n            break;\n        }\n        let r = d * base;\n\
    \        s = s.sub(i, 1) + String::from(r);\n        i += 1;\n    }\n    return\
    \ s;", "  let s = String::from(x);\n  let n = s.len();\n  let b = String::from(base);\n\
    \  let nb = b.len();\n  let nb_digits = nb - 1;\n  let nb_digits_remainder = n\
    \ % nb_digits;\n  let nb_digits_remainder_str = String::from(nb_digits_remainder);\n\
    \  let nb_digits_remainder_str_len = nb_digits_remainder_str.len();\n  let nb_digits_remainder_str_pad\
    \ = String::from(\"0\").repeat(nb_digits_remainder_str_len);\n  let nb_digits_remainder_str_pad_str\
    \ = String::from(nb_digits_remainder_str_pad);\n  let nb_digits_remainder_str_pad_str_len\
    \ = nb_digits_remainder_str_pad_str.len();\n  let nb_digits_remainder_str_pad_str_pad\
    \ = String::from(\"0\").repeat(nb_digits_remainder_str_pad_str_len);\n  let nb_digits_remainder_str_pad_str_pad_str\
    \ = String::from(nb_digits_remainder_str_pad_str_pad);\n  let nb_digits_remainder_str_pad_str_pad_str_len\
    \ = nb_digits_remainder_str_pad_str_pad_str.len();\n  let nb_digits_remainder_str_pad_str_pad_str_pad\
    \ = String::from(nb_digits_remainder_str_pad_str_pad_str_pad);\n  let nb_digits_remainder_str_pad_str_pad_str_pad_str\
    \ = String::from(nb_digits_remainder_str_pad_str_pad_str_pad_str);\n  let nb_digits_remainder_str_pad_str_pad_str_pad",
  "  let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n  for\
    \ (let i = n - 1; i >= 0; i--) {\n    let c = s[i];\n    let d = c - '0';\n  \
    \  let m = base;\n    let q = d;\n    while (q >= m) {\n      q -= m;\n      r\
    \ = String::from(q) + r;\n    }\n  }\n  return r;", "  let result = String::from(x);\n\
    \  let n = 0;\n  while (n < result.len) {\n    let digit = result[n];\n    let\
    \ new_digit = digit.to_i() * base;\n    result = result.sub(n, 1) + String::from(new_digit);\n\
    \    n += 1;\n  }\n  return result;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let r = String::from(0);\n  for (let i = n - 1; i >= 0; i--) {\n    let d =\
    \ s[i] - '0';\n    let m = base;\n    let c = 0;\n    while (d > 0) {\n      c\
    \ += d % m;\n      d /= m;\n      m *= base;\n    }\n    r = r.concat(String::from(c));\n\
    \  }\n  return r;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n\
    \  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n    if (d >=\
    \ base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i, i + 1)\
    \ + String::from(r);\n    i += 1;\n  }\n  return s;", "  let n = x;\n  let s =\
    \ String::from(n);\n  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n \
    \   let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n    let r = d\
    \ * base;\n    s = s.sub(i, i + 1) + String::from(r);\n    i += 1;\n  }\n  return\
    \ s;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len)\
    \ {\n    let c = s[i];\n    let d = c.digit_value();\n    let r = d * base;\n\
    \    let s2 = String::from(r);\n    s = s.sub(i, s.len) + s2;\n    i += s2.len;\n\
    \  }\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n  let i =\
    \ 0;\n  let r = 0;\n  let r_str = String::from(\"0\");\n  let r_str_len = r_str.len();\n\
    \  let r_str_str = String::from(\"0\");\n  let r_str_str_len = r_str_str.len();\n\
    \  let r_str_str_str = String::from(\"0\");\n  let r_str_str_str_len = r_str_str_str.len();\n\
    \  let r_str_str_str_str = String::from(\"0\");\n  let r_str_str_str_str_len =\
    \ r_str_str_str_str.len();\n  let r_str_str_str_str_str = String::from(\"0\");\n\
    \  let r_str_str_str_str_str_len = r_str_str_str_str_str.len();\n  let r_str_str_str_str_str_str\
    \ = String::from(\"0\");\n  let r_str_str_str_str_str_str_len = r_str_str_str_str_str_str.len();\n\
    \  let r_str_str_str_str_str_str_str = String::from(\"0\");\n  let r_str_str_str_str_str_str_str_len\
    \ = r_str_str_str_str_str_str_str.len();\n  let r_str_str_str_str_str_str_str_str\
    \ = String::from(\"0\");\n  let r_str_str_str_str_str_str_str_str_len = r_str_str_str_str_str_str_str_str.len();\n\
    \  let r_str_str_str_str_str_str_str_str_str = String::from(\"0\");\n  let r_str_str_str_str_str_str_str_str_str_len\
    \ = r_str_str_str_str_str_str_str_str_str.len();\n  let r_str_str_str_", "  let\
    \ n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n  \
    \  let c = s[i];\n    let d = c.to_i();\n    let r = d.to_i() * base;\n    let\
    \ s = String::from(r);\n    s = s.sub(0, s.len);\n    s = s.concat(c);\n    s\
    \ = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n    s = s.concat(s);\n\
    \    s = s.concat(s);", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n\
    \  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n    if (d >=\
    \ base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i, i + 1)\
    \ + String::from(r);\n    i += 1;\n  }\n  return s;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let i = 0;\n  let r = String::new(n);\n  let c = 1;\n \
    \ while (i < n) {\n    let d = s[i];\n    let j = i + 1;\n    while (j < n) {\n\
    \      let e = s[j];\n      if (e < d) {\n        break;\n      }\n      j +=\
    \ 1;\n    }\n    let k = j - i;\n    let m = 0;\n    while (m < k) {\n      let\
    \ f = s[i + m];\n      let g = s[j - m];\n      if (f < g) {\n        m += 1;\n\
    \      } else if (g < f) {\n        j -= 1;\n        k -= 1;\n      } else {\n\
    \        break;\n      }\n    }\n    let h = j - i - m;\n    let l = 0;\n    while\
    \ (l < h) {\n      let p = s[i + m + l];\n      let q = s[j - m - l];\n      if\
    \ (p < q) {\n        l += 1;\n      } else if (q < p) {\n        j -= 1;\n   \
    \     k -= 1;\n        h -= 1;\n      } else {\n        break;\n      }\n    }\n\
    \    let t = j - i - m - l;\n    let u = 0;\n    while (u < t) {\n      let v\
    \ = s[i + m + l + u];\n      let w = s[j - m - l - u];\n      if (v < w) {\n \
    \       u += 1;\n      } else if (w < v) {\n        j -= 1;\n        k -= 1;\n\
    \        h -= 1;\n        t -= 1;\n      } else {\n        break;\n      }\n \
    \   }\n    let z = j - i - m - l - u;\n    let y = 0;\n    while (y < z) {\n \
    \     let x = s[i + m + l + u + y];\n      let a = s[j - m - l - u", "  let s\
    \ = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = 0;\n  let sb\
    \ = String::from(base);\n  let sb_len = sb.len();\n  let sb_digits = sb.chars();\n\
    \  let sb_digits_len = sb_digits.len();\n  let sb_digits_chars = sb_digits.chars();\n\
    \  let sb_digits_chars_len = sb_digits_chars.len();\n  let sb_digits_chars_chars\
    \ = sb_digits_chars.chars();\n  let sb_digits_chars_chars_len = sb_digits_chars_chars.len();\n\
    \  let sb_digits_chars_chars_chars = sb_digits_chars_chars.chars();\n  let sb_digits_chars_chars_chars_len\
    \ = sb_digits_chars_chars_chars.len();\n  let sb_digits_chars_chars_chars_chars\
    \ = sb_digits_chars_chars_chars.chars();\n  let sb_digits_chars_chars_chars_chars_len\
    \ = sb_digits_chars_chars_chars_chars.len();\n  let sb_digits_chars_chars_chars_chars_chars\
    \ = sb_digits_chars_chars_chars_chars.chars();\n  let sb_digits_chars_chars_chars_chars_chars_len\
    \ = sb_digits_chars_chars_chars_chars_chars.len();\n  let sb_digits_chars_chars_chars_chars_chars_chars\
    \ = sb_digits_chars_chars_chars_chars_chars.chars();\n  let sb_digits_chars_chars_chars_ch",
  "  let s = String::from(x);\n  let n = s.len();\n  let result = String::alloc(n\
    \ * base);\n  let i = 0;\n  for (; i < n; i++) {\n    let digit = s[i];\n    let\
    \ digit_as_int = digit.to_i();\n    let digit_as_base = digit_as_int.to_i();\n\
    \    let digit_as_base_str = String::from(digit_as_base);\n    let digit_as_base_str_len\
    \ = digit_as_base_str.len();\n    let digit_as_base_str_as_base = digit_as_base_str.to_i();\n\
    \    let digit_as_base_str_as_base_str = String::from(digit_as_base_str_as_base);\n\
    \    let digit_as_base_str_as_base_str_len = digit_as_base_str_as_base_str.len();\n\
    \    let digit_as_base_str_as_base_str_as_base = digit_as_base_str_as_base_str.to_i();\n\
    \    let digit_as_base_str_as_base_str_as_base_str = String::from(digit_as_base_str_as_base_str_as_base);\n\
    \    let digit_as_base_str_as_base_str_as_base_str_len = digit_as_base_str_as_base_str_as_base_str.len();\n\
    \    let digit_as_base_str_as_base_str_as_base_str_as_base = digit_as_base_str_as_base_str_as_base_str.to_i();\n\
    \    let digit_as_base_str_as_base_str_as_base_str_as_base_str = String::from(digit_as_base_str_as_base_str_as_base_str_as_base);\n\
    \    let digit_as_base_str_as_base_str_as_base_str_as_base_str_len = digit_as_base_str_as",
  "  let n = x;\n  let s = String::from(n);\n  let sb = String::from(base);\n  let\
    \ i = 0;\n  let j = 0;\n  let k = 0;\n  let t = 0;\n  let r = 0;\n  let rb = 0;\n\
    \  let rbi = 0;\n  let rbj = 0;\n  let rbk = 0;\n  let rbl = 0;\n  let rbm = 0;\n\
    \  let rbn = 0;\n  let rbo = 0;\n  let rbp = 0;\n  let rbq = 0;\n  let rbr = 0;\n\
    \  let rbs = 0;\n  let rbt = 0;\n  let rbu = 0;\n  let rbv = 0;\n  let rbw = 0;\n\
    \  let rbx = 0;\n  let rby = 0;\n  let rbz = 0;\n  let rca = 0;\n  let rcb = 0;\n\
    \  let rcc = 0;\n  let rcd = 0;\n  let rce = 0;\n  let rcf = 0;\n  let rcg = 0;\n\
    \  let rch = 0;\n  let rci = 0;\n  let rcj = 0;\n  let rck = 0;\n  let rcl = 0;\n\
    \  let rcm = 0;\n  let rcn = 0;\n  let rco = 0;\n  let rcp = 0;\n  let rcq = 0;\n\
    \  let rcr = 0;\n  let rcs = 0;\n  let rct = 0;\n  let rcu = 0;\n  let rcv = 0;\n\
    \  let rcw = 0;\n  let rcx = 0;\n  let rcy = 0;\n  let rcz = 0;\n  let rda = 0;\n\
    \  let rdb = 0;\n  let rdc = 0;\n  let rdd = 0;\n  let rde = 0;\n  let rdf = 0;\n\
    \  let rdg = 0;\n  let rdh = 0;\n  let rdi = 0;\n  let rdj = 0", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let r = String::from(0);\n  for i in 0..n {\n    let d\
    \ = s[i];\n    let c = d.to_char();\n    let d = base * c.to_i();\n    r = r.concat(String::from(d));\n\
    \  }\n  return r;", "  let s = String::from(x);\n  let n = s.len();\n  let b =\
    \ String::from(base);\n  let nb = b.len();\n  let sb = String::from(b);\n  let\
    \ sb_len = sb.len();\n  let sb_digits = sb.chars();\n  let sb_digits_len = sb_digits.len();\n\
    \  let sb_digits_len_minus_1 = sb_digits_len - 1;\n  let sb_digits_len_minus_2\
    \ = sb_digits_len - 2;\n  let sb_digits_len_minus_3 = sb_digits_len - 3;\n  let\
    \ sb_digits_len_minus_4 = sb_digits_len - 4;\n  let sb_digits_len_minus_5 = sb_digits_len\
    \ - 5;\n  let sb_digits_len_minus_6 = sb_digits_len - 6;\n  let sb_digits_len_minus_7\
    \ = sb_digits_len - 7;\n  let sb_digits_len_minus_8 = sb_digits_len - 8;\n  let\
    \ sb_digits_len_minus_9 = sb_digits_len - 9;\n  let sb_digits_len_minus_10 = sb_digits_len\
    \ - 10;\n  let sb_digits_len_minus_11 = sb_digits_len - 11;\n  let sb_digits_len_minus_12\
    \ = sb_digits_len - 12;\n  let sb_digits_len_minus_13 = sb_digits_len - 13;\n\
    \  let sb_digits_len_minus_14 = sb_digits_len - 14;\n  let sb_digits_len_minus_15\
    \ = sb_digits_len - 15;\n  let sb_digits_len_minus_16 = sb_digits_len - 16;\n\
    \  let sb_digits_len_minus_", "  let n = x;\n  let s = String::from(n);\n  let\
    \ i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = base;\n    let\
    \ r = 0;\n    while (d > 0) {\n      r = r * 10 + c - '0';\n      d = d / 10;\n\
    \    }\n    s = s.sub(i, i + 1) + String::from(r);\n    i = i + 1;\n  }\n  return\
    \ s;", "  let s = String::from(x);\n  let n = s.len();\n  let digits = s.as_bytes();\n\
    \  let new_digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let carry\
    \ = 0;\n  while (i < n) {\n    let digit = digits[i];\n    let new_digit = digit;\n\
    \    if (digit >= '0' && digit <= '9') {\n      new_digit = digit - '0';\n   \
    \ } else if (digit >= 'a' && digit <= 'z') {\n      new_digit = digit - 'a' +\
    \ 10;\n    } else if (digit >= 'A' && digit <= 'Z') {\n      new_digit = digit\
    \ - 'A' + 10;\n    }\n    new_digit = new_digit * base;\n    new_digit += carry;\n\
    \    carry = new_digit / 10;\n    new_digit = new_digit % 10;\n    new_digits.push_back(new_digit);\n\
    \    i += 1;\n  }\n  if (carry > 0) {\n    new_digits.push_back(carry);\n  }\n\
    \  let new_s = String::from(new_digits);\n  return new_s;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let digits = [0];\n  let i = 0;\n  while (i < n) {\n  \
    \  let d = s[i];\n    if (d >= '0' && d <= '9') {\n      let d = d - '0';\n  \
    \    if (d >= base) {\n        throw \"base too small\";\n      }\n      digits.push(d);\n\
    \    } else {\n      throw \"invalid digit\";\n    }\n    i += 1;\n  }\n  let\
    \ s = String::from(digits);\n  return s;", "  let s = String::from(x);\n  let\
    \ n = s.len();\n  let r = String::from(0);\n  let i = 0;\n  let j = 0;\n  let\
    \ k = 0;\n  let m = 0;\n  let p = 0;\n  let q = 0;\n  let t = 0;\n  let u = 0;\n\
    \  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a\
    \ = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n\
    \  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l\
    \ = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n\
    \  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w\
    \ = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n\
    \  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h\
    \ = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n\
    \  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s\
    \ = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n\
    \  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d\
    \ = 0", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i <\
    \ s.len) {\n    let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n  \
    \    break;\n    }\n    let r = d * base;\n    s = s.sub(i, i + 1) + String::from(r);\n\
    \    i += 1;\n  }\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = String::from(\"0\");\n  while (i < n) {\n    let d =\
    \ s[i];\n    let c = s[i + 1];\n    let m = base;\n    let r = String::from(m);\n\
    \    let j = r.len();\n    let k = 0;\n    while (k < j) {\n      let e = r[k];\n\
    \      let f = r[k + 1];\n      let g = e * m + f;\n      r = String::from(g);\n\
    \      k += 2;\n    }\n    r = r + d;\n    i += 2;\n  }\n  return r;", "  let\
    \ n = x;\n  let s = String::from(n);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\
    \  let r = String::from(\"0\");\n  while (i < s.len) {\n    let c = s[i];\n  \
    \  if (c.is_digit()) {\n      let d = c.to_i();\n      let d_new = d * base;\n\
    \      r = r.concat(String::from(d_new));\n    } else {\n      r = r.concat(c);\n\
    \    }\n    i += 1;\n  }\n  return r;", "  let s = String::from(x);\n  let n =\
    \ s.len;\n  let i = 0;\n  let r = String::from(\"0\");\n  let c = String::from(\"\
    0\");\n  let m = String::from(\"0\");\n  let d = String::from(\"0\");\n  let e\
    \ = String::from(\"0\");\n  let f = String::from(\"0\");\n  let g = String::from(\"\
    0\");\n  let h = String::from(\"0\");\n  let j = String::from(\"0\");\n  let k\
    \ = String::from(\"0\");\n  let l = String::from(\"0\");\n  let m1 = String::from(\"\
    0\");\n  let m2 = String::from(\"0\");\n  let m3 = String::from(\"0\");\n  let\
    \ m4 = String::from(\"0\");\n  let m5 = String::from(\"0\");\n  let m6 = String::from(\"\
    0\");\n  let m7 = String::from(\"0\");\n  let m8 = String::from(\"0\");\n  let\
    \ m9 = String::from(\"0\");\n  let m10 = String::from(\"0\");\n  let m11 = String::from(\"\
    0\");\n  let m12 = String::from(\"0\");\n  let m13 = String::from(\"0\");\n  let\
    \ m14 = String::from(\"0\");\n  let m15 = String::from(\"0\");\n  let m16 = String::from(\"\
    0\");\n  let m17 = String::from(\"0\");\n  let m18 = String::from(\"0\");\n  let\
    \ m19 = String::from(\"0\");\n  let m20 = String::from(\"0\");\n  let m21 = String::from(\"\
    0\");\n  let m22 = String::from(\"0\");\n  let m23 = String::from(\"0\");\n  let\
    \ m24 = String::from(\"0\");\n  let m25 = String::from(\"0\");\n  let m26 = String::from(\"\
    0\");\n  let m27 = String::from(\"0\");\n  let m28 = String::from(\"0\");\n  let\
    \ m29 = String::from(\"0\");\n  let m30 = String::from(\"0\");\n  let m31", " \
    \ let s = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n \
    \ let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let p\
    \ = 0;\n  let q = 0;\n  let r_ = 0;\n  let s_ = 0;\n  let t_ = 0;\n  let u_ =\
    \ 0;\n  let v_ = 0;\n  let w_ = 0;\n  let x_ = 0;\n  let y_ = 0;\n  let z_ = 0;\n\
    \  let a_ = 0;\n  let b_ = 0;\n  let c_ = 0;\n  let d_ = 0;\n  let e_ = 0;\n \
    \ let f_ = 0;\n  let g_ = 0;\n  let h_ = 0;\n  let i_ = 0;\n  let j_ = 0;\n  let\
    \ k_ = 0;\n  let l_ = 0;\n  let m_ = 0;\n  let n_ = 0;\n  let o_ = 0;\n  let p_\
    \ = 0;\n  let q_ = 0;\n  let r__ = 0;\n  let s__ = 0;\n  let t__ = 0;\n  let u__\
    \ = 0;\n  let v__ = 0;\n  let w__ = 0;\n  let x__ = 0;\n  let y__ = 0;\n  let\
    \ z__ = 0;\n  let a__ = 0;\n  let b__ = 0;\n  let c__ = 0;\n  let d__ = 0;\n \
    \ let e__ = 0;\n  let f__ = 0;\n  let g__ = 0;\n  let h__ = 0;\n  let i__ = 0;\n\
    \  let j__ = 0;\n  let k__ = 0;\n  let l__ = 0;\n  let m__ = 0;\n  let n__ = 0;\n\
    \  let o__ = 0;\n  let p__ = 0;\n  let q__ = 0;\n  let r___ = 0;\n  let s___ =\
    \ 0;\n", "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let\
    \ r = String::from(\"0\");\n  while (i < n) {\n    let d = s.get(i);\n    let\
    \ c = d.to_i();\n    let c2 = c * base;\n    let c3 = c2.to_i();\n    r = r.concat(String::from(c3));\n\
    \    i = i + 1;\n  }\n  return r;", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n\
    \    let r = d * base;\n    s = s.sub(i, 1) + String::from(r);\n    i += 1;\n\
    \  }\n  return s;", "  let s = String::from(x);\n  let n = s.len;\n  let i = 0;\n\
    \  let j = 0;\n  let result = String::alloc(n * base);\n  for (; i < n; i++) {\n\
    \    let digit = s[i];\n    let digit_value = digit.to_i();\n    let digit_value_base\
    \ = digit_value * base;\n    let digit_value_base_str = String::from(digit_value_base);\n\
    \    let digit_value_base_str_len = digit_value_base_str.len;\n    let digit_value_base_str_str\
    \ = String::from(digit_value_base_str);\n    let digit_value_base_str_str_len\
    \ = digit_value_base_str_str.len;\n    let digit_value_base_str_str_str = String::from(digit_value_base_str_str);\n\
    \    let digit_value_base_str_str_str_len = digit_value_base_str_str_str.len;\n\
    \    let digit_value_base_str_str_str_str = String::from(digit_value_base_str_str_str);\n\
    \    let digit_value_base_str_str_str_str_len = digit_value_base_str_str_str_str.len;\n\
    \    let digit_value_base_str_str_str_str_str = String::from(digit_value_base_str_str_str_str);\n\
    \    let digit_value_base_str_str_str_str_str_len = digit_value_base_str_str_str_str_str.len;\n\
    \    let digit_value_base_str_str_str_str_str_str = String::from(digit_value_base_str_str_str_str_str);\n\
    \    let digit_value_base_str_str_str_str_str_str_len = digit_value_base_str_str_str_str_str_str.len;\n\
    \    let digit_value_base_str_str_str_str_str_str_str = String::from(digit_value_base_",
  "    let result = String::from(x);\n    for i in 0..result.len() {\n        let\
    \ digit = result[i];\n        let new_digit = digit.to_i() * base;\n        result\
    \ = result.replace(digit, String::from(new_digit));\n    }\n    return result;",
  "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n\
    \    let c = s[i];\n    let d = base;\n    let r = 0;\n    while (d > 0) {\n \
    \     d = d / 10;\n      r = r * 10 + c % 10;\n      c = c / 10;\n    }\n    s\
    \ = s.sub(i, i + 1) + String::from(r);\n    i = i + 1;\n  }\n  return s;", " \
    \ let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let j = 0;\n \
    \ let r = String::from(\"0\");\n  let c = String::from(\"0\");\n  let d = String::from(\"\
    0\");\n  let e = String::from(\"0\");\n  let f = String::from(\"0\");\n  let g\
    \ = String::from(\"0\");\n  let h = String::from(\"0\");\n  let i = String::from(\"\
    0\");\n  let j = String::from(\"0\");\n  let k = String::from(\"0\");\n  let l\
    \ = String::from(\"0\");\n  let m = String::from(\"0\");\n  let n = String::from(\"\
    0\");\n  let o = String::from(\"0\");\n  let p = String::from(\"0\");\n  let q\
    \ = String::from(\"0\");\n  let r = String::from(\"0\");\n  let s = String::from(\"\
    0\");\n  let t = String::from(\"0\");\n  let u = String::from(\"0\");\n  let v\
    \ = String::from(\"0\");\n  let w = String::from(\"0\");\n  let x = String::from(\"\
    0\");\n  let y = String::from(\"0\");\n  let z = String::from(\"0\");\n  let a\
    \ = String::from(\"0\");\n  let b = String::from(\"0\");\n  let c = String::from(\"\
    0\");\n  let d = String::from(\"0\");\n  let e = String::from(\"0\");\n  let f\
    \ = String::from(\"0\");\n  let g = String::from(\"0\");\n  let h = String::from(\"\
    0\");\n  let i = String::from(\"0\");\n  let j = String::from(\"0\");\n  let k\
    \ = String::from(\"0\");\n  let l = String::from(\"0\");\n  let m = String::from(\"\
    0\");\n  let n = String::from(\"0\");\n  let o = String::from(\"0\");\n  let p\
    \ = String::from(\"0\");\n  let q = String::from(\"0\");\n  let r = String::from(\"\
    0\");\n  let s = String", "  let s = String::from(x);\n  let n = s.len();\n  let\
    \ i = 0;\n  let r = String::from(\"0\");\n  for (; i < n; i++) {\n    let c =\
    \ s[i];\n    let d = c.to_i() * base;\n    r = r.concat(String::from(d));\n  }\n\
    \  return r;", "  let result = String::from(x);\n  let n = 0;\n  while (n < result.len)\
    \ {\n    let digit = result[n];\n    let new_digit = digit - '0';\n    if (new_digit\
    \ < 0 || new_digit >= base) {\n      break;\n    }\n    result = result.sub(n,\
    \ 1).insert(n, base.to_char(new_digit));\n    n += 1;\n  }\n  return result;",
  "  let s = String::from(x);\n  let n = s.len();\n  let digits = [0];\n  let i =\
    \ 0;\n  while (i < n) {\n    let d = s[i];\n    let digit = 0;\n    if (d >= '0'\
    \ && d <= '9') {\n      digit = d - '0';\n    } else if (d >= 'a' && d <= 'z')\
    \ {\n      digit = d - 'a' + 10;\n    } else if (d >= 'A' && d <= 'Z') {\n   \
    \   digit = d - 'A' + 10;\n    } else {\n      digit = 0;\n    }\n    digits.push(digit);\n\
    \    i += 1;\n  }\n  let result = [0];\n  let i = 0;\n  while (i < n) {\n    let\
    \ digit = digits[i];\n    let d = digit;\n    if (d >= base) {\n      d = d %\
    \ base;\n    }\n    if (d < 10) {\n      d = d + '0';\n    } else {\n      d =\
    \ d + 'a' - 10;\n    }\n    result.push(d);\n    i += 1;\n  }\n  return String::from(result);",
  "  let s = String::from(x);\n  let n = s.len();\n  let digits = [0];\n  let i =\
    \ 0;\n  while (i < n) {\n    let d = s[i];\n    let digit = 0;\n    if (d >= '0'\
    \ && d <= '9') {\n      digit = d - '0';\n    } else if (d >= 'a' && d <= 'z')\
    \ {\n      digit = d - 'a' + 10;\n    } else if (d >= 'A' && d <= 'Z') {\n   \
    \   digit = d - 'A' + 10;\n    }\n    digits.push(digit);\n    i += 1;\n  }\n\
    \  let sb = String::from(digits.iter().map(d => d * base).iter().map(d => d +\
    \ '0').iter());\n  return sb;", "  let n = x;\n  let s = String::from(n);\n  let\
    \ i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = base;\n    let\
    \ j = 0;\n    while (j < d) {\n      let e = c % d;\n      c = c / d;\n      e\
    \ = e + 48;\n      if (e > 57) {\n        e = e - 10 + 87;\n      }\n      s =\
    \ s.substring(0, i) + String::from(e) + s.substring(i + 1);\n      j += 1;\n \
    \   }\n    i += 1;\n  }\n  return s;", "  let s = String::from(x);\n  let n =\
    \ s.len();\n  let digits = [0];\n  let i = 0;\n  while (i < n) {\n    let d =\
    \ s[i];\n    if (d >= '0' && d <= '9') {\n      digits.push(d - '0');\n    } else\
    \ {\n      digits.push(d - 'A' + 10);\n    }\n    i += 1;\n  }\n  let result =\
    \ String::from(digits.map(d => d * base).sum());\n  return result;", "  let n\
    \ = x;\n  let s = String::from(n);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\
    \  let m = 0;\n  let r = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f\
    \ = 0;\n  let g = 0;\n  let h = 0;\n  let l = 0;\n  let z = 0;\n  let a = 0;\n\
    \  let b = 0;\n  let c1 = 0;\n  let c2 = 0;\n  let c3 = 0;\n  let c4 = 0;\n  let\
    \ c5 = 0;\n  let c6 = 0;\n  let c7 = 0;\n  let c8 = 0;\n  let c9 = 0;\n  let c10\
    \ = 0;\n  let c11 = 0;\n  let c12 = 0;\n  let c13 = 0;\n  let c14 = 0;\n  let\
    \ c15 = 0;\n  let c16 = 0;\n  let c17 = 0;\n  let c18 = 0;\n  let c19 = 0;\n \
    \ let c20 = 0;\n  let c21 = 0;\n  let c22 = 0;\n  let c23 = 0;\n  let c24 = 0;\n\
    \  let c25 = 0;\n  let c26 = 0;\n  let c27 = 0;\n  let c28 = 0;\n  let c29 = 0;\n\
    \  let c30 = 0;\n  let c31 = 0;\n  let c32 = 0;\n  let c33 = 0;\n  let c34 = 0;\n\
    \  let c35 = 0;\n  let c36 = 0;\n  let c37 = 0;\n  let c38 = 0;\n  let c39 = 0;\n\
    \  let c40 = 0;\n  let c41 = 0;\n  let c42 = 0;\n  let c43 = 0;\n  let c44 = 0;\n\
    \  let c45 = 0;\n  let c46 = 0;\n  let c47 = 0;\n  let c48 = 0;\n  let c49 =",
  "  let result = String::from(x);\n  for (let i = 0; i < result.len; i++) {\n   \
    \ let digit = result[i];\n    let new_digit = digit.to_i() * base;\n    result\
    \ = result.slice(0, i) + String::from(new_digit) + result.slice(i + 1);\n  }\n\
    \  return result;", "  let s = String::from(x);\n  let n = s.len();\n  let digits\
    \ = [0];\n  for (let i = 0; i < n; i++) {\n    let c = s[i];\n    if (c >= '0'\
    \ && c <= '9') {\n      digits[i] = c - '0';\n    } else if (c >= 'a' && c <=\
    \ 'z') {\n      digits[i] = c - 'a' + 10;\n    } else if (c >= 'A' && c <= 'Z')\
    \ {\n      digits[i] = c - 'A' + 10;\n    } else {\n      digits[i] = 0;\n   \
    \ }\n  }\n  let sb = String::from(digits);\n  let nb = sb.len();\n  let res =\
    \ String::alloc(nb);\n  for (let i = 0; i < nb; i++) {\n    let d = sb[i];\n \
    \   let c = 0;\n    if (d >= '0' && d <= '9') {\n      c = d - '0';\n    } else\
    \ if (d >= 'a' && d <= 'z') {\n      c = d - 'a' + 10;\n    } else if (d >= 'A'\
    \ && d <= 'Z') {\n      c = d - 'A' + 10;\n    }\n    res[i] = c;\n  }\n  return\
    \ res;", "  let s = String::from(x);\n  let n = s.len();\n  let n_base = n * base;\n\
    \  let res = String::from(n_base);\n  for (let i = n - 1; i >= 0; i--) {\n   \
    \ let digit = s[i];\n    let digit_base = digit * base;\n    let digit_str = String::from(digit_base);\n\
    \    res = res.concat(digit_str);\n  }\n  return res;", "  let n = x;\n  let s\
    \ = String::from(n);\n  let i = 0;\n  let j = 0;\n  while (i < s.len) {\n    let\
    \ c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n\
    \    let e = d * base;\n    s[j] = e + '0';\n    i += 1;\n    j += 1;\n  }\n \
    \ s = s.sub(0, j);\n  return s;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = String::from(0);\n  while (i < n) {\n    let d = s[i];\n\
    \    let c = s[i + 1];\n    let m = (base * d) + c;\n    r = r.concat(String::from(m));\n\
    \    i += 2;\n  }\n  return r;", "  let result = String::from(x);\n  let i = 0;\n\
    \  while (i < result.len) {\n    let digit = result[i];\n    let new_digit = digit.to_i()\
    \ * base;\n    let new_digit_str = String::from(new_digit);\n    result = result.insert(i,\
    \ new_digit_str);\n    i += 1;\n  }\n  return result;", "  let s = String::from(x);\n\
    \  let n = s.len;\n  let i = 0;\n  let j = 0;\n  let r = String::from(\"0\");\n\
    \  let c = String::from(\"0\");\n  let m = String::from(\"0\");\n  let d = String::from(\"\
    0\");\n  let s1 = String::from(\"0\");\n  let s2 = String::from(\"0\");\n  let\
    \ s3 = String::from(\"0\");\n  let s4 = String::from(\"0\");\n  let s5 = String::from(\"\
    0\");\n  let s6 = String::from(\"0\");\n  let s7 = String::from(\"0\");\n  let\
    \ s8 = String::from(\"0\");\n  let s9 = String::from(\"0\");\n  let s10 = String::from(\"\
    0\");\n  let s11 = String::from(\"0\");\n  let s12 = String::from(\"0\");\n  let\
    \ s13 = String::from(\"0\");\n  let s14 = String::from(\"0\");\n  let s15 = String::from(\"\
    0\");\n  let s16 = String::from(\"0\");\n  let s17 = String::from(\"0\");\n  let\
    \ s18 = String::from(\"0\");\n  let s19 = String::from(\"0\");\n  let s20 = String::from(\"\
    0\");\n  let s21 = String::from(\"0\");\n  let s22 = String::from(\"0\");\n  let\
    \ s23 = String::from(\"0\");\n  let s24 = String::from(\"0\");\n  let s25 = String::from(\"\
    0\");\n  let s26 = String::from(\"0\");\n  let s27 = String::from(\"0\");\n  let\
    \ s28 = String::from(\"0\");\n  let s29 = String::from(\"0\");\n  let s30 = String::from(\"\
    0\");\n  let s31 = String::from(\"0\");\n  let s32 = String::from(\"0\");\n  let\
    \ s33 = String::from(\"0\");\n  let s34 = String::from(\"0\");\n  let s35 = String::from(\"\
    0\");\n  let s36 = String::from(\"0\");\n  let", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m = 0;\n  let r = 0;\n  let c\
    \ = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n\
    \  let l = 0;\n  let z = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let v\
    \ = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let A = 0;\n  let B = 0;\n\
    \  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H\
    \ = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n\
    \  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S\
    \ = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n\
    \  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d\
    \ = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n\
    \  let j = 0;\n  let k = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p\
    \ = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n\
    \  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z =", "  let s\
    \ = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let result = String::from(\"\
    \");\n  let tmp = 0;\n  while (i < n) {\n    tmp = x % base;\n    x = x / base;\n\
    \    result = result.concat(String::from(tmp));\n    i = i + 1;\n  }\n  return\
    \ result;", "  let n = x;\n  let s = String::from(n);\n  let s2 = String::from(n);\n\
    \  let s3 = String::from(n);\n  let s4 = String::from(n);\n  let s5 = String::from(n);\n\
    \  let s6 = String::from(n);\n  let s7 = String::from(n);\n  let s8 = String::from(n);\n\
    \  let s9 = String::from(n);\n  let s10 = String::from(n);\n  let s11 = String::from(n);\n\
    \  let s12 = String::from(n);\n  let s13 = String::from(n);\n  let s14 = String::from(n);\n\
    \  let s15 = String::from(n);\n  let s16 = String::from(n);\n  let s17 = String::from(n);\n\
    \  let s18 = String::from(n);\n  let s19 = String::from(n);\n  let s20 = String::from(n);\n\
    \  let s21 = String::from(n);\n  let s22 = String::from(n);\n  let s23 = String::from(n);\n\
    \  let s24 = String::from(n);\n  let s25 = String::from(n);\n  let s26 = String::from(n);\n\
    \  let s27 = String::from(n);\n  let s28 = String::from(n);\n  let s29 = String::from(n);\n\
    \  let s30 = String::from(n);\n  let s31 = String::from(n);\n  let s32 = String::from(n);\n\
    \  let s33 = String::from(n);\n  let s34 = String::from(n);\n  let s35 = String::from(n);\n\
    \  let s36 = String::from(n);\n  let s37 = String::from(n);\n  let s38 = String::from(n);\n\
    \  let s39 = String::from(n);\n  let s40 = String::from(n);\n  let s41 = String::from(n);\n\
    \  let s42 = String::from(n);\n  let", "  let s = String::from(x);\n  let n =\
    \ s.len();\n  let digits = [0];\n  let i = 0;\n  while (i < n) {\n    let d =\
    \ s[i];\n    let digit = d - '0';\n    if (digit < 0 || digit >= base) {\n   \
    \   throw \"Invalid digit\";\n    }\n    digits.push(digit);\n    i += 1;\n  }\n\
    \  let sb = String::from(\"\");\n  let j = 0;\n  while (j < n) {\n    let digit\
    \ = digits[j];\n    let d = digit;\n    if (d >= 10) {\n      d -= 10;\n    }\n\
    \    sb = sb.concat(String::from(d));\n    j += 1;\n  }\n  return sb;", "  let\
    \ s = String::from(x);\n  let n = s.len();\n  let r = String::from(\"\");\n  let\
    \ i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let p = 0;\n\
    \  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v\
    \ = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n\
    \  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g\
    \ = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n\
    \  let m = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t\
    \ = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n\
    \  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e\
    \ = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n\
    \  let k = 0;\n  let l = 0;\n  let m = 0;\n  let p = 0;\n  let q = 0;\n  let r\
    \ = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n\
    \  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 0;\n  let d = 0;\n  let e = 0;", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  while (i < s.len) {\n    let c = s[i];\n    let d = c - '0';\n\
    \    if (d >= base) {\n      break;\n    }\n    let r = d * base;\n    s = s.sub(i,\
    \ i + 1);\n    s = s.insert(i, r);\n    i += 1;\n  }\n  return s;", "  let s =\
    \ String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  while (i < n) {\n    let d = s.get(i);\n    let c = String::from(d);\n\
    \    let m = base;\n    let j = 0;\n    while (j < c.len()) {\n      let e = c.get(j);\n\
    \      let p = m;\n      let k = 0;\n      while (k < e.len()) {\n        let\
    \ f = e.get(k);\n        let q = p;\n        let l = 0;\n        while (l < f.len())\
    \ {\n          let g = f.get(l);\n          let m = q;\n          let n = 0;\n\
    \          while (n < g.len()) {\n            let h = g.get(n);\n            let\
    \ o = m;\n            let p = 0;\n            while (p < h.len()) {\n        \
    \      let i = h.get(p);\n              let j = o;\n              let k = 0;\n\
    \              while (k < i.len()) {\n                let l = i.get(k);\n    \
    \            let m = j;\n                let n = 0;\n                while (n\
    \ < l.len()) {\n                  let o = l.get(n);\n                  let p =\
    \ m;\n                  let q = 0;\n                  while (q < o.len()) {\n\
    \                    let r = o.get(q);\n                    let s = p;\n     \
    \               let t = 0;\n                    while (t < r.len()) {\n      \
    \                let u = r.get(t);\n                      let v = s;\n       \
    \               let w = 0;\n                      while (w < u.len()) {\n    \
    \                    let x = u.get(w);\n                        let y = v;\n \
    \                       let z = 0;\n                        while (z < x.len())\
    \ {\n                          let A = x.get(z);\n                          let\
    \ B = y;\n                          let C = 0;\n                          while\
    \ (C < A.len()) {\n                            let D = A.get(C);\n           \
    \                 let E = B;\n                            let F =", "  let s =\
    \ String::from(x);\n  let n = s.len();\n  let res = String::alloc(n * base);\n\
    \  let i = 0;\n  for (; i < n; i++) {\n    let c = s[i];\n    let d = c - '0';\n\
    \    if (d >= base) {\n      break;\n    }\n    res[i] = d;\n  }\n  for (; i <\
    \ n; i++) {\n    let c = s[i];\n    let d = c - '0';\n    let d2 = d * base;\n\
    \    let d3 = d2 + d;\n    res[i] = d3 % base;\n  }\n  return res;", "  let n\
    \ = x;\n  let s = String::from(n);\n  let i = 0;\n  while (i < s.len) {\n    let\
    \ c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n      break;\n    }\n\
    \    let r = d * base;\n    s = s.sub(i, 1) + String::from(r);\n    i += 1;\n\
    \  }\n  return s;", "  let result = String::from(x);\n  let n = 0;\n  while (n\
    \ < result.len) {\n    let digit = result[n];\n    let new_digit = digit - '0';\n\
    \    if (new_digit < 0 || new_digit >= base) {\n      break;\n    }\n    result\
    \ = result.sub(n, 1) + String::from(new_digit);\n    n += 1;\n  }\n  return result;",
  "  let s = String::from(x);\n  let n = s.len();\n  let b = String::from(base);\n\
    \  let nb = b.len();\n  let res = String::alloc(n + nb);\n  let i = 0;\n  for\
    \ (; i < n; i++) {\n    let c = s.get(i);\n    let j = i;\n    for (; j < nb;\
    \ j++) {\n      let d = b.get(j);\n      if (c == d) {\n        break;\n     \
    \ }\n      res.set(i + j, d);\n    }\n    if (j == nb) {\n      res.set(i + j,\
    \ c);\n    }\n  }\n  return res;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = String::from(\"0\");\n  while (i < n) {\n    let d =\
    \ s[i];\n    let c = String::from(d);\n    let j = 0;\n    while (j < c.len())\
    \ {\n      let e = c[j];\n      let f = String::from(e);\n      let k = 0;\n \
    \     while (k < f.len()) {\n        let g = f[k];\n        let h = String::from(g);\n\
    \        let l = 0;\n        while (l < h.len()) {\n          let m = h[l];\n\
    \          let n = String::from(m);\n          let o = 0;\n          while (o\
    \ < n.len()) {\n            let p = n[o];\n            let q = String::from(p);\n\
    \            let r = String::from(base);\n            let s = String::from(r);\n\
    \            let t = String::from(p);\n            let u = String::from(r);\n\
    \            let v = String::from(p);\n            let w = String::from(r);\n\
    \            let x = String::from(p);\n            let y = String::from(r);\n\
    \            let z = String::from(p);\n            let a = String::from(r);\n\
    \            let b = String::from(p);\n            let c = String::from(r);\n\
    \            let d = String::from(p);\n            let e = String::from(r);\n\
    \            let f = String::from(p);\n            let g = String::from(r);\n\
    \            let h = String::from(p);\n            let i = String::from(r);\n\
    \            let j = String::from(p);\n            let k = String::from(r);\n\
    \            let l = String::from(p);\n            let m = String::from(r);\n\
    \            let n = String::from(p);\n            let o = String::from(r);\n\
    \            let p = String::from(p);\n            let q = String::from(r);\n\
    \            let r = String::from", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let r = String::from(0);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m\
    \ = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n\
    \  let h = 0;\n  let l = 0;\n  let z = 0;\n  let q = 0;\n  let p = 0;\n  let t\
    \ = 0;\n  let y = 0;\n  let w = 0;\n  let v = 0;\n  let u = 0;\n  let s1 = 0;\n\
    \  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n \
    \ let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n\
    \  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n\
    \  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n\
    \  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n\
    \  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n\
    \  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n\
    \  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n\
    \  let s42 = 0;\n  let s43 = 0;\n  let s44", "  let n = x;\n  let s = String::from(n);\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n\
    \ = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n\
    \  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y\
    \ = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n\
    \  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j\
    \ = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n\
    \  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u\
    \ = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n\
    \  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f\
    \ = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\
    \  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q\
    \ = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n\
    \  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a =", "  let s\
    \ = String::from(x);\n  let n = s.len();\n  let r = String::from(0);\n  let i\
    \ = 0;\n  let j = 0;\n  let k = 0;\n  let m = 0;\n  let c = 0;\n  let d = 0;\n\
    \  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let l = 0;\n  let p\
    \ = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n\
    \  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a\
    \ = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n\
    \  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m\
    \ = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n\
    \  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x\
    \ = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n\
    \  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i\
    \ = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n\
    \  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t\
    \ = 0;\n  let u = 0;\n  let v = 0", "    let s = String::from(x);\n    let n =\
    \ s.len();\n    let r = String::from(\"\");\n    let i = 0;\n    let j = 0;\n\
    \    let k = 0;\n    let l = 0;\n    let m = 0;\n    let p = 0;\n    let q = 0;\n\
    \    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n\
    \    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n\
    \    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n\
    \    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n\
    \    let l = 0;\n    let m = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n\
    \    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n\
    \    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n\
    \    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n\
    \    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n\
    \    let m = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n\
    \    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n\
    \    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n\
    \    let d = 0;\n    let e = 0;", "  let s = String::from(x);\n  let n = s.len();\n\
    \  let i = 0;\n  let r = 0;\n  let r_str = String::from(\"0\");\n  let r_str_len\
    \ = r_str.len();\n  let r_str_pos = 0;\n  let r_str_pos_end = r_str_len;\n  let\
    \ r_str_pos_start = 0;\n  let r_str_pos_start_end = r_str_len;\n  let r_str_pos_start_start\
    \ = 0;\n  let r_str_pos_start_start_end = r_str_len;\n  let r_str_pos_start_start_start\
    \ = 0;\n  let r_str_pos_start_start_start_end = r_str_len;\n  let r_str_pos_start_start_start_start\
    \ = 0;\n  let r_str_pos_start_start_start_start_end = r_str_len;\n  let r_str_pos_start_start_start_start_start\
    \ = 0;\n  let r_str_pos_start_start_start_start_start_end = r_str_len;\n  let\
    \ r_str_pos_start_start_start_start_start_start = 0;\n  let r_str_pos_start_start_start_start_start_start_end\
    \ = r_str_len;\n  let r_str_pos_start_start_start_start_start_start_start = 0;\n\
    \  let r_str_pos_start_start_start_start_start_start_start_end = r_str_len;\n\
    \  let r_str_pos_start_start_start_start_start_start_start_start = 0;\n  let r_str_pos_start_start_start_start_start_start_start_start_end\
    \ = r_str_len;\n  let r_str_pos_start_start_start_start_start_start_start_start_start\
    \ = 0;\n  let r_str_pos_start_start_start_start_start_start_start_start_start",
  "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(0);\n\
    \  let b = String::from(base);\n  while (i < n) {\n    let c = s[i];\n    let\
    \ d = b.index(c);\n    if (d == -1) {\n      r = r.concat(c);\n    } else {\n\
    \      r = r.concat(String::from(d));\n    }\n    i = i + 1;\n  }\n  return r;",
  "  let s = String::from(x);\n  let n = s.len();\n  let i = 0;\n  let r = String::from(\"\
    0\");\n  while (i < n) {\n    let d = s[i];\n    let c = d.to_i() * base;\n  \
    \  r = String::from(c) + r;\n    i += 1;\n  }\n  return r;", "  let n = x;\n \
    \ let s = String::from(n);\n  let i = 0;\n  let r = String::from(\"0\");\n  while\
    \ (i < s.len) {\n    let c = s[i];\n    let d = base;\n    let p = 1;\n    while\
    \ (d > 0) {\n      if (d % 2 == 1) {\n        p = p * c;\n      }\n      c = c\
    \ * c;\n      d = d / 2;\n    }\n    r = r + String::from(p);\n    i = i + 1;\n\
    \  }\n  return r;", "  let n = x;\n  let s = String::from(n);\n  let i = 0;\n\
    \  while (i < s.len) {\n    let c = s[i];\n    let d = base;\n    let j = i +\
    \ 1;\n    while (j < s.len && d > 0) {\n      let e = s[j];\n      let f = d;\n\
    \      d = f % 10;\n      f /= 10;\n      if (f > 0) {\n        e = e + f * 10;\n\
    \      }\n      s = s.substr(0, j) + e + s.substr(j);\n      j += 1;\n    }\n\
    \    i += 1;\n  }\n  return s;", "  let s = String::from(x);\n  let i = 0;\n \
    \ let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o\
    \ = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n\
    \  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n \
    \ let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n\
    \  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n\
    \  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n\
    \  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n\
    \  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n\
    \  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n\
    \  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n\
    \  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n\
    \  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n\
    \  let s53 = 0;\n  let s54 = 0;", "  let result = String::from(x);\n  let n =\
    \ 0;\n  while (n < result.len) {\n    let digit = result[n];\n    let new_digit\
    \ = digit.to_i() * base;\n    result = result.slice(0, n) + String::from(new_digit)\
    \ + result.slice(n + 1);\n    n += 1;\n  }\n  return result;", "  let s = String::from(x);\n\
    \  let n = s.len;\n  let r = String::from(0);\n  let i = 0;\n  let j = 0;\n  let\
    \ c = 0;\n  let d = 1;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let p = 0;\n\
    \  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v\
    \ = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n\
    \  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g\
    \ = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n\
    \  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r\
    \ = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n\
    \  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n\
    \  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n\
    \ = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n\
    \  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y\
    \ = 0", "  let result = String::from(x);\n  let n = base;\n  while (n > 1) {\n\
    \    let digit = x % n;\n    result = String::from(digit) + result;\n    x /=\
    \ n;\n    n = n / base;\n  }\n  return result;", "  let result = String::from(x);\n\
    \  let base_digits = String::from(base);\n  let base_digits_len = base_digits.len;\n\
    \  let result_len = result.len;\n  let result_digits = String::from(0);\n  let\
    \ result_digits_len = result_digits.len;\n  let result_digits_index = 0;\n  let\
    \ result_digits_index_base = 0;\n  let result_digits_index_base_len = 0;\n  let\
    \ result_digits_index_base_len_base = 0;\n  let result_digits_index_base_len_base_len\
    \ = 0;\n  let result_digits_index_base_len_base_len_base = 0;\n  let result_digits_index_base_len_base_len_base_len\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base = 0;\n  let\
    \ result_digits_index_base_len_base_len_base_len_base_len = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len_base\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len_base_len\
    \ = 0;\n  let result_digits_index_base_len_base_len_base_len_base_len_base_len_base_len_base_len_base",
  "  let result = String::from(x);\n  let digits = result.chars();\n  let length =\
    \ digits.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let carry = 0;\n\
    \  let digit = 0;\n  let new_digits = String::new();\n  for (i = length - 1; i\
    \ >= 0; i--) {\n    digit = digits[i];\n    k = i + 1;\n    j = i - 1;\n    while\
    \ (k < length) {\n      carry = (digit * base) + (digits[k] * base) + carry;\n\
    \      new_digits.append_char(carry % 10);\n      carry = carry / 10;\n      k++;\n\
    \    }\n    if (carry > 0) {\n      new_digits.append_char(carry);\n    }\n  }\n\
    \  return new_digits;", "  let s = String::from(x);\n  let n = s.len();\n  let\
    \ i = 0;\n  let r = String::from(\"0\");\n  while (i < n) {\n    let d = s[i];\n\
    \    let c = s[i + 1];\n    let m = base;\n    let j = 0;\n    while (j < m) {\n\
    \      let p = j;\n      let q = j + 1;\n      let r = String::from(d);\n    \
    \  let s = String::from(c);\n      let t = r + s;\n      let u = t.len();\n  \
    \    if (u == 1) {\n        r = String::from(t[0]);\n      } else {\n        r\
    \ = t;\n      }\n      let v = String::from(m);\n      let w = v.len();\n    \
    \  if (w == 1) {\n        v = String::from(m[0]);\n      } else {\n        v =\
    \ v;\n      }\n      let x = String::from(p) + v + String::from(q);\n      let\
    \ y = x.len();\n      if (y == 1) {\n        x = String::from(x[0]);\n      }\
    \ else {\n        x = x;\n      }\n      let z = String::from(x) + r;\n      let\
    \ a = z.len();\n      if (a == 1) {\n        z = String::from(z[0]);\n      }\
    \ else {\n        z = z;\n      }\n      let b = String::from(z);\n      r = b;\n\
    \      j = q;\n    }\n    i = i + 2;\n  }\n  return r;", "  let s = String::from(x);\n\
    \  let n = s.len();\n  let digits = [0];\n  for (let i = 0; i < n; i++) {\n  \
    \  let c = s[i];\n    let d = c - '0';\n    if (d >= base) {\n      d -= base;\n\
    \    }\n    digits[i] = d;\n  }\n  let sb = String::from(digits);\n  return sb;",
  "  let s = String::from(x);\n  let i = 0;\n  let j = 0;\n  let n = 0;\n  let r =\
    \ 0;\n  let c = 0;\n  let d = 0;\n  let r_str = \"\";\n  let c_str = \"\";\n \
    \ let d_str = \"\";\n  let r_str_len = 0;\n  let c_str_len = 0;\n  let d_str_len\
    \ = 0;\n  let r_str_len_max = 0;\n  let c_str_len_max = 0;\n  let d_str_len_max\
    \ = 0;\n  let r_str_len_min = 0;\n  let c_str_len_min = 0;\n  let d_str_len_min\
    \ = 0;\n  let r_str_len_max_min = 0;\n  let c_str_len_max_min = 0;\n  let d_str_len_max_min\
    \ = 0;\n  let r_str_len_min_max = 0;\n  let c_str_len_min_max = 0;\n  let d_str_len_min_max\
    \ = 0;\n  let r_str_len_max_min_max = 0;\n  let c_str_len_max_min_max = 0;\n \
    \ let d_str_len_max_min_max = 0;\n  let r_str_len_min_max_min = 0;\n  let c_str_len_min_max_min\
    \ = 0;\n  let d_str_len_min_max_min = 0;\n  let r_str_len_max_min_max_min = 0;\n\
    \  let c_str_len_max_min_max_min = 0;\n  let d_str_len_max_min_max_min = 0;\n\
    \  let r_str_len_min_max_min_max = 0;\n  let c_str_len_min_max_min_max = 0;\n\
    \  let d_str_len_min_max_min_max = 0;\n  let r_str_len_max_min_max_min", "  let\
    \ s = String::from(x);\n  let n = s.len();\n  let n_base = n * base;\n  let s_base\
    \ = String::from(n_base);\n  let s_base_len = s_base.len();\n  let s_base_str\
    \ = s_base.str();\n  let s_base_str_len = s_base_str.len();\n  let s_base_str_str\
    \ = s_base_str.str();\n  let s_base_str_str_len = s_base_str_str.len();\n  let\
    \ s_base_str_str_str = s_base_str_str.str();\n  let s_base_str_str_str_len = s_base_str_str_str.len();\n\
    \  let s_base_str_str_str_str = s_base_str_str_str.str();\n  let s_base_str_str_str_str_len\
    \ = s_base_str_str_str_str.len();\n  let s_base_str_str_str_str_str = s_base_str_str_str_str.str();\n\
    \  let s_base_str_str_str_str_str_len = s_base_str_str_str_str_str.len();\n  let\
    \ s_base_str_str_str_str_str_str = s_base_str_str_str_str_str.str();\n  let s_base_str_str_str_str_str_str_len\
    \ = s_base_str_str_str_str_str_str.len();\n  let s_base_str_str_str_str_str_str_str\
    \ = s_base_str_str_str_str_str_str.str();\n  let s_base_str_str_str_str_str_str_str_len\
    \ = s_base_str_str_str_str_str_str_str.len();\n  let s_base_str_str_str_str_str_str_str_str\
    \ = s_base_str_str_str_str_str_str_str.str();\n  let"]
stop_tokens:
- "\n}"
