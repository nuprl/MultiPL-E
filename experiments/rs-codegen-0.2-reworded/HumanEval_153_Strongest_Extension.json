{
  "name": "HumanEval_153_Strongest_Extension",
  "language": "rs",
  "prompt": "/// You will be given the name of a class (a string) and a vector of extensions.\n/// The extensions are to be used to load additional classes to the class. The\n/// strength of the extension is as follows: Let CAP be the number of the uppercase\n/// letters in the extension's name, and let SM be the number of lowercase letters \n/// in the extension's name, the strength is given by the fraction CAP - SM. \n/// You should find the strongest extension and return a string in this \n/// format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions with the same strength, you should\n/// choose the one that comes first in the vector.\n/// For example, if you are given \"Slices\" as the class and a vector of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(String::from(\"my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\")])\n/// String::from(\"my_class.AA\")\nfn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"__YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]), String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"), vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"-_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]), String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"_\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n",
  "completions": [
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if(strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    let max_extension_strength = 0.0;\n    let max_extension_name_strength = 0.0;\n    let max_extension_name_index = 0;\n    let max_extension_index = 0;\n    let max_extension_name_index_index = 0;\n    let max_extension_index_index = 0;\n    let max_extension_name_index_index_index = 0;\n    let max_extension_index_index_index = 0;\n    let max_extension_name_index_index_index_index = 0;\n    let max_extension_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        strength += (cap - sm) / cap;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n    let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n    let strength_val = cap - sm;\n    if(strength_val > strength) {\n      strength = strength_val;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n    let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n    strength += cap - sm;\n    if (strength > best_extension.length()) {\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let max_strength = 0.0;\n  let max_extension = String::from(\"\");\n  let max_class = String::from(\"\");\n  let max_class_name = String::from(\"\");\n  let max_extension_name = String::from(\"\");\n  let max_extension_name_len = 0;\n  let max_extension_name_len_len = 0;\n  let max_class_name_len = 0;\n  let max_class_name_len_len = 0;\n  let max_extension_len = 0;\n  let max_extension_len_len = 0;\n  let max_class_len = 0;\n  let max_class_len_len = 0;\n  let max_extension_name_len_len = 0;\n  let max_class_name_len_len = 0;\n  let max_extension_len_len = 0;\n  let max_class_len_len = 0;\n  let max_extension_name_len_len = 0;\n  let max_class_name_len_len = 0;\n  let max_extension_len_len = 0;\n  let max_class_len_len = 0;\n  let max_extension_name_len_len = 0;\n  let max_class_name_len_len = 0;\n  let max_extension_len_len = 0;\n  let max_class_len_len = 0;\n  let max_extension_name_len_len = 0;\n  let max_class_name_len_len = 0;\n  let max_extension_len_len = 0;\n  let max_class_len_len = 0;\n  let max_extension_name_len_len = 0;\n  let max_class_name_len_len = 0;\n  let max_extension_len_len = 0;\n  let max_class_len_len = 0;\n  let max_extension_name_len_len = 0;\n  let max_class_name_len_len = 0;\n  let max_extension_len_",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        strength += (cap - sm) / 26.0;\n        if (strength > best_extension) {\n            best_extension = strength;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  let best_strength = 0.0;\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > best_strength) {\n      best_strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let class_name_upper = class_name.to_upper();\n    let class_name_lower = class_name.to_lower();\n    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let ext_upper = ext.to_upper();\n        let ext_lower = ext.to_lower();\n        let ext_cap = ext_upper.count(chr => chr.is_upper());\n        let ext_sm = ext_lower.count(chr => chr.is_lower());\n        let ext_strength = (ext_cap - ext_sm) / ext_cap;\n        if ext_strength > strength {\n            strength = ext_strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name_upper + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength_of_extension = cap - sm;\n        if (strength_of_extension > strength) {\n            strength = strength_of_extension;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    let max_extension_strength = 0.0;\n    let max_extension_name_strength = 0.0;\n    let max_extension_name_index = 0;\n    let max_extension_index = 0;\n    let max_extension_name_index_index = 0;\n    let max_extension_index_index = 0;\n    let max_extension_name_index_index_index = 0;\n    let max_extension_index_index_index = 0;\n    let max_extension_name_index_index_index_index = 0;\n    let max_extension_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength_of_ext = cap - sm;\n        if strength_of_ext > strength {\n            strength = strength_of_ext;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        strength += (cap - sm) / 26.0;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    let best_strength = 0.0;\n    for(extension in extensions) {\n        let cap = extension.match(/[A-Z]/).len();\n        let sm = extension.match(/[a-z]/).len();\n        let strength = cap - sm;\n        if(strength > best_strength) {\n            best_strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n    let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength_val = cap - sm;\n        if strength_val > strength {\n            strength = strength_val;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength_of_extension = cap - sm;\n        if (strength_of_extension > strength) {\n            strength = strength_of_extension;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    let max_extension_strength = 0.0;\n    let max_extension_name_strength = 0.0;\n    let max_extension_name_index = 0;\n    let max_extension_index = 0;\n    let max_extension_name_index_index = 0;\n    let max_extension_index_index = 0;\n    let max_extension_name_index_index_index = 0;\n    let max_extension_index_index_index = 0;\n    let max_extension_name_index_index_index_index = 0;\n    let max_extension_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_index_index_index_index_index_index_index_index_index",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength_val = cap - sm;\n        if(strength_val > strength) {\n            strength = strength_val;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.match(/([A-Z])/g).length;\n        let sm = extension.match(/([a-z])/g).length;\n        strength = cap - sm;\n        if(strength > strength) {\n            strength = cap - sm;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    let best_strength = 0.0;\n    for(extension in extensions) {\n        let cap = extension.match(/([A-Z])/).size;\n        let sm = extension.match(/([a-z])/).size;\n        let strength = cap - sm;\n        if(strength > best_strength) {\n            best_strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let max_strength = 0.0;\n  let max_extension = String::from(\"\");\n  let max_extension_name = String::from(\"\");\n  let max_extension_strength = 0.0;\n  let max_extension_name_strength = 0.0;\n  let max_extension_name_index = 0;\n  let max_extension_index = 0;\n  let max_extension_name_index_index = 0;\n  let max_extension_index_index = 0;\n  let max_extension_name_index_index_index = 0;\n  let max_extension_index_index_index = 0;\n  let max_extension_name_index_index_index_index = 0;\n  let max_extension_index_index_index_index = 0;\n  let max_extension_name_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index = 0;\n  let max_extension_name_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index = 0;\n  let max_extension_name_index_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_index = 0;\n  let max_extension_name_index_index_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_index_index = 0;\n  let max_extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_index_index_index = 0;\n  let max_extension_name_index_index_index_index_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_index_index_index",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  let best_extension_name = \"\";\n  let best_extension_strength = 0.0;\n  let best_extension_name_strength = 0.0;\n  let best_extension_name_strength_index = 0;\n  let best_extension_name_strength_index_index = 0;\n  let best_extension_name_strength_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index_index = 0;\n  let best_extension_name_strength_index_index_index_index_index_index_index_index_index_index =",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.match(/[A-Z]/).size;\n        let sm = extension.match(/[a-z]/).size;\n        strength += cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    for ext in extensions {\n        let cap = ext.count_uppercase_letters();\n        let sm = ext.count_lowercase_letters();\n        let strength = cap - sm;\n        if strength > max_strength {\n            max_strength = strength;\n            max_extension = ext;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    let max_extension_strength = 0.0;\n    let max_extension_name_strength = 0.0;\n    let max_extension_name_strength_index = 0;\n    let max_extension_name_strength_index_index = 0;\n    let max_extension_name_strength_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_extension_name_strength_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let strongest_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength_of_extension = cap - sm;\n    if (strength_of_extension > strength) {\n      strength = strength_of_extension;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = \"\";\n    let max_class = \"\";\n    for (extension in extensions) {\n        let cap = extension.match(/([A-Z])/g).length;\n        let sm = extension.match(/([a-z])/g).length;\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_class = class_name;\n        }\n    }\n    return max_class + \".\" + max_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if(strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        strength += (cap - sm) / cap;\n        if(strength > best_extension) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength_val = cap - sm;\n        if (strength_val > strength) {\n            strength = strength_val;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = \"\";\n    let max_extension_strength = 0.0;\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_strength = strength;\n        }\n    }\n    let class_name_extension = class_name + \".\" + max_extension;\n    if (max_extension_strength == 0.0) {\n        return class_name_extension;\n    }\n    return class_name_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength_val = cap - sm;\n        if (strength_val > strength) {\n            strength = strength_val;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let max_strength = 0.0;\n  let max_extension = String::from(\"\");\n  let max_extension_name = String::from(\"\");\n  let max_extension_strength = 0.0;\n  let max_extension_name_strength = 0.0;\n  let max_extension_name_index = 0;\n  let max_extension_name_index_strength = 0.0;\n  let max_extension_index = 0;\n  let max_extension_index_strength = 0.0;\n  let max_extension_index_index = 0;\n  let max_extension_index_index_strength = 0.0;\n  let max_extension_index_index_index = 0;\n  let max_extension_index_index_index_strength = 0.0;\n  let max_extension_index_index_index_index = 0;\n  let max_extension_index_index_index_index_strength = 0.0;\n  let max_extension_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_strength = 0.0;\n  let max_extension_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_strength = 0.0;\n  let max_extension_index_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_index_strength = 0.0;\n  let max_extension_index_index_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_index_index_strength = 0.0;\n  let max_extension_index_index_index_index_index_index_index_index_index = 0;\n  let max_extension_index_index_index_index_index_index_index_index_index_strength = 0.0;\n  let max_extension",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if(strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.match(/([A-Z])/g).length;\n    let sm = extension.match(/([a-z])/g).length;\n    strength += (cap - sm) / cap;\n    if (strength > best_extension.length) {\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let strongest_extension = String::from(\"\");\n  for (extension in extensions) {\n    let cap = extension.count_uppercase_letters();\n    let sm = extension.count_lowercase_letters();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    let best_strength = 0.0;\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > best_strength) {\n            best_strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    for (extension in extensions) {\n        let cap = extension.count_uppercase_chars();\n        let sm = extension.count_lowercase_chars();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_name = extension;\n        }\n    }\n    let result = class_name + \".\" + max_extension_name;\n    return result;",
    "  let strength = 0.0;\n  let max_strength = 0.0;\n  let max_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension = extension;\n    }\n  }\n  let max_extension_name = max_extension.to_string();\n  let class_name_extension = class_name.concat(max_extension_name);\n  return class_name_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let class_name_upper = class_name.to_upper();\n  let class_name_lower = class_name.to_lower();\n  let strength = 0.0;\n  let strongest_extension = String::from(\"\");\n  for(extension in extensions) {\n    let extension_upper = extension.to_upper();\n    let extension_lower = extension.to_lower();\n    let cap = extension_upper.count(\"A\");\n    let sm = extension_lower.count(\"a\");\n    let strength_of_extension = cap - sm;\n    if(strength_of_extension > strength) {\n      strength = strength_of_extension;\n      strongest_extension = extension;\n    }\n  }\n  return class_name_upper + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\").is_some() ? 1 : 0;\n        let sm = ext.find(\"a\").is_some() ? 1 : 0;\n        strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength_val = cap - sm;\n        if strength_val > strength {\n            strength = strength_val;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if strength > best_extension.length() {\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    for(extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if(strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_name = extension.split(\".\").last();\n        }\n    }\n    let result = class_name + \".\" + max_extension_name;\n    return result;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\").is_some() ? 1 : 0;\n        let sm = ext.find(\"a\").is_some() ? 1 : 0;\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_name = extension.to_lower();\n        }\n    }\n    let max_extension_name_upper = max_extension_name.to_upper();\n    let class_name_upper = class_name.to_upper();\n    let class_name_plus_extension = class_name + \".\" + max_extension_name_upper;\n    return class_name_plus_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength_of_extension = cap - sm;\n    if (strength_of_extension > strength) {\n      strength = strength_of_extension;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength_of_extension = cap - sm;\n        if (strength_of_extension > strength) {\n            strength = strength_of_extension;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  let best_extension_name = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n      best_extension_name = extension;\n    }\n  }\n  let class_name_extension = class_name + \".\" + best_extension;\n  return class_name_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength_of_ext = cap - sm;\n        if strength_of_ext > strength {\n            strength = strength_of_ext;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let class_name_len = class_name.len();\n    let class_name_upper = class_name.to_upper();\n    let class_name_lower = class_name.to_lower();\n    let class_name_upper_len = class_name_upper.len();\n    let class_name_lower_len = class_name_lower.len();\n    let class_name_upper_count = 0;\n    let class_name_lower_count = 0;\n    let class_name_upper_count_sum = 0;\n    let class_name_lower_count_sum = 0;\n    let class_name_upper_count_max = 0;\n    let class_name_lower_count_max = 0;\n    let class_name_upper_count_min = 0;\n    let class_name_lower_count_min = 0;\n    let class_name_upper_count_sum_max = 0;\n    let class_name_lower_count_sum_max = 0;\n    let class_name_upper_count_sum_min = 0;\n    let class_name_lower_count_sum_min = 0;\n    let class_name_upper_count_sum_sum = 0;\n    let class_name_lower_count_sum_sum = 0;\n    let class_name_upper_count_sum_sum_max = 0;\n    let class_name_lower_count_sum_sum_max = 0;\n    let class_name_upper_count_sum_sum_min = 0;\n    let class_name_lower_count_sum_sum_min = 0;\n    let class_name_upper_count_sum_sum_sum = 0;\n    let class_name_lower_count_sum_sum_sum = 0;\n    let class_name_upper_count_sum_sum_sum_max = 0;\n    let class_name_lower_count_sum_sum_sum_max = 0;\n    let class_name_upper_count_sum_sum_sum_min = 0;\n    let class_name_lower_count_sum_sum_sum_min = 0;\n    let class_name_upper_count",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if (strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if(strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if (strength > best_extension.len()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    let best_strength = 0.0;\n    let best_index = 0;\n    let best_extension_name = \"\";\n    let best_extension_strength = 0.0;\n    let best_extension_index = 0;\n    let extension_count = extensions.len();\n    for (i in 0..extension_count) {\n        let extension = extensions[i];\n        let extension_strength = 0.0;\n        let extension_name = \"\";\n        let extension_index = 0;\n        let extension_count = extension.len();\n        for (j in 0..extension_count) {\n            let char = extension[j];\n            if (char.is_upper()) {\n                extension_strength += 1.0;\n            } else {\n                extension_strength += 0.5;\n            }\n            extension_name += char;\n        }\n        extension_strength /= extension_count;\n        if (extension_strength > strength) {\n            strength = extension_strength;\n            best_extension = extension;\n            best_extension_name = extension_name;\n            best_extension_strength = extension_strength;\n            best_extension_index = i;\n        }\n    }\n    let class_name_length = class_name.len();\n    let class_name_upper = class_name.to_upper();\n    let class_name_lower = class_name.to_lower();\n    let best_extension_name_length = best_extension_name.len();\n    let best_extension_name_upper = best_extension_name.to_upper();\n    let best_extension_name_lower = best_extension_name.to_lower();\n    let best_extension_name_index = 0;\n    let best_extension_name_count = best_extension_name.len();\n    for (i in 0..best_extension_name_count) {\n        let char = best_extension_name[i];\n        if (char.is_upper()) {\n            best_extension_name",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n    let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    let best_strength = 0.0;\n    for (extension in extensions) {\n        let cap = extension.match(/([A-Z])/g).length;\n        let sm = extension.match(/([a-z])/g).length;\n        let strength = cap - sm;\n        if (strength > best_strength) {\n            best_strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = \"\";\n    let max_extension_strength = 0.0;\n    for (extension in extensions) {\n        let cap = extension.count_uppercase_letters();\n        let sm = extension.count_lowercase_letters();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_strength = strength;\n        }\n    }\n    let max_extension_name = max_extension.to_s();\n    let max_extension_name_split = max_extension_name.split(\".\");\n    let max_extension_name_first = max_extension_name_split[0];\n    let max_extension_name_last = max_extension_name_split[1];\n    let max_extension_name_first_upper = max_extension_name_first.to_upper();\n    let max_extension_name_last_lower = max_extension_name_last.to_lower();\n    let max_extension_name_first_upper_last_lower = max_extension_name_first_upper + \".\" + max_extension_name_last_lower;\n    return class_name + \".\" + max_extension_name_first_upper_last_lower;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_name = extension.to_lower();\n        }\n    }\n    let max_extension_name_lower = max_extension_name.to_lower();\n    let class_name_lower = class_name.to_lower();\n    let max_extension_name_class_name_lower = max_extension_name_lower + \".\" + class_name_lower;\n    if(max_extension_name_class_name_lower == class_name_lower) {\n        return class_name + \".\" + max_extension;\n    } else {\n        return class_name + \".\" + max_extension_name_lower;\n    }",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_strength = 0.0;\n    let max_extension_name = String::from(\"\");\n    let max_extension_name_strength = 0.0;\n    let max_extension_name_name = String::from(\"\");\n    let max_extension_name_name_strength = 0.0;\n    let max_extension_name_name_name = String::from(\"\");\n    let max_extension_name_name_name_strength = 0.0;\n    let max_extension_name_name_name_name = String::from(\"\");\n    let max_extension_name_name_name_name_strength = 0.0;\n    let max_extension_name_name_name_name_name = String::from(\"\");\n    let max_extension_name_name_name_name_name_strength = 0.0;\n    let max_extension_name_name_name_name_name_name = String::from(\"\");\n    let max_extension_name_name_name_name_name_name_strength = 0.0;\n    let max_extension_name_name_name_name_name_name_name = String::from(\"\");\n    let max_extension_name_name_name_name_name_name_name_strength = 0.0;\n    let max_extension_name_name_name_name_name_name_name_name = String::from(\"\");\n    let max_extension_name_name_name_name_name_name_name_name_strength = 0.0;\n    let max_extension_name_name_name_name_name_name_name_name_name = String::from(\"\");\n    let max_extension_name_name_name_name_name_name_name_name_name_strength = 0.0;\n    let max_extension_name_name_name_name_name_name_name_name_name_name = String::from(\"\");\n    let max_extension_name_",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let class_name_len = class_name.len();\n    let class_name_upper = class_name.upper();\n    let class_name_lower = class_name.lower();\n    let class_name_extensions = class_name_lower.split(\".\");\n    let class_name_extensions_len = class_name_extensions.len();\n    let class_name_extensions_upper = class_name_extensions.map(|x| x.upper());\n    let class_name_extensions_lower = class_name_extensions.map(|x| x.lower());\n    let class_name_extensions_extensions = class_name_extensions.map(|x| x.split(\".\"));\n    let class_name_extensions_extensions_len = class_name_extensions_extensions.len();\n    let class_name_extensions_extensions_upper = class_name_extensions_extensions.map(|x| x.upper());\n    let class_name_extensions_extensions_lower = class_name_extensions_extensions.map(|x| x.lower());\n    let class_name_extensions_extensions_extensions = class_name_extensions_extensions.map(|x| x.split(\".\"));\n    let class_name_extensions_extensions_extensions_len = class_name_extensions_extensions_extensions.len();\n    let class_name_extensions_extensions_extensions_upper = class_name_extensions_extensions_extensions.map(|x| x.upper());\n    let class_name_extensions_extensions_extensions_lower = class_name_extensions_extensions_extensions.map(|x| x.lower());\n    let class_name_extensions_extensions_extensions_extensions = class_name_extensions_extensions_extensions.map(|x| x.split(\".\"));\n    let class_name_extensions_extensions_extensions_extensions_len = class_name_extensions_extensions_extensions_extensions.len();\n    let class_name_extensions_extensions_",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase_letters();\n        let sm = ext.count_lowercase_letters();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if (strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength_val = cap - sm;\n        if (strength_val > strength) {\n            strength = strength_val;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let max_strength = 0.0;\n  let max_extension = String::from(\"\");\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension = extension;\n    }\n  }\n  let max_extension_str = max_extension.to_s();\n  let class_name_str = class_name.to_s();\n  let result = class_name_str + \".\" + max_extension_str;\n  return result;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > max_strength {\n            max_strength = strength;\n            max_extension = ext;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    let max_extension_strength = 0.0;\n    let max_extension_name_strength = 0.0;\n    let extension_name_strength = 0.0;\n    let extension_name = String::from(\"\");\n    let extension_name_strength = 0.0;\n    let extension_strength = 0.0;\n    let extension = String::from(\"\");\n    let extension_strength = 0.0;\n    let class_name_strength = 0.0;\n    let class_name_strength_sum = 0.0;\n    let class_name_strength_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0.0;\n    let class_name_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0.0;\n",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(c => c.is_upper());\n        let sm = ext.find(c => c.is_lower());\n        let strength_of_ext = cap - sm;\n        if strength_of_ext > strength {\n            strength = strength_of_ext;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase_letters();\n        let sm = ext.count_lowercase_letters();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    let best_strength = 0.0;\n    for(extension in extensions) {\n        let cap = 0.0;\n        let sm = 0.0;\n        let cap_sm = 0.0;\n        let cap_sm_str = \"\";\n        let cap_sm_str_len = 0;\n        let cap_str = \"\";\n        let sm_str = \"\";\n        let cap_str_len = 0;\n        let sm_str_len = 0;\n        let cap_str_str = \"\";\n        let sm_str_str = \"\";\n        let cap_str_str_len = 0;\n        let sm_str_str_len = 0;\n        let cap_sm_str_len = 0;\n        let cap_sm_str_str = \"\";\n        let cap_sm_str_str_len = 0;\n        let cap_sm_str_str_cap = 0;\n        let cap_sm_str_str_sm = 0;\n        let cap_sm_str_str_cap_sm = 0;\n        let cap_sm_str_str_cap_sm_str = \"\";\n        let cap_sm_str_str_cap_sm_str_len = 0;\n        let cap_sm_str_str_cap_sm_str_cap = 0;\n        let cap_sm_str_str_cap_sm_str_sm = 0;\n        let cap_sm_str_str_cap_sm_str_cap_sm = 0;\n        let cap_sm_str_str_cap_sm_str_cap_sm_str = \"\";\n        let cap_sm_str_str_cap_sm_str_cap_sm_str_len = 0;\n        let cap_sm_str_str_cap_sm_str_cap_sm_str_cap = 0;\n        let cap_sm_str_str_cap_sm_str_cap_sm_str_sm = 0;\n        let cap_sm_str_str_cap_sm_str_cap_sm_str_cap_sm = 0;\n        let cap",
    "    let class_name_upper = class_name.to_upper();\n    let class_name_lower = class_name.to_lower();\n    let strength = 0.0;\n    let strongest_extension = \"\";\n    let extension_names = extensions.map(extension => extension.to_lower());\n    for extension in extension_names {\n        let extension_upper = extension.to_upper();\n        let extension_lower = extension.to_lower();\n        let cap = extension_upper.count(c => c.is_upper());\n        let sm = extension_lower.count(c => c.is_lower());\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name_upper + \".\" + strongest_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let class_name_upper = class_name.to_upper();\n    let class_name_lower = class_name.to_lower();\n    let strength = 0;\n    let strongest_extension = \"\";\n    for(extension in extensions) {\n        let extension_upper = extension.to_upper();\n        let extension_lower = extension.to_lower();\n        let cap = extension_upper.count(chr(65));\n        let sm = extension_lower.count(chr(97));\n        let strength_of_extension = cap - sm;\n        if(strength_of_extension > strength) {\n            strength = strength_of_extension;\n            strongest_extension = extension;\n        }\n    }\n    return class_name_upper + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(c => c.is_upper());\n        let sm = ext.find(c => c.is_lower());\n        let strength_val = cap - sm;\n        if strength_val > strength {\n            strength = strength_val;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if(strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let class_name_upper = class_name.to_upper();\n  let class_name_lower = class_name.to_lower();\n  let strength = 0.0;\n  let strongest_extension = \"\";\n  for(extension in extensions) {\n    let ext_upper = extension.to_upper();\n    let ext_lower = extension.to_lower();\n    let ext_cap = ext_upper.count(\"A\");\n    let ext_sm = ext_lower.count(\"a\");\n    let ext_strength = (ext_cap - ext_sm) / ext_cap;\n    if(ext_strength > strength) {\n      strength = ext_strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name_upper + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.match(/([A-Z])/).size;\n        let sm = extension.match(/([a-z])/).size;\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n    let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n        }\n    }\n    let class_name_extension = class_name + \".\" + max_extension;\n    return class_name_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if(strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        let strength_of_extension = cap - sm;\n        if(strength_of_extension > strength) {\n            strength = strength_of_extension;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find(\"A\");\n    let sm = extension.find(\"a\");\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.match(/([A-Z])/g).map(|m| m.to_upper()).count();\n        let sm = extension.match(/([a-z])/g).map(|m| m.to_lower()).count();\n        strength += cap - sm;\n        if (strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    for (extension in extensions) {\n        let cap = extension.count_uppercase_chars();\n        let sm = extension.count_lowercase_chars();\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_name = extension;\n        }\n    }\n    let max_extension_name_str = max_extension_name.to_string();\n    let max_extension_str = max_extension.to_string();\n    let max_extension_name_str_split = max_extension_name_str.split(\".\");\n    let max_extension_str_split = max_extension_str.split(\".\");\n    let max_extension_name_str_split_length = max_extension_name_str_split.length;\n    let max_extension_str_split_length = max_extension_str_split.length;\n    let max_extension_name_str_split_last = max_extension_name_str_split[max_extension_name_str_split_length - 1];\n    let max_extension_str_split_last = max_extension_str_split[max_extension_str_split_length - 1];\n    let max_extension_name_str_split_last_length = max_extension_name_str_split_last.length;\n    let max_extension_str_split_last_length = max_extension_str_split_last.length;\n    let max_extension_name_str_split_last_first = max_extension_name_str_split_last[0];\n    let max_extension_str_split_last_first = max_extension_str_split_last[0];\n    let max_extension_name_str_split_last_first_length = max_",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    let max_extension_name = String::from(\"\");\n    let max_extension_strength = 0.0;\n    let max_extension_name_strength = 0.0;\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_name = extension.split(\".\").last();\n            max_extension_strength = strength;\n            max_extension_name_strength = strength;\n        } else if(strength == max_strength) {\n            if(extension < max_extension) {\n                max_extension = extension;\n                max_extension_name = extension.split(\".\").last();\n                max_extension_strength = strength;\n                max_extension_name_strength = strength;\n            } else if(extension == max_extension) {\n                if(extension < max_extension_name) {\n                    max_extension = extension;\n                    max_extension_name = extension.split(\".\").last();\n                    max_extension_strength = strength;\n                    max_extension_name_strength = strength;\n                } else if(extension == max_extension_name) {\n                    if(extension < max_extension_name_strength) {\n                        max_extension = extension;\n                        max_extension_name = extension.split(\".\").last();\n                        max_extension_strength = strength;\n                        max_extension_name_strength = strength;\n                    }\n                }\n            }\n        }\n    }\n    let result = class_name.split(\".\").last() + \".\" + max_extension;\n    return result;",
    "  let class_name_lower = class_name.to_lower();\n  let class_name_upper = class_name.to_upper();\n  let strength = 0.0;\n  let strongest_extension = \"\";\n  let extension_count = 0;\n  for(extension in extensions) {\n    let extension_lower = extension.to_lower();\n    let extension_upper = extension.to_upper();\n    let extension_count_upper = extension_count.to_upper();\n    let extension_count_lower = extension_count.to_lower();\n    let strength_upper = strength.to_upper();\n    let strength_lower = strength.to_lower();\n    let strength_diff = 0.0;\n    if(extension_count_upper > extension_count_lower) {\n      strength_diff = 1.0;\n    } else if(extension_count_lower > extension_count_upper) {\n      strength_diff = -1.0;\n    }\n    if(extension_count_upper > 0 && extension_count_lower > 0) {\n      strength_diff = strength_diff + (extension_count_upper - extension_count_lower);\n    }\n    if(extension_count_upper > 0 && strength_diff > strength) {\n      strength = strength_diff;\n      strongest_extension = extension;\n    } else if(extension_count_lower > 0 && strength_diff < strength) {\n      strength = strength_diff;\n      strongest_extension = extension;\n    }\n    extension_count = extension_count + 1;\n  }\n  let extension_count_upper = extension_count.to_upper();\n  let extension_count_lower = extension_count.to_lower();\n  if(extension_count_upper > 0 && extension_count_lower > 0) {\n    strength = strength + (extension_count_upper - extension_count_lower);\n  }\n  if(strength > 0) {\n    return class_name_lower + \".\" + strongest_extension;\n  } else {\n    return class_name_lower;\n  }",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if (strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let strongest_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;",
    "  let strength = 0.0;\n  let max_strength = 0.0;\n  let max_extension = \"\";\n  let max_extension_name = \"\";\n  let max_extension_strength = 0.0;\n  let max_extension_name_strength = 0.0;\n  for (extension in extensions) {\n    let cap = extension.count_uppercase_letters();\n    let sm = extension.count_lowercase_letters();\n    let strength = cap - sm;\n    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension = extension;\n      max_extension_name = extension.to_lower();\n      max_extension_strength = strength;\n      max_extension_name_strength = strength;\n    } else if (strength == max_strength) {\n      if (extension < max_extension) {\n        max_extension = extension;\n        max_extension_name = extension.to_lower();\n        max_extension_strength = strength;\n        max_extension_name_strength = strength;\n      } else if (extension == max_extension) {\n        if (extension < max_extension_name) {\n          max_extension = extension;\n          max_extension_name = extension.to_lower();\n          max_extension_strength = strength;\n          max_extension_name_strength = strength;\n        } else if (extension == max_extension_name) {\n          if (extension < max_extension_name_strength) {\n            max_extension = extension;\n            max_extension_name = extension.to_lower();\n            max_extension_strength = strength;\n            max_extension_name_strength = strength;\n          }\n        }\n      }\n    }\n  }\n  let result = class_name + \".\" + max_extension_name;\n  if (max_extension_strength != max_extension_name_strength) {\n    result += \".\" + max_extension_name;\n  }\n  return result;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find(\"A\");\n    let sm = extension.find(\"a\");\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n    let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        strength += cap - sm;\n        if (strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n        strength += cap - sm;\n        if (strength > best_extension.length()) {\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for(extension in extensions) {\n    let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").to_i();\n    let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\").to_i();\n    let strength = cap - sm;\n    if(strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        let sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength_val = cap - sm;\n        if (strength_val > strength) {\n            strength = strength_val;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    let best_strength = 0.0;\n    for(extension in extensions) {\n        let cap = extension.match(/[A-Z]/).size;\n        let sm = extension.match(/[a-z]/).size;\n        let strength = cap - sm;\n        if(strength > best_strength) {\n            best_strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            best_extension = ext;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let strength = 0.0;\n  let best_extension = \"\";\n  for (extension in extensions) {\n    let cap = extension.count_uppercase();\n    let sm = extension.count_lowercase();\n    let strength = cap - sm;\n    if (strength > strength) {\n      strength = strength;\n      best_extension = extension;\n    }\n  }\n  return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.count_uppercase_letters();\n        let sm = ext.count_lowercase_letters();\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = String::from(\"\");\n    for ext in extensions {\n        let cap = ext.count_uppercase();\n        let sm = ext.count_lowercase();\n        let strength = cap - sm;\n        if strength > max_strength {\n            max_strength = strength;\n            max_extension = ext;\n        }\n    }\n    return class_name + \".\" + max_extension;",
    "    let strength = 0.0;\n    let strongest_extension = \"\";\n    for ext in extensions {\n        let cap = ext.find(\"A\");\n        let sm = ext.find(\"a\");\n        let strength = cap - sm;\n        if strength > strength {\n            strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
    "    let strength = 0.0;\n    let best_extension = \"\";\n    for (extension in extensions) {\n        let cap = extension.find(\"A\");\n        let sm = extension.find(\"a\");\n        let strength = cap - sm;\n        if (strength > strength) {\n            strength = strength;\n            best_extension = extension;\n        }\n    }\n    return class_name + \".\" + best_extension;",
    "  let class_name_lower = class_name.to_lower();\n  let extensions_lower = extensions.map(extension => extension.to_lower());\n  let strength = 0;\n  let strongest_extension = \"\";\n  let strongest_extension_name = \"\";\n  for (extension of extensions_lower) {\n    let extension_name_lower = extension.to_lower();\n    let cap_count = extension_name_lower.count(\"\");\n    let sm_count = extension_name_lower.count(\"\");\n    let strength = cap_count - sm_count;\n    if (strength > strength) {\n      strength = strength;\n      strongest_extension = extension;\n      strongest_extension_name = extension_name_lower;\n    }\n  }\n  let class_name_extension = class_name_lower + \".\" + strongest_extension_name;\n  return class_name_extension;",
    "    let strength = 0.0;\n    let max_strength = 0.0;\n    let max_extension = \"\";\n    let max_extension_name = \"\";\n    for(extension in extensions) {\n        let cap = extension.count_uppercase();\n        let sm = extension.count_lowercase();\n        let strength = cap - sm;\n        if(strength > max_strength) {\n            max_strength = strength;\n            max_extension = extension;\n            max_extension_name = extension;\n        }\n    }\n    return class_name + \".\" + max_extension_name;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}