{
  "name": "HumanEval_140_fix_spaces",
  "language": "rs",
  "prompt": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgudacd0h.rs:59:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed.length; i++) {\n   |                                                                     - unclosed delimiter\n48 |     if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n   |                                                    - this delimiter might not be properly closed...\n49 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_\n50 | }\n   | - ...as it matches this but it has different indentation\n...\n59 | }\n   |   ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpgudacd0h.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgudacd0h.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgudacd0h.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgudacd0h.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgudacd0h.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpgudacd0h.rs:49:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n49 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_\n   |                                                  ^ unclosed delimiter\n50 | }\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_fixed = \"\";\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                if (i > 0 && text_arr_fixed[i-1] == \" \") {\n                    text_fixed += \"-\";\n                } else {\n                    text_fixed += \"_\";\n                }\n            } else {\n                text_fixed += text_arr_fixed[i];\n            }\n        }\n    }\n    return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbbhra8v2.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbbhra8v2.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbbhra8v2.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbbhra8v2.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbbhra8v2.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] != \"\") {\n16 +         if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbbhra8v2.rs:22:12\n   |\n22 |         if (text_arr_fixed[i] != \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -         if (text_arr_fixed[i] != \"\") {\n22 +         if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbbhra8v2.rs:23:16\n   |\n23 |             if (text_arr_fixed[i] == \" \") {\n   |                ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -             if (text_arr_fixed[i] == \" \") {\n23 +             if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbbhra8v2.rs:24:20\n   |\n24 |                 if (i > 0 && text_a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \"\") {\n            text_arr_fixed.push(\"\");\n        } else {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] == \"\") {\n            text_arr_fixed_fixed.push(\"\");\n        } else {\n            if (text_arr_fixed[i] == \" \") {\n                text_arr_fixed_fixed.push(\"_\");\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] == \"\") {\n            text_arr_fixed_fixed_fixed.push(\"\");\n        } else {\n            if (text_arr_fixed_fixed[i] == \" \") {\n                text_arr_fixed_fixed_fixed.push(\"-\");\n            } else {\n                text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n            }\n        }\n    }\n    return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp267eggaj.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp267eggaj.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp267eggaj.rs:23:14\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp267eggaj.rs:23:23\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp267eggaj.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp267eggaj.rs:35:23\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp267eggaj.rs:16:12\n   |\n16 |         if (text_arr[i] == \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] == \"\") {\n16 +         if text_arr[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp267eggaj.rs:24:12\n   |\n24 |         if (text_arr_fixed[i] == \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (text_arr_fixed[i] == \"\") {\n24 +         if text_arr_fix",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_fixed = \"\";\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] == \"\") {\n            text_fixed += \"_\";\n        } else {\n            text_fixed += text_arr_fixed[i];\n        }\n    }\n    return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyxrthkrh.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyxrthkrh.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyxrthkrh.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyxrthkrh.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyxrthkrh.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] != \"\") {\n16 +         if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyxrthkrh.rs:22:12\n   |\n22 |         if (text_arr_fixed[i] == \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -         if (text_arr_fixed[i] == \"\") {\n22 +         if text_arr_fixed[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpyxrthkrh.rs:16:13\n   |\n16 |         if (text_arr[i] != \"\") {\n   |             ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyxrthkrh.rs:17:28\n   |\n17 |             text_arr_fixed.push(text_arr[i]);\n   |                            ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of ty",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_arr_fixed_fixed.push(\"\");\n    } else {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed.push(\"\");\n    } else {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `{`, found `}`\n  --> /tmp/tmpq9ij0hdk.rs:56:1\n   |\n56 | }\n   | ^ expected `{`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpq9ij0hdk.rs:55:24\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n55 |   for i in range(0, len(text_arr_fixed\n   |                        ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpq9ij0hdk.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpq9ij0hdk.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpq9ij0hdk.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpq9ij0hdk.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpq9ij0hdk.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpq9ij0hdk.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpq9ij0hdk.rs:47:12\n   |\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == text_arr.length - 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if text_arr[i] == \" \" {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.contains(\"  \") {\n    text_fixed = text_fixed.replace(\"  \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:20:15\n   |\n20 |     } else if text_arr[i] == \" \" {\n   |               ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:21:22\n   |\n21 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:23:22\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:23:27\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    let text_arr_fixed_i = text_arr[i].replace(\" \", \"_\");\n    if (text_arr_fixed_i.length > 2) {\n      text_arr_fixed_i = text_arr_fixed_i.replace(\" \", \"-\");\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  return String::join(\" \", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmfh41c2a.rs:17:8\n   |\n17 |     if (text_arr_fixed_i.length > 2) {\n   |        ^                           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (text_arr_fixed_i.length > 2) {\n17 +     if text_arr_fixed_i.length > 2 {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpmfh41c2a.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpmfh41c2a.rs:16:28\n   |\n16 |     let text_arr_fixed_i = text_arr[i].replace(\" \", \"_\");\n   |                            ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpmfh41c2a.rs:20:20\n   |\n20 |     text_arr_fixed.push(text_arr_fixed_i);\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpmfh41c2a.rs:22:18\n   |\n22 |   return String::join(\" \", text_arr_fixed);\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0599, E0608, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == text_arr.length - 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if text_arr[i] == \" \" {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  return String::join(text_arr_fixed, \" \");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmphl7ls_z8.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphl7ls_z8.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmphl7ls_z8.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmphl7ls_z8.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphl7ls_z8.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmphl7ls_z8.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmphl7ls_z8.rs:20:15\n   |\n20 |     } else if text_arr[i] == \" \" {\n   |               ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphl7ls_z8.rs:21:22\n   |\n21 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphl7ls_z8.rs:23:22\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmphl7ls_z8.rs:23:27\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.len() {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.append(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_2 = [];\n  for i in 0..text_arr_fixed.len() {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_2.append(\"_\");\n      } else {\n        text_arr_fixed_2.append(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_3 = [];\n  for i in 0..text_arr_fixed_2.len() {\n    if (text_arr_fixed_2[i] != \"\") {\n      if (text_arr_fixed_2[i] == \" \") {\n        text_arr_fixed_3.append(\"-\");\n      } else {\n        text_arr_fixed_3.append(text_arr_fixed_2[i]);\n      }\n    }\n  }\n  let text_arr_fixed_4 = [];\n  for i in 0..text_arr_fixed_3.len() {\n    if (text_arr_fixed_3[i] != \"\") {\n      text_arr_fixed_4.append(text_arr_fixed_3[i]);\n    }\n  }\n  return String::from(text_arr_fixed_4);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwr5y7h5u.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwr5y7h5u.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwr5y7h5u.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwr5y7h5u.rs:32:8\n   |\n32 |     if (text_arr_fixed_2[i] != \"\") {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n32 -     if (text_arr_fixed_2[i] != \"\") {\n32 +     if text_arr_fixed_2[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwr5y7h5u.rs:33:10\n   |\n33 |       if (text_arr_fixed_2[i] == \" \") {\n   |          ^                          ^\n   |\nhelp: remove these parentheses\n   |\n33 -       if (text_arr_fixed_2[i] == \" \") {\n33 +       if text_arr_fixed_2[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwr5y7h5u.rs:42:8\n   |\n42 |     if (text_arr_fixed_3[i] != \"\") {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n42 -     if (text_arr_fixed_3[i] != \"\") {\n42 +     if text_arr_fixed_3[i] != \"\" {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpwr5y7h5u.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ metho",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_arr_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmprbvuzb_i.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmprbvuzb_i.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:31:12\n   |\n31 |   for i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_fixed += \"_\";\n    } else {\n      text_fixed += text_arr_fixed[i];\n    }\n  }\n  if (text_fixed.length > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm417_lyq.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm417_lyq.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm417_lyq.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm417_lyq.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm417_lyq.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm417_lyq.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] == \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] == \"\") {\n22 +     if text_arr_fixed[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm417_lyq.rs:28:6\n   |\n28 |   if (text_fixed.length > 2) {\n   |      ^                     ^\n   |\nhelp: remove these parentheses\n   |\n28 -   if (text_fixed.length > 2) {\n28 +   if text_fixed.length > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm417_lyq.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let mut text_arr = text.split(\" \");\n  for i in 0..text_arr.len() {\n    if text_arr[i] == \" \" {\n      text_arr[i] = \"_\";\n    }\n  }\n  let mut text_arr2 = text_arr.map(|s| {\n    if s == \" \" {\n      return \"-\"\n    } else {\n      return s\n    }\n  });\n  let mut text_arr3 = text_arr2.map(|s| {\n    if s == \" \" {\n      return \"-\"\n    } else {\n      return s\n    }\n  });\n  return String::join(text_arr3, \"\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpc12sui83.rs:14:24\n   |\n14 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpc12sui83.rs:15:8\n   |\n15 |     if text_arr[i] == \" \" {\n   |        ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpc12sui83.rs:16:7\n   |\n16 |       text_arr[i] = \"_\";\n   |       ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpc12sui83.rs:33:18\n   |\n33 |   return String::join(text_arr3, \"\")\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_2 = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i < len(text_arr_fixed) - 1) {\n          if (text_arr_fixed[i + 1] == \" \") {\n            text_arr_fixed_2.push(\"-\");\n            i += 1;\n          } else {\n            text_arr_fixed_2.push(\"_\");\n          }\n        } else {\n          text_arr_fixed_2.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_2.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::join(\"\", text_arr_fixed_2);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpso_pbqzg.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpso_pbqzg.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpso_pbqzg.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpso_pbqzg.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpso_pbqzg.rs:24:17\n   |\n24 |         if (i < len(text_arr_fixed) - 1) {\n   |                 ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpso_pbqzg.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpso_pbqzg.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpso_pbqzg.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unneces",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new.push(\"_\");\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new = [];\n  for i in range(0, len(text_arr_fixed_new)) {\n    if (text_arr_fixed_new[i] != \"\") {\n      if (text_arr_fixed_new[i] == \" \") {\n        text_arr_fixed_new_new.push(\"-\");\n      } else {\n        text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new_new = [];\n  for i in range(0, len(text_arr_fixed_new_new)) {\n    if (text_arr_fixed_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new.push(text_arr_fixed_new_new[i]);\n    }\n  }\n  let text_arr_fixed_new_new_new_new = [];\n  for i in range(0, len(text_arr_fixed_new_new_new)) {\n    if (text_arr_fixed_new_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new_new.push(text_arr_fixed_new_new_new[i]);\n    }\n  }\n  let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpa73xgkp2.rs:52:21\n   |\n52 |   let text_arr_fixed\n   |                     ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:31:21\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |                     ^^^ not found in this scope\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in text_arr {\n        if (i.length > 2) {\n            result += \"-\" + i;\n        } else {\n            result += i;\n        }\n        result += \" \";\n    }\n    return result.trim();\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsvzkmatf.rs:16:12\n   |\n16 |         if (i.length > 2) {\n   |            ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i.length > 2) {\n16 +         if i.length > 2 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpsvzkmatf.rs:16:15\n   |\n16 |         if (i.length > 2) {\n   |               ^^^^^^\n\nerror[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpsvzkmatf.rs:17:27\n   |\n17 |             result += \"-\" + i;\n   |                       --- ^ - &str\n   |                       |   |\n   |                       |   `+` cannot be used to concatenate two `&str` strings\n   |                       &str\n   |\n   = note: string concatenation requires an owned `String` on the left\nhelp: create an owned `String` from a string reference\n   |\n17 |             result += \"-\".to_owned() + i;\n   |                          +++++++++++\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpsvzkmatf.rs:19:13\n   |\n19 |             result += i;\n   |             ------^^^^^\n   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpsvzkmatf.rs:21:9\n   |\n21 |         result += \" \";\n   |         ------^^^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvzkmatf.rs:23:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n23 |     return result.trim();\n   |            ^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0369, E0609.\nFor more information about an error, try `rustc --explain E0308",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0) {\n          text_arr_fixed_fixed.push(\"_\");\n        } else {\n          text_arr_fixed_fixed.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwkxlos6g.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkxlos6g.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwkxlos6g.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkxlos6g.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwkxlos6g.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkxlos6g.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwkxlos6g.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwkxlos6g.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses arou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_arr_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmprbvuzb_i.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmprbvuzb_i.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:31:12\n   |\n31 |   for i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == text_arr.length - 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"_\", text_arr_fixed);\n  if text_fixed.contains(\"  \") {\n    text_fixed = text_fixed.replace(\"  \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp55gd0mk9.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp55gd0mk9.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp55gd0mk9.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp55gd0mk9.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp55gd0mk9.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp55gd0mk9.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp55gd0mk9.rs:21:22\n   |\n21 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp55gd0mk9.rs:21:27\n   |\n21 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp55gd0mk9.rs:24:28\n   |\n24 |   let text_fixed = String::join(\"_\", text_arr_fixed);\n   |                            ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 9 previous errors\n\nSome errors have detailed explanati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new += \"_\";\n      } else {\n        text_arr_fixed_new += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_arr_fixed_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpcll_ai3w.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `pus",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:14:26\n   |\n14 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n15 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:15:26\n   |\n15 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n16 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:16:26\n   |\n16 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n17 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:17:26\n   |\n17 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n18 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:18:26\n   |\n18 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n19 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:19:26\n   |\n19 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n20 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:20:26\n   |\n20 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n21 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:21:26\n   |\n21 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n22 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:22:26\n   |\n22 |   text.replace(\"  \", \"_\")\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  return String::from(text_arr_fixed_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpykcez6ud.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpykcez6ud.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpykcez6ud.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpykcez6ud.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpykcez6ud.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpykcez6ud.rs:31:21\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpykcez6ud.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpykcez6ud.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpykcez6ud.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result += text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result += text_arr[i];\n        } else {\n            result += text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:17:23\n   |\n17 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:19:23\n   |\n19 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:21:23\n   |\n21 |             result += text_arr[i] + \"_\";\n   |                       ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_2o6457.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0 || i == text_arr_fixed.length - 1) {\n          text_fixed += \"_\";\n        } else {\n          text_fixed += \"-\";\n        }\n      } else {\n        text_fixed += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp_dqqiem3.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp_dqqiem3.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp_dqqiem3.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp_dqqiem3.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp_dqqiem3.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_fixed += \"_\";\n      } else {\n        text_fixed += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwun5fpqp.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwun5fpqp.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwun5fpqp.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwun5fpqp.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpwun5fpqp.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `pus",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                if (i > 0 && text_arr_fixed[i-1] != \"\") {\n                    text_arr_fixed_fixed.push(\"-\");\n                } else {\n                    text_arr_fixed_fixed.push(\"_\");\n                }\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] != \"\") {\n            text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n        }\n    }\n    return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpaef4xw5k.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpaef4xw5k.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpaef4xw5k.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpaef4xw5k.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpaef4xw5k.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpaef4xw5k.rs:35:23\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpaef4xw5k.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] != \"\") {\n16 +         if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpaef4xw5k.rs:22:12\n   |\n22 |         if (text_arr_fixed[i] != \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -         if (text_arr_fixed[i] != \"\") {\n22 +         if text_arr_fix",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0 || i == len(text_arr_fixed) - 1) {\n          text_arr_fixed_fixed.push(text_arr_fixed[i]);\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        if (i == 0 || i == len(text_arr_fixed_fixed) - 1) {\n          text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n        } else {\n          text_arr_fixed_fixed_fixed.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  return String\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:24:28\n   |\n24 |         if (i == 0 || i == len(text_arr_fixed) - 1) {\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:38:28\n   |\n38 |         if (i == 0 || i == len(text_arr_fixed_fixed) - 1) {\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:49:12\n   |\n49 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider imp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    let text_arr_fixed_i = text_arr[i];\n    if (text_arr_fixed_i.length > 2) {\n      text_arr_fixed_i = text_arr_fixed_i.replace(/\\s+/g, \"-\");\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  return String::join(\" \", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpz1gucivg.rs:18:52\n   |\n18 |       text_arr_fixed_i = text_arr_fixed_i.replace(/\\s+/g, \"-\");\n   |                                                    ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpz1gucivg.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpz1gucivg.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpz1gucivg.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpz1gucivg.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpz1gucivg.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_fixed = \"\";\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                text_fixed += \"_\";\n            } else {\n                text_fixed += text_arr_fixed[i];\n            }\n        }\n    }\n    return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3ty4ongj.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp3ty4ongj.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3ty4ongj.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp3ty4ongj.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3ty4ongj.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] != \"\") {\n16 +         if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3ty4ongj.rs:22:12\n   |\n22 |         if (text_arr_fixed[i] != \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -         if (text_arr_fixed[i] != \"\") {\n22 +         if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3ty4ongj.rs:23:16\n   |\n23 |             if (text_arr_fixed[i] == \" \") {\n   |                ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -             if (text_arr_fixed[i] == \" \") {\n23 +             if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3ty4ongj.rs:16:13\n   |\n16 |         if (te",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                if (i == 0) {\n                    text_arr_fixed_fixed.push(text_arr_fixed[i]);\n                } else {\n                    text_arr_fixed_fixed.push(\"_\");\n                }\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] != \"\") {\n            if (text_arr_fixed_fixed[i] == \" \") {\n                if (i == 0) {\n                    text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n                } else {\n                    text_arr_fixed_fixed_fixed.push(\"-\");\n                }\n            } else {\n                text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed[i] != \"\") {\n            text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `{`, found `}`\n  --> /tmp/tmpl4i73sv3.rs:56:1\n   |\n56 | }\n   | ^ expected `{`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpl4i73sv3.rs:55:26\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n55 |     for i in range(0, len(text_arr\n   |                          ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpl4i73sv3.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl4i73sv3.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpl4i73sv3.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl4i73sv3.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpl4i73sv3.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl4i73sv3.rs:35:23\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpl4i73sv3.rs:49:14\n   |\n49 |     for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |              ^^^^^ not f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.len() {\n    let text_arr_fixed_i = text_arr[i].replace(\" \", \"_\");\n    if (text_arr_fixed_i.len() > 2) {\n      text_arr_fixed_i = text_arr_fixed_i.replace(\" \", \"-\");\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  return String::join(\" \", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmps6cozx8l.rs:17:8\n   |\n17 |     if (text_arr_fixed_i.len() > 2) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (text_arr_fixed_i.len() > 2) {\n17 +     if text_arr_fixed_i.len() > 2 {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmps6cozx8l.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmps6cozx8l.rs:16:28\n   |\n16 |     let text_arr_fixed_i = text_arr[i].replace(\" \", \"_\");\n   |                            ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmps6cozx8l.rs:20:20\n   |\n20 |     text_arr_fixed.push(text_arr_fixed_i);\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmps6cozx8l.rs:22:18\n   |\n22 |   return String::join(\" \", text_arr_fixed);\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result += text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result += text_arr[i];\n        } else {\n            result += text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:17:23\n   |\n17 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:19:23\n   |\n19 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:21:23\n   |\n21 |             result += text_arr[i] + \"_\";\n   |                       ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_2o6457.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpgzkwqjmu.rs:52:21\n   |\n52 |   let text_arr_fixed\n   |                     ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:31:21\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |                     ^^^ not found in this",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if (text_fixed.count(\" \") > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:16:8\n   |\n16 |     if (text_arr[i] == \" \") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \" \") {\n16 +     if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:23:6\n   |\n23 |   if (text_fixed.count(\" \") > 2) {\n   |      ^                         ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text_fixed.count(\" \") > 2) {\n23 +   if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:16:9\n   |\n16 |     if (text_arr[i] == \" \") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:17:22\n   |\n17 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:22:28\n   |\n22 |   let tex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      result += \"_\";\n    } else {\n      result += text_arr[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpt7qi6tza.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpt7qi6tza.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7qi6tza.rs:16:8\n   |\n16 |     if (text_arr[i] == \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \"\") {\n16 +     if text_arr[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpt7qi6tza.rs:16:9\n   |\n16 |     if (text_arr[i] == \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpt7qi6tza.rs:17:7\n   |\n17 |       result += \"_\";\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpt7qi6tza.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt7qi6tza.rs:22:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n22 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0425, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    let text_arr_fixed_i = text_arr[i].replace(\" \", \"_\");\n    if (text_arr_fixed_i.length > 2) {\n      text_arr_fixed_i = text_arr_fixed_i.replace(\" \", \"-\");\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  return String::join(\" \", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmfh41c2a.rs:17:8\n   |\n17 |     if (text_arr_fixed_i.length > 2) {\n   |        ^                           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (text_arr_fixed_i.length > 2) {\n17 +     if text_arr_fixed_i.length > 2 {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpmfh41c2a.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpmfh41c2a.rs:16:28\n   |\n16 |     let text_arr_fixed_i = text_arr[i].replace(\" \", \"_\");\n   |                            ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpmfh41c2a.rs:20:20\n   |\n20 |     text_arr_fixed.push(text_arr_fixed_i);\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpmfh41c2a.rs:22:18\n   |\n22 |   return String::join(\" \", text_arr_fixed);\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0599, E0608, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result = text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result = result + text_arr[i];\n        } else {\n            result = result + text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnolbv_wj.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnolbv_wj.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnolbv_wj.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnolbv_wj.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnolbv_wj.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:17:22\n   |\n17 |             result = text_arr[i];\n   |                      ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:19:31\n   |\n19 |             result = result + text_arr[i];\n   |                               ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:21:31\n   |\n21 |             result = result + text_arr[i] + \"_\";\n   |                               ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnolbv_wj.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if (text_fixed.count(\" \") > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:16:8\n   |\n16 |     if (text_arr[i] == \" \") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \" \") {\n16 +     if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:23:6\n   |\n23 |   if (text_fixed.count(\" \") > 2) {\n   |      ^                         ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text_fixed.count(\" \") > 2) {\n23 +   if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:16:9\n   |\n16 |     if (text_arr[i] == \" \") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:17:22\n   |\n17 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:22:28\n   |\n22 |   let tex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, text_arr_fixed.length) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (text_arr_fixed_fixed.length > 0) {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed.length) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed_fixed.length > 0) {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      }\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_beujd2x.rs:60:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n48 |   for i in range(0, text_arr_fixed_fixed_fixed_fixed.length) {\n   |                                                              - unclosed delimiter\n49 |     if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n   |                                                          - this delimiter might not be properly closed...\n50 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n60 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp_beujd2x.rs:50:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n50 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed\n   |                                                  ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_beujd2x.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_beujd2x.rs:21:12\n   |\n21 |   for i in range(0, text_arr_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_beujd2x.rs:33:12\n   |\n33 |   for i in range(0, text_arr_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_beujd2x.rs:42:12\n   |\n42 |   for i in range(0, text_arr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in 0..text_arr.len() {\n        if i == 0 {\n            text_arr_fixed.append(text_arr[i]);\n        } else if i == text_arr.len() - 1 {\n            text_arr_fixed.append(text_arr[i]);\n        } else if text_arr[i] == \" \" {\n            text_arr_fixed.append(\"_\");\n        } else {\n            text_arr_fixed.append(text_arr[i]);\n        }\n    }\n    return String::join(text_arr_fixed, \" \");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp231u0q32.rs:15:26\n   |\n15 |     for i in 0..text_arr.len() {\n   |                          ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp231u0q32.rs:17:28\n   |\n17 |             text_arr_fixed.append(text_arr[i]);\n   |                            ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp231u0q32.rs:17:35\n   |\n17 |             text_arr_fixed.append(text_arr[i]);\n   |                                   ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp231u0q32.rs:18:33\n   |\n18 |         } else if i == text_arr.len() - 1 {\n   |                                 ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp231u0q32.rs:19:28\n   |\n19 |             text_arr_fixed.append(text_arr[i]);\n   |                            ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp231u0q32.rs:19:35\n   |\n19 |             text_arr_fixed.append(text_arr[i]);\n   |                                   ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp231u0q32.rs:20:19\n   |\n20 |         } else if text_arr[i] == \" \" {\n   |                   ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp231u0q32.rs:21:28\n   |\n21 |             text_arr_fixed.append(\"_\");\n   |                            ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp231u0q32.rs:23:28\n   |\n23 |             text_arr_fixed.append(text_arr[i]);\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, text_arr_fixed.length) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed.length) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpjxwo3rbj.rs:52:21\n   |\n52 |   let text_arr_fixed\n   |                     ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjxwo3rbj.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjxwo3rbj.rs:21:12\n   |\n21 |   for i in range(0, text_arr_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjxwo3rbj.rs:31:12\n   |\n31 |   for i in range(0, text_arr_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjxwo3rbj.rs:41:12\n   |\n41 |   for i in range(0, text_arr_fixed_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjxwo3rbj.rs:47:12\n   |\n47 |   for i in range(0, text_arr_fixed_fixed_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjxwo3rbj.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjxwo3rbj.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      result += text_arr[i] + \" \";\n    } else {\n      result += \"_\";\n    }\n  }\n  if (result.length > 2) {\n    result = result.replace(\" \", \"-\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpduzk83g1.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpduzk83g1.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpduzk83g1.rs:22:6\n   |\n22 |   if (result.length > 2) {\n   |      ^                 ^\n   |\nhelp: remove these parentheses\n   |\n22 -   if (result.length > 2) {\n22 +   if result.length > 2 {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpduzk83g1.rs:15:30\n   |\n15 |   for i in range(0, text_arr.length) {\n   |                              ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpduzk83g1.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpduzk83g1.rs:17:17\n   |\n17 |       result += text_arr[i] + \" \";\n   |                 ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpduzk83g1.rs:19:7\n   |\n19 |       result += \"_\";\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpduzk83g1.rs:22:14\n   |\n22 |   if (result.length > 2) {\n   |              ^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpduzk83g1.rs:23:14\n   |\n14 |   let result = \"\";\n   |                -- expected due to this value\n...\n23 |     result = result.replace(\" \", \"-\");\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n   |              |\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text = text.replace(\" \", \"_\");\n  let spaces = 0;\n  let last_space = 0;\n  for (i in text) {\n    if (text[i] == \" \") {\n      spaces += 1;\n      last_space = i;\n    }\n  }\n  if (spaces > 2) {\n    text = text.replace(last_space, last_space + 1, \"-\");\n  }\n  return text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmpzdwh5wna.rs:16:10\n   |\n16 |   for (i in text) {\n   |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpzdwh5wna.rs:16:7\n   |\n16 |   for (i in text) {\n   |       ^         ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n16 -   for (i in text) {\n16 +   for i in text {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzdwh5wna.rs:17:8\n   |\n17 |     if (text[i] == \" \") {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (text[i] == \" \") {\n17 +     if text[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzdwh5wna.rs:22:6\n   |\n22 |   if (spaces > 2) {\n   |      ^          ^\n   |\nhelp: remove these parentheses\n   |\n22 -   if (spaces > 2) {\n22 +   if spaces > 2 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpzdwh5wna.rs:16:13\n   |\n16 |   for (i in text) {\n   |             ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpzdwh5wna.rs:17:9\n   |\n17 |     if (text[i] == \" \") {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0061]: this function takes 2 arguments bu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      result += \"_\";\n    } else {\n      result += text_arr[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpt7qi6tza.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpt7qi6tza.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7qi6tza.rs:16:8\n   |\n16 |     if (text_arr[i] == \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \"\") {\n16 +     if text_arr[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpt7qi6tza.rs:16:9\n   |\n16 |     if (text_arr[i] == \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpt7qi6tza.rs:17:7\n   |\n17 |       result += \"_\";\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpt7qi6tza.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt7qi6tza.rs:22:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n22 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0425, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0) {\n          text_arr_fixed_fixed.push(\"_\");\n        } else {\n          text_arr_fixed_fixed.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwkxlos6g.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkxlos6g.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwkxlos6g.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkxlos6g.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwkxlos6g.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkxlos6g.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwkxlos6g.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwkxlos6g.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses arou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.len() {\n    if i == 0 {\n      result += text_arr[i];\n    } else if i == text_arr.len() - 1 {\n      result += \"_\" + text_arr[i];\n    } else {\n      result += text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp_z1xtxto.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp_z1xtxto.rs:18:29\n   |\n18 |     } else if i == text_arr.len() - 1 {\n   |                             ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:19:23\n   |\n19 |       result += \"_\" + text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:21:17\n   |\n21 |       result += text_arr[i] + \"_\";\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_z1xtxto.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    let text_arr_fixed_i = text_arr[i];\n    if (text_arr_fixed_i.length > 2) {\n      text_arr_fixed_i = text_arr_fixed_i.replace(/\\s+/g, \"-\");\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  return String::join(\" \", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpz1gucivg.rs:18:52\n   |\n18 |       text_arr_fixed_i = text_arr_fixed_i.replace(/\\s+/g, \"-\");\n   |                                                    ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpz1gucivg.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpz1gucivg.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpz1gucivg.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpz1gucivg.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpz1gucivg.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result += text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result += text_arr[i];\n    } else {\n      result += text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnds7kzr0.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnds7kzr0.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnds7kzr0.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnds7kzr0.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnds7kzr0.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:21:17\n   |\n21 |       result += text_arr[i] + \"_\";\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnds7kzr0.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try us",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let mut text = text.replace(\" \", \"_\");\n  let mut text = text.replace(\"  \", \"_\");\n  if text.count(\"  \") > 2 {\n    text = text.replace(\"  \", \"-\");\n  }\n  return text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpt4yjmisq.rs:15:11\n    |\n15  |     if text.count(\"  \") > 2 {\n    |             ^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n            `String: Iterator`\n            which is required by `&mut String: Iterator`\n            `str: Iterator`\n            which is required by `&mut str: Iterator`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_fixed += \"_\";\n    } else {\n      text_fixed += text_arr_fixed[i];\n    }\n  }\n  if (text_fixed.indexOf(\"  \") != -1) {\n    text_fixed = text_fixed.replace(\"  \", \"-\");\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbwqehvc.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbwqehvc.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbwqehvc.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbwqehvc.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprbwqehvc.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprbwqehvc.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] == \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] == \"\") {\n22 +     if text_arr_fixed[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprbwqehvc.rs:28:6\n   |\n28 |   if (text_fixed.indexOf(\"  \") != -1) {\n   |      ^                              ^\n   |\nhelp: remove these parentheses\n   |\n28 -   if (text_fixed.indexOf(\"  \") != -1) {\n28 +   if text_fixed.indexOf(\"  \") != -1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmprbwqehvc.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method nam",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                text_arr_fixed_fixed.push(\"_\");\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] != \"\") {\n            if (text_arr_fixed_fixed[i] == \" \") {\n                text_arr_fixed_fixed_fixed.push(\"-\");\n            } else {\n                text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed[i] != \"\") {\n            text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n            text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n        }\n    }\n    let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp95s_l76v.rs:52:23\n   |\n52 |     let text_arr_fixed\n   |                       ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp95s_l76v.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp95s_l76v.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp95s_l76v.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp95s_l76v.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp95s_l76v.rs:31:14\n   |\n31 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp95s_l76v.rs:31:23\n   |\n31 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp95s_l76v.rs:41:14\n   |\n41 |     for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp95s_l76v.rs:41:23\n   |\n41 |     for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i > 0 && text_arr_fixed[i-1] == \" \") {\n          text_arr_fixed_fixed.push(\"-\");\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::join(\"\", text_arr_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphjiuwj0g.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphjiuwj0g.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphjiuwj0g.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphjiuwj0g.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphjiuwj0g.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphjiuwj0g.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphjiuwj0g.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphjiuwj0g.rs:24:12\n   |\n24 |         if (i > 0 && text_arr_fixed[i-1] == \" \") {\n   |            ^                                   ^\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new.push(\"_\");\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new = [];\n  for i in range(0, len(text_arr_fixed_new)) {\n    if (text_arr_fixed_new[i] != \"\") {\n      if (text_arr_fixed_new[i] == \" \") {\n        text_arr_fixed_new_new.push(\"-\");\n      } else {\n        text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new_new = [];\n  for i in range(0, len(text_arr_fixed_new_new)) {\n    if (text_arr_fixed_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new.push(text_arr_fixed_new_new[i]);\n    }\n  }\n  let text_arr_fixed_new_new_new_new = [];\n  for i in range(0, len(text_arr_fixed_new_new_new)) {\n    if (text_arr_fixed_new_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new_new.push(text_arr_fixed_new_new_new[i]);\n    }\n  }\n  let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpa73xgkp2.rs:52:21\n   |\n52 |   let text_arr_fixed\n   |                     ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:31:21\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |                     ^^^ not found in this scope\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i > 0 && text_arr_fixed[i-1] == \" \") {\n          text_arr_fixed_fixed.push(\"-\");\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::join(\"\", text_arr_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfgvg1fyu.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpfgvg1fyu.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpfgvg1fyu.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfgvg1fyu.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpfgvg1fyu.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_new = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                text_arr_fixed_new.push(\"_\");\n            } else {\n                text_arr_fixed_new.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_new_new = [];\n    for i in range(0, len(text_arr_fixed_new)) {\n        if (text_arr_fixed_new[i] != \"\") {\n            if (text_arr_fixed_new[i] == \" \") {\n                text_arr_fixed_new_new.push(\"-\");\n            } else {\n                text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n            }\n        }\n    }\n    let text_arr_fixed_new_new_new = [];\n    for i in range(0, len(text_arr_fixed_new_new)) {\n        if (text_arr_fixed_new_new[i] != \"\") {\n            text_arr_fixed_new_new_new.push(text_arr_fixed_new_new[i]);\n        }\n    }\n    return String::from(text_arr_fixed_new_new_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:31:14\n   |\n31 |     for i in range(0, len(text_arr_fixed_new)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:31:23\n   |\n31 |     for i in range(0, len(text_arr_fixed_new)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:41:14\n   |\n41 |     for i in range(0, len(text_arr_fixed_new_new)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:41:23\n   |\n41 |     for i in range(0, len(text_arr_fixed_new_new)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9rc6m26d.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let mut text_copy = text;\n  let mut text_copy_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed = String::from(\"\");\n  let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpqjk22vc1.rs:30:68\n   |\n30 |   let mut text_copy_fixed_fixed_fixed_fixed_fixed_fixed_fixed_fixed\n   |                                                                    ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqjk22vc1.rs:12:32\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |    ----------                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text = String(text);\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for (let i = 0; i < text_arr.length; i++) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_fixed = \"\";\n    for (let i = 0; i < text_arr_fixed.length; i++) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                if (i == 0 || i == text_arr_fixed.length - 1) {\n                    text_fixed += text_arr_fixed[i];\n                } else {\n                    text_fixed += \"-\";\n                }\n            } else {\n                text_fixed += text_arr_fixed[i];\n            }\n        }\n    }\n    return String(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpee7wry9o.rs:16:10\n   |\n16 |     for (let i = 0; i < text_arr.length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpee7wry9o.rs:16:14\n   |\n16 |     for (let i = 0; i < text_arr.length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpee7wry9o.rs:16:16\n   |\n16 |     for (let i = 0; i < text_arr.length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpee7wry9o.rs:16:15\n   |\n16 |     for (let i = 0; i < text_arr.length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpee7wry9o.rs:16:16\n   |\n16 |     for (let i = 0; i < text_arr.length; i++) {\n   |                ^ expected expression\n\nerror[E0423]: expected function, tuple struct or tuple variant, found struct `String`\n   --> /tmp/tmpee7wry9o.rs:13:16\n    |\n13  |       let text = String(text);\n    |                  ^^^^^^^^^^^^ help: use struct literal syntax instead: `String { vec: val }`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \"\") {\n            text_arr_fixed.append(\"\");\n        } else {\n            text_arr_fixed.append(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] == \"\") {\n            text_arr_fixed_fixed.append(\"\");\n        } else {\n            text_arr_fixed_fixed.append(text_arr_fixed[i]);\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] == \"\") {\n            text_arr_fixed_fixed_fixed.append(\"\");\n        } else {\n            text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed[i] == \"\") {\n            text_arr_fixed_fixed_fixed_fixed.append(\"\");\n        } else {\n            text_arr_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed[i]);\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed_fixed[i] == \"\") {\n            text_arr_fixed_fixed_fixed_fixed_fixed.append(\"\");\n        } else {\n            text_arr_fixed_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpeaesh53f.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |     for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                              - unclosed delimiter\n...\n50 |         } else {\n   |                - this delimiter might not be properly closed...\n51 |             text_arr_fixed_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpeaesh53f.rs:51:58\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |             text_arr_fixed_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed_\n   |                                                          ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpeaesh53f.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeaesh53f.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpeaesh53f.rs:23:14\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeaesh53f.rs:23:23\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this sco",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result += text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result += text_arr[i];\n        } else {\n            result += text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:17:23\n   |\n17 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:19:23\n   |\n19 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:21:23\n   |\n21 |             result += text_arr[i] + \"_\";\n   |                       ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_2o6457.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text = String::from(text);\n    let text = text.replace(/ /g, \"_\");\n    let text = text.replace(/\\s+/g, \"_\");\n    return text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxj7c_icx.rs:15:30\n   |\n15 |     let text = text.replace(/\\s+/g, \"_\");\n   |                              ^\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxj7c_icx.rs:14:29\n   |\n14 |     let text = text.replace(/ /g, \"_\");\n   |                             ^ expected expression\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    text.replace(\" \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:13:27\n   |\n13 |     text.replace(\" \", \"_\")\n   |                           ^ help: add `;` here\n14 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:14:28\n   |\n14 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n15 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:15:28\n   |\n15 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n16 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:16:28\n   |\n16 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n17 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:17:28\n   |\n17 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n18 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:18:28\n   |\n18 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n19 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:19:28\n   |\n19 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n20 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:20:28\n   |\n20 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n21 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:21:28\n   |\n21 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n22 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_2 = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i < len(text_arr_fixed) - 1) {\n          if (text_arr_fixed[i+1] == \" \") {\n            text_arr_fixed_2.push(\"_\");\n          } else {\n            text_arr_fixed_2.push(\"-\");\n          }\n        } else {\n          text_arr_fixed_2.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_2.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::join(\"\", text_arr_fixed_2);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2gg3demo.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2gg3demo.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2gg3demo.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2gg3demo.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2gg3demo.rs:24:17\n   |\n24 |         if (i < len(text_arr_fixed) - 1) {\n   |                 ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2gg3demo.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2gg3demo.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2gg3demo.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unneces",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i % 2 == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else {\n      text_arr_fixed.push(\"_\");\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.count(\" \") > 2 {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3ekwqog5.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3ekwqog5.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:19:22\n   |\n19 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:22:28\n   |\n22 |   let text_fixed = String::join(\"\", text_arr_fixed);\n   |                            ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0608, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:14:26\n   |\n14 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n15 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:15:26\n   |\n15 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n16 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:16:26\n   |\n16 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n17 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:17:26\n   |\n17 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n18 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:18:26\n   |\n18 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n19 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:19:26\n   |\n19 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n20 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:20:26\n   |\n20 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n21 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:21:26\n   |\n21 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n22 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:22:26\n   |\n22 |   text.replace(\"  \", \"_\")\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new += \"_\";\n      } else {\n        text_arr_fixed_new += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_arr_fixed_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpcll_ai3w.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `pus",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] == \" \") {\n      text_arr_fixed_fixed.push(\"_\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed[i] == \"  \") {\n      text_arr_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed[i] == \"  \") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"  \") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpw087z10z.rs:60:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed.length; i++) {\n   |                                                                     - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n60 | }\n   |   ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpw087z10z.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpw087z10z.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpw087z10z.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw087z10z.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpw087z10z.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i % 2 == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else {\n      text_arr_fixed.push(\"_\");\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.count(\" \") > 2 {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3ekwqog5.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3ekwqog5.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:19:22\n   |\n19 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:22:28\n   |\n22 |   let text_fixed = String::join(\"\", text_arr_fixed);\n   |                            ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0608, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result = result + text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result = result + text_arr[i];\n        } else {\n            result = result + text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxrjxpflf.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxrjxpflf.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxrjxpflf.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxrjxpflf.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxrjxpflf.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxrjxpflf.rs:17:31\n   |\n17 |             result = result + text_arr[i];\n   |                               ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxrjxpflf.rs:19:31\n   |\n19 |             result = result + text_arr[i];\n   |                               ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxrjxpflf.rs:21:31\n   |\n21 |             result = result + text_arr[i] + \"_\";\n   |                               ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxrjxpflf.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i > 0 && text_arr_fixed[i-1] == \" \") {\n          text_arr_fixed_fixed.push(\"_\");\n        } else {\n          text_arr_fixed_fixed.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp5yo6fdk7.rs:52:15\n   |\n52 |   let text_arr\n   |               ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5yo6fdk7.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i > 0 && text_arr_fixed[i-1] == \" \") {\n          text_arr_fixed_fixed.push(\"-\");\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  return String::from(\"\".join(text_arr_fixed_fixed_fixed));\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9ewu18cs.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9ewu18cs.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9ewu18cs.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9ewu18cs.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9ewu18cs.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0) {\n          text_arr_fixed_new.push(\"_\");\n        } else {\n          text_arr_fixed_new.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_str = String::join(\"\", text_arr_fixed_new);\n  return text_arr_fixed_new_str;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9txxxa6g.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9txxxa6g.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9txxxa6g.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9txxxa6g.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9txxxa6g.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9txxxa6g.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9txxxa6g.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9txxxa6g.rs:24:12\n   |\n24 |         if (i == 0) {\n   |            ^      ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (i ==",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:14:26\n   |\n14 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n15 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:15:26\n   |\n15 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n16 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:16:26\n   |\n16 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n17 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:17:26\n   |\n17 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n18 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:18:26\n   |\n18 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n19 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:19:26\n   |\n19 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n20 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:20:26\n   |\n20 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n21 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:21:26\n   |\n21 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n22 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:22:26\n   |\n22 |   text.replace(\"  \", \"_\")\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text = text.replace(\" \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \",\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpodf5djhc.rs:55:22\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n55 |   text = text.replace(\"  \",\n   |                      ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> /tmp/tmpodf5djhc.rs:55:15\n    |\n55  |   text = text.replace(\"  \",\n    |               ^^^^^^^ ---- supplied 1 argument\n    |               |\n    |               expected 2 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpodf5djhc.rs:55:3\n   |\n12 |   fn fix_spaces(text: String) -> String {\n   |                                  ------ expected `String` because of return type\n...\n55 | /   text = text.replace(\"  \",\n56 | | }\n   | |_^ expected struct `String`, found `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_fixed += \"_\";\n    } else {\n      text_fixed += text_arr_fixed[i];\n    }\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkp1zz6e4.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkp1zz6e4.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] == \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] == \"\") {\n22 +     if text_arr_fixed[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpkp1zz6e4.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpkp1zz6e4.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpkp1zz6e4.rs:17:27\n   |\n17 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.len() {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == text_arr.len() - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy69sssm3.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy69sssm3.rs:18:15\n   |\n18 |     } else if (i == text_arr.len() - 1) {\n   |               ^                       ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == text_arr.len() - 1) {\n18 +     } else if i == text_arr.len() - 1 {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpy69sssm3.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpy69sssm3.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpy69sssm3.rs:18:30\n   |\n18 |     } else if (i == text_arr.len() - 1) {\n   |                              ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpy69sssm3.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpy69sssm3.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy69sssm3.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new.push(\"_\");\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new = [];\n  for i in range(0, len(text_arr_fixed_new)) {\n    if (text_arr_fixed_new[i] != \"\") {\n      if (text_arr_fixed_new[i] == \" \") {\n        text_arr_fixed_new_new.push(\"-\");\n      } else {\n        text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new_new = [];\n  for i in range(0, len(text_arr_fixed_new_new)) {\n    if (text_arr_fixed_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new.push(text_arr_fixed_new_new[i]);\n    }\n  }\n  let text_arr_fixed_new_new_new_new = [];\n  for i in range(0, len(text_arr_fixed_new_new_new)) {\n    if (text_arr_fixed_new_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new_new.push(text_arr_fixed_new_new_new[i]);\n    }\n  }\n  let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpa73xgkp2.rs:52:21\n   |\n52 |   let text_arr_fixed\n   |                     ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:31:21\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa73xgkp2.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa73xgkp2.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |                     ^^^ not found in this scope\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let new_text = \"\";\n    for i in 0..text_arr.len() {\n        if (text_arr[i] == \"\") {\n            new_text += \"_\";\n        } else {\n            new_text += text_arr[i];\n        }\n    }\n    if (new_text.len() > 2) {\n        new_text = new_text.replace(\" \", \"-\");\n    }\n    return new_text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_z_znvpx.rs:16:12\n   |\n16 |         if (text_arr[i] == \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] == \"\") {\n16 +         if text_arr[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_z_znvpx.rs:22:8\n   |\n22 |     if (new_text.len() > 2) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (new_text.len() > 2) {\n22 +     if new_text.len() > 2 {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp_z_znvpx.rs:15:26\n   |\n15 |     for i in 0..text_arr.len() {\n   |                          ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z_znvpx.rs:16:13\n   |\n16 |         if (text_arr[i] == \"\") {\n   |             ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp_z_znvpx.rs:17:13\n   |\n17 |             new_text += \"_\";\n   |             --------^^^^^^^\n   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z_znvpx.rs:19:25\n   |\n19 |             new_text += text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_z_znvpx.rs:23:20\n   |\n14 |     let new_text = \"\";\n   |                    -- expected due to this value\n...\n23 |         new_text = new_text.replace(\" \", \"-\");\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                    |\n   |                    expected `&str`, found struct `String`\n   |                    help: consider borrowing here: `&new_text.replace(\" \", \"-\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_z_znvpx.rs:25:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_arr_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmprbvuzb_i.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmprbvuzb_i.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:31:12\n   |\n31 |   for i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    text.replace(\" \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:13:27\n   |\n13 |     text.replace(\" \", \"_\")\n   |                           ^ help: add `;` here\n14 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:14:28\n   |\n14 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n15 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:15:28\n   |\n15 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n16 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:16:28\n   |\n16 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n17 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:17:28\n   |\n17 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n18 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:18:28\n   |\n18 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n19 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:19:28\n   |\n19 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n20 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:20:28\n   |\n20 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n21 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:21:28\n   |\n21 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n22 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replaceAll(\" \", \"_\")\n  text.replaceAll(\"  \", \"_\")\n  text.replaceAll(\"  \", \"-\")\n  return text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmphstv8obs.rs:13:28\n   |\n13 |   text.replaceAll(\" \", \"_\")\n   |                            ^ help: add `;` here\n14 |   text.replaceAll(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmphstv8obs.rs:14:29\n   |\n14 |   text.replaceAll(\"  \", \"_\")\n   |                             ^ help: add `;` here\n15 |   text.replaceAll(\"  \", \"-\")\n   |   ---- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmphstv8obs.rs:15:29\n   |\n15 |   text.replaceAll(\"  \", \"-\")\n   |                             ^ help: add `;` here\n16 |   return text\n   |   ------ unexpected token\n\nerror[E0599]: no method named `replaceAll` found for struct `String` in the current scope\n  --> /tmp/tmphstv8obs.rs:13:8\n   |\n13 |   text.replaceAll(\" \", \"_\")\n   |        ^^^^^^^^^^ help: there is an associated function with a similar name: `replace`\n\nerror[E0599]: no method named `replaceAll` found for struct `String` in the current scope\n  --> /tmp/tmphstv8obs.rs:14:8\n   |\n14 |   text.replaceAll(\"  \", \"_\")\n   |        ^^^^^^^^^^ help: there is an associated function with a similar name: `replace`\n\nerror[E0599]: no method named `replaceAll` found for struct `String` in the current scope\n  --> /tmp/tmphstv8obs.rs:15:8\n   |\n15 |   text.replaceAll(\"  \", \"-\")\n   |        ^^^^^^^^^^ help: there is an associated function with a similar name: `replace`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  return String::from(text_arr_fixed_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp17yq1nd_.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp17yq1nd_.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp17yq1nd_.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp17yq1nd_.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp17yq1nd_.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i % 2 == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else {\n      text_arr_fixed.push(\"_\");\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.length > 2 {\n    let text_fixed_fixed = [];\n    for i in 0..text_fixed.length {\n      if i % 2 == 0 {\n        text_fixed_fixed.push(text_fixed[i]);\n      } else {\n        text_fixed_fixed.push(\"-\");\n      }\n    }\n    text_fixed = String::join(\"\", text_fixed_fixed);\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnjbu9vk6.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnjbu9vk6.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnjbu9vk6.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnjbu9vk6.rs:19:22\n   |\n19 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpnjbu9vk6.rs:22:28\n   |\n22 |   let text_fixed = String::join(\"\", text_arr_fixed);\n   |                            ^^^^ function or associated item not found in `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnjbu9vk6.rs:27:26\n   |\n27 |         text_fixed_fixed.push(text_fixed[i]);\n   |                          ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnjbu9vk6.rs:29:26\n   |\n29 |         text_fixed_fixed.push(\"-\");\n   |                          ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpnjbu9vk6.rs:32:26\n   |\n32 |     text_fixed = String::join(\"\", text_fixed_fixed);\n   |                          ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0599, E0608, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \"\") {\n            text_arr_fixed.append(\"\");\n        } else {\n            text_arr_fixed.append(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_2 = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] == \" \") {\n            if (i < len(text_arr_fixed) - 1) {\n                if (text_arr_fixed[i+1] == \" \") {\n                    text_arr_fixed_2.append(\"-\");\n                    i += 1;\n                } else {\n                    text_arr_fixed_2.append(\"_\");\n                }\n            } else {\n                text_arr_fixed_2.append(\"_\");\n            }\n        } else {\n            text_arr_fixed_2.append(text_arr_fixed[i]);\n        }\n    }\n    return String::from(text_arr_fixed_2.join(\"\"));\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjuolf9i7.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpjuolf9i7.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjuolf9i7.rs:23:14\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpjuolf9i7.rs:23:23\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpjuolf9i7.rs:25:21\n   |\n25 |             if (i < len(text_arr_fixed) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjuolf9i7.rs:16:12\n   |\n16 |         if (text_arr[i] == \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] == \"\") {\n16 +         if text_arr[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjuolf9i7.rs:24:12\n   |\n24 |         if (text_arr_fixed[i] == \" \") {\n   |            ^                        ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (text_arr_fixed[i] == \" \") {\n24 +         if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjuolf9i7.rs:25:16\n   |\n25 |             if (i < len(text_arr_fixed) - 1) {\n   |                ^                           ^\n   |\nhelp: remove these parentheses\n   |\n25 -             if (i < le",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in 0..text_arr.len() {\n        let text_arr_fixed_i = [];\n        if (text_arr[i].len() > 2) {\n            text_arr_fixed_i.append(text_arr[i].replace(\" \", \"-\"));\n        } else {\n            text_arr_fixed_i.append(text_arr[i]);\n        }\n        text_arr_fixed.append(text_arr_fixed_i);\n    }\n    let text_fixed = String::join(\" \", text_arr_fixed);\n    return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpztsnwbbx.rs:17:12\n   |\n17 |         if (text_arr[i].len() > 2) {\n   |            ^                     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -         if (text_arr[i].len() > 2) {\n17 +         if text_arr[i].len() > 2 {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpztsnwbbx.rs:15:26\n   |\n15 |     for i in 0..text_arr.len() {\n   |                          ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpztsnwbbx.rs:17:13\n   |\n17 |         if (text_arr[i].len() > 2) {\n   |             ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpztsnwbbx.rs:18:30\n   |\n18 |             text_arr_fixed_i.append(text_arr[i].replace(\" \", \"-\"));\n   |                              ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpztsnwbbx.rs:18:37\n   |\n18 |             text_arr_fixed_i.append(text_arr[i].replace(\" \", \"-\"));\n   |                                     ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpztsnwbbx.rs:20:30\n   |\n20 |             text_arr_fixed_i.append(text_arr[i]);\n   |                              ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpztsnwbbx.rs:20:37\n   |\n20 |             text_arr_fixed_i.append(text_arr[i]);\n   |                                     ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpztsnwbbx.rs:22:24\n   |\n22 |         text_arr_fixed.append(text_arr_fixed_i);\n   |                        ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated it",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] != \"\") {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed_fixed_fixed[i]\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp131f9uy3.rs:56:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n45 |   for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed_fixed.length; i++) {\n   |                                                                           - this delimiter might not be properly closed...\n46 |     if (text_arr_fixed_fixed_fixed_fixed_fixed[i]\n47 | }\n   | - ...as it matches this but it has different indentation\n...\n56 | }\n   |   ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp131f9uy3.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp131f9uy3.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp131f9uy3.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp131f9uy3.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp131f9uy3.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp131f9uy3.rs:46:8\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n46 |     if (text_arr_fixed_fixed_fixed_fixed_fixed[i]\n   |        ^ unclosed delimiter\n47 | }\n   | ^ mismatched closing delimiter\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let new_text = \"\";\n  for i in 0..text_arr.len() {\n    if (i == 0) {\n      new_text += text_arr[i];\n    } else if (i == text_arr.len() - 1) {\n      new_text += text_arr[i];\n    } else {\n      new_text += text_arr[i] + \"_\";\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxbhrow3a.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxbhrow3a.rs:18:15\n   |\n18 |     } else if (i == text_arr.len() - 1) {\n   |               ^                       ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == text_arr.len() - 1) {\n18 +     } else if i == text_arr.len() - 1 {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpxbhrow3a.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxbhrow3a.rs:17:19\n   |\n17 |       new_text += text_arr[i];\n   |                   ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpxbhrow3a.rs:18:30\n   |\n18 |     } else if (i == text_arr.len() - 1) {\n   |                              ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxbhrow3a.rs:19:19\n   |\n19 |       new_text += text_arr[i];\n   |                   ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxbhrow3a.rs:21:19\n   |\n21 |       new_text += text_arr[i] + \"_\";\n   |                   ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxbhrow3a.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return new_text;\n   |          ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  let spaces = text.split(\" \")\n  let result = \"\"\n  for i in 0..spaces.length-1 {\n    if spaces[i] == \" \" && spaces[i+1] == \" \" {\n      result += \"-\"\n    } else {\n      result += spaces[i]\n    }\n  }\n  result += spaces[spaces.length-1]\n  return result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqt_w7mxb.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   let spaces = text.split(\" \")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqt_w7mxb.rs:14:31\n   |\n14 |   let spaces = text.split(\" \")\n   |                               ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqt_w7mxb.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in 0..spaces.length-1 {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpqt_w7mxb.rs:23:36\n   |\n23 |   result += spaces[spaces.length-1]\n   |                                    ^ help: add `;` here\n24 |   return result\n   |   ------ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqt_w7mxb.rs:13:3\n   |\n13 |   text.replace(\" \", \"_\")\n   |   ^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\n   |   |\n   |   expected `()`, found struct `String`\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqt_w7mxb.rs:16:22\n   |\n16 |   for i in 0..spaces.length-1 {\n   |                      ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqt_w7mxb.rs:17:8\n   |\n17 |     if spaces[i] == \" \" && spaces[i+1] == \" \" {\n   |        ^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqt_w7mxb.rs:17:28\n   |\n17 |     if spaces[i] == \" \" && spaces[i+1] == \" \" {\n   |                            ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpqt_w7mxb.rs:18:7\n   |\n18 |       result += \"-\"\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqt_w7mxb.rs:20:17\n   |\n20 |       re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text = String(text);\n    let spaces = text.split(\" \");\n    let result = \"\";\n    for i in 0..spaces.length - 1 {\n        let space = spaces[i];\n        if (space.length > 2) {\n            result += \"_\" + space.replace(\" \", \"-\");\n        } else {\n            result += space;\n        }\n        result += \" \";\n    }\n    result += spaces[spaces.length - 1];\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0423]: expected function, tuple struct or tuple variant, found struct `String`\n   --> /tmp/tmpi6byiw7b.rs:13:16\n    |\n13  |       let text = String(text);\n    |                  ^^^^^^^^^^^^ help: use struct literal syntax instead: `String { vec: val }`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi6byiw7b.rs:18:12\n   |\n18 |         if (space.length > 2) {\n   |            ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -         if (space.length > 2) {\n18 +         if space.length > 2 {\n   | \n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpi6byiw7b.rs:23:9\n   |\n23 |         result += \" \";\n   |         ------^^^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi6byiw7b.rs:26:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n26 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new.push(\"_\");\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new = [];\n  for i in range(0, len(text_arr_fixed_new)) {\n    if (text_arr_fixed_new[i] != \"\") {\n      if (text_arr_fixed_new[i] == \" \") {\n        text_arr_fixed_new_new.push(\"-\");\n      } else {\n        text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new_new = [];\n  for i in range(0, len(text_arr_fixed_new_new)) {\n    if (text_arr_fixed_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new.push(text_arr_fixed_new_new[i]);\n    }\n  }\n  return String::from(text_arr_fixed_new_new_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn9b3wemh.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpn9b3wemh.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn9b3wemh.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpn9b3wemh.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn9b3wemh.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpn9b3wemh.rs:31:21\n   |\n31 |   for i in range(0, len(text_arr_fixed_new)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn9b3wemh.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpn9b3wemh.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_new_new)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpn9b3wemh.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i % 2 == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else {\n      text_arr_fixed.push(\"_\");\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.count(\" \") > 2 {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3ekwqog5.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3ekwqog5.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:19:22\n   |\n19 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp3ekwqog5.rs:22:28\n   |\n22 |   let text_fixed = String::join(\"\", text_arr_fixed);\n   |                            ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0608, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if (text_fixed.count(\" \") > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:16:8\n   |\n16 |     if (text_arr[i] == \" \") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \" \") {\n16 +     if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:23:6\n   |\n23 |   if (text_fixed.count(\" \") > 2) {\n   |      ^                         ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text_fixed.count(\" \") > 2) {\n23 +   if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:16:9\n   |\n16 |     if (text_arr[i] == \" \") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:17:22\n   |\n17 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:22:28\n   |\n22 |   let tex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.len() {\n    if (i == 0) {\n      result += text_arr[i];\n    } else if (i == text_arr.len() - 1) {\n      result += text_arr[i];\n    } else {\n      if (text_arr[i] == \" \" && text_arr[i + 1] == \" \") {\n        result += \"-\";\n      } else {\n        result += text_arr[i];\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpewb6skqe.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpewb6skqe.rs:18:15\n   |\n18 |     } else if (i == text_arr.len() - 1) {\n   |               ^                       ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == text_arr.len() - 1) {\n18 +     } else if i == text_arr.len() - 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpewb6skqe.rs:21:10\n   |\n21 |       if (text_arr[i] == \" \" && text_arr[i + 1] == \" \") {\n   |          ^                                            ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (text_arr[i] == \" \" && text_arr[i + 1] == \" \") {\n21 +       if text_arr[i] == \" \" && text_arr[i + 1] == \" \" {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpewb6skqe.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpewb6skqe.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpewb6skqe.rs:18:30\n   |\n18 |     } else if (i == text_arr.len() - 1) {\n   |                              ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpewb6skqe.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpewb6skqe.rs:21:11\n   |\n21 |       if (text_arr[i] == \" \" && text_arr[i + 1] == \" \") {\n   |        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in text_arr {\n    if (i.length > 0) {\n      result += i.replace(\" \", \"_\");\n    }\n  }\n  if (result.length > 0) {\n    let result_arr = result.split(\" \");\n    for i in result_arr {\n      if (i.length > 2) {\n        result += \"_\" + i.replace(\" \", \"-\");\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2fd58zga.rs:16:8\n   |\n16 |     if (i.length > 0) {\n   |        ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i.length > 0) {\n16 +     if i.length > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2fd58zga.rs:20:6\n   |\n20 |   if (result.length > 0) {\n   |      ^                 ^\n   |\nhelp: remove these parentheses\n   |\n20 -   if (result.length > 0) {\n20 +   if result.length > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2fd58zga.rs:23:10\n   |\n23 |       if (i.length > 2) {\n   |          ^            ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (i.length > 2) {\n23 +       if i.length > 2 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp2fd58zga.rs:16:11\n   |\n16 |     if (i.length > 0) {\n   |           ^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp2fd58zga.rs:17:7\n   |\n17 |       result += i.replace(\" \", \"_\");\n   |       ------^--^^^^^^^^^^^^^^^^^^^^\n   |       |      |\n   |       |      `+` cannot be used to concatenate a `&str` with a `String`\n   |       cannot use `+=` on type `&str`\n   |\n   = note: string concatenation requires an owned `String` on the left\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp2fd58zga.rs:20:14\n   |\n20 |   if (result.length > 0) {\n   |              ^^^^^^\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp2fd58zga.rs:23:13\n   |\n23 |       if (i.length > 2) {\n   |             ^^^^^^\n\nerror[E0369]: cannot add `String` to `&str`\n  --> /tmp/tmp2fd58zga.rs:24:23\n   |\n24 |         result += \"_\" + i.replace(\" \", \"-\");\n   |                   --- ^ ------------------- String\n   |                   |   |\n   |                   |   `+` cannot be used to concatenate a `&str` with a `String`\n   |                   &str\n   |\nhelp: create an owned `String` on the left and add a bor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.len() {\n    if i == 0 {\n      result += text_arr[i];\n    } else if i == text_arr.len() - 1 {\n      result += \"_\" + text_arr[i];\n    } else {\n      result += text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp_z1xtxto.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp_z1xtxto.rs:18:29\n   |\n18 |     } else if i == text_arr.len() - 1 {\n   |                             ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:19:23\n   |\n19 |       result += \"_\" + text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:21:17\n   |\n21 |       result += text_arr[i] + \"_\";\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_z1xtxto.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i < text_arr_fixed.length - 1) {\n          if (text_arr_fixed[i + 1] == \" \") {\n            text_arr_fixed_fixed.push(\"-\");\n            i++;\n          } else {\n            text_arr_fixed_fixed.push(\"_\");\n          }\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::from(text_arr_fixed_fixed.join(\"\"));\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpb_nr1kyx.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpb_nr1kyx.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpb_nr1kyx.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpb_nr1kyx.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpb_nr1kyx.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \"\") {\n            text_arr_fixed.append(\"\");\n        } else {\n            text_arr_fixed.append(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] == \"\") {\n            text_arr_fixed_fixed.append(\"\");\n        } else {\n            if (text_arr_fixed[i] == \" \") {\n                text_arr_fixed_fixed.append(\"_\");\n            } else {\n                text_arr_fixed_fixed.append(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] == \"\") {\n            text_arr_fixed_fixed_fixed.append(\"\");\n        } else {\n            if (text_arr_fixed_fixed[i] == \" \") {\n                text_arr_fixed_fixed_fixed.append(\"-\");\n            } else {\n                text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n            }\n        }\n    }\n    return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8wurb1d2.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8wurb1d2.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8wurb1d2.rs:23:14\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8wurb1d2.rs:23:23\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8wurb1d2.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8wurb1d2.rs:35:23\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8wurb1d2.rs:16:12\n   |\n16 |         if (text_arr[i] == \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] == \"\") {\n16 +         if text_arr[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8wurb1d2.rs:24:12\n   |\n24 |         if (text_arr_fixed[i] == \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (text_arr_fixed[i] == \"\") {\n24 +         if text_arr_fix",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let result = text.replace(/ /g, \"_\");\n  if (result.contains(\"  \")) {\n    result = result.replace(\"  \", \"-\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected expression, found `/`\n  --> /tmp/tmp1nlwap98.rs:13:29\n   |\n13 |   let result = text.replace(/ /g, \"_\");\n   |                             ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text = text.replace(\" \", \"_\");\n  let mut text_arr = text.split(\" \");\n  for i in 0..text_arr.len() {\n    if text_arr[i] == \" \" {\n      text_arr[i] = \"-\";\n    }\n  }\n  text = String::join(text_arr, \" \");\n  return text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp3dvrub73.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3dvrub73.rs:16:8\n   |\n16 |     if text_arr[i] == \" \" {\n   |        ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3dvrub73.rs:17:7\n   |\n17 |       text_arr[i] = \"-\";\n   |       ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp3dvrub73.rs:20:18\n   |\n20 |   text = String::join(text_arr, \" \");\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0) {\n          text_arr_fixed_new.push(\"_\");\n        } else if (i == len(text_arr_fixed) - 1) {\n          text_arr_fixed_new.push(\"-\");\n        } else {\n          text_arr_fixed_new.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_str = String::join(\"\", text_arr_fixed_new);\n  return text_arr_fixed_new_str;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpsyea6as8.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsyea6as8.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpsyea6as8.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsyea6as8.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsyea6as8.rs:26:25\n   |\n26 |         } else if (i == len(text_arr_fixed) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsyea6as8.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsyea6as8.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsyea6as8.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:14:26\n   |\n14 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n15 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:15:26\n   |\n15 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n16 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:16:26\n   |\n16 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n17 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:17:26\n   |\n17 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n18 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:18:26\n   |\n18 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n19 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:19:26\n   |\n19 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n20 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:20:26\n   |\n20 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n21 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:21:26\n   |\n21 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n22 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:22:26\n   |\n22 |   text.replace(\"  \", \"_\")\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_2 = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (text_arr_fixed[i+1] == \" \") {\n          text_arr_fixed_2.push(\"_\");\n          i++;\n        } else {\n          text_arr_fixed_2.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_2.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::join(\"\", text_arr_fixed_2);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: Rust has no postfix increment operator\n  --> /tmp/tmpz1wpkjtt.rs:26:12\n   |\n26 |           i++;\n   |            ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n26 |           { let tmp = i; i += 1; tmp };\n   |           +++++++++++  ~~~~~~~~~~~~~~~\n26 -           i++;\n26 +           i += 1;\n   | \n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpz1wpkjtt.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz1wpkjtt.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpz1wpkjtt.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz1wpkjtt.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpz1wpkjtt.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpz1wpkjtt.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpz1wpkjtt.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.len() {\n    if i == 0 {\n      text_arr_fixed.append(text_arr[i]);\n    } else if i == text_arr.len() - 1 {\n      text_arr_fixed.append(text_arr[i]);\n    } else {\n      text_arr_fixed.append(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in 0..text_arr_fixed.len() {\n    if i == 0 {\n      text_arr_fixed_fixed.append(text_arr_fixed[i]);\n    } else if i == text_arr_fixed.len() - 1 {\n      text_arr_fixed_fixed.append(text_arr_fixed[i]);\n    } else {\n      text_arr_fixed_fixed.append(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in 0..text_arr_fixed_fixed.len() {\n    if i == 0 {\n      text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n    } else if i == text_arr_fixed_fixed.len() - 1 {\n      text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n    } else {\n      text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in 0..text_arr_fixed_fixed_fixed.len() {\n    if i == 0 {\n      text_arr_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed[i]);\n    } else if i == text_arr_fixed_fixed_fixed.len() - 1 {\n      text_arr_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed[i]);\n    } else {\n      \n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnwuh8q8c.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n45 |   for i in 0..text_arr_fixed_fixed_fixed.len() {\n   |                                                - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       \n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:17:22\n   |\n17 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnwuh8q8c.rs:17:29\n   |\n17 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:18:29\n   |\n18 |     } else if i == text_arr.len() - 1 {\n   |                             ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:19:22\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnwuh8q8c.rs:19:29\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:21:22\n   |\n21 |       text_arr_fixed.appen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.len() {\n    if i == 0 {\n      result += text_arr[i];\n    } else if i == text_arr.len() - 1 {\n      result += \"_\" + text_arr[i];\n    } else {\n      result += text_arr[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp1x12rij_.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1x12rij_.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp1x12rij_.rs:18:29\n   |\n18 |     } else if i == text_arr.len() - 1 {\n   |                             ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1x12rij_.rs:19:23\n   |\n19 |       result += \"_\" + text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1x12rij_.rs:21:17\n   |\n21 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1x12rij_.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let mut text = text.replace(\" \", \"_\");\n  let mut text = text.replace(\"  \", \"_\");\n  if text.contains(\"  \") {\n    let mut text = text.replace(\"  \", \"-\");\n  }\n  return text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmptntanpgl.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, text_arr_fixed.length) {\n    if (text_arr_fixed[i] != \"\") {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed.length) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpfcq7k9ah.rs:57:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n45 |   for i in range(0, text_arr_fixed_fixed_fixed_fixed_fixed.length) {\n   |                                                                    - unclosed delimiter\n46 |     if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n   |                                                          - this delimiter might not be properly closed...\n47 |       text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n48 | }\n   | - ...as it matches this but it has different indentation\n...\n57 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpfcq7k9ah.rs:47:56\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n47 |       text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n   |                                                        ^ unclosed delimiter\n48 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:21:12\n   |\n21 |   for i in range(0, text_arr_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:27:12\n   |\n27 |   for i in range(0, text_arr_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:33:12\n   |\n33 |   for i in range(0, text_arr_fixed_fix",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \" \") {\n      text_arr_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \" \") {\n      text_arr_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \" \") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \" \") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpi2g3rejz.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpi2g3rejz.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpi2g3rejz.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi2g3rejz.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpi2g3rejz.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi2g3rejz.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpi2g3rejz.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_fixed += \"_\";\n      } else {\n        text_fixed += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwun5fpqp.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwun5fpqp.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwun5fpqp.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwun5fpqp.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpwun5fpqp.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `pus",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, text_arr_fixed.length) {\n    if (text_arr_fixed[i] != \"\") {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed.length) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpfcq7k9ah.rs:57:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n45 |   for i in range(0, text_arr_fixed_fixed_fixed_fixed_fixed.length) {\n   |                                                                    - unclosed delimiter\n46 |     if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n   |                                                          - this delimiter might not be properly closed...\n47 |       text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n48 | }\n   | - ...as it matches this but it has different indentation\n...\n57 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpfcq7k9ah.rs:47:56\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n47 |       text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n   |                                                        ^ unclosed delimiter\n48 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:21:12\n   |\n21 |   for i in range(0, text_arr_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:27:12\n   |\n27 |   for i in range(0, text_arr_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfcq7k9ah.rs:33:12\n   |\n33 |   for i in range(0, text_arr_fixed_fix",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == text_arr.length - 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if text_arr[i] == \" \" {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.contains(\"  \") {\n    text_fixed = text_fixed.replace(\"  \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:20:15\n   |\n20 |     } else if text_arr[i] == \" \" {\n   |               ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:21:22\n   |\n21 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:23:22\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:23:27\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let mut text_buffer = StringBuilder();\n  let mut text_buffer_mut = &text_buffer;\n  let mut text_buffer_mut_mut = &text_buffer_mut;\n  let mut text_buffer_mut_mut_mut = &text_buffer_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut = &text_buffer_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut;\n  let mut text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp5ueij81n.rs:26:129\n   |\n26 |   let mut text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut = &text_buffer_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut\n   |                                                                                                                                 ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmp5ueij81n.rs:13:25\n   |\n13 |   let mut text_buffer = StringBuilder();\n   |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ueij81n.rs:12:32\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |    ----------                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0 || i == len(text_arr_fixed) - 1) {\n          text_arr_fixed_fixed.push(text_arr_fixed[i]);\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        if (i == 0 || i == len(text_arr_fixed_fixed) - 1) {\n          text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n        } else {\n          text_arr_fixed_fixed_fixed.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  return String\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:24:28\n   |\n24 |         if (i == 0 || i == len(text_arr_fixed) - 1) {\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphmhuibyt.rs:38:28\n   |\n38 |         if (i == 0 || i == len(text_arr_fixed_fixed) - 1) {\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphmhuibyt.rs:49:12\n   |\n49 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider imp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0) {\n          text_arr_fixed_new.push(\"_\");\n        } else {\n          text_arr_fixed_new.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new = [];\n  for i in range(0, len(text_arr_fixed_new)) {\n    if (text_arr_fixed_new[i] != \"\") {\n      text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n    }\n  }\n  return String::from(text_arr_fixed_new_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbbyzvcnq.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbbyzvcnq.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbbyzvcnq.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbbyzvcnq.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbbyzvcnq.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_new)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbbyzvcnq.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_new)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbbyzvcnq.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbbyzvcnq.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.length {\n    if i == 0 {\n      result += text_arr[i];\n    } else if i == text_arr.length - 1 {\n      result += \"_\" + text_arr[i];\n    } else {\n      result += text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9i7qb9d5.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9i7qb9d5.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9i7qb9d5.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9i7qb9d5.rs:19:23\n   |\n19 |       result += \"_\" + text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9i7qb9d5.rs:21:17\n   |\n21 |       result += text_arr[i] + \"_\";\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9i7qb9d5.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0608, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, text_arr_fixed.length) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new.push(\"_\");\n      } else {\n        text_arr_fixed_new.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new = [];\n  for i in range(0, text_arr_fixed_new.length) {\n    if (text_arr_fixed_new[i] != \"\") {\n      if (text_arr_fixed_new[i] == \" \") {\n        text_arr_fixed_new_new.push(\"-\");\n      } else {\n        text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n      }\n    }\n  }\n  let text_arr_fixed_new_new_new = [];\n  for i in range(0, text_arr_fixed_new_new.length) {\n    if (text_arr_fixed_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new.push(text_arr_fixed_new_new[i]);\n    }\n  }\n  let text_arr_fixed_new_new_new_new = [];\n  for i in range(0, text_arr_fixed_new_new_new.length) {\n    if (text_arr_fixed_new_new_new[i] != \"\") {\n      text_arr_fixed_new_new_new_new.push(text_arr_fixed_new_new_new[i]);\n    }\n  }\n  let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpya_v2zvp.rs:52:21\n   |\n52 |   let text_arr_fixed\n   |                     ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpya_v2zvp.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpya_v2zvp.rs:21:12\n   |\n21 |   for i in range(0, text_arr_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpya_v2zvp.rs:31:12\n   |\n31 |   for i in range(0, text_arr_fixed_new.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpya_v2zvp.rs:41:12\n   |\n41 |   for i in range(0, text_arr_fixed_new_new.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpya_v2zvp.rs:47:12\n   |\n47 |   for i in range(0, text_arr_fixed_new_new_new.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpya_v2zvp.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpya_v2zvp.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      result += text_arr[i] + \" \";\n    } else {\n      result += \"_ \";\n    }\n  }\n  return result.trim();\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_oec7fij.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_oec7fij.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_oec7fij.rs:15:30\n   |\n15 |   for i in range(0, text_arr.length) {\n   |                              ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_oec7fij.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_oec7fij.rs:17:17\n   |\n17 |       result += text_arr[i] + \" \";\n   |                 ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp_oec7fij.rs:19:7\n   |\n19 |       result += \"_ \";\n   |       ------^^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_oec7fij.rs:22:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n22 |   return result.trim();\n   |          ^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0425, E0608, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpgzkwqjmu.rs:52:21\n   |\n52 |   let text_arr_fixed\n   |                     ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:31:21\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:41:12\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgzkwqjmu.rs:41:21\n   |\n41 |   for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |                     ^^^ not found in this",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new += \"_\";\n      } else {\n        text_arr_fixed_new += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_arr_fixed_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpcll_ai3w.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `pus",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.length - 1 {\n    if text_arr[i] == \" \" {\n      result += \"_\";\n    } else {\n      result += text_arr[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1kzjg1bl.rs:15:24\n   |\n15 |   for i in 0..text_arr.length - 1 {\n   |                        ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1kzjg1bl.rs:16:8\n   |\n16 |     if text_arr[i] == \" \" {\n   |        ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp1kzjg1bl.rs:17:7\n   |\n17 |       result += \"_\";\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1kzjg1bl.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1kzjg1bl.rs:22:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n22 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0368, E0608, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8ql4tiq1.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8ql4tiq1.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:17:16\n   |\n17 |       result = text_arr[i];\n   |                ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ql4tiq1.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let result = text.replace(/\\s+/g, \"_\");\n  let spaces = result.split(\" \");\n  let new_spaces = [];\n  for (let space of spaces) {\n    if (space.length > 1) {\n      new_spaces.push(space.replace(/\\s+/g, \"-\"));\n    } else {\n      new_spaces.push(space);\n    }\n  }\n  return String::join(new_spaces, \" \");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpoqxkq2km.rs:13:30\n   |\n13 |   let result = text.replace(/\\s+/g, \"_\");\n   |                              ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpoqxkq2km.rs:18:38\n   |\n18 |       new_spaces.push(space.replace(/\\s+/g, \"-\"));\n   |                                      ^\n\nerror: expected expression, found `/`\n  --> /tmp/tmpoqxkq2km.rs:13:29\n   |\n13 |   let result = text.replace(/\\s+/g, \"_\");\n   |                             ^ expected expression\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_fixed = String::join(\"_\", text_arr_fixed);\n    if (text_fixed.count(\" \") > 2) {\n        text_fixed = text_fixed.replace(\" \", \"-\");\n    }\n    return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3gwtfz3w.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp3gwtfz3w.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3gwtfz3w.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] != \"\") {\n16 +         if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3gwtfz3w.rs:21:8\n   |\n21 |     if (text_fixed.count(\" \") > 2) {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n21 -     if (text_fixed.count(\" \") > 2) {\n21 +     if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3gwtfz3w.rs:16:13\n   |\n16 |         if (text_arr[i] != \"\") {\n   |             ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3gwtfz3w.rs:17:28\n   |\n17 |             text_arr_fixed.push(text_arr[i]);\n   |                            ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3gwtfz3w.rs:17:33\n   |\n17 |             text_arr_fixed.push(text_arr[i]);\n   |                                 ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp3gwtfz3w.rs:20:30\n   |\n20 |     let text_fixed = String::join(\"_\", text_arr_fixed);\n   |                              ^^^^ function or associated item not found in `String`\n\nerror: aborting due ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result = text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result = result + text_arr[i];\n        } else {\n            result = result + text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnolbv_wj.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnolbv_wj.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnolbv_wj.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnolbv_wj.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnolbv_wj.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:17:22\n   |\n17 |             result = text_arr[i];\n   |                      ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:19:31\n   |\n19 |             result = result + text_arr[i];\n   |                               ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:21:31\n   |\n21 |             result = result + text_arr[i] + \"_\";\n   |                               ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnolbv_wj.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    let text_arr_fixed_i = [];\n    for j in 0..text_arr[i].length {\n      if (j == 0) {\n        text_arr_fixed_i.append(text_arr[i][j]);\n      } else if (text_arr[i][j] == \" \") {\n        text_arr_fixed_i.append(\"_\");\n      } else {\n        text_arr_fixed_i.append(text_arr[i][j]);\n      }\n    }\n    text_arr_fixed.append(String::from(\"\".join(text_arr_fixed_i)));\n  }\n  return String::from(\"\".join(text_arr_fixed));\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsrtk52yb.rs:18:10\n   |\n18 |       if (j == 0) {\n   |          ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -       if (j == 0) {\n18 +       if j == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsrtk52yb.rs:20:17\n   |\n20 |       } else if (text_arr[i][j] == \" \") {\n   |                 ^                     ^\n   |\nhelp: remove these parentheses\n   |\n20 -       } else if (text_arr[i][j] == \" \") {\n20 +       } else if text_arr[i][j] == \" \" {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:17:17\n   |\n17 |     for j in 0..text_arr[i].length {\n   |                 ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsrtk52yb.rs:19:26\n   |\n19 |         text_arr_fixed_i.append(text_arr[i][j]);\n   |                          ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:19:33\n   |\n19 |         text_arr_fixed_i.append(text_arr[i][j]);\n   |                                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:20:18\n   |\n20 |       } else if (text_arr[i][j] == \" \") {\n   |                  ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsrtk52yb.rs:21:26\n   |\n21 |         text_arr_fixed_i.append(\"_\");\n   |                          ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsrtk52yb.rs:23:26\n   |\n23 |         text_arr_fixed_i.append(text_arr[i]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in text_arr {\n    if (i.length > 1) {\n      result += i.replace(\" \", \"-\");\n    } else {\n      result += i;\n    }\n    result += \" \";\n  }\n  return result.trim();\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxucdjltt.rs:16:8\n   |\n16 |     if (i.length > 1) {\n   |        ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i.length > 1) {\n16 +     if i.length > 1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpxucdjltt.rs:16:11\n   |\n16 |     if (i.length > 1) {\n   |           ^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpxucdjltt.rs:17:7\n   |\n17 |       result += i.replace(\" \", \"-\");\n   |       ------^--^^^^^^^^^^^^^^^^^^^^\n   |       |      |\n   |       |      `+` cannot be used to concatenate a `&str` with a `String`\n   |       cannot use `+=` on type `&str`\n   |\n   = note: string concatenation requires an owned `String` on the left\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpxucdjltt.rs:19:7\n   |\n19 |       result += i;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpxucdjltt.rs:21:5\n   |\n21 |     result += \" \";\n   |     ------^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxucdjltt.rs:23:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n23 |   return result.trim();\n   |          ^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in 0..text_arr.len() {\n    if i == 0 {\n      result += text_arr[i];\n    } else if i == text_arr.len() - 1 {\n      result += \"_\" + text_arr[i];\n    } else {\n      result += text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp_z1xtxto.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmp_z1xtxto.rs:18:29\n   |\n18 |     } else if i == text_arr.len() - 1 {\n   |                             ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:19:23\n   |\n19 |       result += \"_\" + text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp_z1xtxto.rs:21:17\n   |\n21 |       result += text_arr[i] + \"_\";\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_z1xtxto.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 2 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 3 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 4 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 5 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 6 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 7 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 8 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 9 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 10 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 11 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 12 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 13 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 14 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 15 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 16 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 17 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == 18 {\n      text_arr_fixed.push(text_arr[i]);\n    } else\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn1rhdiml.rs:64:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n15 |   for i in 0..text_arr.length {\n   |                               - this delimiter might not be properly closed...\n...\n55 | }\n   | - ...as it matches this but it has different indentation\n...\n64 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpn1rhdiml.rs:55:1\n   |\n55 | }\n   | ^ expected `{`\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpn1rhdiml.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn1rhdiml.rs:12:32\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |    ----------                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.len() {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_joined = text_arr_fixed.join(\"_\");\n  if (text_arr_fixed_joined.len() > 2) {\n    let text_arr_fixed_joined_fixed = [];\n    for i in 0..text_arr_fixed_joined.len() {\n      if (text_arr_fixed_joined[i] != \" \") {\n        text_arr_fixed_joined_fixed.push(text_arr_fixed_joined[i]);\n      } else {\n        text_arr_fixed_joined_fixed.push(\"-\");\n      }\n    }\n    text_arr_fixed_joined_fixed.join(\"\");\n  }\n  text_arr_fixed_joined\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpendm6a8g.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpendm6a8g.rs:21:6\n   |\n21 |   if (text_arr_fixed_joined.len() > 2) {\n   |      ^                               ^\n   |\nhelp: remove these parentheses\n   |\n21 -   if (text_arr_fixed_joined.len() > 2) {\n21 +   if text_arr_fixed_joined.len() > 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpendm6a8g.rs:24:10\n   |\n24 |       if (text_arr_fixed_joined[i] != \" \") {\n   |          ^                               ^\n   |\nhelp: remove these parentheses\n   |\n24 -       if (text_arr_fixed_joined[i] != \" \") {\n24 +       if text_arr_fixed_joined[i] != \" \" {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpendm6a8g.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpendm6a8g.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpendm6a8g.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpendm6a8g.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpendm6a8g.rs:24:11\n   |\n24 |       if (text_arr_fixed_joined[i] != \" \") {\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result += text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result += text_arr[i];\n        } else {\n            result += text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:17:23\n   |\n17 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:19:23\n   |\n19 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:21:23\n   |\n21 |             result += text_arr[i] + \"_\";\n   |                       ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_2o6457.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                if (i > 0 && text_arr_fixed[i-1] == \" \") {\n                    text_arr_fixed_fixed.push(\"-\");\n                } else {\n                    text_arr_fixed_fixed.push(\"_\");\n                }\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] != \"\") {\n            text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n        }\n    }\n    return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1df2isvn.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1df2isvn.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1df2isvn.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1df2isvn.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1df2isvn.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1df2isvn.rs:35:23\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp1df2isvn.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] != \"\") {\n16 +         if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp1df2isvn.rs:22:12\n   |\n22 |         if (text_arr_fixed[i] != \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -         if (text_arr_fixed[i] != \"\") {\n22 +         if text_arr_fix",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    let text_arr_fixed_i = [];\n    for j in 0..text_arr[i].length {\n      if (j == 0) {\n        text_arr_fixed_i.append(text_arr[i][j]);\n      } else if (text_arr[i][j] == \" \") {\n        text_arr_fixed_i.append(\"_\");\n      } else {\n        text_arr_fixed_i.append(text_arr[i][j]);\n      }\n    }\n    text_arr_fixed.append(String::from(\"\".join(text_arr_fixed_i)));\n  }\n  return String::from(\"\".join(text_arr_fixed));\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsrtk52yb.rs:18:10\n   |\n18 |       if (j == 0) {\n   |          ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -       if (j == 0) {\n18 +       if j == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsrtk52yb.rs:20:17\n   |\n20 |       } else if (text_arr[i][j] == \" \") {\n   |                 ^                     ^\n   |\nhelp: remove these parentheses\n   |\n20 -       } else if (text_arr[i][j] == \" \") {\n20 +       } else if text_arr[i][j] == \" \" {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:17:17\n   |\n17 |     for j in 0..text_arr[i].length {\n   |                 ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsrtk52yb.rs:19:26\n   |\n19 |         text_arr_fixed_i.append(text_arr[i][j]);\n   |                          ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:19:33\n   |\n19 |         text_arr_fixed_i.append(text_arr[i][j]);\n   |                                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsrtk52yb.rs:20:18\n   |\n20 |       } else if (text_arr[i][j] == \" \") {\n   |                  ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsrtk52yb.rs:21:26\n   |\n21 |         text_arr_fixed_i.append(\"_\");\n   |                          ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsrtk52yb.rs:23:26\n   |\n23 |         text_arr_fixed_i.append(text_arr[i]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \" \") {\n      if (i == 0 || i == len(text_arr_fixed) - 1) {\n        text_arr_fixed_new.push(\"_\");\n      } else {\n        text_arr_fixed_new.push(\"-\");\n      }\n    } else {\n      text_arr_fixed_new.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_new_str = String::join(\"\", text_arr_fixed_new);\n  return text_arr_fixed_new_str;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp7np71vl5.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7np71vl5.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp7np71vl5.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7np71vl5.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7np71vl5.rs:25:26\n   |\n25 |       if (i == 0 || i == len(text_arr_fixed) - 1) {\n   |                          ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7np71vl5.rs:16:8\n   |\n16 |     if (text_arr[i] == \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \"\") {\n16 +     if text_arr[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7np71vl5.rs:24:8\n   |\n24 |     if (text_arr_fixed[i] == \" \") {\n   |        ^                        ^\n   |\nhelp: remove these parentheses\n   |\n24 -     if (text_arr_fixed[i] == \" \") {\n24 +     if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7np71vl5.rs:25:10\n   |\n25 |       if (i == 0 || i == len(text_arr_fixed) - 1) {\n   |          ^                                      ^\n   |\nhelp: remove these parentheses\n   |\n25 -       if (i == 0 || i == len(text_arr_fixed) - 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0) {\n          text_fixed += text_arr_fixed[i];\n        } else if (i == len(text_arr_fixed) - 1) {\n          text_fixed += text_arr_fixed[i];\n        } else {\n          text_fixed += \"_\";\n        }\n      } else {\n        text_fixed += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxsoxyj3i.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxsoxyj3i.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxsoxyj3i.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxsoxyj3i.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxsoxyj3i.rs:26:25\n   |\n26 |         } else if (i == len(text_arr_fixed) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxsoxyj3i.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxsoxyj3i.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxsoxyj3i.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_fixed = String::join(\"_\", text_arr_fixed);\n    if (text_fixed.contains(\"  \")) {\n        text_fixed = text_fixed.replace(\"  \", \"-\");\n    }\n    return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjv5hihwz.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpjv5hihwz.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjv5hihwz.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] != \"\") {\n16 +         if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjv5hihwz.rs:21:8\n   |\n21 |     if (text_fixed.contains(\"  \")) {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n21 -     if (text_fixed.contains(\"  \")) {\n21 +     if text_fixed.contains(\"  \") {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjv5hihwz.rs:16:13\n   |\n16 |         if (text_arr[i] != \"\") {\n   |             ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjv5hihwz.rs:17:28\n   |\n17 |             text_arr_fixed.push(text_arr[i]);\n   |                            ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjv5hihwz.rs:17:33\n   |\n17 |             text_arr_fixed.push(text_arr[i]);\n   |                                 ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpjv5hihwz.rs:20:30\n   |\n20 |     let text_fixed = String::join(\"_\", text_arr_fixed);\n   |                              ^^^^ function or associated item not found in `String`\n\nerror: aborting due ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \" \") {\n      text_arr_fixed_fixed.push(\"_\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \" \") {\n      text_arr_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \" \") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \" \") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1vgt8th_.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp1vgt8th_.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1vgt8th_.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1vgt8th_.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1vgt8th_.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1vgt8th_.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1vgt8th_.rs:31:12\n   |\n31 |   for i in range(0, len(text_arr_fixed_fixed)) {\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result += text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result += text_arr[i];\n        } else {\n            result += text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_2o6457.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm_2o6457.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:17:23\n   |\n17 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:19:23\n   |\n19 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpm_2o6457.rs:21:23\n   |\n21 |             result += text_arr[i] + \"_\";\n   |                       ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_2o6457.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoh9ur4y3.rs:57:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n45 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed_fixed)) {\n   |                                                                  - unclosed delimiter\n46 |     if (text_arr_fixed_fixed_fixed_fixed_fixed[i] != \"\") {\n   |                                                          - this delimiter might not be properly closed...\n47 |       text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n48 | }\n   | - ...as it matches this but it has different indentation\n...\n57 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpoh9ur4y3.rs:47:56\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n47 |       text_arr_fixed_fixed_fixed_fixed_fixed_fixed.push(\n   |                                                        ^ unclosed delimiter\n48 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpoh9ur4y3.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpoh9ur4y3.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpoh9ur4y3.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpoh9ur4y3.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_new = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                text_arr_fixed_new.push(\"_\");\n            } else {\n                text_arr_fixed_new.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_new_new = [];\n    for i in range(0, len(text_arr_fixed_new)) {\n        if (text_arr_fixed_new[i] != \"\") {\n            if (text_arr_fixed_new[i] == \" \") {\n                text_arr_fixed_new_new.push(\"-\");\n            } else {\n                text_arr_fixed_new_new.push(text_arr_fixed_new[i]);\n            }\n        }\n    }\n    let text_arr_fixed_new_new_new = [];\n    for i in range(0, len(text_arr_fixed_new_new)) {\n        if (text_arr_fixed_new_new[i] != \"\") {\n            text_arr_fixed_new_new_new.push(text_arr_fixed_new_new[i]);\n        }\n    }\n    return String::from(text_arr_fixed_new_new_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:31:14\n   |\n31 |     for i in range(0, len(text_arr_fixed_new)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:31:23\n   |\n31 |     for i in range(0, len(text_arr_fixed_new)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9rc6m26d.rs:41:14\n   |\n41 |     for i in range(0, len(text_arr_fixed_new_new)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9rc6m26d.rs:41:23\n   |\n41 |     for i in range(0, len(text_arr_fixed_new_new)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9rc6m26d.rs:16:12\n   |\n16 |         if (text_arr[i] != \"\") {\n   |          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_fixed += \"_\";\n    } else {\n      text_fixed += text_arr_fixed[i];\n    }\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpkp1zz6e4.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkp1zz6e4.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkp1zz6e4.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] == \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] == \"\") {\n22 +     if text_arr_fixed[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpkp1zz6e4.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpkp1zz6e4.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpkp1zz6e4.rs:17:27\n   |\n17 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                if (i > 0 && text_arr_fixed[i-1] == \" \") {\n                    text_arr_fixed_fixed.push(\"_\");\n                } else {\n                    text_arr_fixed_fixed.push(\" \");\n                }\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] != \"\") {\n            if (text_arr_fixed_fixed[i] == \" \") {\n                if (i > 0 && text_arr_fixed_fixed[i-1] == \" \") {\n                    text_arr_fixed_fixed_fixed.push(\"_\");\n                } else {\n                    text_arr_fixed_fixed_fixed.push(\" \");\n                }\n            } else {\n                text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed[i] != \"\") {\n            if (text_arr_fixed_fixed_fixed[i] == \" \") {\n                if (i > 0 && text_arr_fixed_fixed_fixed[i-1] == \" \") {\n                    \n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5q3py_9_.rs:63:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n49 |     for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |                                                        - unclosed delimiter\n50 |         if (text_arr_fixed_fixed_fixed[i] != \"\") {\n   |                                                  - unclosed delimiter\n51 |             if (text_arr_fixed_fixed_fixed[i] == \" \") {\n   |                                                       - unclosed delimiter\n52 |                 if (i > 0 && text_arr_fixed_fixed_fixed[i-1] == \" \") {\n   |                                                                      - this delimiter might not be properly closed...\n53 |                     \n54 | }\n   | - ...as it matches this but it has different indentation\n...\n63 | }\n   |   ^\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5q3py_9_.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5q3py_9_.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5q3py_9_.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5q3py_9_.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5q3py_9_.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let mut text_buffer = StringBuilder();\n  let mut text_buffer_2 = StringBuilder();\n  let mut text_buffer_3 = StringBuilder();\n  let mut text_buffer_4 = StringBuilder();\n  let mut text_buffer_5 = StringBuilder();\n  let mut text_buffer_6 = StringBuilder();\n  let mut text_buffer_7 = StringBuilder();\n  let mut text_buffer_8 = StringBuilder();\n  let mut text_buffer_9 = StringBuilder();\n  let mut text_buffer_10 = StringBuilder();\n  let mut text_buffer_11 = StringBuilder();\n  let mut text_buffer_12 = StringBuilder();\n  let mut text_buffer_13 = StringBuilder();\n  let mut text_buffer_14 = StringBuilder();\n  let mut text_buffer_15 = StringBuilder();\n  let mut text_buffer_16 = StringBuilder();\n  let mut text_buffer_17 = StringBuilder();\n  let mut text_buffer_18 = StringBuilder();\n  let mut text_buffer_19 = StringBuilder();\n  let mut text_buffer_20 = StringBuilder();\n  let mut text_buffer_21 = StringBuilder();\n  let mut text_buffer_22 = StringBuilder();\n  let mut text_buffer_23 = StringBuilder();\n  let mut text_buffer_24 = StringBuilder();\n  let mut text_buffer_25 = StringBuilder();\n  let mut text_buffer_26 = StringBuilder();\n  let mut text_buffer_27 = StringBuilder();\n  let mut text_buffer_28 = StringBuilder();\n  let mut text_buffer_29 = StringBuilder();\n  let mut text_buffer_30 = StringBuilder();\n  let mut text_buffer_31 = StringBuilder();\n  let mut text_buffer_32 = StringBuilder();\n  let mut text_buffer_33 = StringBuilder();\n  let mut text_buffer_34 = StringBuilder();\n  let mut text_buffer_35 = StringBuilder();\n  let mut text_buffer_36 = StringBuilder();\n  let mut text_buffer_37 = StringBuilder();\n  let mut text_buffer_38 = StringBuilder();\n  let mut text_buffer_39 = StringBuilder();\n  let mut text_buffer_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpqzzt96_v.rs:52:23\n   |\n52 |   let mut text_buffer_\n   |                       ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.rs:13:25\n   |\n13 |   let mut text_buffer = StringBuilder();\n   |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.rs:14:27\n   |\n14 |   let mut text_buffer_2 = StringBuilder();\n   |                           ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.rs:15:27\n   |\n15 |   let mut text_buffer_3 = StringBuilder();\n   |                           ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.rs:16:27\n   |\n16 |   let mut text_buffer_4 = StringBuilder();\n   |                           ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.rs:17:27\n   |\n17 |   let mut text_buffer_5 = StringBuilder();\n   |                           ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.rs:18:27\n   |\n18 |   let mut text_buffer_6 = StringBuilder();\n   |                           ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.rs:19:27\n   |\n19 |   let mut text_buffer_7 = StringBuilder();\n   |                           ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmpqzzt96_v.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.len() {\n    if i == 0 {\n      text_arr_fixed.append(text_arr[i]);\n    } else if i == text_arr.len() - 1 {\n      text_arr_fixed.append(text_arr[i]);\n    } else {\n      text_arr_fixed.append(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_2 = [];\n  for i in 0..text_arr_fixed.len() {\n    if i == 0 {\n      text_arr_fixed_2.append(text_arr_fixed[i]);\n    } else if i == text_arr_fixed.len() - 1 {\n      text_arr_fixed_2.append(text_arr_fixed[i]);\n    } else {\n      if text_arr_fixed[i] == \" \" {\n        text_arr_fixed_2.append(\"_\");\n      } else {\n        text_arr_fixed_2.append(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::from(text_arr_fixed_2.join(\"\"));\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpqohhr6p5.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqohhr6p5.rs:17:22\n   |\n17 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqohhr6p5.rs:17:29\n   |\n17 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpqohhr6p5.rs:18:29\n   |\n18 |     } else if i == text_arr.len() - 1 {\n   |                             ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqohhr6p5.rs:19:22\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqohhr6p5.rs:19:29\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqohhr6p5.rs:21:22\n   |\n21 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqohhr6p5.rs:21:29\n   |\n21 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqohhr6p5.rs:27:24\n   |\n27 |       text_arr_fixed_2.append(text_arr_fixed[i]);\n   |                        ^^^^^^ method not found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_arr_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmprbvuzb_i.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmprbvuzb_i.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:31:12\n   |\n31 |   for i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8ql4tiq1.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8ql4tiq1.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:17:16\n   |\n17 |       result = text_arr[i];\n   |                ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ql4tiq1.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:14:26\n   |\n14 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n15 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:15:26\n   |\n15 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n16 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:16:26\n   |\n16 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n17 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:17:26\n   |\n17 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n18 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:18:26\n   |\n18 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n19 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:19:26\n   |\n19 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n20 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:20:26\n   |\n20 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n21 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:21:26\n   |\n21 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n22 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:22:26\n   |\n22 |   text.replace(\"  \", \"_\")\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i].length > 1) {\n      text_arr_fixed.push(text_arr[i].replace(/ /g, \"_\"));\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  return String::join(\"_\", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp0av7_h5e.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp0av7_h5e.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp0av7_h5e.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp0av7_h5e.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp0av7_h5e.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.len() {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.append(\"_\");\n    } else {\n      text_arr_fixed.append(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if (text_fixed.len() > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph60dsz59.rs:16:8\n   |\n16 |     if (text_arr[i] == \" \") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \" \") {\n16 +     if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph60dsz59.rs:23:6\n   |\n23 |   if (text_fixed.len() > 2) {\n   |      ^                    ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text_fixed.len() > 2) {\n23 +   if text_fixed.len() > 2 {\n   | \n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmph60dsz59.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmph60dsz59.rs:16:9\n   |\n16 |     if (text_arr[i] == \" \") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmph60dsz59.rs:17:22\n   |\n17 |       text_arr_fixed.append(\"_\");\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmph60dsz59.rs:19:22\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmph60dsz59.rs:19:29\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmph60dsz59.rs:22:28\n   |\n22 |   let text_fixed = String::join(\"\", text_arr_fixed);\n   |                            ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 6 previous errors; 2 warnings emitted\n\nSome errors have ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      result += \"_\";\n    } else {\n      result += text_arr[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpt7qi6tza.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpt7qi6tza.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7qi6tza.rs:16:8\n   |\n16 |     if (text_arr[i] == \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \"\") {\n16 +     if text_arr[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpt7qi6tza.rs:16:9\n   |\n16 |     if (text_arr[i] == \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpt7qi6tza.rs:17:7\n   |\n17 |       result += \"_\";\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpt7qi6tza.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt7qi6tza.rs:22:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n22 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0425, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text = text.replace(\" \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \", \"_\");\n  text = text.replace(\"  \",\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpodf5djhc.rs:55:22\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n55 |   text = text.replace(\"  \",\n   |                      ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> /tmp/tmpodf5djhc.rs:55:15\n    |\n55  |   text = text.replace(\"  \",\n    |               ^^^^^^^ ---- supplied 1 argument\n    |               |\n    |               expected 2 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpodf5djhc.rs:55:3\n   |\n12 |   fn fix_spaces(text: String) -> String {\n   |                                  ------ expected `String` because of return type\n...\n55 | /   text = text.replace(\"  \",\n56 | | }\n   | |_^ expected struct `String`, found `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      result += text_arr[i] + \" \";\n    } else {\n      result += \"_\";\n    }\n  }\n  if (result.endsWith(\" \")) {\n    result = result.slice(0, -1);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9cbo7l06.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9cbo7l06.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9cbo7l06.rs:22:6\n   |\n22 |   if (result.endsWith(\" \")) {\n   |      ^                    ^\n   |\nhelp: remove these parentheses\n   |\n22 -   if (result.endsWith(\" \")) {\n22 +   if result.endsWith(\" \") {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9cbo7l06.rs:15:30\n   |\n15 |   for i in range(0, text_arr.length) {\n   |                              ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9cbo7l06.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp9cbo7l06.rs:17:17\n   |\n17 |       result += text_arr[i] + \" \";\n   |                 ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp9cbo7l06.rs:19:7\n   |\n19 |       result += \"_\";\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0599]: no method named `endsWith` found for reference `&str` in the current scope\n  --> /tmp/tmp9cbo7l06.rs:22:14\n   |\n22 |   if (result.endsWith(\" \")) {\n   |              ^^^^^^^^ help: there is an associated function with a similar name: `ends_with`\n\nerror[E0599]: no method named `slice` found for reference `&str` in the current scope\n  --> /tmp/tmp9cbo7l06.rs:23:21\n   |\n23 |     result",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    let text_arr_fixed_i = text_arr[i];\n    if (text_arr_fixed_i.length > 2) {\n      text_arr_fixed_i = text_arr_fixed_i.replaceAll(\" \", \"-\");\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  let text_arr_fixed_joined = text_arr_fixed.join(\"_\");\n  return String::from(text_arr_fixed_joined);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpt9hrrmmt.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpt9hrrmmt.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpt9hrrmmt.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpt9hrrmmt.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpt9hrrmmt.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] != \"\") {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] != \"\") {\n            if (text_arr_fixed[i] == \" \") {\n                if (i == 0 || i == len(text_arr_fixed) - 1) {\n                    text_arr_fixed_fixed.push(text_arr_fixed[i]);\n                } else {\n                    text_arr_fixed_fixed.push(\"_\");\n                }\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] != \"\") {\n            if (text_arr_fixed_fixed[i] == \" \") {\n                if (i == 0 || i == len(text_arr_fixed_fixed) - 1) {\n                    text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n                } else {\n                    text_arr_fixed_fixed_fixed.push(\"-\");\n                }\n            } else {\n                text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed[i] != \"\") {\n            text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n        }\n    }\n    return String\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:21:14\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:21:23\n   |\n21 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:24:36\n   |\n24 |                 if (i == 0 || i == len(text_arr_fixed) - 1) {\n   |                                    ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:35:23\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:38:36\n   |\n38 |                 if (i == 0 || i == len(text_arr_fixed_fixed) - 1) {\n   |                                    ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpv7lp3oi1.rs:49:14\n   |\n49 |     for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \" \") {\n            text_arr_fixed.push(\"_\");\n        } else {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_fixed = String::join(\"\", text_arr_fixed);\n    if (text_fixed.count(\" \") > 2) {\n        text_fixed = text_fixed.replace(\" \", \"-\");\n    }\n    return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpk6z8huaf.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpk6z8huaf.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk6z8huaf.rs:16:12\n   |\n16 |         if (text_arr[i] == \" \") {\n   |            ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] == \" \") {\n16 +         if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk6z8huaf.rs:23:8\n   |\n23 |     if (text_fixed.count(\" \") > 2) {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n23 -     if (text_fixed.count(\" \") > 2) {\n23 +     if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpk6z8huaf.rs:16:13\n   |\n16 |         if (text_arr[i] == \" \") {\n   |             ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpk6z8huaf.rs:17:28\n   |\n17 |             text_arr_fixed.push(\"_\");\n   |                            ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpk6z8huaf.rs:19:28\n   |\n19 |             text_arr_fixed.push(text_arr[i]);\n   |                            ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpk6z8huaf.rs:19:33\n   |\n19 |             text_arr_fixed.push(text_arr[i]);\n   |                                 ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `St",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    let text_arr_fixed_i = [];\n    let text_arr_fixed_i_arr = text_arr[i].split(\"\");\n    for j in 0..text_arr_fixed_i_arr.length {\n      if (text_arr_fixed_i_arr[j] != \"\") {\n        text_arr_fixed_i.push(text_arr_fixed_i_arr[j]);\n      }\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  let text_arr_fixed_joined = text_arr_fixed.join(\"_\");\n  if (text_arr_fixed_joined.length > 2) {\n    let text_arr_fixed_joined_arr = text_arr_fixed_joined.split(\"\");\n    for i in 0..text_arr_fixed_joined_arr.length {\n      if (text_arr_fixed_joined_arr[i] == \" \") {\n        text_arr_fixed_joined_arr[i] = \"-\";\n      }\n    }\n    text_arr_fixed_joined = text_arr_fixed_joined_arr.join(\"\");\n  }\n  return String::from(text_arr_fixed_joined);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5zvd52ja.rs:19:10\n   |\n19 |       if (text_arr_fixed_i_arr[j] != \"\") {\n   |          ^                             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -       if (text_arr_fixed_i_arr[j] != \"\") {\n19 +       if text_arr_fixed_i_arr[j] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5zvd52ja.rs:26:6\n   |\n26 |   if (text_arr_fixed_joined.length > 2) {\n   |      ^                                ^\n   |\nhelp: remove these parentheses\n   |\n26 -   if (text_arr_fixed_joined.length > 2) {\n26 +   if text_arr_fixed_joined.length > 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5zvd52ja.rs:29:10\n   |\n29 |       if (text_arr_fixed_joined_arr[i] == \" \") {\n   |          ^                                   ^\n   |\nhelp: remove these parentheses\n   |\n29 -       if (text_arr_fixed_joined_arr[i] == \" \") {\n29 +       if text_arr_fixed_joined_arr[i] == \" \" {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp5zvd52ja.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp5zvd52ja.rs:17:32\n   |\n17 |     let text_arr_fixed_i_arr = text_arr[i].split(\"\");\n   |                                ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5zvd52ja.rs:20:26\n   |\n20 |         text_arr_fixed_i.push(text_arr_fixed_i_arr[j]);\n   |                          ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5zvd52ja.rs:23:20\n   |\n23 |     text_arr_fixed.push(text_arr_fixed_i);\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp5zvd52ja.rs:26:29\n   |\n26 |   if (text_arr_fix",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result = text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result = result + text_arr[i];\n        } else {\n            result = result + text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnolbv_wj.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnolbv_wj.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnolbv_wj.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnolbv_wj.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnolbv_wj.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:17:22\n   |\n17 |             result = text_arr[i];\n   |                      ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:19:31\n   |\n19 |             result = result + text_arr[i];\n   |                               ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnolbv_wj.rs:21:31\n   |\n21 |             result = result + text_arr[i] + \"_\";\n   |                               ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnolbv_wj.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text = String(text);\n    let spaces = text.split(\" \");\n    let result = \"\";\n    for i in 0..spaces.length - 1 {\n        let space = spaces[i];\n        if (space.length > 1) {\n            result += \"_\" + space.replace(\" \", \"-\");\n        } else {\n            result += space;\n        }\n        result += \" \";\n    }\n    result += spaces[spaces.length - 1];\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0423]: expected function, tuple struct or tuple variant, found struct `String`\n   --> /tmp/tmpjx9brhrj.rs:13:16\n    |\n13  |       let text = String(text);\n    |                  ^^^^^^^^^^^^ help: use struct literal syntax instead: `String { vec: val }`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjx9brhrj.rs:18:12\n   |\n18 |         if (space.length > 1) {\n   |            ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -         if (space.length > 1) {\n18 +         if space.length > 1 {\n   | \n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpjx9brhrj.rs:23:9\n   |\n23 |         result += \" \";\n   |         ------^^^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjx9brhrj.rs:26:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n26 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i > 0 && text_arr_fixed[i-1] == \" \") {\n          text_arr_fixed_fixed.push(\"-\");\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpmzhd5vil.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmzhd5vil.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpmzhd5vil.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmzhd5vil.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpmzhd5vil.rs:35:12\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmzhd5vil.rs:35:21\n   |\n35 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmzhd5vil.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmzhd5vil.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses arou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i == 0) {\n          text_arr_fixed_fixed.push(\"_\");\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else if (text_arr_fixed[i] == \"  \") {\n        text_arr_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::join(text_arr_fixed_fixed, \" \");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2e5eprr9.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2e5eprr9.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2e5eprr9.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2e5eprr9.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2e5eprr9.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2e5eprr9.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2e5eprr9.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2e5eprr9.rs:24:12\n   |\n24 |         if (i == 0) {\n   |            ^      ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (i ==",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let new_text = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            new_text += text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            new_text += text_arr[i];\n        } else {\n            new_text += text_arr[i] + \"_\";\n        }\n    }\n    return new_text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpvwyhai3v.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvwyhai3v.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvwyhai3v.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvwyhai3v.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvwyhai3v.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvwyhai3v.rs:17:25\n   |\n17 |             new_text += text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvwyhai3v.rs:19:25\n   |\n19 |             new_text += text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvwyhai3v.rs:21:25\n   |\n21 |             new_text += text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwyhai3v.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    text.replace(\" \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:13:27\n   |\n13 |     text.replace(\" \", \"_\")\n   |                           ^ help: add `;` here\n14 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:14:28\n   |\n14 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n15 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:15:28\n   |\n15 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n16 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:16:28\n   |\n16 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n17 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:17:28\n   |\n17 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n18 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:18:28\n   |\n18 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n19 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:19:28\n   |\n19 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n20 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:20:28\n   |\n20 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n21 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:21:28\n   |\n21 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n22 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result += text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result += text_arr[i];\n    } else {\n      result += text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnds7kzr0.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnds7kzr0.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnds7kzr0.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnds7kzr0.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnds7kzr0.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:21:17\n   |\n21 |       result += text_arr[i] + \"_\";\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnds7kzr0.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try us",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    text.replace(\" \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:13:27\n   |\n13 |     text.replace(\" \", \"_\")\n   |                           ^ help: add `;` here\n14 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:14:28\n   |\n14 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n15 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:15:28\n   |\n15 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n16 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:16:28\n   |\n16 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n17 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:17:28\n   |\n17 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n18 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:18:28\n   |\n18 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n19 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:19:28\n   |\n19 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n20 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:20:28\n   |\n20 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n21 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:21:28\n   |\n21 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n22 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if (text_fixed.count(\" \") > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:16:8\n   |\n16 |     if (text_arr[i] == \" \") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \" \") {\n16 +     if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:23:6\n   |\n23 |   if (text_fixed.count(\" \") > 2) {\n   |      ^                         ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text_fixed.count(\" \") > 2) {\n23 +   if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:16:9\n   |\n16 |     if (text_arr[i] == \" \") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:17:22\n   |\n17 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:22:28\n   |\n22 |   let tex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_2 = [];\n  for i in range(0, text_arr_fixed.length) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (text_arr_fixed[i+1] == \" \") {\n          text_arr_fixed_2.push(\"_\");\n        } else {\n          text_arr_fixed_2.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_2.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::from(text_arr_fixed_2.join(\"\"));\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprawy8gvr.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprawy8gvr.rs:21:12\n   |\n21 |   for i in range(0, text_arr_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprawy8gvr.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprawy8gvr.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprawy8gvr.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprawy8gvr.rs:24:12\n   |\n24 |         if (text_arr_fixed[i+1] == \" \") {\n   |            ^                          ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (text_arr_fixed[i+1] == \" \") {\n24 +         if text_arr_fixed[i+1] == \" \" {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmprawy8gvr.rs:15:30\n   |\n15 |   for i in range(0, text_arr.length) {\n   |                              ^^^^^^ unknown field\n\nerror[E0608]: cannot index into a value of type `std::s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == text_arr.length - 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if text_arr[i] == \" \" {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.contains(\"  \") {\n    text_fixed = text_fixed.replace(\"  \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:20:15\n   |\n20 |     } else if text_arr[i] == \" \" {\n   |               ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:21:22\n   |\n21 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e5k_b0r.rs:23:22\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6e5k_b0r.rs:23:27\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, text_arr.length) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, text_arr_fixed.length) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_fixed.push(\"_\");\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed.length) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      if (text_arr_fixed_fixed[i] == \" \") {\n        text_arr_fixed_fixed_fixed.push(\"-\");\n      } else {\n        text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, text_arr_fixed_fixed_fixed.length) {\n    if (text_arr_fixed_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  return String::from(text_arr_fixed_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2jp4ql56.rs:15:12\n   |\n15 |   for i in range(0, text_arr.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2jp4ql56.rs:21:12\n   |\n21 |   for i in range(0, text_arr_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2jp4ql56.rs:31:12\n   |\n31 |   for i in range(0, text_arr_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2jp4ql56.rs:41:12\n   |\n41 |   for i in range(0, text_arr_fixed_fixed_fixed.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2jp4ql56.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2jp4ql56.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2jp4ql56.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nwarning: unnecessary",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    let text_arr_fixed_i = text_arr[i];\n    if (text_arr_fixed_i.length > 2) {\n      text_arr_fixed_i = text_arr_fixed_i.replace(/\\s+/g, \"-\");\n    }\n    text_arr_fixed.push(text_arr_fixed_i);\n  }\n  return String::join(\" \", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpz1gucivg.rs:18:52\n   |\n18 |       text_arr_fixed_i = text_arr_fixed_i.replace(/\\s+/g, \"-\");\n   |                                                    ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpz1gucivg.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpz1gucivg.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpz1gucivg.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpz1gucivg.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpz1gucivg.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let new_text = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            new_text += text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            new_text += text_arr[i];\n        } else {\n            new_text += text_arr[i] + \"_\";\n        }\n    }\n    return new_text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpvwyhai3v.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvwyhai3v.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvwyhai3v.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvwyhai3v.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvwyhai3v.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvwyhai3v.rs:17:25\n   |\n17 |             new_text += text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvwyhai3v.rs:19:25\n   |\n19 |             new_text += text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvwyhai3v.rs:21:25\n   |\n21 |             new_text += text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwyhai3v.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_fixed += \"_\";\n      } else {\n        text_fixed += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwun5fpqp.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwun5fpqp.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwun5fpqp.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwun5fpqp.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwun5fpqp.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpwun5fpqp.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `pus",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_arr_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmprbvuzb_i.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmprbvuzb_i.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:31:12\n   |\n31 |   for i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for (let i = 0; i < text_arr.length; i++) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed.length; i++) {\n    if (text_arr_fixed[i] == \" \") {\n      text_arr_fixed_fixed.push(\"_\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed[i] == \"  \") {\n      text_arr_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed[i] == \"  \") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed.length; i++) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"  \") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"-\");\n    } else {\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpw087z10z.rs:60:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for (let i = 0; i < text_arr_fixed_fixed_fixed_fixed.length; i++) {\n   |                                                                     - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n60 | }\n   |   ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpw087z10z.rs:15:8\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpw087z10z.rs:15:12\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpw087z10z.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw087z10z.rs:15:13\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpw087z10z.rs:15:14\n   |\n15 |   for (let i = 0; i < text_arr.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text = String::from(text);\n    let text = text.replace(/\\s+/g, \"_\");\n    let text = text.replace(/\\s{2,}/g, \"_\");\n    return text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp8a893qxw.rs:14:30\n   |\n14 |     let text = text.replace(/\\s+/g, \"_\");\n   |                              ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8a893qxw.rs:15:30\n   |\n15 |     let text = text.replace(/\\s{2,}/g, \"_\");\n   |                              ^\n\nerror: expected expression, found `/`\n  --> /tmp/tmp8a893qxw.rs:14:29\n   |\n14 |     let text = text.replace(/\\s+/g, \"_\");\n   |                             ^ expected expression\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == text_arr.length - 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if text_arr[i] == \" \" {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if text_fixed.length > 2 {\n    let text_fixed_arr = text_fixed.split(\" \");\n    let text_fixed_arr_fixed = [];\n    for i in 0..text_fixed_arr.length {\n      if i == 0 {\n        text_fixed_arr_fixed.push(text_fixed_arr[i]);\n      } else if i == text_fixed_arr.length - 1 {\n        text_fixed_arr_fixed.push(text_fixed_arr[i]);\n      } else if text_fixed_arr[i] == \" \" {\n        text_fixed_arr_fixed.push(\"-\");\n      } else {\n        text_fixed_arr_fixed.push(text_fixed_arr[i]);\n      }\n    }\n    let text_fixed_fixed = String::join(\"\", text_fixed_arr_fixed);\n    return String::from(text_fixed_fixed);\n  } else {\n    return String::from(text_fixed);\n  }\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjty1062e.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjty1062e.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjty1062e.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjty1062e.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjty1062e.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjty1062e.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjty1062e.rs:20:15\n   |\n20 |     } else if text_arr[i] == \" \" {\n   |               ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjty1062e.rs:21:22\n   |\n21 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjty1062e.rs:23:22\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjty1062e.rs:23:27\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_new = \"\";\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        text_arr_fixed_new += \"_\";\n      } else {\n        text_arr_fixed_new += text_arr_fixed[i];\n      }\n    }\n  }\n  return String::from(text_arr_fixed_new);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcll_ai3w.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcll_ai3w.rs:23:10\n   |\n23 |       if (text_arr_fixed[i] == \" \") {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (text_arr_fixed[i] == \" \") {\n23 +       if text_arr_fixed[i] == \" \" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpcll_ai3w.rs:16:9\n   |\n16 |     if (text_arr[i] != \"\") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `pus",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (i == 0) {\n            result = result + text_arr[i];\n        } else if (i == len(text_arr) - 1) {\n            result = result + text_arr[i];\n        } else {\n            result = result + text_arr[i] + \"_\";\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxrjxpflf.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxrjxpflf.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxrjxpflf.rs:18:25\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                         ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxrjxpflf.rs:16:12\n   |\n16 |         if (i == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i == 0) {\n16 +         if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxrjxpflf.rs:18:19\n   |\n18 |         } else if (i == len(text_arr) - 1) {\n   |                   ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -         } else if (i == len(text_arr) - 1) {\n18 +         } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxrjxpflf.rs:17:31\n   |\n17 |             result = result + text_arr[i];\n   |                               ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxrjxpflf.rs:19:31\n   |\n19 |             result = result + text_arr[i];\n   |                               ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpxrjxpflf.rs:21:31\n   |\n21 |             result = result + text_arr[i] + \"_\";\n   |                               ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxrjxpflf.rs:24:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \"\") {\n            text_arr_fixed.append(\"\");\n        } else {\n            text_arr_fixed.append(text_arr[i]);\n        }\n    }\n    let text_fixed = \"\";\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] == \"\") {\n            text_fixed += \"_\";\n        } else {\n            text_fixed += text_arr_fixed[i];\n        }\n    }\n    return String::from(text_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp0fn9h3hd.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0fn9h3hd.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp0fn9h3hd.rs:23:14\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0fn9h3hd.rs:23:23\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0fn9h3hd.rs:16:12\n   |\n16 |         if (text_arr[i] == \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] == \"\") {\n16 +         if text_arr[i] == \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0fn9h3hd.rs:24:12\n   |\n24 |         if (text_arr_fixed[i] == \"\") {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (text_arr_fixed[i] == \"\") {\n24 +         if text_arr_fixed[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp0fn9h3hd.rs:16:13\n   |\n16 |         if (text_arr[i] == \"\") {\n   |             ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0fn9h3hd.rs:17:28\n   |\n17 |             text_arr_fixed.append(\"\");\n   |                            ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    text.replace(\" \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.replace(\"  \", \"_\")\n    text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:13:27\n   |\n13 |     text.replace(\" \", \"_\")\n   |                           ^ help: add `;` here\n14 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:14:28\n   |\n14 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n15 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:15:28\n   |\n15 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n16 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:16:28\n   |\n16 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n17 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:17:28\n   |\n17 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n18 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:18:28\n   |\n18 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n19 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:19:28\n   |\n19 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n20 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:20:28\n   |\n20 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n21 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76ulcwi.rs:21:28\n   |\n21 |     text.replace(\"  \", \"_\")\n   |                            ^ help: add `;` here\n22 |     text.replace(\"  \", \"_\")\n   |     ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmps76u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i < len(text_arr_fixed) - 1) {\n          if (text_arr_fixed[i+1] == \" \") {\n            text_arr_fixed_fixed.push(\"-\");\n            i++;\n          } else {\n            text_arr_fixed_fixed.push(\"_\");\n          }\n        } else {\n          text_arr_fixed_fixed.push(\"_\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  return String::join(\"\", text_arr_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: Rust has no postfix increment operator\n  --> /tmp/tmpk7hxfi14.rs:27:14\n   |\n27 |             i++;\n   |              ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n27 |             { let tmp = i; i += 1; tmp };\n   |             +++++++++++  ~~~~~~~~~~~~~~~\n27 -             i++;\n27 +             i += 1;\n   | \n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpk7hxfi14.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpk7hxfi14.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpk7hxfi14.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpk7hxfi14.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpk7hxfi14.rs:24:17\n   |\n24 |         if (i < len(text_arr_fixed) - 1) {\n   |                 ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk7hxfi14.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk7hxfi14.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (text_arr_fixed[i] != \"\") {\n22 +     if text_arr_fixed[i] !=",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] != \"\") {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] != \"\") {\n      if (text_arr_fixed[i] == \" \") {\n        if (i < len(text_arr_fixed) - 1) {\n          if (text_arr_fixed[i+1] == \" \") {\n            text_arr_fixed_fixed.push(\"_\");\n          } else {\n            text_arr_fixed_fixed.push(\"-\");\n          }\n        } else {\n          text_arr_fixed_fixed.push(\"-\");\n        }\n      } else {\n        text_arr_fixed_fixed.push(text_arr_fixed[i]);\n      }\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] != \"\") {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  return String::from(text_arr_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8jvl6ies.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8jvl6ies.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8jvl6ies.rs:21:12\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8jvl6ies.rs:21:21\n   |\n21 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8jvl6ies.rs:24:17\n   |\n24 |         if (i < len(text_arr_fixed) - 1) {\n   |                 ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8jvl6ies.rs:39:12\n   |\n39 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8jvl6ies.rs:39:21\n   |\n39 |   for i in range(0, len(text_arr_fixed_fixed)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8jvl6ies.rs:16:8\n   |\n16 |     if (text_arr[i] != \"\") {\n   |        ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] != \"\") {\n16 +     if text_arr[i] != \"\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8jvl6ies.rs:22:8\n   |\n22 |     if (text_arr_fixed[i] != \"\") {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if (text_fixed.count(\" \") > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:16:8\n   |\n16 |     if (text_arr[i] == \" \") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \" \") {\n16 +     if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:23:6\n   |\n23 |   if (text_fixed.count(\" \") > 2) {\n   |      ^                         ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text_fixed.count(\" \") > 2) {\n23 +   if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:16:9\n   |\n16 |     if (text_arr[i] == \" \") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:17:22\n   |\n17 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:22:28\n   |\n22 |   let tex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    text.replaceAll(\" \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \", \"_\")\n    text.replaceAll(\"  \n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpcux5sec7.rs:68:91\n   |\n68 |       assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n   |  ___________________________________________________________________________________________^\n69 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \" \") {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_fixed = String::join(\"\", text_arr_fixed);\n  if (text_fixed.count(\" \") > 2) {\n    text_fixed = text_fixed.replace(\" \", \"-\");\n  }\n  return text_fixed;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbdd6lx4x.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:16:8\n   |\n16 |     if (text_arr[i] == \" \") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (text_arr[i] == \" \") {\n16 +     if text_arr[i] == \" \" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbdd6lx4x.rs:23:6\n   |\n23 |   if (text_fixed.count(\" \") > 2) {\n   |      ^                         ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text_fixed.count(\" \") > 2) {\n23 +   if text_fixed.count(\" \") > 2 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:16:9\n   |\n16 |     if (text_arr[i] == \" \") {\n   |         ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:17:22\n   |\n17 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbdd6lx4x.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpbdd6lx4x.rs:22:28\n   |\n22 |   let tex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:14:26\n   |\n14 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n15 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:15:26\n   |\n15 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n16 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:16:26\n   |\n16 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n17 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:17:26\n   |\n17 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n18 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:18:26\n   |\n18 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n19 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:19:26\n   |\n19 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n20 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:20:26\n   |\n20 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n21 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:21:26\n   |\n21 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n22 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:22:26\n   |\n22 |   text.replace(\"  \", \"_\")\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result += text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result += text_arr[i];\n    } else {\n      result += text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnds7kzr0.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnds7kzr0.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnds7kzr0.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnds7kzr0.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnds7kzr0.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:17:17\n   |\n17 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:19:17\n   |\n19 |       result += text_arr[i];\n   |                 ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnds7kzr0.rs:21:17\n   |\n21 |       result += text_arr[i] + \"_\";\n   |                 ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnds7kzr0.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |          ^^^^^^- help: try us",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.len() {\n    if i == 0 {\n      text_arr_fixed.append(text_arr[i]);\n    } else if i == text_arr.len() - 1 {\n      text_arr_fixed.append(text_arr[i]);\n    } else {\n      text_arr_fixed.append(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in 0..text_arr_fixed.len() {\n    if i == 0 {\n      text_arr_fixed_fixed.append(text_arr_fixed[i]);\n    } else if i == text_arr_fixed.len() - 1 {\n      text_arr_fixed_fixed.append(text_arr_fixed[i]);\n    } else {\n      text_arr_fixed_fixed.append(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in 0..text_arr_fixed_fixed.len() {\n    if i == 0 {\n      text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n    } else if i == text_arr_fixed_fixed.len() - 1 {\n      text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n    } else {\n      text_arr_fixed_fixed_fixed.append(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in 0..text_arr_fixed_fixed_fixed.len() {\n    if i == 0 {\n      text_arr_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed[i]);\n    } else if i == text_arr_fixed_fixed_fixed.len() - 1 {\n      text_arr_fixed_fixed_fixed_fixed.append(text_arr_fixed_fixed_fixed[i]);\n    } else {\n      \n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnwuh8q8c.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n45 |   for i in 0..text_arr_fixed_fixed_fixed.len() {\n   |                                                - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       \n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:15:24\n   |\n15 |   for i in 0..text_arr.len() {\n   |                        ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:17:22\n   |\n17 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnwuh8q8c.rs:17:29\n   |\n17 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:18:29\n   |\n18 |     } else if i == text_arr.len() - 1 {\n   |                             ^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:19:22\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                      ^^^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpnwuh8q8c.rs:19:29\n   |\n19 |       text_arr_fixed.append(text_arr[i]);\n   |                             ^^^^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnwuh8q8c.rs:21:22\n   |\n21 |       text_arr_fixed.appen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let text_arr_fixed = [];\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \"\") {\n            text_arr_fixed.push(\"\");\n        } else {\n            text_arr_fixed.push(text_arr[i]);\n        }\n    }\n    let text_arr_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed)) {\n        if (text_arr_fixed[i] == \"\") {\n            text_arr_fixed_fixed.push(\"\");\n        } else {\n            if (text_arr_fixed[i] == \" \") {\n                text_arr_fixed_fixed.push(\"_\");\n            } else {\n                text_arr_fixed_fixed.push(text_arr_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed)) {\n        if (text_arr_fixed_fixed[i] == \"\") {\n            text_arr_fixed_fixed_fixed.push(\"\");\n        } else {\n            if (text_arr_fixed_fixed[i] == \" \") {\n                text_arr_fixed_fixed_fixed.push(\"-\");\n            } else {\n                text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n            }\n        }\n    }\n    let text_arr_fixed_fixed_fixed_fixed = [];\n    for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n        if (text_arr_fixed_fixed_fixed[i] == \"\") {\n            text_arr_fixed_fixed_fixed_fixed.push(\"\");\n        } else {\n            text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n        }\n    }\n    return String::from(text_arr_fixed_fixed_fixed_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpiywc4oxk.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpiywc4oxk.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpiywc4oxk.rs:23:14\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpiywc4oxk.rs:23:23\n   |\n23 |     for i in range(0, len(text_arr_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpiywc4oxk.rs:35:14\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpiywc4oxk.rs:35:23\n   |\n35 |     for i in range(0, len(text_arr_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpiywc4oxk.rs:47:14\n   |\n47 |     for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpiywc4oxk.rs:47:23\n   |\n47 |     for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpiywc4oxk.rs:16:12\n   |\n16 |         if (text_arr[i] == \"\") {\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n    let text_arr = text.split(\" \");\n    let result = \"\";\n    for i in range(0, len(text_arr)) {\n        if (text_arr[i] == \"\") {\n            result += \"_\";\n        } else {\n            result += text_arr[i];\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp75p7zb2a.rs:15:14\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp75p7zb2a.rs:15:23\n   |\n15 |     for i in range(0, len(text_arr)) {\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp75p7zb2a.rs:16:12\n   |\n16 |         if (text_arr[i] == \"\") {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (text_arr[i] == \"\") {\n16 +         if text_arr[i] == \"\" {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp75p7zb2a.rs:16:13\n   |\n16 |         if (text_arr[i] == \"\") {\n   |             ^^^^^^^^^^^\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp75p7zb2a.rs:17:13\n   |\n17 |             result += \"_\";\n   |             ------^^^^^^^\n   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp75p7zb2a.rs:19:23\n   |\n19 |             result += text_arr[i];\n   |                       ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75p7zb2a.rs:22:12\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n22 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0368, E0425, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = result + text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpag_xry71.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpag_xry71.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpag_xry71.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:17:25\n   |\n17 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpag_xry71.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag_xry71.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  text.replace(\" \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.replace(\"  \", \"_\")\n  text.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "error: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:13:25\n   |\n13 |   text.replace(\" \", \"_\")\n   |                         ^ help: add `;` here\n14 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:14:26\n   |\n14 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n15 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:15:26\n   |\n15 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n16 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:16:26\n   |\n16 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n17 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:17:26\n   |\n17 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n18 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:18:26\n   |\n18 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n19 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:19:26\n   |\n19 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n20 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:20:26\n   |\n20 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n21 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:21:26\n   |\n21 |   text.replace(\"  \", \"_\")\n   |                          ^ help: add `;` here\n22 |   text.replace(\"  \", \"_\")\n   |   ---- unexpected token\n\nerror: expected `;`, found `text`\n  --> /tmp/tmpese2tva9.rs:22:26\n   |\n22 |   text.replace(\"  \", \"_\")\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let result = \"\";\n  for i in range(0, len(text_arr)) {\n    if (i == 0) {\n      result = text_arr[i];\n    } else if (i == len(text_arr) - 1) {\n      result = result + text_arr[i];\n    } else {\n      result = result + text_arr[i] + \"_\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8ql4tiq1.rs:18:21\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8ql4tiq1.rs:16:8\n   |\n16 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i == 0) {\n16 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8ql4tiq1.rs:18:15\n   |\n18 |     } else if (i == len(text_arr) - 1) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == len(text_arr) - 1) {\n18 +     } else if i == len(text_arr) - 1 {\n   | \n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:17:16\n   |\n17 |       result = text_arr[i];\n   |                ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:19:25\n   |\n19 |       result = result + text_arr[i];\n   |                         ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp8ql4tiq1.rs:21:25\n   |\n21 |       result = result + text_arr[i] + \"_\";\n   |                         ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ql4tiq1.rs:24:10\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                ------ expected `String` because of return type\n...\n24 |   return result;\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in range(0, len(text_arr)) {\n    if (text_arr[i] == \"\") {\n      text_arr_fixed.push(\"\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  let text_arr_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed)) {\n    if (text_arr_fixed[i] == \"\") {\n      text_arr_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed.push(text_arr_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed)) {\n    if (text_arr_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed.push(text_arr_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed[i]);\n    }\n  }\n  let text_arr_fixed_fixed_fixed_fixed_fixed = [];\n  for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n    if (text_arr_fixed_fixed_fixed_fixed[i] == \"\") {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(\"\");\n    } else {\n      text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmprbvuzb_i.rs:61:3\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - unclosed delimiter\n...\n47 |   for i in range(0, len(text_arr_fixed_fixed_fixed_fixed)) {\n   |                                                            - unclosed delimiter\n...\n50 |     } else {\n   |            - this delimiter might not be properly closed...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmprbvuzb_i.rs:51:50\n   |\n12 | fn fix_spaces(text: String) -> String {\n   |                                       - closing delimiter possibly meant for this\n...\n51 |       text_arr_fixed_fixed_fixed_fixed_fixed.push(text_arr_fixed_fixed_fixed_\n   |                                                  ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:12\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:15:21\n   |\n15 |   for i in range(0, len(text_arr)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:12\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprbvuzb_i.rs:23:21\n   |\n23 |   for i in range(0, len(text_arr_fixed)) {\n   |                     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprbvuzb_i.rs:31:12\n   |\n31 |   for i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n  let text_arr = text.split(\" \");\n  let text_arr_fixed = [];\n  for i in 0..text_arr.length {\n    if i == 0 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if i == text_arr.length - 1 {\n      text_arr_fixed.push(text_arr[i]);\n    } else if text_arr[i] == \" \" {\n      text_arr_fixed.push(\"_\");\n    } else {\n      text_arr_fixed.push(text_arr[i]);\n    }\n  }\n  return String::join(\"\", text_arr_fixed);\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3aegpbyh.rs:15:24\n   |\n15 |   for i in 0..text_arr.length {\n   |                        ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3aegpbyh.rs:17:22\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3aegpbyh.rs:17:27\n   |\n17 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0609]: no field `length` on type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3aegpbyh.rs:18:29\n   |\n18 |     } else if i == text_arr.length - 1 {\n   |                             ^^^^^^ unknown field\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3aegpbyh.rs:19:22\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3aegpbyh.rs:19:27\n   |\n19 |       text_arr_fixed.push(text_arr[i]);\n   |                           ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3aegpbyh.rs:20:15\n   |\n20 |     } else if text_arr[i] == \" \" {\n   |               ^^^^^^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3aegpbyh.rs:21:22\n   |\n21 |       text_arr_fixed.push(\"_\");\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3aegpbyh.rs:23:22\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp3aegpbyh.rs:23:27\n   |\n23 |       text_arr_fixed.push(text_arr[i]);\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}