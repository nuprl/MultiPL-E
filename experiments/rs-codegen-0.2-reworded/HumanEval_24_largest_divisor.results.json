{
  "name": "HumanEval_24_largest_divisor",
  "language": "rs",
  "prompt": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmp148_nqii.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  for i in range(2, n) {\n    if n % i == 0 {\n      d = i\n    }\n  }\n  return d\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmphxykplu7.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   for i in range(2, n) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmphxykplu7.rs:6:12\n  |\n6 |   for i in range(2, n) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1;\n  for i in 1..n {\n    if n % i == 0 {\n      max = i;\n    }\n  }\n  return max;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1;\n  while i < n {\n    if n % i == 0 {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmptdufk38l.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in range(1, n) {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpjizm32a6.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in range(1, n) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpjizm32a6.rs:6:12\n  |\n6 |   for i in range(1, n) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut i = 1;\n  while i * i <= n {\n    if n % i == 0 {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `5`', /tmp/tmpfe8gkx7v.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in range(2, n + 1) {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpqj7lsua6.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in range(2, n + 1) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpqj7lsua6.rs:6:12\n  |\n6 |   for i in range(2, n + 1) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return d\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmp1tm9qymk.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 0..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp93qwjfct.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1;\n  for i in 1..n {\n    if n % i == 0 {\n      max = i;\n    }\n  }\n  return max;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 0..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp93qwjfct.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1;\n  for i in 1..n {\n    if n % i == 0 {\n      max = i;\n    }\n  }\n  return max;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in range(2, n + 1) {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpqj7lsua6.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in range(2, n + 1) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpqj7lsua6.rs:6:12\n  |\n6 |   for i in range(2, n + 1) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 0..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp93qwjfct.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1;\n  for i in 1..n {\n    if n % i == 0 {\n      max = i;\n    }\n  }\n  return max;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in range(2, n) {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpk4l1__9c.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in range(2, n) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpk4l1__9c.rs:6:12\n  |\n6 |   for i in range(2, n) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  for d * d <= n {\n    if n % d == 0 {\n      n /= d\n    } else {\n      d += 1\n    }\n  }\n  return d\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp2pkn3yrj.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   for d * d <= n {\n  |   --- unexpected token\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2pkn3yrj.rs:6:8\n  |\n6 |   for d * d <= n {\n  |        ^ help: try adding `in` here\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmp2pkn3yrj.rs:6:9\n  |\n6 |   for d * d <= n {\n  |         ^^^\n\nerror[E0277]: `bool` is not an iterator\n --> /tmp/tmp2pkn3yrj.rs:6:9\n  |\n6 |   for d * d <= n {\n  |         ^^^^^^^^ `bool` is not an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `bool`\n  = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max_divisor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_divisor = i\n    }\n  }\n  return max_divisor\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpvkzjp98t.rs:5:22\n  |\n5 |   let max_divisor = 1\n  |                      ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return 0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmp5gi0i9f5.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpb18bibv4.rs:5:18\n  |\n5 |   let mut max = 1\n  |                  ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  for d * d <= n {\n    if n % d == 0 {\n      n /= d\n    } else {\n      d += 1\n    }\n  }\n  return d\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp2pkn3yrj.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   for d * d <= n {\n  |   --- unexpected token\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2pkn3yrj.rs:6:8\n  |\n6 |   for d * d <= n {\n  |        ^ help: try adding `in` here\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmp2pkn3yrj.rs:6:9\n  |\n6 |   for d * d <= n {\n  |         ^^^\n\nerror[E0277]: `bool` is not an iterator\n --> /tmp/tmp2pkn3yrj.rs:6:9\n  |\n6 |   for d * d <= n {\n  |         ^^^^^^^^ `bool` is not an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `bool`\n  = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max_divisor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_divisor = i\n    }\n  }\n  return max_divisor\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpvkzjp98t.rs:5:22\n  |\n5 |   let max_divisor = 1\n  |                      ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmp148_nqii.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max_divisor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_divisor = i\n    }\n  }\n  return max_divisor\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpvkzjp98t.rs:5:22\n  |\n5 |   let max_divisor = 1\n  |                      ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in range(2, n) {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpk4l1__9c.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in range(2, n) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpk4l1__9c.rs:6:12\n  |\n6 |   for i in range(2, n) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max_divisor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_divisor = i\n    }\n  }\n  return max_divisor\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpvkzjp98t.rs:5:22\n  |\n5 |   let max_divisor = 1\n  |                      ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max_divisor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_divisor = i\n    }\n  }\n  return max_divisor\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpvkzjp98t.rs:5:22\n  |\n5 |   let max_divisor = 1\n  |                      ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 0..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp93qwjfct.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in range(2, n + 1) {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpqj7lsua6.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in range(2, n + 1) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpqj7lsua6.rs:6:12\n  |\n6 |   for i in range(2, n + 1) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmp148_nqii.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return d\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmp1tm9qymk.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  for d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp8ttpy4ym.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   for d <= n {\n  |   --- unexpected token\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp8ttpy4ym.rs:6:8\n  |\n6 |   for d <= n {\n  |        ^ help: try adding `in` here\n\nerror: expected expression, found `<=`\n --> /tmp/tmp8ttpy4ym.rs:6:9\n  |\n6 |   for d <= n {\n  |         ^^ expected expression\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    i = i * 2\n  }\n  return i\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpj2nffnn8.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1;\n  for i in 1..n {\n    if n % i == 0 {\n      max = i;\n    }\n  }\n  return max;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpb18bibv4.rs:5:18\n  |\n5 |   let mut max = 1\n  |                  ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in range(2, n) {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpk4l1__9c.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in range(2, n) {\n  |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpk4l1__9c.rs:6:12\n  |\n6 |   for i in range(2, n) {\n  |            ^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmp148_nqii.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let d = 2\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmprr0c014z.rs:8:12\n  |\n8 |   let d = 2\n  |            ^ help: add `;` here\n9 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1;\n  for i in 1..n {\n    if n % i == 0 {\n      max = i;\n    }\n  }\n  return max;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    i = i + 1\n    if n % i == 0 {\n      return i\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmprkz5oe5z.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmprkz5oe5z.rs:7:14\n  |\n7 |     i = i + 1\n  |              ^ help: add `;` here\n8 |     if n % i == 0 {\n  |     -- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmplsf2ykj9.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  for d * d <= n {\n    if n % d == 0 {\n      n /= d\n    } else {\n      d += 1\n    }\n  }\n  return d\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp2pkn3yrj.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   for d * d <= n {\n  |   --- unexpected token\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2pkn3yrj.rs:6:8\n  |\n6 |   for d * d <= n {\n  |        ^ help: try adding `in` here\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmp2pkn3yrj.rs:6:9\n  |\n6 |   for d * d <= n {\n  |         ^^^\n\nerror[E0277]: `bool` is not an iterator\n --> /tmp/tmp2pkn3yrj.rs:6:9\n  |\n6 |   for d * d <= n {\n  |         ^^^^^^^^ `bool` is not an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `bool`\n  = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let max = 1\n  for i in 0..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp93qwjfct.rs:5:14\n  |\n5 |   let max = 1\n  |              ^ help: add `;` here\n6 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1;\n  for i in 1..n {\n    if n % i == 0 {\n      max = i;\n    }\n  }\n  return max;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let d = 2\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmprr0c014z.rs:8:12\n  |\n8 |   let d = 2\n  |            ^ help: add `;` here\n9 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpb18bibv4.rs:5:18\n  |\n5 |   let mut max = 1\n  |                  ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  if n == 0 {\n    return 0\n  }\n\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpw51igkjw.rs:9:14\n   |\n9  |   let max = 1\n   |              ^ help: add `;` here\n10 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let mut max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpb18bibv4.rs:5:18\n  |\n5 |   let mut max = 1\n  |                  ^ help: add `;` here\n6 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let d = 1\n  while d * d <= n {\n    if n % d == 0 {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpt4zp81zp.rs:5:12\n  |\n5 |   let d = 1\n  |            ^ help: add `;` here\n6 |   while d * d <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i < n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpjvlnb_0p.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n  let i = 1\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n --> /tmp/tmpz17zutnn.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i * i <= n {\n  |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}