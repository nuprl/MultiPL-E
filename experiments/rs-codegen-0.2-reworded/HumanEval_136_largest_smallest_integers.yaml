name: HumanEval_136_largest_smallest_integers
language: rs
prompt: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a vector.\n/// If there is no negative or positive integers, return them as\
  \ None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n\
  /// (None, Some(1))\n/// >>> largest_smallest_integers(vec![])\n/// (None, None)\n\
  /// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
  \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
  \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
  \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
  \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
  \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
  \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
  \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
  \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6,\
  \ 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3),\
  \ Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3),\
  \ Some(1)));\n}\n"
completions: ["  let min = None;\n  let max = None;\n  for i in lst {\n    if i <\
    \ 0 {\n      min = Some(i);\n    } else if i > 0 {\n      max = Some(i);\n   \
    \ }\n  }\n  return (min, max);", "  if lst.len == 0 {\n    return None, None\n\
    \  }\n\n  let max_neg = None\n  let min_pos = None\n  for i in lst.iter() {\n\
    \    if i < 0 {\n      max_neg = Some(i)\n    } else if i > 0 {\n      min_pos\
    \ = Some(i)\n    }\n  }\n\n  return max_neg, min_pos", "  match lst.len() {\n\
    \    0 => (None, None),\n    1 => (None, None),\n    2 => (None, None),\n    3\
    \ => (None, None),\n    4 => (None, None),\n    5 => (None, None),\n    6 => (None,\
    \ None),\n    7 => (None, None),\n    8 => (None, None),\n    9 => (None, None),\n\
    \    _ => (None, None),\n  }", "  let min_pos = None;\n  let max_neg = None;\n\
    \  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i >\
    \ 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", " \
    \ let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let min = None;\n  let max = None;\n\
    \  for i in lst {\n    if i < 0 {\n      min = Some(i);\n    } else if i > 0 {\n\
    \      max = Some(i);\n    }\n  }\n  return (min, max);", "  let min = None;\n\
    \  let max = None;\n  for i in lst.iter() {\n    if i.is_negative() {\n      min\
    \ = Some(i);\n    } else if i.is_positive() {\n      max = Some(i);\n    }\n \
    \ }\n  return (min, max);", "  let min_pos = None;\n  let max_neg = None;\n  for\
    \ i in lst {\n    if i < 0 {\n      if max_neg == None {\n        max_neg = i;\n\
    \      } else {\n        max_neg = max(max_neg, i);\n      }\n    } else if i\
    \ > 0 {\n      if min_pos == None {\n        min_pos = i;\n      } else {\n  \
    \      min_pos = min(min_pos, i);\n      }\n    }\n  }\n  if max_neg == None {\n\
    \    return (None, min_pos);\n  } else if min_pos == None {\n    return (max_neg,\
    \ None);\n  } else {\n    return (max_neg, min_pos);\n  }", "  if lst.len == 0\
    \ {\n    return None, None\n  }\n  let max_neg = lst.len\n  let min_pos = lst.len\n\
    \  for i in lst.iter().rev() {\n    if i < 0 {\n      max_neg = i\n      break\n\
    \    }\n  }\n  for i in lst.iter() {\n    if i > 0 {\n      min_pos = i\n    \
    \  break\n    }\n  }\n  if max_neg == 0 {\n    return None, Some(min_pos)\n  }\
    \ else if min_pos == 0 {\n    return Some(max_neg), None\n  } else {\n    return\
    \ Some(max_neg), Some(min_pos)\n  }", "  let min = None;\n  let max = None;\n\
    \  for i in lst.iter() {\n    if i < 0 {\n      min = Some(i);\n    } else if\
    \ i > 0 {\n      max = Some(i);\n    }\n  }\n  return (min, max);", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      max_neg\
    \ = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return\
    \ (max_neg, min_pos);", "  match lst.len() {\n    0 => (None, None),\n    1 =>\
    \ (None, None),\n    2 => (None, None),\n    3 => (None, None),\n    4 => (None,\
    \ None),\n    5 => (None, None),\n    6 => (None, None),\n    7 => (None, None),\n\
    \    8 => (None, None),\n    9 => (None, None),\n    _ => (None, None),\n  }",
  "  let min_pos = None;\n  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg()\
    \ {\n      if max_neg is None {\n        max_neg = i;\n      } else if i.cmp(max_neg)\
    \ > 0 {\n        max_neg = i;\n      }\n    } else if i.is_pos() {\n      if min_pos\
    \ is None {\n        min_pos = i;\n      } else if i.cmp(min_pos) < 0 {\n    \
    \    min_pos = i;\n      }\n    }\n  }\n  if min_pos.is_some() {\n    return (Some(min_pos.unwrap()),\
    \ Some(max_neg.unwrap()));\n  } else {\n    return (None, None);\n  }", "  let\
    \ negative = None;\n  let positive = None;\n  for i in lst.iter() {\n    if i\
    \ < 0 {\n      if negative is None {\n        negative = i;\n      } else {\n\
    \        negative = min(negative, i);\n      }\n    } else if i > 0 {\n      if\
    \ positive is None {\n        positive = i;\n      } else {\n        positive\
    \ = max(positive, i);\n      }\n    }\n  }\n  return (negative, positive);", " \
    \ let negative = None;\n  let positive = None;\n  for i in lst.iter() {\n    if\
    \ i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n      positive =\
    \ Some(i);\n    }\n  }\n  return (negative, positive);", "  match lst.len() {\n\
    \    0 => (None, None),\n    1 => (None, None),\n    2 => (None, None),\n    3\
    \ => (None, None),\n    4 => (None, None),\n    5 => (None, None),\n    6 => (None,\
    \ None),\n    7 => (None, None),\n    8 => (None, None),\n    9 => (None, None),\n\
    \    _ => (None, None),\n  }", "  if lst.is_empty() {\n    return None, None\n\
    \  }\n\n  let max_negative = None\n  let min_positive = None\n\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      max_negative = Some(i)\n    } else if i > 0 {\n   \
    \   min_positive = Some(i)\n    }\n  }\n\n  return max_negative, min_positive",
  "  let max_neg = None;\n  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg is None {\n    \
    \    max_neg = i;\n      } else {\n        max_neg = max(i, max_neg);\n      }\n\
    \    } else if i > 0 {\n      if min_pos is None {\n        min_pos = i;\n   \
    \   } else {\n        min_pos = min(i, min_pos);\n      }\n    }\n  }\n  if min_pos\
    \ is None {\n    return (None, None);\n  } else if max_neg is None {\n    return\
    \ (Some(min_pos), None);\n  } else {\n    return (Some(max_neg), Some(min_pos));\n\
    \  }", "  match lst.iter().collect(|(a, b)) {\n    None => (None, None),\n   \
    \ Some(a) => (Some(a), Some(b)),\n    Some(b) => (Some(b), Some(a)),\n  }", " \
    \ let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let min = None;\n  let max = None;\n\
    \  for i in lst {\n    if i < 0 {\n      min = Some(i);\n    }\n    if i > 0 {\n\
    \      max = Some(i);\n    }\n  }\n  return (min, max);", "  let min_pos = None;\n\
    \  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg() {\n      max_neg\
    \ = Some(i);\n    } else if i.is_pos() {\n      min_pos = Some(i);\n    }\n  }\n\
    \  return (max_neg, min_pos);", "  let max_neg = None;\n  let min_pos = None;\n\
    \  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i >\
    \ 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", " \
    \ if lst.is_empty() {\n    return None, None\n  }\n  let min_pos = lst.min_by(|v|\
    \ v.is_positive()).or_else(0)\n  let max_neg = lst.max_by(|v| v.is_negative()).or_else(0)\n\
    \  return Some(max_neg), Some(min_pos)", "  if lst.is_empty() {\n    return None,\
    \ None\n  }\n\n  let max_neg = lst.max_by(|v| - v)\n  let min_pos = lst.min_by(|v|\
    \ + v)\n  if max_neg.is_none() {\n    return None, Some(min_pos)\n  } else if\
    \ min_pos.is_none() {\n    return Some(max_neg), None\n  } else {\n    return\
    \ Some(max_neg), Some(min_pos)\n  }", "  let max_neg = None;\n  let min_pos =\
    \ None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else\
    \ if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);",
  "  let min_pos = None;\n  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg()\
    \ {\n      max_neg = Some(i);\n    } else if i.is_pos() {\n      min_pos = Some(i);\n\
    \    }\n  }\n  return (min_pos, max_neg);", "  if lst.len == 0 {\n    return None,\
    \ None\n  }\n\n  let max_neg = None\n  let min_pos = None\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      max_neg = Some(i)\n    } else if i > 0 {\n      min_pos\
    \ = Some(i)\n    }\n  }\n\n  return max_neg, min_pos", "  if lst.is_empty() {\n\
    \    return None, None\n  }\n\n  let max_neg = None\n  let min_pos = None\n\n\
    \  for i in lst.iter() {\n    if i.is_neg() {\n      if max_neg.is_none() {\n\
    \        max_neg = i\n      } else if i > max_neg {\n        max_neg = i\n   \
    \   }\n    } else if i.is_pos() {\n      if min_pos.is_none() {\n        min_pos\
    \ = i\n      } else if i < min_pos {\n        min_pos = i\n      }\n    }\n  }\n\
    \n  return max_neg, min_pos", "  let a = None;\n  let b = None;\n  for i in lst\
    \ {\n    if i < 0 {\n      a = Some(i);\n    } else if i > 0 {\n      b = Some(i);\n\
    \    }\n  }\n  return (a, b);", "  let negative = None;\n  let positive = None;\n\
    \  for i in lst.iter() {\n    if i < 0 {\n      negative = Some(i);\n    } else\
    \ if i > 0 {\n      positive = Some(i);\n    }\n  }\n  return (negative, positive);",
  "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let negative = None;\n  let positive\
    \ = None;\n  for x in lst {\n    if x < 0 {\n      negative = Some(x);\n    }\
    \ else if x > 0 {\n      positive = Some(x);\n    }\n  }\n  return (negative,\
    \ positive);", "  let max_neg = None;\n  let min_pos = None;\n  for i in lst {\n\
    \    if i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos\
    \ = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  if lst.len == 0 {\n\
    \    return None, None\n  }\n\n  let max_i = lst.len - 1\n  let min_i = 0\n  let\
    \ max_v = lst[max_i]\n  let min_v = lst[min_i]\n\n  for i in 0 .. max_i {\n  \
    \  if lst[i] > max_v {\n      max_v = lst[i]\n      max_i = i\n    }\n    if lst[i]\
    \ < min_v {\n      min_v = lst[i]\n      min_i = i\n    }\n  }\n\n  if max_v <\
    \ 0 {\n    return None, None\n  } else {\n    return Some(max_i), Some(min_i)\n\
    \  }", "  if lst.len == 0 {\n    return None, None\n  }\n\n  let max_neg = None\n\
    \  let min_pos = None\n  for i in lst.iter() {\n    if i < 0 {\n      if max_neg\
    \ is None {\n        max_neg = i\n      } else {\n        max_neg = max(i, max_neg)\n\
    \      }\n    } else if i > 0 {\n      if min_pos is None {\n        min_pos =\
    \ i\n      } else {\n        min_pos = min(i, min_pos)\n      }\n    }\n  }\n\n\
    \  return max_neg, min_pos", "  let max_neg = None;\n  let min_pos = None;\n \
    \ for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i >\
    \ 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", " \
    \ if lst.is_empty() {\n    return None, None\n  }\n\n  let min_pos = lst.min_by(|v|\
    \ v.is_positive()).or_else(0)\n  let max_neg = lst.max_by(|v| v.is_negative()).or_else(0)\n\
    \n  if min_pos == 0 && max_neg == 0 {\n    return None, None\n  }\n\n  return\
    \ Some(max_neg), Some(min_pos)", "  let max_neg = None;\n  let min_pos = None;\n\
    \  for i in lst.iter() {\n    if i < 0 {\n      max_neg = Some(i);\n    } else\
    \ if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);",
  "  if lst.is_empty() {\n    return None, None\n  }\n\n  let max_negative = lst.max_by(|v|\
    \ - v)\n  let min_positive = lst.min_by(|v| + v)\n\n  if max_negative.is_none()\
    \ {\n    return None, Some(min_positive)\n  } else if min_positive.is_none() {\n\
    \    return Some(max_negative), None\n  } else {\n    return Some(max_negative),\
    \ Some(min_positive)\n  }", "  match lst.len() {\n    0 => (None, None),\n   \
    \ 1 => (None, None),\n    2 => (None, None),\n    3 => (None, None),\n    4 =>\
    \ (None, None),\n    5 => (None, None),\n    6 => (None, None),\n    7 => (None,\
    \ None),\n    8 => (None, None),\n    9 => (None, None),\n    _ => (None, None),\n\
    \  }", "  match lst.len() {\n    0 => (None, None),\n    1 => (None, None),\n\
    \    2 => (None, None),\n    3 => (None, None),\n    4 => (None, None),\n    5\
    \ => (None, None),\n    6 => (None, None),\n    7 => (None, None),\n    8 => (None,\
    \ None),\n    9 => (None, None),\n    _ => (None, None),\n  }", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg\
    \ is None {\n        max_neg = i;\n      } else {\n        max_neg = max(max_neg,\
    \ i);\n      }\n    } else if i > 0 {\n      if min_pos is None {\n        min_pos\
    \ = i;\n      } else {\n        min_pos = min(min_pos, i);\n      }\n    }\n \
    \ }\n  if max_neg is None {\n    return (None, min_pos);\n  } else if min_pos\
    \ is None {\n    return (max_neg, None);\n  } else {\n    return (max_neg, min_pos);\n\
    \  }", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if\
    \ i < 0 {\n      if max_neg is None {\n        max_neg = i;\n      } else {\n\
    \        max_neg = max(i, max_neg);\n      }\n    } else if i > 0 {\n      if\
    \ min_pos is None {\n        min_pos = i;\n      } else {\n        min_pos = min(i,\
    \ min_pos);\n      }\n    }\n  }\n  if min_pos is None {\n    return (None, None);\n\
    \  } else if max_neg is None {\n    return (Some(min_pos), None);\n  } else {\n\
    \    return (None, Some(max_neg));\n  }", "  if lst.len == 0 {\n    return None,\
    \ None\n  }\n  let max_neg = None\n  let min_pos = None\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      if max_neg is None {\n        max_neg = i\n      }\
    \ else if i > max_neg {\n        max_neg = i\n      }\n    } else if i > 0 {\n\
    \      if min_pos is None {\n        min_pos = i\n      } else if i < min_pos\
    \ {\n        min_pos = i\n      }\n    }\n  }\n  if max_neg is None {\n    return\
    \ None, Some(min_pos)\n  } else if min_pos is None {\n    return Some(max_neg),\
    \ None\n  } else if max_neg < min_pos {\n    return Some(max_neg), Some(min_pos)\n\
    \  } else {\n    return Some(min_pos), Some(max_neg)\n  }", "  let min_pos = None;\n\
    \  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg is\
    \ None {\n        max_neg = i;\n      } else {\n        max_neg = max(max_neg,\
    \ i);\n      }\n    } else if i > 0 {\n      if min_pos is None {\n        min_pos\
    \ = i;\n      } else {\n        min_pos = min(min_pos, i);\n      }\n    }\n \
    \ }\n  if max_neg is None {\n    return (None, min_pos);\n  } else if min_pos\
    \ is None {\n    return (max_neg, None);\n  } else {\n    return (max_neg, min_pos);\n\
    \  }", "  let negative = None;\n  let positive = None;\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n      positive\
    \ = Some(i);\n    }\n  }\n  return (negative, positive);", "  let max_neg = None;\n\
    \  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg,\
    \ min_pos);", "  if lst.len == 0 {\n    return None, None\n  }\n  let min_pos\
    \ = lst.len\n  let max_neg = -1\n  for i in lst.iter().rev() {\n    if i > 0 {\n\
    \      min_pos = i\n      break\n    }\n    if i < 0 {\n      max_neg = i\n  \
    \  }\n  }\n  if max_neg == -1 {\n    return None, Some(min_pos)\n  }\n  return\
    \ Some(max_neg), Some(min_pos)", "  let max_negative = None;\n  let min_positive\
    \ = None;\n  for isize i in lst.iter() {\n    if i < 0 {\n      max_negative =\
    \ Some(i);\n    } else if i > 0 {\n      min_positive = Some(i);\n    }\n  }\n\
    \  return (max_negative, min_positive);", "  let max_neg = None;\n  let min_pos\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else\
    \ if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);",
  "  let max_neg = None;\n  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let negative = None;\n  let positive\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      negative = Some(i);\n    }\
    \ else if i > 0 {\n      positive = Some(i);\n    }\n  }\n  return (negative,\
    \ positive);", "  let negative_ints = lst.filter(|x| x < 0);\n  let positive_ints\
    \ = lst.filter(|x| x > 0);\n  if (negative_ints.is_empty() && positive_ints.is_empty())\
    \ {\n    return None, None;\n  }\n  let max_negative = negative_ints.max();\n\
    \  let min_positive = positive_ints.min();\n  if (max_negative.is_none() || min_positive.is_none())\
    \ {\n    return None, None;\n  }\n  return Some(max_negative.unwrap()), Some(min_positive.unwrap());",
  "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (min_pos, max_neg);", "  if lst.len == 0 {\n    return None,\
    \ None\n  }\n\n  let max_neg = None\n  let min_pos = None\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      if max_neg is None {\n        max_neg = i\n      }\
    \ else {\n        max_neg = max(i, max_neg)\n      }\n    } else if i > 0 {\n\
    \      if min_pos is None {\n        min_pos = i\n      } else {\n        min_pos\
    \ = min(i, min_pos)\n      }\n    }\n  }\n\n  return max_neg, min_pos", "  let\
    \ max_negative = None\n  let min_positive = None\n  for i in lst.iter() {\n  \
    \  if i < 0 {\n      max_negative = i\n    } else if i > 0 {\n      min_positive\
    \ = i\n    }\n  }\n  if max_negative != None && min_positive != None {\n    return\
    \ (Some(max_negative), Some(min_positive))\n  } else if max_negative != None {\n\
    \    return (Some(max_negative), None)\n  } else if min_positive != None {\n \
    \   return (None, Some(min_positive))\n  } else {\n    return (None, None)\n \
    \ }", "  let negative_ints = lst.filter(|x| x < 0).to_list();\n  let positive_ints\
    \ = lst.filter(|x| x > 0).to_list();\n  if (negative_ints.is_empty() && positive_ints.is_empty())\
    \ {\n    return (None, None);\n  } else if (negative_ints.is_empty()) {\n    return\
    \ (None, Some(positive_ints.min()));\n  } else if (positive_ints.is_empty()) {\n\
    \    return (Some(negative_ints.max()), None);\n  } else {\n    return (Some(negative_ints.max()),\
    \ Some(positive_ints.min()));\n  }", "  let max_neg = None;\n  let min_pos = None;\n\
    \  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i >\
    \ 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", " \
    \ let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  match lst.len() {\n    0 => (None,\
    \ None),\n    1 => (None, None),\n    2 => (None, None),\n    3 => (None, None),\n\
    \    4 => (None, None),\n    5 => (None, None),\n    6 => (None, None),\n    7\
    \ => (None, None),\n    8 => (None, None),\n    9 => (None, None),\n    _ => (None,\
    \ None),\n  }", "  if lst.is_empty() {\n    return None, None\n  }\n  let max_neg\
    \ = lst.max_by(|v| - v)\n  let min_pos = lst.min_by(|v| + v)\n  if max_neg.is_none()\
    \ {\n    return None, Some(min_pos.unwrap())\n  }\n  if min_pos.is_none() {\n\
    \    return Some(max_neg.unwrap()), None\n  }\n  return Some(max_neg.unwrap()),\
    \ Some(min_pos.unwrap())", "  let negative = None;\n  let positive = None;\n \
    \ for i in lst.iter() {\n    if i < 0 {\n      negative = Some(i);\n    } else\
    \ if i > 0 {\n      positive = Some(i);\n    }\n  }\n  return (negative, positive);",
  "  let max_neg = None;\n  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let min = None;\n  let max = None;\n\
    \  for i in lst {\n    if i < 0 {\n      min = Some(i);\n    } else if i > 0 {\n\
    \      max = Some(i);\n    }\n  }\n  return (min, max);", "  let max_neg = None;\n\
    \  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg,\
    \ min_pos);", "  if lst.len == 0 {\n    return None, None\n  }\n\n  let max_negative\
    \ = None\n  let min_positive = None\n  for i in lst.iter() {\n    if i < 0 {\n\
    \      max_negative = i\n    } else if i > 0 {\n      min_positive = i\n    }\n\
    \  }\n\n  if max_negative != None && min_positive != None {\n    return Some(max_negative),\
    \ Some(min_positive)\n  } else if max_negative != None {\n    return Some(max_negative),\
    \ None\n  } else if min_positive != None {\n    return None, Some(min_positive)\n\
    \  } else {\n    return None, None\n  }", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg is None {\n    \
    \    max_neg = i\n      } else {\n        max_neg = max(i, max_neg)\n      }\n\
    \    } else if i > 0 {\n      if min_pos is None {\n        min_pos = i\n    \
    \  } else {\n        min_pos = min(i, min_pos)\n      }\n    }\n  }\n  if max_neg\
    \ is None {\n    return (None, min_pos)\n  } else if min_pos is None {\n    return\
    \ (max_neg, None)\n  } else {\n    return (max_neg, min_pos)\n  }", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg() {\n\
    \      if max_neg is None {\n        max_neg = i;\n      } else {\n        max_neg\
    \ = max_neg.min(i);\n      }\n    } else {\n      if min_pos is None {\n     \
    \   min_pos = i;\n      } else {\n        min_pos = min_pos.max(i);\n      }\n\
    \    }\n  }\n  if min_pos is None {\n    return (None, None);\n  } else {\n  \
    \  return (Some(min_pos), Some(max_neg));\n  }", "  if lst.is_empty() {\n    return\
    \ None, None\n  }\n\n  let max_neg = lst.max_by(|v| - v)\n  let min_pos = lst.min_by(|v|\
    \ + v)\n\n  if max_neg.is_none() {\n    return None, Some(min_pos)\n  } else if\
    \ min_pos.is_none() {\n    return Some(max_neg), None\n  } else {\n    return\
    \ Some(max_neg), Some(min_pos)\n  }", "  let min_pos = None;\n  let max_neg =\
    \ None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else\
    \ if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);",
  "  match lst.len() {\n    0 => (None, None),\n    1 => (None, None),\n    2 => (None,\
    \ None),\n    3 => (None, None),\n    4 => (None, None),\n    5 => (None, None),\n\
    \    6 => (None, None),\n    7 => (None, None),\n    8 => (None, None),\n    9\
    \ => (None, None),\n    _ => (None, None),\n  }", "  let max_neg = None;\n  let\
    \ min_pos = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg,\
    \ min_pos);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n\
    \    if i < 0 {\n      if max_neg is None {\n        max_neg = i;\n      } else\
    \ {\n        max_neg = max(max_neg, i);\n      }\n    } else if i > 0 {\n    \
    \  if min_pos is None {\n        min_pos = i;\n      } else {\n        min_pos\
    \ = min(min_pos, i);\n      }\n    }\n  }\n  if max_neg is None {\n    return\
    \ (None, min_pos);\n  } else if min_pos is None {\n    return (max_neg, None);\n\
    \  } else {\n    return (max_neg, min_pos);\n  }", "  let min_pos = None;\n  let\
    \ max_neg = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (min_pos,\
    \ max_neg);", "  if lst.len == 0 {\n    return None, None\n  }\n\n  let max_neg\
    \ = None\n  let min_pos = None\n\n  for i in lst.iter() {\n    if i < 0 {\n  \
    \    if max_neg is None {\n        max_neg = i\n      } else if i > max_neg {\n\
    \        max_neg = i\n      }\n    } else if i > 0 {\n      if min_pos is None\
    \ {\n        min_pos = i\n      } else if i < min_pos {\n        min_pos = i\n\
    \      }\n    }\n  }\n\n  return max_neg, min_pos", "  let min_pos = None;\n \
    \ let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg() {\n      if\
    \ max_neg is None {\n        max_neg = i;\n      } else {\n        max_neg = max_neg.min(i);\n\
    \      }\n    } else {\n      if min_pos is None {\n        min_pos = i;\n   \
    \   } else {\n        min_pos = min_pos.max(i);\n      }\n    }\n  }\n  if min_pos\
    \ is None {\n    return (None, None);\n  } else if max_neg is None {\n    return\
    \ (Some(min_pos), None);\n  } else {\n    return (Some(min_pos), Some(max_neg));\n\
    \  }", "  let negative = None;\n  let positive = None;\n  for x in lst {\n   \
    \ if x < 0 {\n      negative = Some(x);\n    } else if x > 0 {\n      positive\
    \ = Some(x);\n    }\n  }\n  return (negative, positive);", "  if lst.len == 0\
    \ {\n    return None, None\n  }\n\n  let max_neg = -1\n  let min_pos = 1\n  for\
    \ i in lst.iter() {\n    if i < 0 {\n      max_neg = max_neg if max_neg > i else\
    \ i\n    } else if i > 0 {\n      min_pos = min_pos if min_pos < i else i\n  \
    \  }\n  }\n\n  if max_neg == -1 && min_pos == 1 {\n    return None, None\n  }\n\
    \n  return Some(max_neg), Some(min_pos)", "  let max_neg = None;\n  let min_pos\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else\
    \ if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);",
  "  let min_pos = None;\n  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg()\
    \ {\n      if max_neg.is_none() {\n        max_neg = Some(i);\n      } else {\n\
    \        max_neg = max_neg.map(|x| x if x < i else i);\n      }\n    } else {\n\
    \      if min_pos.is_none() {\n        min_pos = Some(i);\n      } else {\n  \
    \      min_pos = min_pos.map(|x| x if x > i else i);\n      }\n    }\n  }\n  return\
    \ (min_pos, max_neg);", "  let negative = None;\n  let positive = None;\n  for\
    \ i in lst {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n\
    \      positive = Some(i);\n    }\n  }\n  return (negative, positive);", "  let\
    \ a = None;\n  let b = None;\n  for i in lst {\n    if i < 0 {\n      a = Some(i);\n\
    \    } else if i > 0 {\n      b = Some(i);\n    }\n  }\n  return (a, b);", " \
    \ let max_neg = None;\n  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg == None {\n    \
    \    max_neg = i;\n      } else {\n        max_neg = max(max_neg, i);\n      }\n\
    \    } else if i > 0 {\n      if min_pos == None {\n        min_pos = i;\n   \
    \   } else {\n        min_pos = min(min_pos, i);\n      }\n    }\n  }\n  if max_neg\
    \ == None {\n    return (None, min_pos);\n  } else if min_pos == None {\n    return\
    \ (max_neg, None);\n  } else {\n    return (max_neg, min_pos);\n  }", "  let max_negative\
    \ = None;\n  let min_positive = None;\n  for i in lst {\n    if i < 0 {\n    \
    \  max_negative = Some(i);\n    } else if i > 0 {\n      min_positive = Some(i);\n\
    \    }\n  }\n  return (max_negative, min_positive);", "  let max_neg = None;\n\
    \  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg,\
    \ min_pos);", "  let max_neg = None;\n  let min_pos = None;\n  for i in lst.iter()\
    \ {\n    if i.is_neg() {\n      max_neg = Some(i);\n    } else if i.is_pos() {\n\
    \      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg() {\n\
    \      max_neg = Some(i);\n    } else if i.is_pos() {\n      min_pos = Some(i);\n\
    \    }\n  }\n  return (max_neg, min_pos);", "  if lst.is_empty() {\n    return\
    \ None, None\n  }\n  let max_negative = lst.max_by(|v| - v)\n  let min_positive\
    \ = lst.min_by(|v| + v)\n  if max_negative.is_none() {\n    return None, min_positive\n\
    \  }\n  if min_positive.is_none() {\n    return max_negative, None\n  }\n  return\
    \ max_negative, min_positive", "  let max_neg = None;\n  let min_pos = None;\n\
    \  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i >\
    \ 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", " \
    \ let negative = None;\n  let positive = None;\n  for i in lst {\n    if i < 0\
    \ {\n      negative = Some(i);\n    } else if i > 0 {\n      positive = Some(i);\n\
    \    }\n  }\n  return (negative, positive);", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for i in lst.iter() {\n    if i.is_neg() {\n      max_neg = i;\n\
    \    } else if i.is_pos() {\n      min_pos = i;\n    }\n  }\n  return (max_neg,\
    \ min_pos);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n\
    \    if i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos\
    \ = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  match lst.len() {\n\
    \    0 => (None, None),\n    1 => (None, None),\n    2 => (None, None),\n    3\
    \ => (None, None),\n    4 => (None, None),\n    5 => (None, None),\n    6 => (None,\
    \ None),\n    7 => (None, None),\n    8 => (None, None),\n    9 => (None, None),\n\
    \    _ => (None, None),\n  }", "  let min_pos = None;\n  let max_neg = None;\n\
    \  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i >\
    \ 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", " \
    \ let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (min_pos, max_neg);", "  match lst.iter().collect(|(a, b)\
    \ => (a, b)) {\n    None => (None, None),\n    Some(a) => (Some(a), Some(a)),\n\
    \    Some(a, b) => (Some(a), Some(b)),\n  }", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg is None {\n    \
    \    max_neg = i;\n      } else {\n        max_neg = max(max_neg, i);\n      }\n\
    \    } else if i > 0 {\n      if min_pos is None {\n        min_pos = i;\n   \
    \   } else {\n        min_pos = min(min_pos, i);\n      }\n    }\n  }\n  if min_pos\
    \ is None {\n    return (None, None);\n  } else if max_neg is None {\n    return\
    \ (Some(min_pos), None);\n  } else {\n    return (Some(min_pos), Some(max_neg));\n\
    \  }", "  match lst.iter().collect(\n    largest_smallest_integers_iter(\n   \
    \   lst.len(),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(|x|\
    \ x.to_int()),\n      lst.iter().map(|x| x.to_int()),\n      lst.iter().map(",
  "  let neg = None;\n  let pos = None;\n  for i in lst {\n    if i < 0 {\n      if\
    \ neg is None {\n        neg = i;\n      } else {\n        neg = max(neg, i);\n\
    \      }\n    } else if i > 0 {\n      if pos is None {\n        pos = i;\n  \
    \    } else {\n        pos = min(pos, i);\n      }\n    }\n  }\n  return (neg,\
    \ pos);", "  if lst.len == 0 {\n    return None, None\n  }\n\n  let max_neg =\
    \ None\n  let min_pos = None\n\n  for i in lst.iter() {\n    if i < 0 {\n    \
    \  max_neg = Some(i)\n    } else if i > 0 {\n      min_pos = Some(i)\n    }\n\
    \  }\n\n  return max_neg, min_pos", "  let min_pos = None;\n  let max_neg = None;\n\
    \  for i in lst.iter() {\n    if i.is_neg() {\n      if max_neg is None {\n  \
    \      max_neg = i;\n      } else if i.cmp(max_neg) > 0 {\n        max_neg = i;\n\
    \      }\n    } else if i.is_pos() {\n      if min_pos is None {\n        min_pos\
    \ = i;\n      } else if i.cmp(min_pos) < 0 {\n        min_pos = i;\n      }\n\
    \    }\n  }\n  if min_pos is None {\n    return (None, None);\n  } else if max_neg\
    \ is None {\n    return (Some(min_pos), None);\n  } else {\n    return (Some(min_pos),\
    \ Some(max_neg));\n  }", "  let negative = None;\n  let positive = None;\n  for\
    \ i in lst {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n\
    \      positive = Some(i);\n    }\n  }\n  return (negative, positive);", "  let\
    \ max_negative = None;\n  let min_positive = None;\n  for i in lst {\n    if i\
    \ < 0 {\n      max_negative = Some(i);\n    } else if i > 0 {\n      min_positive\
    \ = Some(i);\n    }\n  }\n  return (max_negative, min_positive);", "  let negative\
    \ = None;\n  let positive = None;\n  for i in lst {\n    if i < 0 {\n      negative\
    \ = Some(i);\n    } else if i > 0 {\n      positive = Some(i);\n    }\n  }\n \
    \ return negative, positive;", "  match lst.len() {\n    0 => (None, None),\n\
    \    1 => (None, None),\n    2 => (None, None),\n    3 => (None, None),\n    4\
    \ => (None, None),\n    5 => (None, None),\n    6 => (None, None),\n    7 => (None,\
    \ None),\n    8 => (None, None),\n    9 => (None, None),\n    _ => (None, None),\n\
    \  }", "  let max_neg = None;\n  let min_pos = None;\n  for isize in lst.iter()\
    \ {\n    if isize < 0 {\n      max_neg = Some(isize);\n    } else if isize > 0\
    \ {\n      min_pos = Some(isize);\n    }\n  }\n  return (max_neg, min_pos);",
  "  let min = None;\n  let max = None;\n  for i in lst {\n    if i < 0 {\n      min\
    \ = Some(i);\n    } else if i > 0 {\n      max = Some(i);\n    }\n  }\n  return\
    \ (min, max);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst\
    \ {\n    if i < 0 {\n      if max_neg is None {\n        max_neg = i\n      }\
    \ else {\n        max_neg = min(max_neg, i)\n      }\n    } else if i > 0 {\n\
    \      if min_pos is None {\n        min_pos = i\n      } else {\n        min_pos\
    \ = max(min_pos, i)\n      }\n    }\n  }\n  if min_pos is None {\n    return (None,\
    \ None)\n  } else if max_neg is None {\n    return (Some(min_pos), None)\n  }\
    \ else {\n    return (Some(max_neg), Some(min_pos))\n  }", "  if lst.len == 0\
    \ {\n    return None, None\n  }\n\n  let max_neg = lst.len\n  let min_pos = lst.len\n\
    \  for i in lst.iter().rev() {\n    if i < 0 {\n      max_neg = i\n      break\n\
    \    } else if i > 0 {\n      min_pos = i\n      break\n    }\n  }\n\n  if max_neg\
    \ == 0 && min_pos == 0 {\n    return None, None\n  } else {\n    return Some(max_neg),\
    \ Some(min_pos)\n  }", "  let max_neg = None;\n  let min_pos = None;\n  for i\
    \ in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n\
    \      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      max_neg\
    \ = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return\
    \ (max_neg, min_pos);", "  if lst.len == 0 {\n    return None, None\n  }\n  let\
    \ max_neg = lst.len.map(|x| - x).max()\n  let min_pos = lst.len.map(|x| - x).min()\n\
    \  if max_neg.is_none() {\n    return None, Some(min_pos)\n  }\n  if min_pos.is_none()\
    \ {\n    return Some(max_neg), None\n  }\n  return Some(max_neg), Some(min_pos)",
  "  let max_negative = None;\n  let min_positive = None;\n  for i in lst {\n    if\
    \ i < 0 {\n      max_negative = Some(i);\n    } else if i > 0 {\n      min_positive\
    \ = Some(i);\n    }\n  }\n  return (max_negative, min_positive);", "  match lst.len()\
    \ {\n    0 => (None, None),\n    1 => (None, None),\n    2 => (None, None),\n\
    \    3 => (None, None),\n    4 => (None, None),\n    5 => (None, None),\n    6\
    \ => (None, None),\n    7 => (None, None),\n    8 => (None, None),\n    9 => (None,\
    \ None),\n    _ => (None, None),\n  }", "  let max_neg = None;\n  let min_pos\
    \ = None;\n  for i in lst.iter() {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg,\
    \ min_pos);", "  let max_neg = None;\n  let min_pos = None;\n  for i in lst {\n\
    \    if i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos\
    \ = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  if lst.is_empty()\
    \ {\n    return None, None\n  }\n\n  let max_negative = lst.max_by(|v| - v)\n\
    \  let min_positive = lst.min_by(|v| + v)\n\n  if max_negative.is_none() {\n \
    \   return None, Some(min_positive)\n  } else if min_positive.is_none() {\n  \
    \  return Some(max_negative), None\n  } else {\n    return Some(max_negative),\
    \ Some(min_positive)\n  }", "  let negative = None;\n  let positive = None;\n\
    \  for i in lst {\n    if i < 0 {\n      if negative is None {\n        negative\
    \ = i;\n      } else {\n        negative = min(negative, i);\n      }\n    } else\
    \ if i > 0 {\n      if positive is None {\n        positive = i;\n      } else\
    \ {\n        positive = max(positive, i);\n      }\n    }\n  }\n  return (negative,\
    \ positive);", "  let max_negative = None;\n  let min_positive = None;\n  for\
    \ i in lst.iter() {\n    if i < 0 {\n      max_negative = Some(i);\n    } else\
    \ if i > 0 {\n      min_positive = Some(i);\n    }\n  }\n  return (max_negative,\
    \ min_positive);", "  let negative = None;\n  let positive = None;\n  for i in\
    \ lst {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n  \
    \    positive = Some(i);\n    }\n  }\n  return (negative, positive);", "  if lst.len\
    \ == 0 {\n    return None, None\n  }\n\n  let max_negative = None\n  let min_positive\
    \ = None\n  for i in lst.iter() {\n    if i < 0 {\n      max_negative = Some(i)\n\
    \    } else if i > 0 {\n      min_positive = Some(i)\n    }\n  }\n\n  return max_negative,\
    \ min_positive", "  let negative = None;\n  let positive = None;\n  for i in lst\
    \ {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n      positive\
    \ = Some(i);\n    }\n  }\n  return (negative, positive);", "  let negative = None;\n\
    \  let positive = None;\n  for i in lst {\n    if i < 0 {\n      negative = Some(i);\n\
    \    } else if i > 0 {\n      positive = Some(i);\n    }\n  }\n  return (negative,\
    \ positive);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n\
    \    if i < 0 {\n      if max_neg is None {\n        max_neg = i;\n      } else\
    \ {\n        max_neg = max(max_neg, i);\n      }\n    } else {\n      if min_pos\
    \ is None {\n        min_pos = i;\n      } else {\n        min_pos = min(min_pos,\
    \ i);\n      }\n    }\n  }\n  if max_neg is None {\n    return (None, min_pos);\n\
    \  } else if min_pos is None {\n    return (max_neg, None);\n  } else {\n    return\
    \ (max_neg, min_pos);\n  }", "  let min_pos = None;\n  let max_neg = None;\n \
    \ for i in lst {\n    if i < 0 {\n      if max_neg is None {\n        max_neg\
    \ = i;\n      } else if i > max_neg {\n        max_neg = i;\n      }\n    } else\
    \ if i > 0 {\n      if min_pos is None {\n        min_pos = i;\n      } else if\
    \ i < min_pos {\n        min_pos = i;\n      }\n    }\n  }\n  if max_neg is None\
    \ {\n    return (None, None);\n  } else if min_pos is None {\n    return (None,\
    \ Some(max_neg));\n  } else if max_neg < min_pos {\n    return (None, None);\n\
    \  } else {\n    return (Some(max_neg), Some(min_pos));\n  }", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg\
    \ == None {\n        max_neg = i;\n      } else {\n        max_neg = max(max_neg,\
    \ i);\n      }\n    } else if i > 0 {\n      if min_pos == None {\n        min_pos\
    \ = i;\n      } else {\n        min_pos = min(min_pos, i);\n      }\n    }\n \
    \ }\n  if max_neg == None {\n    return (None, min_pos);\n  } else if min_pos\
    \ == None {\n    return (max_neg, None);\n  } else {\n    return (max_neg, min_pos);\n\
    \  }", "  if lst.len == 0 {\n    return None, None\n  }\n  let max_neg = None\n\
    \  let min_pos = None\n  for i in lst.iter() {\n    if i < 0 {\n      if max_neg\
    \ is None {\n        max_neg = i\n      } else {\n        max_neg = max(i, max_neg)\n\
    \      }\n    } else if i > 0 {\n      if min_pos is None {\n        min_pos =\
    \ i\n      } else {\n        min_pos = min(i, min_pos)\n      }\n    }\n  }\n\
    \  return max_neg, min_pos", "  if lst.is_empty() {\n    return None, None\n \
    \ }\n\n  let max_negative = lst.max_by(|x| - x)\n  let min_positive = lst.min_by(|x|\
    \ + x)\n\n  if max_negative.is_none() {\n    return None, Some(min_positive)\n\
    \  } else if min_positive.is_none() {\n    return Some(max_negative), None\n \
    \ } else {\n    return Some(max_negative), Some(min_positive)\n  }", "  let min\
    \ = None;\n  let max = None;\n  for i in lst {\n    if i < 0 {\n      min = Some(i);\n\
    \    } else if i > 0 {\n      max = Some(i);\n    }\n  }\n  return (min, max);",
  "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n\
    \      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n \
    \   }\n  }\n  return (max_neg, min_pos);", "  let neg = None;\n  let pos = None;\n\
    \  for i in lst {\n    if i < 0 {\n      neg = Some(i);\n    } else if i > 0 {\n\
    \      pos = Some(i);\n    }\n  }\n  return (neg, pos);", "  let min_pos = None;\n\
    \  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (min_pos,\
    \ max_neg);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst.iter()\
    \ {\n    if i.is_neg() {\n      max_neg = Some(i);\n    } else if i.is_pos() {\n\
    \      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      max_neg\
    \ = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return\
    \ (min_pos, max_neg);", "  if lst.len == 0 {\n    return None, None\n  }\n\n \
    \ let max_neg = lst.len\n  let min_pos = lst.len\n  for i in lst.iter().rev()\
    \ {\n    if i < 0 {\n      max_neg = i\n      break\n    } else {\n      min_pos\
    \ = i\n    }\n  }\n\n  if max_neg == 0 {\n    return None, None\n  } else {\n\
    \    return Some(max_neg), Some(min_pos)\n  }", "  match lst.len() {\n    0 =>\
    \ (None, None),\n    1 => (None, None),\n    2 => (None, None),\n    3 => (None,\
    \ None),\n    4 => (None, None),\n    5 => (None, None),\n    6 => (None, None),\n\
    \    7 => (None, None),\n    8 => (None, None),\n    9 => (None, None),\n    _\
    \ => (None, None),\n  }", "  if lst.len == 0 {\n    return None, None\n  }\n\n\
    \  let max_negative = None\n  let min_positive = None\n\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      max_negative = Some(i)\n    } else if i > 0 {\n   \
    \   min_positive = Some(i)\n    }\n  }\n\n  return max_negative, min_positive",
  "  if lst.len == 0 {\n    return None, None\n  }\n\n  let max_neg = -1\n  let min_pos\
    \ = 1\n  for i in lst.iter() {\n    if i < 0 {\n      max_neg = max_neg if max_neg\
    \ > i else i\n    } else if i > 0 {\n      min_pos = min_pos if min_pos < i else\
    \ i\n    }\n  }\n\n  if max_neg == -1 {\n    return None, Some(min_pos)\n  } else\
    \ if min_pos == 1 {\n    return Some(max_neg), None\n  } else {\n    return Some(max_neg),\
    \ Some(min_pos)\n  }", "  let min_pos = None;\n  let max_neg = None;\n  for i\
    \ in lst {\n    if i < 0 {\n      if max_neg == None {\n        max_neg = i;\n\
    \      } else {\n        max_neg = max(max_neg, i);\n      }\n    } else if i\
    \ > 0 {\n      if min_pos == None {\n        min_pos = i;\n      } else {\n  \
    \      min_pos = min(min_pos, i);\n      }\n    }\n  }\n  if max_neg == None {\n\
    \    return (None, min_pos);\n  } else if min_pos == None {\n    return (max_neg,\
    \ None);\n  } else {\n    return (max_neg, min_pos);\n  }", "  let max_neg = None;\n\
    \  let min_pos = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg,\
    \ min_pos);", "  let negative = None;\n  let positive = None;\n  for isize i in\
    \ lst {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n  \
    \    positive = Some(i);\n    }\n  }\n  return (negative, positive);", "  if lst.len\
    \ == 0 {\n    return None, None\n  }\n\n  let min_pos = None\n  let max_neg =\
    \ None\n  for i in lst.iter() {\n    if i.is_neg() {\n      if max_neg is None\
    \ {\n        max_neg = i\n      } else if i.cmp(max_neg) > 0 {\n        max_neg\
    \ = i\n      }\n    } else {\n      if min_pos is None {\n        min_pos = i\n\
    \      } else if i.cmp(min_pos) < 0 {\n        min_pos = i\n      }\n    }\n \
    \ }\n\n  if max_neg is None {\n    return None, None\n  } else if min_pos is None\
    \ {\n    return Some(max_neg), None\n  } else {\n    return Some(max_neg), Some(min_pos)\n\
    \  }", "  if lst.len == 0 {\n    return None, None\n  }\n  let max_neg = lst.len.min()\n\
    \  let min_pos = lst.len.max()\n  for i in lst.iter() {\n    if i < 0 {\n    \
    \  max_neg = i\n    } else if i > 0 {\n      min_pos = i\n    }\n  }\n  if max_neg\
    \ == 0 {\n    return None, None\n  }\n  return Some(max_neg), Some(min_pos)",
  "  if lst.len == 0 {\n    return None, None\n  }\n\n  let max_negative = -1\n  let\
    \ min_positive = 1\n  for i in lst.iter() {\n    if i < 0 {\n      max_negative\
    \ = max_negative if max_negative < i else i\n    } else if i > 0 {\n      min_positive\
    \ = min_positive if min_positive > i else i\n    }\n  }\n\n  if max_negative <\
    \ 0 {\n    return None, None\n  } else if min_positive > 0 {\n    return Some(max_negative),\
    \ Some(min_positive)\n  } else {\n    return None, None\n  }", "  if lst.len ==\
    \ 0 {\n    return None, None\n  }\n\n  let min_pos = None\n  let max_neg = None\n\
    \  for i in lst.iter().as_range() {\n    if i < 0 {\n      if max_neg is None\
    \ {\n        max_neg = i\n      } else {\n        max_neg = max(i, max_neg)\n\
    \      }\n    } else {\n      if min_pos is None {\n        min_pos = i\n    \
    \  } else {\n        min_pos = min(i, min_pos)\n      }\n    }\n  }\n\n  if max_neg\
    \ is None {\n    return None, Some(min_pos)\n  } else if min_pos is None {\n \
    \   return Some(max_neg), None\n  } else {\n    return Some(max(max_neg, min_pos)),\
    \ Some(min(min_pos, max_neg))\n  }", "  if lst.is_empty() {\n    return None,\
    \ None\n  }\n\n  let max_negative = None\n  let min_positive = None\n\n  for i\
    \ in lst.iter() {\n    if i < 0 {\n      max_negative = Some(i)\n    } else if\
    \ i > 0 {\n      min_positive = Some(i)\n    }\n  }\n\n  return max_negative,\
    \ min_positive", "  let neg = None;\n  let pos = None;\n  for i in lst {\n   \
    \ if i < 0 {\n      if neg is None {\n        neg = i;\n      } else {\n     \
    \   neg = max(neg, i);\n      }\n    } else if i > 0 {\n      if pos is None {\n\
    \        pos = i;\n      } else {\n        pos = min(pos, i);\n      }\n    }\n\
    \  }\n  return (neg, pos);", "  match lst.len() {\n    0 => (None, None),\n  \
    \  1 => (None, None),\n    2 => (None, None),\n    3 => (None, None),\n    4 =>\
    \ (None, None),\n    5 => (None, None),\n    6 => (None, None),\n    7 => (None,\
    \ None),\n    8 => (None, None),\n    9 => (None, None),\n    _ => (None, None),\n\
    \  }", "  let max_neg = None;\n  let min_pos = None;\n  for i in lst {\n    if\
    \ i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n\
    \    }\n  }\n  return (max_neg, min_pos);", "  if lst.len == 0 {\n    return None,\
    \ None\n  }\n\n  let min_pos = None\n  let max_neg = None\n  for i in lst.iter()\
    \ {\n    if i.is_negative() {\n      if max_neg is None {\n        max_neg = i\n\
    \      } else {\n        max_neg = max_neg.min(i)\n      }\n    } else {\n   \
    \   if min_pos is None {\n        min_pos = i\n      } else {\n        min_pos\
    \ = min_pos.max(i)\n      }\n    }\n  }\n\n  return max_neg, min_pos", "  let\
    \ min_pos = None;\n  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg()\
    \ {\n      if max_neg is None {\n        max_neg = i;\n      } else {\n      \
    \  max_neg = max_neg.min(i);\n      }\n    } else {\n      if min_pos is None\
    \ {\n        min_pos = i;\n      } else {\n        min_pos = min_pos.max(i);\n\
    \      }\n    }\n  }\n  if min_pos is None {\n    return None, None;\n  } else\
    \ {\n    return Some(max_neg), Some(min_pos);\n  }", "  let min_pos = None;\n\
    \  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg is\
    \ None {\n        max_neg = i\n      } else {\n        max_neg = max(i, max_neg)\n\
    \      }\n    } else if i > 0 {\n      if min_pos is None {\n        min_pos =\
    \ i\n      } else {\n        min_pos = min(i, min_pos)\n      }\n    }\n  }\n\
    \  if max_neg is None {\n    return (None, min_pos)\n  } else if min_pos is None\
    \ {\n    return (max_neg, None)\n  } else {\n    return (max_neg, min_pos)\n \
    \ }", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if\
    \ i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n\
    \    }\n  }\n  return (max_neg, min_pos);", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for isize i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (min_pos,\
    \ max_neg);", "  let negative = None;\n  let positive = None;\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n      positive\
    \ = Some(i);\n    }\n  }\n  return (negative, positive);", "  if lst.len == 0\
    \ {\n    return None, None\n  }\n\n  let max_negative = None\n  let min_positive\
    \ = None\n\n  for i in lst.iter() {\n    if i < 0 {\n      max_negative = Some(i)\n\
    \    } else if i > 0 {\n      min_positive = Some(i)\n    }\n  }\n\n  return max_negative,\
    \ min_positive", "  let max_neg = None;\n  let min_pos = None;\n  for i in lst.iter()\
    \ {\n    if i.is_neg() {\n      max_neg = Some(i);\n    } else if i.is_pos() {\n\
    \      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg\
    \ == None {\n        max_neg = i\n      } else {\n        max_neg = max(i, max_neg)\n\
    \      }\n    } else if i > 0 {\n      if min_pos == None {\n        min_pos =\
    \ i\n      } else {\n        min_pos = min(i, min_pos)\n      }\n    }\n  }\n\
    \  if max_neg == None {\n    return (None, None)\n  } else if min_pos == None\
    \ {\n    return (Some(max_neg), None)\n  } else {\n    return (Some(max_neg),\
    \ Some(min_pos))\n  }", "  let min_pos = None;\n  let max_neg = None;\n  for i\
    \ in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n\
    \      min_pos = Some(i);\n    }\n  }\n  return (min_pos, max_neg);", "  let max_negative\
    \ = None\n  let min_positive = None\n  for i in lst {\n    if i < 0 {\n      max_negative\
    \ = Some(i)\n    } else if i > 0 {\n      min_positive = Some(i)\n    }\n  }\n\
    \  return (max_negative, min_positive)", "  if lst.is_empty() {\n    return None,\
    \ None\n  }\n\n  let max_negative = None\n  let min_positive = None\n\n  for i\
    \ in lst.iter() {\n    if i < 0 {\n      if max_negative is None {\n        max_negative\
    \ = i\n      } else if i > max_negative {\n        max_negative = i\n      }\n\
    \    } else if i > 0 {\n      if min_positive is None {\n        min_positive\
    \ = i\n      } else if i < min_positive {\n        min_positive = i\n      }\n\
    \    }\n  }\n\n  if max_negative is None {\n    return None, Some(min_positive)\n\
    \  } else if min_positive is None {\n    return Some(max_negative), None\n  }\
    \ else if max_negative < min_positive {\n    return Some(max_negative), Some(min_positive)\n\
    \  } else {\n    return None, Some(max_negative)\n  }", "  let max_negative =\
    \ None;\n  let min_positive = None;\n  for i in lst.iter() {\n    if i < 0 {\n\
    \      max_negative = Some(i);\n    } else if i > 0 {\n      min_positive = Some(i);\n\
    \    }\n  }\n  return (max_negative, min_positive);", "  if lst.len == 0 {\n \
    \   return None, None\n  }\n  let max_neg = None\n  let min_pos = None\n  for\
    \ i in lst.iter() {\n    if i < 0 {\n      if max_neg is None {\n        max_neg\
    \ = i\n      } else {\n        max_neg = max(max_neg, i)\n      }\n    } else\
    \ if i > 0 {\n      if min_pos is None {\n        min_pos = i\n      } else {\n\
    \        min_pos = min(min_pos, i)\n      }\n    }\n  }\n  return max_neg, min_pos",
  "  let min = None;\n  let max = None;\n  for i in lst {\n    if i < 0 {\n      min\
    \ = Some(i);\n    } else if i > 0 {\n      max = Some(i);\n    }\n  }\n  return\
    \ (min, max);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst\
    \ {\n    if i < 0 {\n      if max_neg is None {\n        max_neg = i\n      }\
    \ else {\n        max_neg = max(i, max_neg)\n      }\n    } else if i > 0 {\n\
    \      if min_pos is None {\n        min_pos = i\n      } else {\n        min_pos\
    \ = min(i, min_pos)\n      }\n    }\n  }\n  if max_neg is None {\n    return (None,\
    \ None)\n  } else if min_pos is None {\n    return (Some(max_neg), None)\n  }\
    \ else {\n    return (Some(max_neg), Some(min_pos))\n  }", "  let min_pos = None;\n\
    \  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n\
    \    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (min_pos,\
    \ max_neg);", "  if lst.is_empty() {\n    return None, None\n  }\n  let max_neg\
    \ = lst.max_by(|v| - v);\n  let min_pos = lst.min_by(|v| + v);\n  if max_neg.is_none()\
    \ {\n    return None, Some(min_pos.unwrap())\n  }\n  if min_pos.is_none() {\n\
    \    return Some(max_neg.unwrap()), None\n  }\n  return Some(max_neg.unwrap()),\
    \ Some(min_pos.unwrap())", "  if lst.len == 0 {\n    return None, None\n  }\n\
    \  let max_neg = lst.len.min()\n  let min_pos = lst.len.max()\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      max_neg = i\n    } else if i > 0 {\n      min_pos =\
    \ i\n      break\n    }\n  }\n  if max_neg == 0 {\n    return None, None\n  }\n\
    \  return Some(max_neg), Some(min_pos)", "  if lst.is_empty() {\n    return None,\
    \ None\n  }\n  let min_pos = lst.min_by(|v| v.is_positive()).map(|v| v.unwrap()).unwrap()\n\
    \  let max_neg = lst.max_by(|v| v.is_negative()).map(|v| v.unwrap()).unwrap()\n\
    \  if min_pos.is_none() {\n    return None, Some(max_neg)\n  }\n  if max_neg.is_none()\
    \ {\n    return Some(min_pos), None\n  }\n  return Some(max_neg), Some(min_pos)",
  "  let min = None;\n  let max = None;\n  for i in lst {\n    if i < 0 {\n      min\
    \ = Some(i);\n    } else if i > 0 {\n      max = Some(i);\n    }\n  }\n  return\
    \ (min, max);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst.iter()\
    \ {\n    if i.is_neg() {\n      if max_neg is None {\n        max_neg = i;\n \
    \     } else {\n        max_neg = max_neg.min(i);\n      }\n    } else {\n   \
    \   if min_pos is None {\n        min_pos = i;\n      } else {\n        min_pos\
    \ = min_pos.max(i);\n      }\n    }\n  }\n  if min_pos is None {\n    return (None,\
    \ None);\n  } else {\n    return (Some(min_pos), Some(max_neg));\n  }", "  let\
    \ min_pos = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n \
    \     max_neg = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n  \
    \  }\n  }\n  return (max_neg, min_pos);", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else\
    \ if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);",
  "  let negative = None;\n  let positive = None;\n  for i in lst {\n    if i < 0\
    \ {\n      negative = Some(i);\n    } else if i > 0 {\n      positive = Some(i);\n\
    \    }\n  }\n  return (negative, positive);", "  let max_neg = None;\n  let min_pos\
    \ = None;\n  for isize in lst.iter() {\n    if isize < 0 {\n      max_neg = Some(isize);\n\
    \    } else if isize > 0 {\n      min_pos = Some(isize);\n    }\n  }\n  return\
    \ (max_neg, min_pos);", "  let max_negative = None;\n  let min_positive = None;\n\
    \  for i in lst {\n    if i < 0 {\n      max_negative = Some(i);\n    } else if\
    \ i > 0 {\n      min_positive = Some(i);\n    }\n  }\n  return (max_negative,\
    \ min_positive);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst\
    \ {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n      min_pos\
    \ = Some(i);\n    }\n  }\n  return (min_pos, max_neg);", "  let negative = None;\n\
    \  let positive = None;\n  for i in lst {\n    if i < 0 {\n      negative = Some(i);\n\
    \    } else if i > 0 {\n      positive = Some(i);\n    }\n  }\n  return (negative,\
    \ positive);", "  let min_pos = None;\n  let max_neg = None;\n  for i in lst {\n\
    \    if i < 0 {\n      if max_neg is None {\n        max_neg = i;\n      } else\
    \ {\n        max_neg = max(i, max_neg);\n      }\n    } else if i > 0 {\n    \
    \  if min_pos is None {\n        min_pos = i;\n      } else {\n        min_pos\
    \ = min(i, min_pos);\n      }\n    }\n  }\n  if max_neg is None {\n    return\
    \ (None, None);\n  } else if min_pos is None {\n    return (Some(max_neg), None);\n\
    \  } else {\n    return (Some(max_neg), Some(min_pos));\n  }", "  match lst.len()\
    \ {\n    0 => (None, None),\n    1 => (None, None),\n    2 => (None, None),\n\
    \    3 => (None, None),\n    4 => (None, None),\n    5 => (None, None),\n    6\
    \ => (None, None),\n    7 => (None, None),\n    8 => (None, None),\n    9 => (None,\
    \ None),\n    _ => (None, None),\n  }", "  if lst.is_empty() {\n    return None,\
    \ None\n  }\n\n  let max_negative = lst.max_by(|v| - v)\n  let min_positive =\
    \ lst.min_by(|v| + v)\n  if max_negative.is_none() {\n    return None, min_positive\n\
    \  } else if min_positive.is_none() {\n    return max_negative, None\n  } else\
    \ {\n    return max_negative, min_positive\n  }", "  let min = None;\n  let max\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      min = Some(i);\n    }\n   \
    \ if i > 0 {\n      max = Some(i);\n    }\n  }\n  return (max, min);", "  match\
    \ lst.len() {\n    0 => (None, None),\n    1 => (None, None),\n    2 => (None,\
    \ None),\n    3 => (None, None),\n    4 => (None, None),\n    5 => (None, None),\n\
    \    6 => (None, None),\n    7 => (None, None),\n    8 => (None, None),\n    9\
    \ => (None, None),\n    _ => (None, None),\n  }", "  if lst.is_empty() {\n   \
    \ return None, None\n  }\n  let max_i = lst.max()\n  let min_i = lst.min()\n \
    \ if max_i < 0 {\n    return None, Some(min_i)\n  } else if min_i > 0 {\n    return\
    \ Some(max_i), Some(min_i)\n  } else {\n    return None, None\n  }", "  let min_pos\
    \ = None;\n  let max_neg = None;\n  for i in lst {\n    if i < 0 {\n      max_neg\
    \ = Some(i);\n    } else if i > 0 {\n      min_pos = Some(i);\n    }\n  }\n  return\
    \ (max_neg, min_pos);", "  let max_neg = None;\n  let min_pos = None;\n  for i\
    \ in lst {\n    if i < 0 {\n      max_neg = Some(i);\n    } else if i > 0 {\n\
    \      min_pos = Some(i);\n    }\n  }\n  return (max_neg, min_pos);", "  let max_negative\
    \ = None;\n  let min_positive = None;\n  for i in lst {\n    if i < 0 {\n    \
    \  max_negative = Some(i);\n    } else if i > 0 {\n      min_positive = Some(i);\n\
    \    }\n  }\n  return (max_negative, min_positive);", "  let max_negative = None;\n\
    \  let min_positive = None;\n  for i in lst {\n    if i < 0 {\n      max_negative\
    \ = Some(i);\n    } else if i > 0 {\n      min_positive = Some(i);\n    }\n  }\n\
    \  return (max_negative, min_positive);", "  let min_pos = None;\n  let max_neg\
    \ = None;\n  for i in lst {\n    if i < 0 {\n      if max_neg is None {\n    \
    \    max_neg = i;\n      } else {\n        max_neg = max(max_neg, i);\n      }\n\
    \    } else if i > 0 {\n      if min_pos is None {\n        min_pos = i;\n   \
    \   } else {\n        min_pos = min(min_pos, i);\n      }\n    }\n  }\n  if min_pos\
    \ is None {\n    return (None, None);\n  } else if max_neg is None {\n    return\
    \ (Some(min_pos), None);\n  } else {\n    return (Some(min_pos), Some(max_neg));\n\
    \  }", "  match lst.iter().collect(|(a, b)) {\n    None, Some(a) => (Some(a),\
    \ Some(b)),\n    None, None => (None, None),\n    Some(a), Some(b) => (Some(a),\
    \ Some(b)),\n  }", "  let negative = None;\n  let positive = None;\n  for i in\
    \ lst {\n    if i < 0 {\n      negative = Some(i);\n    } else if i > 0 {\n  \
    \    positive = Some(i);\n    }\n  }\n  return (negative, positive);", "  let\
    \ max_negative = None;\n  let min_positive = None;\n  for i in lst.iter() {\n\
    \    if i < 0 {\n      max_negative = Some(i);\n    } else if i > 0 {\n      min_positive\
    \ = Some(i);\n    }\n  }\n  return (max_negative, min_positive);", "  if lst.is_empty()\
    \ {\n    return None, None\n  }\n\n  let min_pos = lst.min_by(|v| v.is_positive()).or_else(0)\n\
    \  let max_neg = lst.max_by(|v| v.is_negative()).or_else(0)\n\n  if min_pos ==\
    \ 0 && max_neg == 0 {\n    return None, None\n  }\n\n  return Some(max_neg), Some(min_pos)",
  "  if lst.is_empty() {\n    return None, None\n  }\n\n  let max_negative = None\n\
    \  let min_positive = None\n\n  for i in lst.iter() {\n    if i < 0 {\n      max_negative\
    \ = Some(i)\n    } else if i > 0 {\n      min_positive = Some(i)\n    }\n  }\n\
    \n  return max_negative, min_positive", "  if lst.is_empty() {\n    return None,\
    \ None\n  }\n  let max_neg = None\n  let min_pos = None\n  for i in lst.iter()\
    \ {\n    if i < 0 {\n      if max_neg is None {\n        max_neg = i\n      }\
    \ else {\n        max_neg = max(i, max_neg)\n      }\n    } else if i > 0 {\n\
    \      if min_pos is None {\n        min_pos = i\n      } else {\n        min_pos\
    \ = min(i, min_pos)\n      }\n    }\n  }\n  return Some(max_neg), Some(min_pos)",
  "  let min_pos = None;\n  let max_neg = None;\n  for i in lst.iter() {\n    if i.is_neg()\
    \ {\n      max_neg = Some(i);\n    } else if i.is_pos() {\n      min_pos = Some(i);\n\
    \    }\n  }\n  return (max_neg, min_pos);", "  match lst.iter().collect(|(a, b))\
    \ {\n    None => (None, None),\n    Some(a) => (Some(a), Some(b)),\n    Some(a,\
    \ b) => (Some(a), Some(b)),\n  }"]
stop_tokens:
- "\n}"
