{
  "name": "HumanEval_120_maximum",
  "language": "rs",
  "prompt": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec.new(k);\n    let max_index = 0;\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i;\n        }\n    }\n    for i in 0..k {\n        max_arr[i] = arr[max_index];\n        max_index = (max_index + 1) % k;\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp576xm1s4.rs:17:19\n   |\n17 |     let max_arr = Vec.new(k);\n   |                   ^^^----\n   |                   |\n   |                   help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp576xm1s4.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp576xm1s4.rs:21:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n21 |             max_index = i;\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp576xm1s4.rs:26:39\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmp576xm1s4.rs:26:37\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                     ^ no implementation for `usize % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0423.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = vec![];\n    for i in 0..k-1 {\n        max_arr = max_arr.push(arr[i]);\n    }\n    for i in k..len(arr) {\n        if arr[i] > max_arr[k-1] {\n            max_arr = max_arr.set(k-1, arr[i]);\n        }\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps2v__1we.rs:21:17\n   |\n21 |     for i in k..len(arr) {\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps2v__1we.rs:19:32\n   |\n19 |         max_arr = max_arr.push(arr[i]);\n   |                                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps2v__1we.rs:19:19\n   |\n17 |     let max_arr = vec![];\n   |                   ------ expected due to this value\n18 |     for i in 0..k-1 {\n19 |         max_arr = max_arr.push(arr[i]);\n   |                   ^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmps2v__1we.rs:19:27\n   |\n19 |         max_arr = max_arr.push(arr[i]);\n   |                   ------- ^^^^ this call modifies `max_arr` in-place\n   |                   |\n   |                   you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps2v__1we.rs:22:12\n   |\n22 |         if arr[i] > max_arr[k-1] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmps2v__1we.rs:22:21\n   |\n22 |         if arr[i] > max_arr[k-1] {\n   |                     ^^^^^^^^^^^^ sli",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    if len(result) < k {\n        result.push(max_value)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl67ea9hg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpl67ea9hg.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:25:29\n   |\n25 |     let result = [max_index]\n   |                             ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl67ea9hg.rs:31:8\n   |\n31 |     if len(result) < k {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let result = arr.copy()\n    result[max_idx] = max_val\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkx6owkku.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkx6owkku.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpkx6owkku.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmpkx6owkku.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     result[max_idx] = max_val\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpkx6owkku.rs:26:30\n   |\n26 |     result[max_idx] = max_val\n   |                              ^ help: add `;` here\n27 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkx6owkku.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkx6owkku.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0599]: no ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    for i in k..len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    return arr.slice(max_index, max_index + k)\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0xhr1j85.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0xhr1j85.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp0xhr1j85.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp0xhr1j85.rs:27:25\n   |\n27 |             max = arr[i]\n   |                         ^ help: add `;` here\n28 |             max_index = i\n   |             --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0xhr1j85.rs:25:17\n   |\n25 |     for i in k..len(arr) {\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0xhr1j85.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0xhr1j85.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0xhr1j85.rs:26:12\n   |\n2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[max_index])\n        max_index = (max_index + 1) % k\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpag8y2mfi.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpag8y2mfi.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpag8y2mfi.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpag8y2mfi.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpag8y2mfi.rs:27:36\n   |\n27 |         result.push(arr[max_index])\n   |                                    ^ help: add `;` here\n28 |         max_index = (max_index + 1) % k\n   |         --------- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpag8y2mfi.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpag8y2mfi.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on th",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec.new(k)\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i\n        }\n    }\n    for i in 0..k {\n        max_arr[i] = arr[max_index]\n        max_index = (max_index + 1) % k\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6ttngo1u.rs:17:29\n   |\n17 |     let max_arr = Vec.new(k)\n   |                             ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6ttngo1u.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp6ttngo1u.rs:25:36\n   |\n25 |         max_arr[i] = arr[max_index]\n   |                                    ^ help: add `;` here\n26 |         max_index = (max_index + 1) % k\n   |         --------- unexpected token\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp6ttngo1u.rs:17:19\n   |\n17 |     let max_arr = Vec.new(k)\n   |                   ^^^----\n   |                   |\n   |                   help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6ttngo1u.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ttngo1u.rs:21:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n21 |             max_index = i\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ttngo1u.rs:26:39\n   |\n26 |         max_index = (max_index + 1) % k\n   |                                       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmp6ttngo1u.rs:26:37\n   |\n26 |         max_index = (max_index + 1) % k\n   |                                     ^ no implementation for `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let max_arr = Vec![max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp28zeylf8.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp28zeylf8.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmp28zeylf8.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp28zeylf8.rs:25:32\n   |\n25 |     let max_arr = Vec![max_val]\n   |                                ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp28zeylf8.rs:25:19\n   |\n25 |       let max_arr = Vec![max_val]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp28zeylf8.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp28zeylf8.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requiremen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfkjh1akg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfkjh1akg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpfkjh1akg.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[i])\n    }\n    result.push(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2qo_lsxu.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2qo_lsxu.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2qo_lsxu.rs:29:27\n   |\n29 |     result.push(max_value)\n   |                           ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in arr.iter() {\n        if i == max_value {\n            result.push_back(max_index)\n        }\n    }\n    result.resize(k)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkn9bx70e.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkn9bx70e.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpkn9bx70e.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkn9bx70e.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpkn9bx70e.rs:31:21\n   |\n31 |     result.resize(k)\n   |                     ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkn9bx70e.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkn9bx70e.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkn9bx70e.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = []\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n        if len(result) == k {\n            break\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1lvf4rnq.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1lvf4rnq.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp1lvf4rnq.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1lvf4rnq.rs:25:20\n   |\n25 |     let result = []\n   |                    ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1lvf4rnq.rs:30:12\n   |\n30 |         if len(result) == k {\n   |            ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1lvf4rnq.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1lvf4rnq.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1lvf4rnq.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i\n   |                 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = [max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphyesabv8.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphyesabv8.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmphyesabv8.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphyesabv8.rs:25:29\n   |\n25 |     let result = [max_value]\n   |                             ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphyesabv8.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphyesabv8.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphyesabv8.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfkjh1akg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfkjh1akg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpfkjh1akg.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else -1)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpshm3i97w.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpshm3i97w.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpshm3i97w.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpshm3i97w.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let result = [max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp43suy2nr.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp43suy2nr.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmp43suy2nr.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp43suy2nr.rs:25:27\n   |\n25 |     let result = [max_val]\n   |                           ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp43suy2nr.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp43suy2nr.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp43suy2nr.rs:27:12\n   |\n27 |         if arr[i] == max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == max {\n            result.push_back(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpohcsjjz7.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpohcsjjz7.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpohcsjjz7.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpohcsjjz7.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:27:12\n   |\n27 |         if arr[i] == max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let max_arr = Vec![max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp28zeylf8.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp28zeylf8.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmp28zeylf8.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp28zeylf8.rs:25:32\n   |\n25 |     let max_arr = Vec![max_val]\n   |                                ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp28zeylf8.rs:25:19\n   |\n25 |       let max_arr = Vec![max_val]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp28zeylf8.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp28zeylf8.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requiremen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else -1)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpshm3i97w.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpshm3i97w.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpshm3i97w.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpshm3i97w.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let result = [max_val]\n    for i in 0..k - 1 {\n        if arr[i] == max_val {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmcbe_tp4.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmcbe_tp4.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpmcbe_tp4.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmcbe_tp4.rs:25:27\n   |\n25 |     let result = [max_val]\n   |                           ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmcbe_tp4.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmcbe_tp4.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmcbe_tp4.rs:27:12\n   |\n27 |         if arr[i] == max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceInde",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2vj65ei6.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2vj65ei6.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2vj65ei6.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2vj65ei6.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2vj65ei6.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2vj65ei6.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2vj65ei6.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec::new(k);\n    let max_index = 0;\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i;\n        }\n    }\n    for i in 0..k {\n        max_arr[i] = arr[max_index];\n        max_index = (max_index + 1) % k;\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprqb75io8.rs:17:19\n    |\n17  |     let max_arr = Vec::new(k);\n    |                   ^^^^^^^^ - supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprqb75io8.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqb75io8.rs:21:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n21 |             max_index = i;\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmprqb75io8.rs:25:9\n   |\n25 |         max_arr[i] = arr[max_index];\n   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqb75io8.rs:26:39\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmprqb75io8.rs:26:37\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                     ^ no implementation for `usize % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ebtoy5y.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ebtoy5y.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp9ebtoy5y.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmp9ebtoy5y.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9ebtoy5y.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9ebtoy5y.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let res = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            res.push_back(arr[i])\n        }\n    }\n    res.push_back(arr[max_idx])\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsxz4wiy7.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsxz4wiy7.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpsxz4wiy7.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsxz4wiy7.rs:25:25\n   |\n25 |     let res = Vec::new()\n   |                         ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpsxz4wiy7.rs:31:32\n   |\n31 |     res.push_back(arr[max_idx])\n   |                                ^ help: add `;` here\n32 |     return res\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsxz4wiy7.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsxz4wiy7.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    result.push(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfqp2wzt0.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfqp2wzt0.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpfqp2wzt0.rs:31:32\n   |\n31 |     result.push(arr[max_index])\n   |                                ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2vj65ei6.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2vj65ei6.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2vj65ei6.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2vj65ei6.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2vj65ei6.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2vj65ei6.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2vj65ei6.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result = result.push(arr[i])\n    }\n    result = result.push(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr23i7_yw.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr23i7_yw.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpr23i7_yw.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr23i7_yw.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpr23i7_yw.rs:29:36\n   |\n29 |     result = result.push(max_value)\n   |                                    ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr23i7_yw.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr23i7_yw.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfkjh1akg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfkjh1akg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpfkjh1akg.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_k = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i\n            max_k = 1\n        } else if arr[i] == arr[max_index] {\n            max_k += 1\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == arr[max_index] {\n            result.push_back(arr[i])\n        }\n    }\n    result.push_back(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpooe39b94.rs:17:18\n   |\n17 |     let max_k = 0\n   |                  ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpooe39b94.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_k`\n  --> /tmp/tmpooe39b94.rs:21:26\n   |\n21 |             max_index = i\n   |                          ^ help: add `;` here\n22 |             max_k = 1\n   |             ----- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpooe39b94.rs:27:28\n   |\n27 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n28 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpooe39b94.rs:33:37\n   |\n33 |     result.push_back(arr[max_index])\n   |                                     ^ help: add `;` here\n34 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpooe39b94.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpooe39b94.rs:21:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n21 |             max_index = i\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpooe39b94.rs:23:19\n   |\n23 |         } else if arr[i] == arr[max_index] {\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = he",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    result.push(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfqp2wzt0.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfqp2wzt0.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpfqp2wzt0.rs:31:32\n   |\n31 |     result.push(arr[max_index])\n   |                                ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n            max_index = i;\n        }\n    }\n    let result = [max_index];\n    for i in arr.iter() {\n        if i == max_index {\n            result.push(i);\n        }\n    }\n    if len(result) < k {\n        result.push(max_index);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpjjzy6yt6.rs:31:8\n   |\n31 |     if len(result) < k {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjjzy6yt6.rs:20:16\n   |\n20 |         if i > max {\n   |                ^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjjzy6yt6.rs:21:19\n   |\n17 |     let max = arr[0];\n   |               ------ expected due to this value\n...\n21 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjjzy6yt6.rs:22:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n22 |             max_index = i;\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i;\n   |                         +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpjjzy6yt6.rs:27:14\n   |\n27 |         if i == max_index {\n   |              ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current scope\n  --> /tmp/tmpjjzy6yt6.rs:28:20\n   |\n28 |             result.push(i);\n   |                    ^^^^ method not found in `[isize; 1]`\n\nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current scope\n  --> /tmp/tmpjjzy6yt6.rs:32:16\n   |\n32 |         result.push(max_index);\n   |                ^^^^ method not found in ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n            max_index = i;\n        }\n    }\n    let result = Vec::new();\n    for i in range(k) {\n        result.push(max_index);\n        max_index = max_index + 1;\n        if max_index >= arr.len()) {\n            max_index = 0;\n        }\n        max = arr[max_index];\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpjxl0lt0n.rs:35:1\n   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |                                                     - this opening brace...\n...\n33 |     }\n   |     - ...matches this closing brace\n34 |     return result;\n35 | }\n   | ^ unexpected closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmpjxl0lt0n.rs:26:23\n   |\n26 |     for i in range(k) {\n   |                       ^ unclosed delimiter\n...\n29 |         if max_index >= arr.len()) {\n   |                                  ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in arr.iter() {\n        if i == max_value {\n            result.push_back(i)\n        }\n    }\n    if len(result) < k {\n        result.push_back(max_value)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw9gun3gc.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw9gun3gc.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpw9gun3gc.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw9gun3gc.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw9gun3gc.rs:31:8\n   |\n31 |     if len(result) < k {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw9gun3gc.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw9gun3gc.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw9gun3gc.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec.new(k);\n    let max_index = 0;\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i;\n        }\n    }\n    for i in 0..k {\n        max_arr[i] = arr[max_index];\n        max_index = (max_index + 1) % k;\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp576xm1s4.rs:17:19\n   |\n17 |     let max_arr = Vec.new(k);\n   |                   ^^^----\n   |                   |\n   |                   help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp576xm1s4.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp576xm1s4.rs:21:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n21 |             max_index = i;\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp576xm1s4.rs:26:39\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmp576xm1s4.rs:26:37\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                     ^ no implementation for `usize % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0423.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in arr.iter() {\n        if i == max_value {\n            result.push_back(max_index)\n        }\n    }\n    result.sort()\n    if len(result) < k {\n        result.extend(k - len(result))\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8g2uewiu.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8g2uewiu.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp8g2uewiu.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8g2uewiu.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp8g2uewiu.rs:31:18\n   |\n31 |     result.sort()\n   |                  ^ help: add `;` here\n32 |     if len(result) < k {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8g2uewiu.rs:32:8\n   |\n32 |     if len(result) < k {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8g2uewiu.rs:33:27\n   |\n33 |         result.extend(k - len(result))\n   |                           ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8g2uewiu.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8g2uewiu.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    for i in k..len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    return arr.slice(max_index, k)\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4ut_17wn.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4ut_17wn.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp4ut_17wn.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp4ut_17wn.rs:27:25\n   |\n27 |             max = arr[i]\n   |                         ^ help: add `;` here\n28 |             max_index = i\n   |             --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ut_17wn.rs:25:17\n   |\n25 |     for i in k..len(arr) {\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4ut_17wn.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4ut_17wn.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4ut_17wn.rs:26:12\n   |\n2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    for i in k..len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    return arr.slice(max_index, max_index + k)\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0xhr1j85.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0xhr1j85.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp0xhr1j85.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp0xhr1j85.rs:27:25\n   |\n27 |             max = arr[i]\n   |                         ^ help: add `;` here\n28 |             max_index = i\n   |             --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0xhr1j85.rs:25:17\n   |\n25 |     for i in k..len(arr) {\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0xhr1j85.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0xhr1j85.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0xhr1j85.rs:26:12\n   |\n2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let max_vec = Vec![max_value]\n    for i in arr {\n        if i == max_value {\n            max_vec = max_vec.push(i)\n        }\n    }\n    for i in range(1, k) {\n        max_vec = max_vec.push(arr[max_index])\n        max_index = max_index + 1\n        if max_index == len(arr) {\n            max_index = 0\n        }\n    }\n    return max_vec\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprdy9c1kf.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprdy9c1kf.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprdy9c1kf.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprdy9c1kf.rs:25:34\n   |\n25 |     let max_vec = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprdy9c1kf.rs:32:47\n   |\n32 |         max_vec = max_vec.push(arr[max_index])\n   |                                               ^ help: add `;` here\n33 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmprdy9c1kf.rs:33:34\n   |\n33 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n34 |         if max_index == len(arr) {\n   |         -- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprdy9c1kf.rs:25:19\n   |\n25 |       let max_vec = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprdy9c1kf.rs:31:14\n   |\n31 |     for i in range(1, k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxmo9ni8x.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxmo9ni8x.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpxmo9ni8x.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpxmo9ni8x.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmo9ni8x.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmo9ni8x.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_vec = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            max_vec = max_vec.push(arr[i])\n        }\n    }\n    return max_vec\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp3nx2529.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp3nx2529.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpp3nx2529.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp3nx2529.rs:25:34\n   |\n25 |     let max_vec = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpp3nx2529.rs:25:19\n   |\n25 |       let max_vec = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp3nx2529.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp3nx2529.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.append(max_index)\n        max_index = max_index + 1\n        if max_index == len(arr) {\n            break\n        }\n        max_value = arr[max_index]\n        for j in arr.iter() {\n            if j > max_value {\n                max_value = j\n                max_index = j\n            }\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8uai_9b2.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8uai_9b2.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp8uai_9b2.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8uai_9b2.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp8uai_9b2.rs:27:33\n   |\n27 |         result.append(max_index)\n   |                                 ^ help: add `;` here\n28 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp8uai_9b2.rs:28:34\n   |\n28 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n29 |         if max_index == len(arr) {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8uai_9b2.rs:32:35\n   |\n32 |         max_value = arr[max_index]\n   |                                   ^ help: add `;` here\n33 |         for j in arr.iter() {\n   |         --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp8uai_9b2.rs:35:30\n   |\n35 |                 max_value = j\n   |                              ^ help: add `;` here\n36 |                 max_index = j\n   |                 --------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8uai_9b2.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[i])\n    }\n    result.push(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2qo_lsxu.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2qo_lsxu.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2qo_lsxu.rs:29:27\n   |\n29 |     result.push(max_value)\n   |                           ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[i] if i == max_index else -1)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpel3nikzh.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpel3nikzh.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpel3nikzh.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpel3nikzh.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpel3nikzh.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpel3nikzh.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpel3nikzh.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpel3nikzh.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else 0)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvaf8lc47.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpvaf8lc47.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpvaf8lc47.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpvaf8lc47.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpe2fdv9d9.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe2fdv9d9.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpe2fdv9d9.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe2fdv9d9.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    for i in 0..k - 1 {\n        result[i] = arr[i]\n    }\n    result[max_index] = max_value\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfd7lvp18.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfd7lvp18.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfd7lvp18.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfd7lvp18.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpfd7lvp18.rs:29:34\n   |\n29 |     result[max_index] = max_value\n   |                                  ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfd7lvp18.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfd7lvp18.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            max_arr = max_arr.concat(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8q8un1lg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8q8un1lg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp8q8un1lg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8q8un1lg.rs:25:34\n   |\n25 |     let max_arr = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp8q8un1lg.rs:25:19\n   |\n25 |       let max_arr = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q8un1lg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q8un1lg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    result[max_index] = max_value\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmrnjhqxv.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmrnjhqxv.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpmrnjhqxv.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmpmrnjhqxv.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     result[max_index] = max_value\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpmrnjhqxv.rs:26:34\n   |\n26 |     result[max_index] = max_value\n   |                                  ^ help: add `;` here\n27 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmrnjhqxv.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmrnjhqxv.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let res = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            res.push_back(arr[i])\n        }\n    }\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqyu7j_rs.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqyu7j_rs.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpqyu7j_rs.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqyu7j_rs.rs:25:25\n   |\n25 |     let res = Vec::new()\n   |                         ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqyu7j_rs.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqyu7j_rs.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqyu7j_rs.rs:27:12\n   |\n27 |         if arr[i] == max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push(max_index)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps358ol4g.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmps358ol4g.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmps358ol4g.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmps358ol4g.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmps358ol4g.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps358ol4g.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps358ol4g.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps358ol4g.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(0, k) {\n        result.push(max_index)\n        max_index = max_index + 1\n        if max_index >= len(arr) {\n            break\n        }\n        max_value = arr[max_index]\n        for j in arr.iter() {\n            if j > max_value {\n                max_value = j\n                max_index = j\n            }\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoydn1e43.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpoydn1e43.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpoydn1e43.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpoydn1e43.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(0, k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpoydn1e43.rs:27:31\n   |\n27 |         result.push(max_index)\n   |                               ^ help: add `;` here\n28 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoydn1e43.rs:28:34\n   |\n28 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n29 |         if max_index >= len(arr) {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpoydn1e43.rs:32:35\n   |\n32 |         max_value = arr[max_index]\n   |                                   ^ help: add `;` here\n33 |         for j in arr.iter() {\n   |         --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpoydn1e43.rs:35:30\n   |\n35 |                 max_value = j\n   |                              ^ help: add `;` here\n36 |                 max_index = j\n   |                 --------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpoydn1e43.rs:26:14\n   |\n26 |     for i in range(0, k) {\n   |              ^^^^^ not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec.from_iter(0);\n    let max_k = 0;\n    for i in arr {\n        if i > max_arr[max_k] {\n            max_arr[max_k] = i;\n            max_k = max_k + 1;\n        }\n        if max_k == k {\n            break;\n        }\n    }\n    max_arr.length = k;\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp5dgeo8qg.rs:17:19\n   |\n17 |     let max_arr = Vec.from_iter(0);\n   |                   ^^^----------\n   |                   |\n   |                   help: use the path separator to refer to an item: `Vec::from_iter`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else -1)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpshm3i97w.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpshm3i97w.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpshm3i97w.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpshm3i97w.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            max_arr = max_arr.concat(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8q8un1lg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8q8un1lg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp8q8un1lg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8q8un1lg.rs:25:34\n   |\n25 |     let max_arr = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp8q8un1lg.rs:25:19\n   |\n25 |       let max_arr = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q8un1lg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q8un1lg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k - 1 {\n        result = append(result, arr[i])\n    }\n    result = append(result, max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8zr0df_q.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8zr0df_q.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp8zr0df_q.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmp8zr0df_q.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8zr0df_q.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8zr0df_q.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push_back(max_index)\n        max_index = max_index + 1\n        if max_index >= len(arr) {\n            break\n        }\n        max_value = arr[max_index]\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqnahs03g.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqnahs03g.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpqnahs03g.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqnahs03g.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpqnahs03g.rs:27:36\n   |\n27 |         result.push_back(max_index)\n   |                                    ^ help: add `;` here\n28 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpqnahs03g.rs:28:34\n   |\n28 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n29 |         if max_index >= len(arr) {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpqnahs03g.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqnahs03g.rs:29:25\n   |\n29 |         if max_index >= len(arr) {\n   |                         ^^^ not found in this scope\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqnahs03g.rs:27:16\n   |\n27 |         result.push_back(max_index)\n   |                ^^^^^^^^^ method not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_k = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i\n            max_k = 1\n        } else if arr[i] == arr[max_index] {\n            max_k += 1\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == arr[max_index] {\n            result.push(arr[i])\n        }\n    }\n    result.push(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpb1h2v6vq.rs:17:18\n   |\n17 |     let max_k = 0\n   |                  ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpb1h2v6vq.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_k`\n  --> /tmp/tmpb1h2v6vq.rs:21:26\n   |\n21 |             max_index = i\n   |                          ^ help: add `;` here\n22 |             max_k = 1\n   |             ----- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpb1h2v6vq.rs:27:28\n   |\n27 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n28 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpb1h2v6vq.rs:33:32\n   |\n33 |     result.push(arr[max_index])\n   |                                ^ help: add `;` here\n34 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpb1h2v6vq.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb1h2v6vq.rs:21:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n21 |             max_index = i\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpb1h2v6vq.rs:23:19\n   |\n23 |         } else if arr[i] == arr[max_index] {\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the tr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in arr.iter() {\n        if i == max_value {\n            result.append(max_index)\n        }\n    }\n    result.sort()\n    if k > result.len() {\n        result.resize(k)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmc4na1_t.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmc4na1_t.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpmc4na1_t.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmc4na1_t.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmc4na1_t.rs:31:18\n   |\n31 |     result.sort()\n   |                  ^ help: add `;` here\n32 |     if k > result.len() {\n   |     -- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmc4na1_t.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmc4na1_t.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmc4na1_t.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let res = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            res.push_back(arr[i])\n        }\n    }\n    res.push_back(arr[max_idx])\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsxz4wiy7.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsxz4wiy7.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpsxz4wiy7.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsxz4wiy7.rs:25:25\n   |\n25 |     let res = Vec::new()\n   |                         ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpsxz4wiy7.rs:31:32\n   |\n31 |     res.push_back(arr[max_idx])\n   |                                ^ help: add `;` here\n32 |     return res\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsxz4wiy7.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsxz4wiy7.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n            max_index = i;\n        }\n    }\n    let result = [max_index];\n    for i in arr.iter() {\n        if i == max_index {\n            result = result.concat(arr.filter(j => j != max_index));\n            if len(result) == k {\n                return result;\n            }\n            result = [max_index];\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpx99mx2l4.rs:28:49\n   |\n28 |             result = result.concat(arr.filter(j => j != max_index));\n   |                                                 ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    result.push(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_niqcc58.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_niqcc58.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp_niqcc58.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_niqcc58.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp_niqcc58.rs:31:32\n   |\n31 |     result.push(arr[max_index])\n   |                                ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_niqcc58.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_niqcc58.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Ve",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0]\n    let max_index = 0\n    for i in 1..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max]\n    for i in 0..k - 1 {\n        if arr[i] == max {\n            max_arr = max_arr.concat(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmemf2qn0.rs:17:21\n   |\n17 |     let max = arr[0]\n   |                     ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmemf2qn0.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 1..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpmemf2qn0.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmemf2qn0.rs:25:28\n   |\n25 |     let max_arr = Vec![max]\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpmemf2qn0.rs:25:19\n   |\n25 |       let max_arr = Vec![max]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmemf2qn0.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmemf2qn0.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = [max_value]\n    for i in max_index+1..k-1 {\n        result = result.concat(arr[i]..)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmqesigmr.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmqesigmr.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpmqesigmr.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmqesigmr.rs:25:29\n   |\n25 |     let result = [max_value]\n   |                             ^ help: add `;` here\n26 |     for i in max_index+1..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmqesigmr.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmqesigmr.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0599]: the method `concat` exists for array `[isize; 1]`, but its trait bounds were not satisfied\n  --> /tmp/tmpmqesigmr.rs:27:25\n   |\n27 |         result = result.concat(arr[i]..)\n   |                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k-1 {\n        result = append(result, arr[i])\n    }\n    result = append(result, max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpggm9xlqi.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpggm9xlqi.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpggm9xlqi.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpggm9xlqi.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpggm9xlqi.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpggm9xlqi.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let max_vec = Vec![max_val]\n    for i in 0..k - 1 {\n        if arr[i] == max_val {\n            max_vec = max_vec.push(arr[i])\n        }\n    }\n    return max_vec\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv1c2o0p9.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv1c2o0p9.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpv1c2o0p9.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv1c2o0p9.rs:25:32\n   |\n25 |     let max_vec = Vec![max_val]\n   |                                ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpv1c2o0p9.rs:25:19\n   |\n25 |       let max_vec = Vec![max_val]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpv1c2o0p9.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpv1c2o0p9.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result.push_back(arr[i])\n        }\n    }\n    result.push_back(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr6kfa20e.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr6kfa20e.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpr6kfa20e.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr6kfa20e.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpr6kfa20e.rs:31:37\n   |\n31 |     result.push_back(arr[max_index])\n   |                                     ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr6kfa20e.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr6kfa20e.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpln0lip7e.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpln0lip7e.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpln0lip7e.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpln0lip7e.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpln0lip7e.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpln0lip7e.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n            max_index = i;\n        }\n    }\n    let result = Vec::new();\n    for i in range(k) {\n        result.append(max_index);\n        max_index = max_index - 1;\n        if (max_index < 0) {\n            max_index = arr.len() - 1;\n        }\n        max = arr[max_index];\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpoj09eagx.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoj09eagx.rs:29:12\n   |\n29 |         if (max_index < 0) {\n   |            ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n29 -         if (max_index < 0) {\n29 +         if max_index < 0 {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoj09eagx.rs:20:16\n   |\n20 |         if i > max {\n   |                ^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoj09eagx.rs:21:19\n   |\n17 |     let max = arr[0];\n   |               ------ expected due to this value\n...\n21 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoj09eagx.rs:22:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n22 |             max_index = i;\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i;\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoj09eagx.rs:27:23\n   |\n27 |         result.append(max_index);\n   |                       ^^^^^^^^^ expected `&mut Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `{integer}`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec.new(k)\n    let max_index = 0\n    let i = 0\n    for i in arr {\n        if i > max_arr[max_index] {\n            max_arr[max_index] = i\n            max_index = max_index + 1\n            if max_index == k {\n                break\n            }\n        }\n    }\n    max_arr.copy_from(arr)\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpa6m0p5yk.rs:17:29\n   |\n17 |     let max_arr = Vec.new(k)\n   |                             ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpa6m0p5yk.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     let i = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpa6m0p5yk.rs:19:14\n   |\n19 |     let i = 0\n   |              ^ help: add `;` here\n20 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpa6m0p5yk.rs:22:35\n   |\n22 |             max_arr[max_index] = i\n   |                                   ^ help: add `;` here\n23 |             max_index = max_index + 1\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpa6m0p5yk.rs:23:38\n   |\n23 |             max_index = max_index + 1\n   |                                      ^ help: add `;` here\n24 |             if max_index == k {\n   |             -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpa6m0p5yk.rs:29:27\n   |\n29 |     max_arr.copy_from(arr)\n   |                           ^ help: add `;` here\n30 |     return max_arr\n   |     ------ unexpected token\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpa6m0p5yk.rs:17:19\n   |\n17 |     let max_arr = Vec.new(k)\n   |                   ^^^----\n   |                   |\n   |                   help: use the path separator to refer to an item: `Vec::new`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in 0..k-1 {\n        if arr[i] > max {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    let result = Vec::new();\n    for i in 0..k-1 {\n        result.push(arr[i]);\n    }\n    result.push(max);\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmifqqyjy.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmifqqyjy.rs:21:19\n   |\n21 |             max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmifqqyjy.rs:27:21\n   |\n27 |         result.push(arr[i]);\n   |                     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max]\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwy_ul7jt.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwy_ul7jt.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpwy_ul7jt.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwy_ul7jt.rs:25:27\n   |\n25 |     let result = Vec![max]\n   |                           ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpwy_ul7jt.rs:25:18\n   |\n25 |       let result = Vec![max]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwy_ul7jt.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwy_ul7jt.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_vec = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            max_vec = max_vec.push(arr[i])\n        }\n    }\n    return max_vec\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp3nx2529.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp3nx2529.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpp3nx2529.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp3nx2529.rs:25:34\n   |\n25 |     let max_vec = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpp3nx2529.rs:25:19\n   |\n25 |       let max_vec = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp3nx2529.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp3nx2529.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result[i] = max_value\n        } else {\n            result[i] = arr[max_index]\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpww0xgfv1.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpww0xgfv1.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpww0xgfv1.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpww0xgfv1.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpww0xgfv1.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpww0xgfv1.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0599]: no method named `copy` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpww0xgfv1.rs:25:22\n   |\n25 |     let result = arr.copy()\n   |                      ^^^^ method not found in `Vec<isize>`\n\ner",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push(max_index)\n        max_index = max_index + 1\n        if max_index == len(arr) {\n            break\n        }\n        max_value = arr[max_index]\n        for j in arr.iter() {\n            if j > max_value {\n                max_value = j\n                max_index = j\n            }\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_033eafx.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_033eafx.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp_033eafx.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_033eafx.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp_033eafx.rs:27:31\n   |\n27 |         result.push(max_index)\n   |                               ^ help: add `;` here\n28 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp_033eafx.rs:28:34\n   |\n28 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n29 |         if max_index == len(arr) {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_033eafx.rs:32:35\n   |\n32 |         max_value = arr[max_index]\n   |                                   ^ help: add `;` here\n33 |         for j in arr.iter() {\n   |         --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp_033eafx.rs:35:30\n   |\n35 |                 max_value = j\n   |                              ^ help: add `;` here\n36 |                 max_index = j\n   |                 --------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_033eafx.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in arr {\n        if i > max {\n            max = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr {\n        if i == max_index {\n            result.push(i)\n        } else {\n            result.push(i)\n        }\n    }\n    result.sort()\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0fkkomrw.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0fkkomrw.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp0fkkomrw.rs:21:20\n   |\n21 |             max = i\n   |                    ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0fkkomrw.rs:25:29\n   |\n25 |     let result = [max_index]\n   |                             ^ help: add `;` here\n26 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp0fkkomrw.rs:33:18\n   |\n33 |     result.sort()\n   |                  ^ help: add `;` here\n34 |     return result\n   |     ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current scope\n  --> /tmp/tmp0fkkomrw.rs:28:20\n   |\n28 |             result.push(i)\n   |                    ^^^^ method not found in `[isize; 1]`\n\nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current scope\n  --> /tmp/tmp0fkkomrw.rs:30:20\n   |\n30 |             result.push(i)\n   |                    ^^^^ method not found in `[isize; 1]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0fkkomrw.rs:34:12\n   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |                                          ---------- expected `Vec<isize>` because of return type\n...\n34 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_vec()`\n   |            |\n   |            expected struct `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[isize; 1]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have de",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new(k)\n    for i in 0..k {\n        result[i] = arr[i]\n    }\n    result[max_index] = max\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpo_pwqznt.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo_pwqznt.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpo_pwqznt.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo_pwqznt.rs:25:29\n   |\n25 |     let result = Vec::new(k)\n   |                             ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpo_pwqznt.rs:29:28\n   |\n29 |     result[max_index] = max\n   |                            ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpo_pwqznt.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpo_pwqznt.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0061]: this function takes 0 arguments but 1 argument",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result[i] = max_value\n        } else {\n            result[i] = arr[max_index]\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvvjrwiaa.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvvjrwiaa.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpvvjrwiaa.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvvjrwiaa.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvvjrwiaa.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvvjrwiaa.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0599]: no method named `copy` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpvvjrwiaa.rs:25:22\n   |\n25 |     let result = arr.copy()\n   |                      ^^^^ method not found in `Vec<isize>`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[i])\n    }\n    result.push(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2qo_lsxu.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2qo_lsxu.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2qo_lsxu.rs:29:27\n   |\n29 |     result.push(max_value)\n   |                           ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max]\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph9ir6ezn.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph9ir6ezn.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmph9ir6ezn.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph9ir6ezn.rs:25:27\n   |\n25 |     let result = Vec![max]\n   |                           ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmph9ir6ezn.rs:25:18\n   |\n25 |       let result = Vec![max]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph9ir6ezn.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph9ir6ezn.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push_back(arr[i])\n    }\n    result.push_back(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprzeanz00.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprzeanz00.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprzeanz00.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprzeanz00.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmprzeanz00.rs:29:32\n   |\n29 |     result.push_back(max_value)\n   |                                ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprzeanz00.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprzeanz00.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Ve",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == max {\n            result.push_back(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpohcsjjz7.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpohcsjjz7.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpohcsjjz7.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpohcsjjz7.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:27:12\n   |\n27 |         if arr[i] == max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push(max_index)\n        max_index = max_index + 1\n        if max_index >= len(arr) {\n            break\n        }\n        max_value = arr[max_index]\n        for j in arr.iter() {\n            if j > max_value {\n                max_value = j\n                max_index = j\n            }\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpz_kjq3zj.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpz_kjq3zj.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpz_kjq3zj.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpz_kjq3zj.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpz_kjq3zj.rs:27:31\n   |\n27 |         result.push(max_index)\n   |                               ^ help: add `;` here\n28 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpz_kjq3zj.rs:28:34\n   |\n28 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n29 |         if max_index >= len(arr) {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpz_kjq3zj.rs:32:35\n   |\n32 |         max_value = arr[max_index]\n   |                                   ^ help: add `;` here\n33 |         for j in arr.iter() {\n   |         --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpz_kjq3zj.rs:35:30\n   |\n35 |                 max_value = j\n   |                              ^ help: add `;` here\n36 |                 max_index = j\n   |                 --------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpz_kjq3zj.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max_value]\n    for i in arr.iter() {\n        if i == max_value {\n            max_arr = max_arr.push(i)\n        }\n    }\n    if k < max_arr.len() {\n        max_arr = max_arr.take(k)\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnl19wb3x.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnl19wb3x.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpnl19wb3x.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnl19wb3x.rs:25:34\n   |\n25 |     let max_arr = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpnl19wb3x.rs:25:19\n   |\n25 |       let max_arr = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnl19wb3x.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnl19wb3x.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnl19wb3x.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let max_arr = Vec![max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp28zeylf8.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp28zeylf8.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmp28zeylf8.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp28zeylf8.rs:25:32\n   |\n25 |     let max_arr = Vec![max_val]\n   |                                ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp28zeylf8.rs:25:19\n   |\n25 |       let max_arr = Vec![max_val]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp28zeylf8.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp28zeylf8.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requiremen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else 0)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvaf8lc47.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpvaf8lc47.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpvaf8lc47.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpvaf8lc47.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = [max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdiy2kruk.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdiy2kruk.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpdiy2kruk.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdiy2kruk.rs:25:29\n   |\n25 |     let result = [max_value]\n   |                             ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdiy2kruk.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdiy2kruk.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdiy2kruk.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfkjh1akg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfkjh1akg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpfkjh1akg.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprqnec98u.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprqnec98u.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprqnec98u.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprqnec98u.rs:25:25\n   |\n25 |     let max_arr = Vec![]\n   |                         ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprqnec98u.rs:25:19\n   |\n25 |       let max_arr = Vec![]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprqnec98u.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprqnec98u.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc5woz6ot.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc5woz6ot.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc5woz6ot.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc5woz6ot.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc5woz6ot.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc5woz6ot.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc5woz6ot.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let max_arr = Vec::new()\n    for i in arr.iter() {\n        if i == max_value {\n            max_arr.push(i)\n        }\n    }\n    for i in max_arr.iter() {\n        if i == max_index {\n            max_arr.push(i)\n        }\n    }\n    for i in max_arr.iter() {\n        if i < max_index {\n            max_arr.push(i)\n        }\n    }\n    max_arr.sort()\n    for i in max_arr.iter() {\n        if i < k {\n            max_arr.push(i)\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpue15h2cw.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpue15h2cw.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpue15h2cw.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpue15h2cw.rs:25:29\n   |\n25 |     let max_arr = Vec::new()\n   |                             ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpue15h2cw.rs:41:19\n   |\n41 |     max_arr.sort()\n   |                   ^ help: add `;` here\n42 |     for i in max_arr.iter() {\n   |     --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpue15h2cw.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpue15h2cw.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpue15h2cw.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_k = 0\n    let max_i = 0\n    for i in arr {\n        if i > max_k {\n            max_k = i\n            max_i = i\n        }\n    }\n    let max_arr = Vec::new()\n    for i in arr {\n        if i == max_i {\n            max_arr.push_back(i)\n        }\n    }\n    if k > max_k {\n        max_arr = Vec::new()\n        for i in arr {\n            if i == max_i {\n                max_arr.push_back(i)\n            }\n        }\n    }\n    max_arr.sort()\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2sz4abpu.rs:17:18\n   |\n17 |     let max_k = 0\n   |                  ^ help: add `;` here\n18 |     let max_i = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2sz4abpu.rs:18:18\n   |\n18 |     let max_i = 0\n   |                  ^ help: add `;` here\n19 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_i`\n  --> /tmp/tmp2sz4abpu.rs:21:22\n   |\n21 |             max_k = i\n   |                      ^ help: add `;` here\n22 |             max_i = i\n   |             ----- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2sz4abpu.rs:25:29\n   |\n25 |     let max_arr = Vec::new()\n   |                             ^ help: add `;` here\n26 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2sz4abpu.rs:32:29\n   |\n32 |         max_arr = Vec::new()\n   |                             ^ help: add `;` here\n33 |         for i in arr {\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2sz4abpu.rs:39:19\n   |\n39 |     max_arr.sort()\n   |                   ^ help: add `;` here\n40 |     return max_arr\n   |     ------ unexpected token\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp2sz4abpu.rs:28:21\n   |\n28 |             max_arr.push_back(i)\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp2sz4abpu.rs:35:25\n   |\n35 |                 max_arr.push_back(i)\n   |                         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 8 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k {\n        result = result.push(arr[i] if i == max_index else 0)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq6a9v4lw.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq6a9v4lw.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpq6a9v4lw.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpq6a9v4lw.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq6a9v4lw.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq6a9v4lw.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc5woz6ot.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc5woz6ot.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc5woz6ot.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc5woz6ot.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc5woz6ot.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc5woz6ot.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc5woz6ot.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in arr {\n        if i > max {\n            max = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push(max_index)\n        max_index = max_index - 1\n        if max_index < 0 {\n            max_index = arr.len - 1\n        }\n        max = max - 1\n        if max < 0 {\n            max = arr.len - 1\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3y7hfl18.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3y7hfl18.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp3y7hfl18.rs:21:20\n   |\n21 |             max = i\n   |                    ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3y7hfl18.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp3y7hfl18.rs:27:31\n   |\n27 |         result.push(max_index)\n   |                               ^ help: add `;` here\n28 |         max_index = max_index - 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp3y7hfl18.rs:28:34\n   |\n28 |         max_index = max_index - 1\n   |                                  ^ help: add `;` here\n29 |         if max_index < 0 {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp3y7hfl18.rs:32:22\n   |\n32 |         max = max - 1\n   |                      ^ help: add `;` here\n33 |         if max < 0 {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3y7hfl18.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3y7hfl18.rs:30:29\n   |\n30 |             max_index = arr.len - 1\n   |                             ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parenthes",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let res = Vec<isize>::new()\n    for i in 0..k {\n        if arr[i] == max {\n            res.push_back(i)\n        }\n    }\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw__26szc.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw__26szc.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpw__26szc.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpw__26szc.rs:25:18\n   |\n25 |     let res = Vec<isize>::new()\n   |                  ^     ^\n   |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   |\n25 |     let res = Vec::<isize>::new()\n   |                  ++\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw__26szc.rs:25:32\n   |\n25 |     let res = Vec<isize>::new()\n   |                                ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw__26szc.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw__26szc.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    if len(result) < k {\n        result.push(max_value)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl67ea9hg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpl67ea9hg.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:25:29\n   |\n25 |     let result = [max_index]\n   |                             ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl67ea9hg.rs:31:8\n   |\n31 |     if len(result) < k {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n            max_index = i;\n        }\n    }\n    let result = Vec::new();\n    for i in arr.iter() {\n        if i == max_index {\n            result.append(i);\n        }\n    }\n    result.append(max_index);\n    if k > result.len() {\n        result.extend(k - result.len());\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpmhcbltkl.rs:20:16\n   |\n20 |         if i > max {\n   |                ^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhcbltkl.rs:21:19\n   |\n17 |     let max = arr[0];\n   |               ------ expected due to this value\n...\n21 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhcbltkl.rs:22:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n22 |             max_index = i;\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i;\n   |                         +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpmhcbltkl.rs:27:14\n   |\n27 |         if i == max_index {\n   |              ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhcbltkl.rs:28:27\n   |\n28 |             result.append(i);\n   |                           ^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhcbltkl.rs:31:19\n   |\n31 |     result.append(max_index);\n   |                   ^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n        }\n    }\n    let result = Vec::new();\n    for i in range(k) {\n        result.push(max);\n        max = max - arr[0];\n        arr = arr.drop(1);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpq08jonfq.rs:24:14\n   |\n24 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq08jonfq.rs:19:16\n   |\n19 |         if i > max {\n   |                ^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq08jonfq.rs:20:19\n   |\n17 |     let max = arr[0];\n   |               ------ expected due to this value\n...\n20 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |             max = *i;\n   |                   +\n\nerror[E0040]: explicit use of destructor method\n  --> /tmp/tmpq08jonfq.rs:27:19\n   |\n27 |         arr = arr.drop(1);\n   |               ----^^^^---\n   |               |   |\n   |               |   explicit destructor calls not allowed\n   |               help: consider using `drop` function: `drop(arr)`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq08jonfq.rs:27:19\n    |\n27  |         arr = arr.drop(1);\n    |                   ^^^^ - supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq08jonfq.rs:27:15\n   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |                 ---------- expected due to this parameter type\n...\n27 |         arr = arr.drop(1);\n   |               ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `drop` modifies its receiver in-place\n  --> /tmp/tmpq08jonfq.rs:27:19\n   |\n27 |         arr = arr.drop(1);\n   |               --- ^^^^ this call modifies `arr` in-place\n   |               |\n   |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpe2fdv9d9.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe2fdv9d9.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpe2fdv9d9.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe2fdv9d9.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push_back(max_index)\n        max_index = max_index + 1\n        if max_index >= arr.len() {\n            max_index = 0\n        }\n        max_value = arr[max_index]\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxnihra7t.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxnihra7t.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpxnihra7t.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxnihra7t.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpxnihra7t.rs:27:36\n   |\n27 |         result.push_back(max_index)\n   |                                    ^ help: add `;` here\n28 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpxnihra7t.rs:28:34\n   |\n28 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n29 |         if max_index >= arr.len() {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxnihra7t.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxnihra7t.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxnihra7t.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    result[max_index] = max_value\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmrnjhqxv.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmrnjhqxv.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpmrnjhqxv.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmpmrnjhqxv.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     result[max_index] = max_value\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpmrnjhqxv.rs:26:34\n   |\n26 |     result[max_index] = max_value\n   |                                  ^ help: add `;` here\n27 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmrnjhqxv.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmrnjhqxv.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_k = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i\n            max_k = 1\n        } else if arr[i] == arr[max_index] {\n            max_k += 1\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == arr[max_index] {\n            result.push_back(arr[i])\n        }\n    }\n    result.push_back(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpooe39b94.rs:17:18\n   |\n17 |     let max_k = 0\n   |                  ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpooe39b94.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_k`\n  --> /tmp/tmpooe39b94.rs:21:26\n   |\n21 |             max_index = i\n   |                          ^ help: add `;` here\n22 |             max_k = 1\n   |             ----- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpooe39b94.rs:27:28\n   |\n27 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n28 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpooe39b94.rs:33:37\n   |\n33 |     result.push_back(arr[max_index])\n   |                                     ^ help: add `;` here\n34 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpooe39b94.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpooe39b94.rs:21:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n21 |             max_index = i\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpooe39b94.rs:23:19\n   |\n23 |         } else if arr[i] == arr[max_index] {\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = he",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max]\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.concat(Vec![i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt7l5wbzl.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt7l5wbzl.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpt7l5wbzl.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt7l5wbzl.rs:25:27\n   |\n25 |     let result = Vec![max]\n   |                           ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpt7l5wbzl.rs:25:18\n   |\n25 |       let result = Vec![max]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpt7l5wbzl.rs:28:36\n   |\n28 |               result = result.concat(Vec![i])\n   |                                      ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt7l5wbzl.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt7l5wbzl.rs:21:19\n   |\n21 |             max = arr[i]\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    result.push(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfqp2wzt0.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfqp2wzt0.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpfqp2wzt0.rs:31:32\n   |\n31 |     result.push(arr[max_index])\n   |                                ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in arr.iter() {\n        if i == max_value {\n            result.push_back(i)\n        }\n    }\n    for i in range(k - 1) {\n        result.push_back(max_index)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpen18s1y7.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpen18s1y7.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpen18s1y7.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpen18s1y7.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpen18s1y7.rs:31:14\n   |\n31 |     for i in range(k - 1) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpen18s1y7.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpen18s1y7.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpen18s1y7.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max]\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph9ir6ezn.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph9ir6ezn.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmph9ir6ezn.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph9ir6ezn.rs:25:27\n   |\n25 |     let result = Vec![max]\n   |                           ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmph9ir6ezn.rs:25:18\n   |\n25 |       let result = Vec![max]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph9ir6ezn.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph9ir6ezn.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpln0lip7e.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpln0lip7e.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpln0lip7e.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpln0lip7e.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpln0lip7e.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpln0lip7e.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec::new(k);\n    let max_index = 0;\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i;\n        }\n    }\n    for i in 0..k {\n        max_arr[i] = arr[max_index];\n        max_index = (max_index + 1) % k;\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprqb75io8.rs:17:19\n    |\n17  |     let max_arr = Vec::new(k);\n    |                   ^^^^^^^^ - supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprqb75io8.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqb75io8.rs:21:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n21 |             max_index = i;\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmprqb75io8.rs:25:9\n   |\n25 |         max_arr[i] = arr[max_index];\n   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqb75io8.rs:26:39\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmprqb75io8.rs:26:37\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                     ^ no implementation for `usize % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    result[max_index] = max_value\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphj61yd1n.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphj61yd1n.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmphj61yd1n.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmphj61yd1n.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     result[max_index] = max_value\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmphj61yd1n.rs:26:34\n   |\n26 |     result[max_index] = max_value\n   |                                  ^ help: add `;` here\n27 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphj61yd1n.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphj61yd1n.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push_back(arr[i])\n        }\n    }\n    result.push_back(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpiug19yx6.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpiug19yx6.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpiug19yx6.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpiug19yx6.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpiug19yx6.rs:31:37\n   |\n31 |     result.push_back(arr[max_index])\n   |                                     ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiug19yx6.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiug19yx6.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in arr {\n        if i > max {\n            max = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push(max_index)\n        max_index = max_index - 1\n        if max_index < 0 {\n            max_index = arr.len() - 1\n        }\n        max = max - 1\n        if max < 0 {\n            max = arr.len() - 1\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmplva8ne7k.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmplva8ne7k.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmplva8ne7k.rs:21:20\n   |\n21 |             max = i\n   |                    ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmplva8ne7k.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmplva8ne7k.rs:27:31\n   |\n27 |         result.push(max_index)\n   |                               ^ help: add `;` here\n28 |         max_index = max_index - 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmplva8ne7k.rs:28:34\n   |\n28 |         max_index = max_index - 1\n   |                                  ^ help: add `;` here\n29 |         if max_index < 0 {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmplva8ne7k.rs:32:22\n   |\n32 |         max = max - 1\n   |                      ^ help: add `;` here\n33 |         if max < 0 {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmplva8ne7k.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplva8ne7k.rs:30:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n30 |             max_index = arr.len() - 1\n   |                         ^^^^^^^^^^^^^ expe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec.new(k);\n    let max_index = 0;\n    for i in arr {\n        if i > max_arr[max_index] {\n            max_arr[max_index] = i;\n            max_index = 0;\n        } else if i == max_arr[max_index] {\n            max_index += 1;\n        }\n    }\n    max_arr.copy_from(arr);\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpi8n6msqx.rs:17:19\n   |\n17 |     let max_arr = Vec.new(k);\n   |                   ^^^----\n   |                   |\n   |                   help: use the path separator to refer to an item: `Vec::new`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push_back(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkl_kfr3m.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkl_kfr3m.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpkl_kfr3m.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkl_kfr3m.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkl_kfr3m.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkl_kfr3m.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkl_kfr3m.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.concat(Vec![arr[i]])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpeie1xqek.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpeie1xqek.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpeie1xqek.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpeie1xqek.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpeie1xqek.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpeie1xqek.rs:28:36\n   |\n28 |               result = result.concat(Vec![arr[i]])\n   |                                      ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeie1xqek.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ebtoy5y.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ebtoy5y.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp9ebtoy5y.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmp9ebtoy5y.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9ebtoy5y.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9ebtoy5y.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph5yhesao.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph5yhesao.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmph5yhesao.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph5yhesao.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph5yhesao.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph5yhesao.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph5yhesao.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else 0)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvaf8lc47.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpvaf8lc47.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpvaf8lc47.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpvaf8lc47.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoc2p6c_s.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpoc2p6c_s.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpoc2p6c_s.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpoc2p6c_s.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpoc2p6c_s.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpoc2p6c_s.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == max {\n            result.push_back(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpohcsjjz7.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpohcsjjz7.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpohcsjjz7.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpohcsjjz7.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpohcsjjz7.rs:27:12\n   |\n27 |         if arr[i] == max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k-1 {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k-1 {\n        if arr[i] == max {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_0h03vxj.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_0h03vxj.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp_0h03vxj.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmp_0h03vxj.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_0h03vxj.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_0h03vxj.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfkjh1akg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfkjh1akg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpfkjh1akg.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k-1 {\n        if arr[i] > arr[max_index] {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max {\n            result.push_back(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9b20uutw.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9b20uutw.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp9b20uutw.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9b20uutw.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9b20uutw.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9b20uutw.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9b20uutw.rs:22:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_k = 0;\n    let max_index = 0;\n    for i in 0..k {\n        if arr[i] > arr[max_index] {\n            max_index = i;\n            max_k = arr[i];\n        }\n    }\n    let result = arr.copy();\n    result[max_index] = arr[max_index] + 1;\n    for i in k..len(arr) {\n        if arr[i] > max_k {\n            result[i] = arr[i] + 1;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpropju9pu.rs:27:17\n   |\n27 |     for i in k..len(arr) {\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpropju9pu.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpropju9pu.rs:21:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n21 |             max_index = i;\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpropju9pu.rs:22:21\n   |\n22 |             max_k = arr[i];\n   |                     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0599]: no method named `copy` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpropju9pu.rs:25:22\n   |\n25 |     let result = arr.copy();\n   |                      ^^^^ method not found in `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpropju9pu.rs:28:12\n   |\n28 |         if arr[i] > max_k {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isiz",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max]\n    for i in 0..k {\n        if arr[i] == max {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgjiagno.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdgjiagno.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpdgjiagno.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdgjiagno.rs:25:28\n   |\n25 |     let max_arr = Vec![max]\n   |                            ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpdgjiagno.rs:25:19\n   |\n25 |       let max_arr = Vec![max]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdgjiagno.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdgjiagno.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnsqv32kz.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnsqv32kz.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpnsqv32kz.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnsqv32kz.rs:25:34\n   |\n25 |     let max_arr = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpnsqv32kz.rs:25:19\n   |\n25 |       let max_arr = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnsqv32kz.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnsqv32kz.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let result = Vec![max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpovczlaqo.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpovczlaqo.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpovczlaqo.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpovczlaqo.rs:25:31\n   |\n25 |     let result = Vec![max_val]\n   |                               ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpovczlaqo.rs:25:18\n   |\n25 |       let result = Vec![max_val]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovczlaqo.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpovczlaqo.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements o",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(0, k) {\n        result.push(max_index)\n        max_index = max_index + 1\n        if max_index == len(arr) {\n            break\n        }\n        max_value = arr[max_index]\n        for j in arr.iter() {\n            if j > max_value {\n                max_value = j\n                max_index = j\n            }\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphlnsqwu6.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphlnsqwu6.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmphlnsqwu6.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphlnsqwu6.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(0, k) {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmphlnsqwu6.rs:27:31\n   |\n27 |         result.push(max_index)\n   |                               ^ help: add `;` here\n28 |         max_index = max_index + 1\n   |         --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmphlnsqwu6.rs:28:34\n   |\n28 |         max_index = max_index + 1\n   |                                  ^ help: add `;` here\n29 |         if max_index == len(arr) {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphlnsqwu6.rs:32:35\n   |\n32 |         max_value = arr[max_index]\n   |                                   ^ help: add `;` here\n33 |         for j in arr.iter() {\n   |         --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmphlnsqwu6.rs:35:30\n   |\n35 |                 max_value = j\n   |                              ^ help: add `;` here\n36 |                 max_index = j\n   |                 --------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphlnsqwu6.rs:26:14\n   |\n26 |     for i in range(0, k) {\n   |              ^^^^^ not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[i])\n    }\n    result.push(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2qo_lsxu.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2qo_lsxu.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2qo_lsxu.rs:29:27\n   |\n29 |     result.push(max_value)\n   |                           ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[i])\n    }\n    result.push(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2qo_lsxu.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2qo_lsxu.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2qo_lsxu.rs:29:27\n   |\n29 |     result.push(max_value)\n   |                           ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k-1 {\n        if arr[i] > arr[max_index] {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max {\n            result.push_back(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9b20uutw.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9b20uutw.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp9b20uutw.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9b20uutw.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9b20uutw.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9b20uutw.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9b20uutw.rs:22:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec.empty(k);\n    let max_index = 0;\n    for i in 0..k {\n        let max = arr[0];\n        for j in 1..arr.len {\n            if arr[j] > max {\n                max = arr[j];\n                max_index = j;\n            }\n        }\n        max_arr[i] = max;\n        arr = arr.drop(max_index);\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpgzz8skn0.rs:17:19\n   |\n17 |     let max_arr = Vec.empty(k);\n   |                   ^^^------\n   |                   |\n   |                   help: use the path separator to refer to an item: `Vec::empty`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpgzz8skn0.rs:21:25\n   |\n21 |         for j in 1..arr.len {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |         for j in 1..arr.len() {\n   |                            ++\n\nerror[E0040]: explicit use of destructor method\n  --> /tmp/tmpgzz8skn0.rs:28:19\n   |\n28 |         arr = arr.drop(max_index);\n   |               ----^^^^-----------\n   |               |   |\n   |               |   explicit destructor calls not allowed\n   |               help: consider using `drop` function: `drop(arr)`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgzz8skn0.rs:28:19\n    |\n28  |         arr = arr.drop(max_index);\n    |                   ^^^^ --------- supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgzz8skn0.rs:28:15\n   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |                 ---------- expected due to this parameter type\n...\n28 |         arr = arr.drop(max_index);\n   |               ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `drop` modifies its receiver in-place\n  --> /tmp/tmpgzz8skn0.rs:28:19\n   |\n28 |         arr = arr.drop(max_index);\n   |               --- ^^^^ this call modifies `arr` in-place\n   |               |\n   |               you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `drop`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let max_vec = Vec![max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            max_vec = max_vec.push(arr[i])\n        }\n    }\n    return max_vec\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnawlasan.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnawlasan.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpnawlasan.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnawlasan.rs:25:32\n   |\n25 |     let max_vec = Vec![max_val]\n   |                                ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpnawlasan.rs:25:19\n   |\n25 |       let max_vec = Vec![max_val]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnawlasan.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnawlasan.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requiremen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else -1)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpshm3i97w.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpshm3i97w.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpshm3i97w.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpshm3i97w.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpshm3i97w.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else -1)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpshm3i97w.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n            max_index = i;\n        }\n    }\n    let max_arr = Vec::new(k);\n    for i in arr.iter() {\n        if i == max_index {\n            max_arr.push_back(i);\n        }\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp587urfu7.rs:20:16\n   |\n20 |         if i > max {\n   |                ^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp587urfu7.rs:21:19\n   |\n17 |     let max = arr[0];\n   |               ------ expected due to this value\n...\n21 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp587urfu7.rs:22:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n22 |             max_index = i;\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i;\n   |                         +\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp587urfu7.rs:25:19\n    |\n25  |     let max_arr = Vec::new(k);\n    |                   ^^^^^^^^ - supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp587urfu7.rs:27:14\n   |\n27 |         if i == max_index {\n   |              ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp587urfu7.rs:28:21\n   |\n28 |             max_arr.push_back(i);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 6 previous er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == max {\n            result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzgll5343.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzgll5343.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpzgll5343.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzgll5343.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzgll5343.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzgll5343.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzgll5343.rs:27:12\n   |\n27 |         if arr[i] == max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k {\n        if arr[i] == max {\n            result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzgll5343.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzgll5343.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpzgll5343.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzgll5343.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzgll5343.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzgll5343.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzgll5343.rs:27:12\n   |\n27 |         if arr[i] == max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let result = arr.copy()\n    result[max_idx] = arr[0]\n    for i in 1..k - 1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    result[max_idx] = arr[0]\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt0hbgqyb.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt0hbgqyb.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpt0hbgqyb.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmpt0hbgqyb.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     result[max_idx] = arr[0]\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt0hbgqyb.rs:26:29\n   |\n26 |     result[max_idx] = arr[0]\n   |                             ^ help: add `;` here\n27 |     for i in 1..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpt0hbgqyb.rs:29:29\n   |\n29 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n30 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpt0hbgqyb.rs:33:29\n   |\n33 |     result[max_idx] = arr[0]\n   |                             ^ help: add `;` here\n34 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt0hbgqyb.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the typ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = [max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphyesabv8.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphyesabv8.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmphyesabv8.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphyesabv8.rs:25:29\n   |\n25 |     let result = [max_value]\n   |                             ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphyesabv8.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphyesabv8.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphyesabv8.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![]\n    for i in 0..k - 1 {\n        max_arr = max_arr.push(arr[i])\n    }\n    max_arr = max_arr.push(arr[max_index])\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpm97keq8m.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpm97keq8m.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpm97keq8m.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpm97keq8m.rs:25:25\n   |\n25 |     let max_arr = Vec![]\n   |                         ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpm97keq8m.rs:29:43\n   |\n29 |     max_arr = max_arr.push(arr[max_index])\n   |                                           ^ help: add `;` here\n30 |     return max_arr\n   |     ------ unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpm97keq8m.rs:25:19\n   |\n25 |       let max_arr = Vec![]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm97keq8m.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm97keq8m.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[max_index])\n        max_index = (max_index + 1) % len(arr)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuwqg1ye9.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpuwqg1ye9.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpuwqg1ye9.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpuwqg1ye9.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpuwqg1ye9.rs:27:36\n   |\n27 |         result.push(arr[max_index])\n   |                                    ^ help: add `;` here\n28 |         max_index = (max_index + 1) % len(arr)\n   |         --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwqg1ye9.rs:28:39\n   |\n28 |         max_index = (max_index + 1) % len(arr)\n   |                                       ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuwqg1ye9.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuwqg1ye9.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.append(arr[i])\n    }\n    result.append(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9gwmvhhv.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9gwmvhhv.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp9gwmvhhv.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9gwmvhhv.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp9gwmvhhv.rs:29:29\n   |\n29 |     result.append(max_value)\n   |                             ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9gwmvhhv.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9gwmvhhv.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isiz",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = arr[0];\n    let max_index = 0;\n    for i in arr.iter() {\n        if i > max {\n            max = i;\n            max_index = i;\n        }\n    }\n    let result = Vec::new();\n    for i in range(k) {\n        result.push_back(max_index);\n        max_index = max_index + 1;\n        if (max_index >= arr.len()) {\n            max_index = 0;\n        }\n        max = arr[max_index];\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpq4aaxafn.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq4aaxafn.rs:29:12\n   |\n29 |         if (max_index >= arr.len()) {\n   |            ^                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n29 -         if (max_index >= arr.len()) {\n29 +         if max_index >= arr.len() {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq4aaxafn.rs:20:16\n   |\n20 |         if i > max {\n   |                ^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq4aaxafn.rs:21:19\n   |\n17 |     let max = arr[0];\n   |               ------ expected due to this value\n...\n21 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq4aaxafn.rs:22:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n22 |             max_index = i;\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i;\n   |                         +\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpq4aaxafn.rs:27:16\n   |\n27 |         result.push_back(max_index);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfkjh1akg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfkjh1akg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpfkjh1akg.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push(arr[i] if i == max_index else 0)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvaf8lc47.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpvaf8lc47.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvaf8lc47.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: missing condition for `if` expression\n  --> /tmp/tmpvaf8lc47.rs:27:30\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                              ^ expected if condition here\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n  --> /tmp/tmpvaf8lc47.rs:27:28\n   |\n27 |         result.push(arr[i] if i == max_index else 0)\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvaf8lc47.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfkjh1akg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfkjh1akg.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkjh1akg.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpfkjh1akg.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfkjh1akg.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in range(k) {\n        result.push(max_index)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps358ol4g.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmps358ol4g.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmps358ol4g.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmps358ol4g.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in range(k) {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmps358ol4g.rs:26:14\n   |\n26 |     for i in range(k) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps358ol4g.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps358ol4g.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps358ol4g.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.concat(Vec![arr[i]])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps_5tyov9.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmps_5tyov9.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmps_5tyov9.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmps_5tyov9.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmps_5tyov9.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmps_5tyov9.rs:28:36\n   |\n28 |               result = result.concat(Vec![arr[i]])\n   |                                      ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps_5tyov9.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let max_k_numbers = []\n    for i in arr.iter() {\n        if i == max_value {\n            max_k_numbers.append(i)\n        }\n    }\n    if len(max_k_numbers) < k {\n        max_k_numbers.append(max_value)\n    }\n    max_k_numbers.sort()\n    return max_k_numbers\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc02y0tqp.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc02y0tqp.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc02y0tqp.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc02y0tqp.rs:25:27\n   |\n25 |     let max_k_numbers = []\n   |                           ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpc02y0tqp.rs:34:25\n   |\n34 |     max_k_numbers.sort()\n   |                         ^ help: add `;` here\n35 |     return max_k_numbers\n   |     ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc02y0tqp.rs:31:8\n   |\n31 |     if len(max_k_numbers) < k {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc02y0tqp.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc02y0tqp.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc02y0tqp.rs:22:25\n   |\n17 |     let max_index = 0\n   |                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    result[max_index] = max_value\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphj61yd1n.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphj61yd1n.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmphj61yd1n.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmphj61yd1n.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     result[max_index] = max_value\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmphj61yd1n.rs:26:34\n   |\n26 |     result[max_index] = max_value\n   |                                  ^ help: add `;` here\n27 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphj61yd1n.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphj61yd1n.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n  let max_idx = 0\n  let max_val = arr[0]\n  for i in 0..k - 1 {\n    if arr[i] > max_val {\n      max_val = arr[i]\n      max_idx = i\n    }\n  }\n  let result = [max_val]\n  for i in 0..k - 1 {\n    if arr[i] == max_val {\n      result = result.concat(arr[i])\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd95vpqpd.rs:17:18\n   |\n17 |   let max_idx = 0\n   |                  ^ help: add `;` here\n18 |   let max_val = arr[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd95vpqpd.rs:18:23\n   |\n18 |   let max_val = arr[0]\n   |                       ^ help: add `;` here\n19 |   for i in 0..k - 1 {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpd95vpqpd.rs:21:23\n   |\n21 |       max_val = arr[i]\n   |                       ^ help: add `;` here\n22 |       max_idx = i\n   |       ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd95vpqpd.rs:25:25\n   |\n25 |   let result = [max_val]\n   |                         ^ help: add `;` here\n26 |   for i in 0..k - 1 {\n   |   --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd95vpqpd.rs:20:8\n   |\n20 |     if arr[i] > max_val {\n   |        ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd95vpqpd.rs:21:17\n   |\n21 |       max_val = arr[i]\n   |                 ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd95vpqpd.rs:27:8\n   |\n27 |     if arr[i] == max_val {\n   |        ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    if k == 1 {\n        return result\n    }\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkwm0gtgm.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkwm0gtgm.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpkwm0gtgm.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkwm0gtgm.rs:25:29\n   |\n25 |     let result = [max_index]\n   |                             ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkwm0gtgm.rs:34:22\n   |\n34 |     let max_index = 0\n   |                      ^ help: add `;` here\n35 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkwm0gtgm.rs:35:27\n   |\n35 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n36 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpkwm0gtgm.rs:38:26\n   |\n38 |             max_value = i\n   |                          ^ help: add `;` here\n39 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkwm0gtgm.rs:42:29\n   |\n42 |     let result = [max_index]\n   |                             ^ help: add `;` here\n43 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwm0gtgm.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrow",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    if len(result) < k {\n        result.push(max_value)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl67ea9hg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpl67ea9hg.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:25:29\n   |\n25 |     let result = [max_index]\n   |                             ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl67ea9hg.rs:31:8\n   |\n31 |     if len(result) < k {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpaat2q5n3.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpaat2q5n3.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpaat2q5n3.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpaat2q5n3.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaat2q5n3.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaat2q5n3.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push_back(arr[i])\n    }\n    result.push_back(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi495yg8j.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpi495yg8j.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpi495yg8j.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpi495yg8j.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpi495yg8j.rs:29:32\n   |\n29 |     result.push_back(max_value)\n   |                                ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpi495yg8j.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpi495yg8j.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let res = [max_val]\n    for i in 0..k - 1 {\n        if arr[i] == max_val {\n            res.push(arr[i])\n        }\n    }\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5cywxke6.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5cywxke6.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmp5cywxke6.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5cywxke6.rs:25:24\n   |\n25 |     let res = [max_val]\n   |                        ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5cywxke6.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5cywxke6.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5cywxke6.rs:27:12\n   |\n27 |         if arr[i] == max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let res = Vec<isize>{}\n    for i in 0..k {\n        if arr[i] == max {\n            res = res.push(i)\n        }\n    }\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpca0mps9k.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpca0mps9k.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpca0mps9k.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpca0mps9k.rs:25:18\n   |\n25 |     let res = Vec<isize>{}\n   |                  ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpca0mps9k.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpca0mps9k.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_arr = Vec::new(k);\n    let max_index = 0;\n    for i in 0..k - 1 {\n        if arr[i] > arr[max_index] {\n            max_index = i;\n        }\n    }\n    for i in 0..k - 1 {\n        max_arr[i] = arr[max_index];\n        max_index = (max_index + 1) % k;\n    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3vkyg64h.rs:17:19\n    |\n17  |     let max_arr = Vec::new(k);\n    |                   ^^^^^^^^ - supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3vkyg64h.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3vkyg64h.rs:21:25\n   |\n18 |     let max_index = 0;\n   |                     - expected due to this value\n...\n21 |             max_index = i;\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp3vkyg64h.rs:25:9\n   |\n25 |         max_arr[i] = arr[max_index];\n   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3vkyg64h.rs:26:39\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmp3vkyg64h.rs:26:37\n   |\n26 |         max_index = (max_index + 1) % k;\n   |                                     ^ no implementation for `usize % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpaat2q5n3.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpaat2q5n3.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpaat2q5n3.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpaat2q5n3.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaat2q5n3.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaat2q5n3.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpe2fdv9d9.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe2fdv9d9.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpe2fdv9d9.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe2fdv9d9.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2fdv9d9.rs:27:12\n   |\n27 |         if arr[i] == max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result.push(arr[i])\n        }\n    }\n    result.push(arr[max_index])\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfqp2wzt0.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpfqp2wzt0.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfqp2wzt0.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpfqp2wzt0.rs:31:32\n   |\n31 |     result.push(arr[max_index])\n   |                                ^ help: add `;` here\n32 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqp2wzt0.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnsqv32kz.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnsqv32kz.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpnsqv32kz.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnsqv32kz.rs:25:34\n   |\n25 |     let max_arr = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpnsqv32kz.rs:25:19\n   |\n25 |       let max_arr = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnsqv32kz.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnsqv32kz.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in arr.iter() {\n        if i > max_value {\n            max_value = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr.iter() {\n        if i == max_value {\n            result.push(i)\n        }\n    }\n    if len(result) < k {\n        result.push(max_value)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl67ea9hg.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpl67ea9hg.rs:21:26\n   |\n21 |             max_value = i\n   |                          ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpl67ea9hg.rs:25:29\n   |\n25 |     let result = [max_index]\n   |                             ^ help: add `;` here\n26 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl67ea9hg.rs:31:8\n   |\n31 |     if len(result) < k {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:20:16\n   |\n20 |         if i > max_value {\n   |                ^^^^^^^^^\n   |                |\n   |                expected `&isize`, found `isize`\n   |                help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:21:25\n   |\n18 |     let max_value = arr[0]\n   |                     ------ expected due to this value\n...\n21 |             max_value = i\n   |                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |             max_value = *i\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl67ea9hg.rs:22:25\n   |\n17 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_index = *i\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k-1 {\n        result.push_back(arr[i])\n    }\n    result.push_back(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi495yg8j.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpi495yg8j.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpi495yg8j.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpi495yg8j.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpi495yg8j.rs:29:32\n   |\n29 |     result.push_back(max_value)\n   |                                ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpi495yg8j.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpi495yg8j.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec<isize>{}\n    for i in 0..k {\n        if arr[i] == max {\n            result = result.push(i)\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpaat2q5n3.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpaat2q5n3.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpaat2q5n3.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpaat2q5n3.rs:25:21\n   |\n25 |     let result = Vec<isize>{}\n   |                     ^     ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaat2q5n3.rs:20:12\n   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaat2q5n3.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push_back(arr[i])\n    }\n    result.push_back(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprzeanz00.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprzeanz00.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprzeanz00.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprzeanz00.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmprzeanz00.rs:29:32\n   |\n29 |     result.push_back(max_value)\n   |                                ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprzeanz00.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprzeanz00.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Ve",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let max_vec = Vec![max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            max_vec = max_vec.push(arr[i])\n        }\n    }\n    return max_vec\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnawlasan.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnawlasan.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpnawlasan.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnawlasan.rs:25:32\n   |\n25 |     let max_vec = Vec![max_val]\n   |                                ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpnawlasan.rs:25:19\n   |\n25 |       let max_vec = Vec![max_val]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnawlasan.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnawlasan.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requiremen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_rqr3co.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpc_rqr3co.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_rqr3co.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpc_rqr3co.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc_rqr3co.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: requir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = arr.copy()\n    for i in 0..k-1 {\n        result[i] = arr[max_index]\n        max_index = (max_index + 1) % k\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnpkn3g87.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnpkn3g87.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpnpkn3g87.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnpkn3g87.rs:25:28\n   |\n25 |     let result = arr.copy()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpnpkn3g87.rs:27:35\n   |\n27 |         result[i] = arr[max_index]\n   |                                   ^ help: add `;` here\n28 |         max_index = (max_index + 1) % k\n   |         --------- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnpkn3g87.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnpkn3g87.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec::new()\n    for i in 0..k - 1 {\n        result.push(arr[i])\n    }\n    result.push(max_value)\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2qo_lsxu.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp2qo_lsxu.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2qo_lsxu.rs:25:28\n   |\n25 |     let result = Vec::new()\n   |                            ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2qo_lsxu.rs:29:27\n   |\n29 |     result.push(max_value)\n   |                           ^ help: add `;` here\n30 |     return result\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2qo_lsxu.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in 0..k-1 {\n        if arr[i] > arr[max_index] {\n            max = arr[i]\n            max_index = i\n        }\n    }\n    return arr.slice(max_index, k)\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmporoevvhj.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmporoevvhj.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmporoevvhj.rs:21:25\n   |\n21 |             max = arr[i]\n   |                         ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmporoevvhj.rs:20:12\n   |\n20 |         if arr[i] > arr[max_index] {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmporoevvhj.rs:21:19\n   |\n21 |             max = arr[i]\n   |                   ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmporoevvhj.rs:22:25\n   |\n18 |     let max_index = 0\n   |                     - expected due to this value\n...\n22 |             max_index = i\n   |                         ^ expected `usize`, found `isize`\n\nerror[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmporoevvhj.rs:25:16\n   |\n25 |     return arr.slice(max_index, k)\n   |                ^^^^^\n   |\n   = help: items from traits can only be used if",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let res = Vec![max_val]\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            res = Vec![arr[i]]\n        }\n    }\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1f9keumq.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1f9keumq.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmp1f9keumq.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1f9keumq.rs:25:28\n   |\n25 |     let res = Vec![max_val]\n   |                            ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp1f9keumq.rs:25:15\n   |\n25 |       let res = Vec![max_val]\n   |                 ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp1f9keumq.rs:28:19\n   |\n28 |               res = Vec![arr[i]]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1f9keumq.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1f9keumq.rs:21:23\n   |\n21 |             max_val = arr[i]\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_idx = 0\n    let max_val = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_val {\n            max_val = arr[i]\n            max_idx = i\n        }\n    }\n    let res = Vec::new()\n    for i in 0..k-1 {\n        if arr[i] == max_val {\n            res.push(arr[i])\n        }\n    }\n    res.push(arr[max_idx])\n    return res\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu4y87ftw.rs:17:20\n   |\n17 |     let max_idx = 0\n   |                    ^ help: add `;` here\n18 |     let max_val = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu4y87ftw.rs:18:25\n   |\n18 |     let max_val = arr[0]\n   |                         ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_idx`\n  --> /tmp/tmpu4y87ftw.rs:21:29\n   |\n21 |             max_val = arr[i]\n   |                             ^ help: add `;` here\n22 |             max_idx = i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu4y87ftw.rs:25:25\n   |\n25 |     let res = Vec::new()\n   |                         ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpu4y87ftw.rs:31:27\n   |\n31 |     res.push(arr[max_idx])\n   |                           ^ help: add `;` here\n32 |     return res\n   |     ------ unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu4y87ftw.rs:20:12\n   |\n20 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu4y87ftw.rs:21:23\n   |\n21 |             max_val = arr[i]\n   |                       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let result = Vec![max_value]\n    for i in 0..k - 1 {\n        if arr[i] == max_value {\n            result = result.push(arr[i])\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293033,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlao4e0z.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmprlao4e0z.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprlao4e0z.rs:25:33\n   |\n25 |     let result = Vec![max_value]\n   |                                 ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmprlao4e0z.rs:25:18\n   |\n25 |       let result = Vec![max_value]\n   |                    ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprlao4e0z.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k - 1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max_value]\n    for i in 0..k - 1 {\n        max_arr = max_arr.push(arr[i])\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_tdb0rv0.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_tdb0rv0.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp_tdb0rv0.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_tdb0rv0.rs:25:34\n   |\n25 |     let max_arr = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k - 1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmp_tdb0rv0.rs:25:19\n   |\n25 |       let max_arr = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_tdb0rv0.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_tdb0rv0.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max_index = 0\n    let max_value = arr[0]\n    for i in 0..k-1 {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n    }\n    let max_arr = Vec![max_value]\n    for i in 0..k-1 {\n        if arr[i] == max_value {\n            max_arr = max_arr.push(arr[i])\n        }\n    }\n    return max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnsqv32kz.rs:17:22\n   |\n17 |     let max_index = 0\n   |                      ^ help: add `;` here\n18 |     let max_value = arr[0]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnsqv32kz.rs:18:27\n   |\n18 |     let max_value = arr[0]\n   |                           ^ help: add `;` here\n19 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmpnsqv32kz.rs:21:31\n   |\n21 |             max_value = arr[i]\n   |                               ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnsqv32kz.rs:25:34\n   |\n25 |     let max_arr = Vec![max_value]\n   |                                  ^ help: add `;` here\n26 |     for i in 0..k-1 {\n   |     --- unexpected token\n\nerror: cannot find macro `Vec` in this scope\n  --> /tmp/tmpnsqv32kz.rs:25:19\n   |\n25 |       let max_arr = Vec![max_value]\n   |                     ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnsqv32kz.rs:20:12\n   |\n20 |         if arr[i] > max_value {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnsqv32kz.rs:21:25\n   |\n21 |             max_value = arr[i]\n   |                         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    let max = 0\n    let max_index = 0\n    for i in arr {\n        if i > max {\n            max = i\n            max_index = i\n        }\n    }\n    let result = [max_index]\n    for i in arr {\n        if i == max_index {\n            result.push(i)\n        } else {\n            result.push(0)\n        }\n    }\n    for i in range(k - 1) {\n        if result[i] == 0 {\n            result[i] = result[i + 1]\n        }\n    }\n    return result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293034,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp61nkgqrb.rs:17:16\n   |\n17 |     let max = 0\n   |                ^ help: add `;` here\n18 |     let max_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp61nkgqrb.rs:18:22\n   |\n18 |     let max_index = 0\n   |                      ^ help: add `;` here\n19 |     for i in arr {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_index`\n  --> /tmp/tmp61nkgqrb.rs:21:20\n   |\n21 |             max = i\n   |                    ^ help: add `;` here\n22 |             max_index = i\n   |             --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp61nkgqrb.rs:25:29\n   |\n25 |     let result = [max_index]\n   |                             ^ help: add `;` here\n26 |     for i in arr {\n   |     --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp61nkgqrb.rs:33:14\n   |\n33 |     for i in range(k - 1) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current scope\n  --> /tmp/tmp61nkgqrb.rs:28:20\n   |\n28 |             result.push(i)\n   |                    ^^^^ method not found in `[isize; 1]`\n\nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current scope\n  --> /tmp/tmp61nkgqrb.rs:30:20\n   |\n30 |             result.push(0)\n   |                    ^^^^ method not found in `[isize; 1]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp61nkgqrb.rs:38:12\n   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |                                          ---------- expected `Vec<isize>` because of return type\n...\n38 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_vec()`\n   |            |\n   |            expected struct `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[isize; 1]`\n\nerror: ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}