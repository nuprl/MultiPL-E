{
  "name": "HumanEval_70_strange_sort_list",
  "language": "rs",
  "prompt": "/// Given vector of integers, return vector in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1, 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n/// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\nfn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n}\n",
  "completions": [
    "  let min_index = 0\n  let max_index = 0\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i > max_value {\n      max_value = i\n      max_index = i\n    } else if i < max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n\n  let min_value = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min_value {\n      min_value = i\n      min_index = i\n    } else if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(min_index)\n    } else if i == max_value {\n      result = result.append(max_index)\n    } else {\n      result = result.append(i)\n    }\n  }\n  return result",
    "  let lst_len = lst.len();\n  if lst_len == 0 {\n    return lst;\n  }\n\n  let min_index = 0;\n  let max_index = lst_len - 1;\n  let min_value = lst[min_index];\n  let max_value = lst[max_index];\n\n  let min_index_prev = min_index;\n  let max_index_prev = max_index;\n\n  while (min_index < max_index) {\n    if (lst[min_index] < lst[max_index]) {\n      min_index_prev = min_index;\n      min_index = (min_index + 1) % lst_len;\n    } else {\n      max_index_prev = max_index;\n      max_index = (max_index - 1) % lst_len;\n    }\n  }\n\n  let result = Vec::new();\n  for (let i = 0; i < lst_len; i++) {\n    if (i == min_index_prev) {\n      result.push(min_value);\n    } else if (i == max_index_prev) {\n      result.push(max_value);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (let v of lst) {\n    if (v < min) {\n      result[i] = min;\n      min = v;\n    } else if (v > max) {\n      result[i] = max;\n      max = v;\n    } else {\n      result[i] = v;\n    }\n    i += 1;\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let max_index = 0;\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n    if i > max {\n      max = i;\n      max_index = i;\n    }\n  }\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i == min_index {\n      result = result.append(i);\n    }\n    if i == max_index {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index(min_value);\n  let max_index = lst.index(max_value);\n  let max_value_index = lst.index(max_value);\n  let min_value_index = lst.index(min_value);\n  let max_value_index_next = lst.index(max_value, max_index + 1);\n  let min_value_index_next = lst.index(min_value, min_index + 1);\n  let max_value_index_prev = lst.index(max_value, max_index - 1);\n  let min_value_index_prev = lst.index(min_value, min_index - 1);\n  let max_value_index_prev_next = lst.index(max_value, max_index - 1, max_index + 1);\n  let min_value_index_prev_next = lst.index(min_value, min_index - 1, min_index + 1);\n  let max_value_index_next_next = lst.index(max_value, max_index + 1, max_index + 1);\n  let min_value_index_next_next = lst.index(min_value, min_index + 1, min_index + 1);\n  let max_value_index_next_prev = lst.index(max_value, max_index + 1, max_index - 1);\n  let min_value_index_next_prev = lst.index(min_value, min_index + 1, min_index - 1);\n  let max_value_index_prev_prev = lst.index(max_value, max_index - 1, max_index - 1);\n  let min_value_index_prev_prev = lst.index(min_value, min_index - 1, min_index - 1);\n  let max_value_index_prev_prev_prev = lst.index(max_value, max_index - 1, max_index - 1, max_index - 1);\n  let",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    } else if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n\n  result = result.append(min_value)\n  result = result.append(max_value)\n\n  for i in lst.iter() {\n    if i == min_index {\n      result = result.append(max_index)\n      max_index = i\n    } else if i == max_index {\n      result = result.append(min_index)\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n\n  return result",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    } else if i > max {\n      max = i;\n    }\n    result.append(i);\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = vec![];\n  for i in lst {\n    if i < min {\n      result = result.append(i);\n    } else if i > max {\n      result = result.append(i);\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result = result.append(i);\n    } else if i > max {\n      result = result.append(i);\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let lst_len = lst.len();\n  if lst_len == 0 {\n    return lst;\n  }\n  let min_index = 0;\n  let max_index = lst_len - 1;\n  let min_value = lst[min_index];\n  let max_value = lst[max_index];\n  let min_value_index = 0;\n  let max_value_index = 0;\n  let i = 0;\n  for i in 0..lst_len {\n    if lst[i] < min_value {\n      min_value = lst[i];\n      min_value_index = i;\n    }\n    if lst[i] > max_value {\n      max_value = lst[i];\n      max_value_index = i;\n    }\n  }\n  let result = Vec::new(lst_len);\n  for i in 0..lst_len {\n    if i == min_value_index {\n      result[i] = min_value;\n    } else if i == max_value_index {\n      result[i] = max_value;\n    } else {\n      result[i] = lst[i];\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result.unsafe_slice(min_index, max_index - min_index + 1)",
    "    let min = lst[0];\n    let max = lst[0];\n    for i in lst.iter() {\n        if i < min {\n            min = i;\n        } else if i > max {\n            max = i;\n        }\n    }\n    let result = Vec::new(lst.len());\n    for i in lst.iter() {\n        if i == min {\n            result.append(max);\n            max = min;\n            min = lst[i];\n        } else if i == max {\n            result.append(min);\n            min = max;\n            max = lst[i];\n        } else {\n            result.append(i);\n        }\n    }\n    return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len() + 2);\n  let i = 0;\n  for (let v of lst) {\n    if (v < min) {\n      result[i] = min;\n      min = v;\n    } else if (v > max) {\n      result[i] = max;\n      max = v;\n    } else {\n      result[i] = v;\n    }\n    i += 1;\n  }\n  result[i] = min;\n  result[i + 1] = max;\n  return result;",
    "    let min_index = 0\n    let max_index = 0\n    for i in lst.iter() {\n        if i < lst[min_index] {\n            min_index = i\n        }\n        if i > lst[max_index] {\n            max_index = i\n        }\n    }\n    let min_value = lst[min_index]\n    let max_value = lst[max_index]\n    let result = Vec::new()\n    for i in lst.iter() {\n        if i == min_value {\n            result = result.append(max_value)\n            max_value = lst[max_index]\n            max_index = max_index + 1\n        } else if i == max_value {\n            result = result.append(min_value)\n            min_value = lst[min_index]\n            min_index = min_index + 1\n        } else {\n            result = result.append(i)\n        }\n    }\n    return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result = result.append(max);\n      max = lst[max_index];\n      max_index = lst.index_of(max);\n    } else if i == max_index {\n      result = result.append(min);\n      min = lst[min_index];\n      min_index = lst.index_of(min);\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result.unsafe_slice(min_index, max_index - min_index + 1)",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let min_index = lst.index_of(min);\n  let max_index = lst.index_of(max);\n  let max_index_next = max_index + 1;\n  let max_index_next_next = max_index_next + 1;\n  let min_index_next = min_index + 1;\n  let min_index_next_next = min_index_next + 1;\n  let result = lst.slice(min_index_next, max_index_next_next);\n  result = result.append(lst.slice(min_index, min_index_next));\n  result = result.append(lst.slice(max_index_next_next, max_index));\n  result = result.append(lst.slice(min_index_next_next, max_index_next));\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_idx = lst.index_of(max);\n  let min_idx = lst.index_of(min);\n  let result = Vec::new(lst.len() - 1);\n  let i = 0;\n  for (let j = 0; j < lst.len(); j++) {\n    if (j == max_idx) {\n      result[i] = min;\n      i += 1;\n    } else if (j == min_idx) {\n      result[i] = max;\n      i += 1;\n    } else {\n      result[i] = lst[j];\n      i += 1;\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut max_index = 0;\n  let mut min_index = 0;\n  let mut min_index_set = false;\n  let mut max_index_set = false;\n\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n      min_index_set = true;\n    }\n    if i > max {\n      max = i;\n      max_index = i;\n      max_index_set = true;\n    }\n  }\n\n  if min_index_set {\n    result = result.append(min);\n  }\n  if max_index_set {\n    result = result.append(max);\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      result = result.append(max);\n    }\n    if i == max_index {\n      result = result.append(min);\n    }\n    result = result.append(i);\n  }\n\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = lst[min_index]\n      max_index = min_index\n      min_value = lst[min_index]\n      min_index = min_index + 1\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = lst[max_index]\n      min_index = max_index\n      max_value = lst[max_index]\n      max_index = max_index + 1\n    } else {\n      result = result.append(i)\n    }\n  }\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  let i = 0;\n  for i in 0..lst.len() {\n    if lst[i] == min {\n      result.append(max);\n      i += 1;\n      if i < lst.len() {\n        max = lst[i];\n      }\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_val = lst.min();\n  let max_val = lst.max();\n  let min_index = lst.index_of(min_val);\n  let max_index = lst.index_of(max_val);\n  let min_index_rev = lst.index_of(max_val) - 1;\n  let max_index_rev = lst.index_of(min_val) - 1;\n  let result = Vec::new(lst.len() + 2);\n  for i in 0..lst.len() {\n    if i == min_index {\n      result[i] = max_val;\n      result[i + 1] = min_val;\n    } else if i == max_index {\n      result[i] = min_val;\n      result[i + 1] = max_val;\n    } else if i == min_index_rev {\n      result[i] = max_val;\n      result[i + 1] = min_val;\n    } else if i == max_index_rev {\n      result[i] = min_val;\n      result[i + 1] = max_val;\n    } else {\n      result[i] = lst[i];\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst.get(0);\n  let mut max = lst.get(0);\n  let mut i = 1;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(i);\n      min = lst.get(i);\n    }\n    if i == max {\n      result.append(i);\n      max = lst.get(i);\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(i);\n      min = lst.get(i);\n    }\n    if i == max {\n      result.append(i);\n      max = lst.get(i);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min_value {\n      result.push(i);\n    } else if i > max_value {\n      result.push(i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.push(max);\n      max = lst[i];\n    } else if i == max {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let rest = lst.filter(x => x < min || x > max);\n  let result = [min];\n  for i in rest {\n    result.push(i);\n  }\n  result.push(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in 0..min {\n    result.append(lst[i]);\n  }\n  for i in max..lst.len() {\n    result.append(lst[i]);\n  }\n  for i in 0..min {\n    result.append(lst[i]);\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  let result = Vec::new()\n\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(min_index)\n    }\n    if i == max_value {\n      result = result.append(max_index)\n    }\n  }\n\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = vec![];\n  for i in lst {\n    if i < min {\n      result = result.append(i);\n    } else if i > max {\n      result = result.append(i);\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index(min_value);\n  let max_index = lst.index(max_value);\n  let max_value_index = lst.index(max_value);\n  let min_value_index = lst.index(min_value);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result = result.append(max_value);\n    } else if i == max_index {\n      result = result.append(min_value);\n    } else if i == min_value_index {\n      result = result.append(max_value);\n    } else if i == max_value_index {\n      result = result.append(min_value);\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.push(max);\n      max = i;\n    } else if i == max {\n      result.push(min);\n      min = i;\n    } else {\n      result.push(i);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.first\n  let max = lst.last\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i < min {\n      min = i\n    }\n    if i > max {\n      max = i\n    }\n    result.append(i)\n  }\n  result.append(min)\n  result.append(max)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let mut result = Vec::new();\n  let mut min_index = 0;\n  let mut max_index = 0;\n  let mut max_value = 0;\n  let mut min_value = 0;\n  let mut max_value_index = 0;\n  let mut min_value_index = 0;\n  let mut min_value_index_found = false;\n  let mut max_value_index_found = false;\n  let mut min_value_found = false;\n  let mut max_value_found = false;\n  let mut min_value_index_found_found = false;\n  let mut max_value_index_found_found = false;\n  let mut min_value_found_found = false;\n  let mut max_value_found_found = false;\n  let mut min_value_index_found_found_found = false;\n  let mut max_value_index_found_found_found = false;\n  let mut min_value_found_found_found = false;\n  let mut max_value_found_found_found = false;\n  let mut min_value_index_found_found_found_found = false;\n  let mut max_value_index_found_found_found_found = false;\n  let mut min_value_found_found_found_found = false;\n  let mut max_value_found_found_found_found = false;\n  let mut min_value_index_found_found_found_found = false;\n  let mut max_value_index_found_found_found_found = false;\n  let mut min_value_found_found_found_found = false;\n  let mut max_value_found_found_found_found = false;\n  let mut min_value_index_found_found_found_found = false;\n  let mut max_value_index_found_found_found_found = false;\n  let mut min_value_found_found_found_found = false;\n  let mut max_value_found_found_found_found = false;\n  let mut min_value_index_found_found_found_found = false;\n  let mut max_value_index_found",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result = result.append(i);\n    } else if i > max {\n      result = result.append(i);\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let lst_len = lst.len();\n  if lst_len == 0 {\n    return lst;\n  }\n  let min_index = 0;\n  let max_index = lst_len - 1;\n  let min_value = lst[min_index];\n  let max_value = lst[max_index];\n  let min_value_index = 0;\n  let max_value_index = 0;\n  for i in 0..lst_len - 1 {\n    if lst[i] < min_value {\n      min_value = lst[i];\n      min_value_index = i;\n    }\n    if lst[i] > max_value {\n      max_value = lst[i];\n      max_value_index = i;\n    }\n  }\n  let result = Vec::new(lst_len);\n  for i in 0..lst_len - 1 {\n    if i == min_value_index {\n      result[i] = min_value;\n    } else if i == max_value_index {\n      result[i] = max_value;\n    } else {\n      result[i] = lst[i];\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n    } else if i == max {\n      result.append(min);\n      min = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "    let min = lst.min();\n    let max = lst.max();\n    let max_index = lst.index_of(max);\n    let min_index = lst.index_of(min);\n\n    let result = Vec::new();\n    for i in lst.iter() {\n        if i == min {\n            result = result.append(max);\n            max = lst[max_index];\n            max_index = lst.index_of(max);\n        } else if i == max {\n            result = result.append(min);\n            min = lst[min_index];\n            min_index = lst.index_of(min);\n        } else {\n            result = result.append(i);\n        }\n    }\n    return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if (i < min) {\n      result.append(lst[i]);\n    } else if (i > max) {\n      result.append(lst[i]);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_idx = lst.index_of(max);\n  let min_idx = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_idx {\n      result.set(i, min);\n    } else if i == max_idx {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i > max_value {\n      max_value = i\n      max_index = i\n    } else if i < max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n\n  let min_value = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min_value {\n      min_value = i\n      min_index = i\n    } else if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(min_index)\n    } else if i == max_value {\n      result = result.append(max_index)\n    } else {\n      result = result.append(i)\n    }\n  }\n  return result",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut max_index = 0;\n  let mut min_index = 0;\n  let mut max_index_prev = 0;\n  let mut min_index_prev = 0;\n  let mut max_index_prev_prev = 0;\n  let mut min_index_prev_prev = 0;\n  let mut max_index_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev",
    "  let min = lst.first();\n  let max = lst.last();\n  let result = Vec::new();\n  let i = 0;\n  for i in 0..lst.len() - 1 {\n    if lst[i] < min {\n      result = result.append(lst[i]);\n      min = lst[i];\n    } else if lst[i] > max {\n      result = result.append(lst[i]);\n      max = lst[i];\n    }\n  }\n  result = result.append(lst[i]);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (let i = 0; i < lst.len(); i++) {\n    if (lst[i] == min) {\n      result[i] = max;\n    } else if (lst[i] == max) {\n      result[i] = min;\n    } else {\n      result[i] = lst[i];\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i == min {\n      result = result.append(max);\n      max = min;\n      min = lst[0];\n    } else if i == max {\n      result = result.append(min);\n      min = max;\n      max = lst[0];\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n    } else if i == max {\n      result.append(min);\n      min = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if (i < min) {\n      min = i;\n    } else if (i > max) {\n      max = i;\n    }\n    result.push(i);\n  }\n  result.push(min);\n  result.push(max);\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result.append(min_index)\n    }\n    if i == max_value {\n      result.append(max_index)\n    }\n  }\n  return result",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.push(max);\n      max = lst[i];\n    } else if i == max {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = vec![];\n  for i in 0..lst.len() {\n    if (i == 0) {\n      result = vec![min];\n    } else if (i == lst.len() - 1) {\n      result = vec![max];\n    } else {\n      result = vec![min, max];\n    }\n  }\n  return result;",
    "  let lst_len = lst.len();\n  if (lst_len == 0) {\n    return lst;\n  }\n\n  let min_idx = 0;\n  let max_idx = lst_len - 1;\n  let min_val = lst[min_idx];\n  let max_val = lst[max_idx];\n\n  let min_idx_prev = min_idx;\n  let max_idx_prev = max_idx;\n\n  for (let i = 0; i < lst_len; i++) {\n    if (lst[i] < min_val) {\n      min_idx_prev = min_idx;\n      min_idx = i;\n      min_val = lst[i];\n    } else if (lst[i] > max_val) {\n      max_idx_prev = max_idx;\n      max_idx = i;\n      max_val = lst[i];\n    }\n  }\n\n  let result = Vec::new(lst_len);\n  for (let i = 0; i < lst_len; i++) {\n    if (i == min_idx) {\n      result[i] = min_val;\n    } else if (i == max_idx) {\n      result[i] = max_val;\n    } else {\n      result[i] = lst[i];\n    }\n  }\n\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    } else if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = []\n  for i in lst.iter() {\n    if i == min_value {\n      result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result.append(i)\n    }\n  }\n  result.append(min_value)\n  result.append(max_value)\n  return result",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = lst[min_index]\n      max_index = min_index\n      min_value = lst[min_index]\n      min_index = min_index + 1\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = lst[max_index]\n      min_index = max_index\n      max_value = lst[max_index]\n      max_index = max_index + 1\n    } else {\n      result = result.append(i)\n    }\n  }\n  return result",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut i = 1;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(i);\n      min = i;\n    }\n    if i == max {\n      result.append(i);\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(i);\n      min = i;\n    }\n    if i == max {\n      result.append(i);\n      max = i;\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (let j = 0; j < lst.len(); j++) {\n    if (j == max_index) {\n      result[i] = min;\n      i += 1;\n    } else if (j == min_index) {\n      result[i] = max;\n      i += 1;\n    } else {\n      result[i] = lst[j];\n      i += 1;\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let max_value = lst[0]\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_index {\n      result = result.append(i)\n    }\n    if i == max_index {\n      result = result.append(i)\n    }\n  }\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let min_index = lst.index_of(min);\n  let max_index = lst.index_of(max);\n  let max_index_next = lst.index_of(max) + 1;\n  let min_index_next = lst.index_of(min) + 1;\n\n  let max_index_next_next = lst.index_of(max) + 2;\n  let min_index_next_next = lst.index_of(min) + 2;\n\n  let max_index_next_next_next = lst.index_of(max) + 3;\n  let min_index_next_next_next = lst.index_of(min) + 3;\n\n  let max_index_next_next_next_next = lst.index_of(max) + 4;\n  let min_index_next_next_next_next = lst.index_of(min) + 4;\n\n  let max_index_next_next_next_next_next = lst.index_of(max) + 5;\n  let min_index_next_next_next_next_next = lst.index_of(min) + 5;\n\n  let max_index_next_next_next_next_next_next = lst.index_of(max) + 6;\n  let min_index_next_next_next_next_next_next = lst.index_of(min) + 6;\n\n  let max_index_next_next_next_next_next_next_next = lst.index_of(max) + 7;\n  let min_index_next_next_next_next_next_next_next = lst.index_of(min) + 7;\n\n  let max_index_next_next_next_next_next_next_next_next = lst.index_of(max) + 8;\n  let min_index_next_next_next_next_next_next_next_next = lst.index_of(min) + 8;\n\n  let max_index_next_next_next_",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut i = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n    } else if i == max {\n      result.append(min);\n      min = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let lst_len = lst.len();\n  if lst_len == 0 {\n    return Vec::new();\n  }\n\n  let min_index = 0;\n  let max_index = lst_len - 1;\n  let min_value = lst[min_index];\n  let max_value = lst[max_index];\n\n  let result = Vec::new();\n  for i in 0..lst_len {\n    if min_value == max_value {\n      result = result.append(min_value);\n      min_value = lst[min_index];\n      max_value = lst[max_index];\n      min_index = (min_index + 1) % lst_len;\n      max_index = (max_index - 1 + lst_len) % lst_len;\n    } else if min_value < max_value {\n      result = result.append(min_value);\n      min_value = lst[min_index];\n      min_index = (min_index + 1) % lst_len;\n    } else {\n      result = result.append(max_value);\n      max_value = lst[max_index];\n      max_index = (max_index - 1 + lst_len) % lst_len;\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let max_value_index = lst.index_of(max_value);\n  let min_value_index = lst.index_of(min_value);\n  let max_value_index_next = lst.index_of(max_value) + 1;\n  let min_value_index_next = lst.index_of(min_value) + 1;\n  let result = Vec::new(lst.len() - 2);\n  for i in 0..lst.len() - 2 {\n    if i == max_value_index_next {\n      result = result.append(max_value);\n      max_value_index_next += 1;\n    } else if i == min_value_index_next {\n      result = result.append(min_value);\n      min_value_index_next += 1;\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index(min_value);\n  let max_index = lst.index(max_value);\n  let max_value_index = lst.index(max_value);\n  let min_value_index = lst.index(min_value);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result = result.append(max_value);\n    } else if i == max_index {\n      result = result.append(min_value);\n    } else if i == min_value_index {\n      result = result.append(max_value);\n    } else if i == max_value_index {\n      result = result.append(min_value);\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.append(min);\n  result.append(max);\n  return result;",
    "    let min = lst[0];\n    let max = lst[0];\n    let result = Vec::new();\n    for i in lst.iter() {\n        if i < min {\n            min = i;\n        } else if i > max {\n            max = i;\n        }\n        result.push(i);\n    }\n    result.push(min);\n    result.push(max);\n    return result;",
    "    let min = lst.min();\n    let max = lst.max();\n    let result = vec![];\n    for i in lst {\n        if i < min {\n            result = result.append(i);\n        } else if i > max {\n            result = result.append(i);\n        } else {\n            result = result.append(i);\n        }\n    }\n    return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.append(min);\n    } else if i == max_index {\n      result.append(max);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let max_value = lst[0]\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  let max_index_copy = max_index\n  let min_index_copy = min_index\n  let max_value_copy = max_value\n  let min_value_copy = min_value\n  for i in lst.iter() {\n    if i == max_value_copy {\n      max_index_copy = i\n    }\n    if i == min_value_copy {\n      min_index_copy = i\n    }\n  }\n  let result = []\n  for i in lst.iter() {\n    if i == max_index_copy {\n      result.append(max_value_copy)\n    }\n    if i == min_index_copy {\n      result.append(min_value_copy)\n    }\n    result.append(i)\n  }\n  return result",
    "  let lst_len = lst.len();\n  if lst_len == 0 {\n    return lst;\n  }\n\n  let min_idx = 0;\n  let max_idx = lst_len - 1;\n  let min_val = lst[min_idx];\n  let max_val = lst[max_idx];\n\n  for i in 0..lst_len - 1 {\n    if lst[i] < min_val {\n      min_val = lst[i];\n      min_idx = i;\n    }\n    if lst[i] > max_val {\n      max_val = lst[i];\n      max_idx = i;\n    }\n  }\n\n  let lst_new = Vec::new(lst_len);\n  for i in 0..lst_len - 1 {\n    lst_new[i] = lst[min_idx];\n    min_idx = (min_idx + 1) % lst_len;\n  }\n  lst_new[lst_len - 1] = lst[max_idx];\n  return lst_new;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let result = Vec::new();\n  let i = 0;\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.append(min);\n    } else if i == max_index {\n      result.append(max);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.append(min);\n    } else if i == max_index {\n      result.append(max);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "    let mut result = Vec::new();\n    let mut min = lst.get(0);\n    let mut max = lst.get(0);\n    for i in lst.iter() {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    for i in lst.iter() {\n        if i == min {\n            result.append(i);\n        }\n        if i == max {\n            result.append(i);\n        }\n    }\n    for i in lst.iter() {\n        if i == min {\n            result.append(i);\n        }\n        if i == max {\n            result.append(i);\n        }\n    }\n    return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_idx = lst.find(max);\n  let min_idx = lst.find(min);\n\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if (i < min_idx) {\n      result.append(lst[i]);\n    } else if (i > max_idx) {\n      result.append(lst[i]);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index(min_value);\n  let max_index = lst.index(max_value);\n  let max_value_index = lst.index(max_value);\n  let min_value_index = lst.index(min_value);\n  let max_value_index_next = lst.index(max_value) + 1;\n  let min_value_index_next = lst.index(min_value) + 1;\n  let max_value_index_prev = lst.index(max_value) - 1;\n  let min_value_index_prev = lst.index(min_value) - 1;\n  let max_value_index_next_next = lst.index(max_value) + 2;\n  let min_value_index_next_next = lst.index(min_value) + 2;\n  let max_value_index_prev_prev = lst.index(max_value) - 2;\n  let min_value_index_prev_prev = lst.index(min_value) - 2;\n  let max_value_index_next_prev = lst.index(max_value) + 1;\n  let min_value_index_next_prev = lst.index(min_value) + 1;\n  let max_value_index_prev_prev_prev = lst.index(max_value) - 1;\n  let min_value_index_prev_prev_prev = lst.index(min_value) - 1;\n  let max_value_index_next_prev_prev = lst.index(max_value) + 2;\n  let min_value_index_next_prev_prev = lst.index(min_value) + 2;\n  let max_value_index_prev_prev_prev_prev = lst.index(max_value) - 2;\n  let min_value_index_prev_prev_prev_prev = lst.index(min_value) - 2;\n  let max_value_index_next_prev_",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    } else if i > max {\n      max = i;\n    }\n    result.push_back(i);\n  }\n  result.push_back(min);\n  result.push_back(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result = result.append(i);\n    } else if i > max {\n      result = result.append(i);\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = lst[i];\n    } else if i == max {\n      result.append(min);\n      min = lst[i];\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      index = result.len();\n    }\n    if i > max {\n      max = i;\n    }\n    result.push_back(i);\n  }\n  result.set(index, min);\n  result.set(result.len() - 1, max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst.get(i));\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min_val = lst.first();\n  let max_val = lst.last();\n  let min_index = 0;\n  let max_index = 0;\n  for i in lst.iter() {\n    if i < min_val {\n      min_val = i;\n      min_index = i;\n    } else if i > max_val {\n      max_val = i;\n      max_index = i;\n    }\n  }\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i == min_index {\n      result.append(max_val);\n    } else if i == max_index {\n      result.append(min_val);\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.extend(lst.slice(0, min_index));\n  result.extend(lst.slice(max_index + 1, lst.len()));\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut max_index = 0;\n  let mut min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n    if i > max {\n      max = i;\n      max_index = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min_index {\n      result.append(min);\n      min = lst[i + 1];\n      min_index = i + 1;\n    }\n    if i == max_index {\n      result.append(max);\n      max = lst[i + 1];\n      max_index = i + 1;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let min_index = lst.index_of(min);\n  let max_index = lst.index_of(max);\n  let max_index_next = lst.index_of(max) + 1;\n  let max_index_next_next = lst.index_of(max) + 2;\n  let max_index_next_next_next = lst.index_of(max) + 3;\n  let max_index_next_next_next_next = lst.index_of(max) + 4;\n  let max_index_next_next_next_next_next = lst.index_of(max) + 5;\n  let max_index_next_next_next_next_next_next = lst.index_of(max) + 6;\n  let max_index_next_next_next_next_next_next_next = lst.index_of(max) + 7;\n  let max_index_next_next_next_next_next_next_next_next = lst.index_of(max) + 8;\n  let max_index_next_next_next_next_next_next_next_next_next = lst.index_of(max) + 9;\n  let max_index_next_next_next_next_next_next_next_next_next_next = lst.index_of(max) + 10;\n  let max_index_next_next_next_next_next_next_next_next_next_next_next = lst.index_of(max) + 11;\n  let max_index_next_next_next_next_next_next_next_next_next_next_next_next = lst.index_of(max) + 12;\n  let max_index_next_next_next_next_next_next_next_next_next_next_next_next_next = lst.index_of(max) + 13;\n  let max_index_next_next_next_next_next_next_next_next_next_next_next_next_next",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut last = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n    if i < last {\n      result.push(i);\n      last = i;\n    }\n  }\n  result.push(min);\n  result.push(max);\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "    let min_value = lst.min();\n    let max_value = lst.max();\n    let min_index = lst.index(min_value);\n    let max_index = lst.index(max_value);\n    let max_value_index = lst.index(max_value);\n    let min_value_index = lst.index(min_value);\n    let max_value_index_next = lst.index(max_value) + 1;\n    let min_value_index_next = lst.index(min_value) + 1;\n    let max_value_index_prev = lst.index(max_value) - 1;\n    let min_value_index_prev = lst.index(min_value) - 1;\n    let max_value_index_prev_next = lst.index(max_value) - 2;\n    let min_value_index_prev_next = lst.index(min_value) - 2;\n    let max_value_index_next_next = lst.index(max_value) + 2;\n    let min_value_index_next_next = lst.index(min_value) + 2;\n    let max_value_index_next_prev = lst.index(max_value) + 1;\n    let min_value_index_next_prev = lst.index(min_value) + 1;\n    let max_value_index_prev_prev = lst.index(max_value) - 1;\n    let min_value_index_prev_prev = lst.index(min_value) - 1;\n    let max_value_index_prev_prev_prev = lst.index(max_value) - 3;\n    let min_value_index_prev_prev_prev = lst.index(min_value) - 3;\n    let max_value_index_prev_prev_next = lst.index(max_value) - 2;\n    let min_value_index_prev_prev_next = lst.index(min_value) - 2;\n    let max_value_index_prev_next_next = lst.index(max",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index_of(min_value);\n  let max_index = lst.index_of(max_value);\n  let result = Vec::new();\n  for i in min_index..max_index {\n    result.append(lst[i]);\n  }\n  for i in max_index..min_index {\n    result.append(lst[i]);\n  }\n  return result;",
    "    let min = lst.min();\n    let max = lst.max();\n    let max_index = lst.index(max);\n    let min_index = lst.index(min);\n    let max_value = lst[max_index];\n    let min_value = lst[min_index];\n    let result = [min_value, max_value];\n    for i in lst.iter() {\n        if i == min_index {\n            result = [min_value, i, max_value];\n        } else if i == max_index {\n            result = [min_value, max_value, i];\n        } else {\n            result = [min_value, i, max_value];\n        }\n    }\n    return result;",
    "    let min = lst.min();\n    let max = lst.max();\n    let max_idx = lst.find(max);\n    let min_idx = lst.find(min);\n    let temp = lst.get(max_idx);\n    lst.set(max_idx, lst.get(min_idx));\n    lst.set(min_idx, temp);\n    lst.remove(max);\n    lst.remove(min);\n    lst.insert(min, max);\n    lst.insert(max, min);\n    return lst;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let max_index_next = lst.find(max, max_index + 1);\n  let min_index_next = lst.find(min, min_index + 1);\n  let max_index_prev = lst.find(max, max_index - 1);\n  let min_index_prev = lst.find(min, min_index - 1);\n  let max_index_prev_next = lst.find(max, max_index_prev + 1);\n  let min_index_next_prev = lst.find(min, min_index_next - 1);\n  let max_index_next_next = lst.find(max, max_index_next + 1);\n  let min_index_next_next_prev = lst.find(min, min_index_next_prev - 1);\n  let max_index_next_next_next = lst.find(max, max_index_next_next + 1);\n  let min_index_next_next_next_prev = lst.find(min, min_index_next_next_prev - 1);\n  let max_index_next_next_next_next = lst.find(max, max_index_next_next_next + 1);\n  let min_index_next_next_next_next_prev = lst.find(min, min_index_next_next_next_prev - 1);\n  let max_index_next_next_next_next_next = lst.find(max, max_index_next_next_next_next + 1);\n  let min_index_next_next_next_next_next_prev = lst.find(min, min_index_next_next_next_next_prev - 1);\n  let max_index_next_next_next_next_next_next = lst.find(max, max_index_next_next_next_next_next + 1);\n  let min_index_next_next_",
    "  let mut min_index = 0;\n  let mut max_index = 0;\n  let mut max_value = 0;\n  let mut min_value = 0;\n  let mut max_value_index = 0;\n  let mut min_value_index = 0;\n\n  for i in lst {\n    if i > max_value {\n      max_value = i;\n      max_value_index = i;\n    }\n    if i < min_value {\n      min_value = i;\n      min_value_index = i;\n    }\n  }\n\n  for i in lst {\n    if i == max_value {\n      min_index = max_index;\n      max_index = i;\n    }\n    if i == min_value {\n      max_index = min_index;\n      min_index = i;\n    }\n  }\n\n  let mut result = Vec::new();\n  for i in lst {\n    if i == max_value_index {\n      result = result.push(max_value);\n      result = result.push(min_value);\n    }\n    if i == min_value_index {\n      result = result.push(min_value);\n      result = result.push(max_value);\n    }\n    result = result.push(i);\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = lst[i]\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = lst[i]\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut max_index = 0;\n  let mut min_index = 0;\n\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n    if i > max {\n      max = i;\n      max_index = i;\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n      max_index = i;\n    }\n    if i == max {\n      result.append(min);\n      min = i;\n      min_index = i;\n    }\n    if i == min_index {\n      result.append(max);\n      max = i;\n      max_index = i;\n    }\n    if i == max_index {\n      result.append(min);\n      min = i;\n      min_index = i;\n    }\n  }\n\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = lst[max_index]\n      max_index = max_index + 1\n      min_value = lst[min_index]\n      min_index = min_index + 1\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = lst[min_index]\n      min_index = min_index + 1\n      max_value = lst[max_index]\n      max_index = max_index + 1\n    } else {\n      result = result.append(i)\n    }\n  }\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.store(i, min);\n    } else if i == max_index {\n      result.store(i, max);\n    } else {\n      result.store(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index(min_value);\n  let max_index = lst.index(max_value);\n  let min_value_index = lst.index(min_value);\n  let max_value_index = lst.index(max_value);\n  let min_value_index_next = min_value_index + 1;\n  let max_value_index_next = max_value_index + 1;\n  let min_value_index_prev = min_value_index - 1;\n  let max_value_index_prev = max_value_index - 1;\n\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value);\n      result = result.append(min_value);\n    } else if i == max_value {\n      result = result.append(min_value);\n      result = result.append(max_value);\n    } else if i == min_value_index {\n      result = result.append(max_value);\n      result = result.append(min_value);\n    } else if i == max_value_index {\n      result = result.append(min_value);\n      result = result.append(max_value);\n    } else if i == min_value_index_next {\n      result = result.append(max_value);\n      result = result.append(min_value);\n    } else if i == max_value_index_next {\n      result = result.append(min_value);\n      result = result.append(max_value);\n    } else if i == min_value_index_prev {\n      result = result.append(max_value);\n      result = result.append(min_value);\n    } else if i == max_value_index_prev {\n      result = result.append(min_value);\n      result = result.append(max_value);\n    }\n  }\n  return result;",
    "  if len(lst) == 0 {\n    return Vec::new()\n  }\n\n  let min = lst[0]\n  let max = lst[0]\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i < min {\n      min = i\n    }\n    if i > max {\n      max = i\n    }\n    result = result.append(i)\n  }\n  result = result.append(min)\n  result = result.append(max)\n  return result",
    "    let min = lst.min();\n    let max = lst.max();\n    let max_idx = lst.index_of(max);\n    let min_idx = lst.index_of(min);\n    let result = Vec::new(lst.len());\n    let i = 0;\n    for (i = 0; i < lst.len(); i++) {\n        if (i == min_idx) {\n            result.set(i, min);\n        } else if (i == max_idx) {\n            result.set(i, max);\n        } else {\n            result.set(i, lst.get(i));\n        }\n    }\n    return result;",
    "  let min_index = 0\n  let max_index = 0\n  let max_value = lst[0]\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(min_index)\n    }\n    if i == max_value {\n      result = result.append(max_index)\n    }\n  }\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let min_index = lst.index_of(min);\n  let max_index = lst.index_of(max);\n  let result = Vec::new(lst.len() - 1);\n  for i in 0..lst.len() - 1 {\n    let index = (i + min_index) % lst.len();\n    result[i] = lst[index];\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if (i < min) {\n      result.set(i, lst.get(i));\n    } else if (i > max) {\n      result.set(i, lst.get(i));\n    } else {\n      result.set(i, lst.get(i));\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if (i < min) {\n      min = i;\n    } else if (i > max) {\n      max = i;\n    }\n    result.push_back(i);\n  }\n  result.push_back(min);\n  result.push_back(max);\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    } else if i > max {\n      max = i;\n    }\n    result.append(i);\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    } else if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    } else if i > max {\n      max = i;\n    }\n    result = result.concat(vec![i, max, min]);\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let max_value_index = lst.find(max_value);\n  let min_value_index = lst.find(min_value);\n  let max_value_index_next = max_value_index + 1;\n  let min_value_index_next = min_value_index + 1;\n  let max_value_index_prev = max_value_index - 1;\n  let min_value_index_prev = min_value_index - 1;\n\n  if (max_value_index_next < min_value_index_prev) {\n    return lst;\n  }\n\n  let max_value_index_next_prev = max_value_index_next - 1;\n  let min_value_index_next_prev = min_value_index_next - 1;\n\n  if (max_value_index_next_prev < min_value_index_prev) {\n    return lst;\n  }\n\n  let max_value_index_next_next = max_value_index_next + 1;\n  let min_value_index_next_next = min_value_index_next + 1;\n\n  if (max_value_index_next_next < min_value_index_next_prev) {\n    return lst;\n  }\n\n  let max_value_index_next_next_prev = max_value_index_next_next - 1;\n  let min_value_index_next_next_prev = min_value_index_next_next - 1;\n\n  if (max_value_index_next_next_prev < min_value_index_next_prev) {\n    return lst;\n  }\n\n  let max_value_index_next_next_next = max_value_index_next_next + 1;\n  let min_value_index_next_next_next = min_value_index_next_next + 1;\n\n  if (max_value_index_next_next_next < min_value_index_next_next_prev) {\n    return lst;\n  }\n\n  let max_value_",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst.get(i));\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.len) {\n    if (lst[i] == min) {\n      result.append(lst[i]);\n      i += 1;\n    } else if (lst[i] == max) {\n      result.append(lst[i]);\n      i += 1;\n    } else {\n      result.append(lst[i]);\n      i += 1;\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let min_idx = lst.index_of(min);\n  let max_idx = lst.index_of(max);\n  let max_idx_next = lst.index_of(max) + 1;\n  let max_idx_prev = lst.index_of(max) - 1;\n  let min_idx_next = lst.index_of(min) + 1;\n  let min_idx_prev = lst.index_of(min) - 1;\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (i; i < min_idx; i++) {\n    result.store(i, lst.at(i));\n  }\n  for (i; i < max_idx_next; i++) {\n    result.store(i, lst.at(i));\n  }\n  for (i; i < min_idx_prev; i++) {\n    result.store(i, lst.at(i));\n  }\n  for (i; i < max_idx; i++) {\n    result.store(i, lst.at(i));\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result = result.append(i);\n    } else if i > max {\n      result = result.append(i);\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index_of(min_value);\n  let max_index = lst.index_of(max_value);\n  let min_index_next = min_index + 1;\n  let max_index_next = max_index + 1;\n  let result = Vec::new();\n  let i = 0;\n  while (i < min_index_next) {\n    result = result.append(lst[i]);\n    i = i + 1;\n  }\n  while (i < max_index_next) {\n    result = result.append(lst[i]);\n    i = i + 1;\n  }\n  while (i < lst.len()) {\n    result = result.append(lst[i]);\n    i = i + 1;\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index_of(min_value);\n  let max_index = lst.index_of(max_value);\n  let min_index_plus_one = min_index + 1;\n  let max_index_minus_one = max_index - 1;\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result = result.append(max_value);\n    } else if i == max_index {\n      result = result.append(min_value);\n    } else if i == min_index_plus_one {\n      result = result.append(max_value);\n    } else if i == max_index_minus_one {\n      result = result.append(min_value);\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new(lst.len())\n  for i in lst.iter() {\n    if i == min_index {\n      result.append(min_value)\n    }\n    if i == max_index {\n      result.append(max_value)\n    }\n    if i != min_index and i != max_index {\n      result.append(i)\n    }\n  }\n  return result",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n    } else if i == max {\n      result.append(min);\n      min = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  if lst.len() == 0 {\n    return lst\n  }\n\n  let min_value = lst.get(0)\n  let max_value = lst.get(0)\n  let max_index = 0\n  let min_index = 0\n  let i = 1\n  for i in lst.iter() {\n    if lst.get(i) < min_value {\n      min_value = lst.get(i)\n      min_index = i\n    }\n    if lst.get(i) > max_value {\n      max_value = lst.get(i)\n      max_index = i\n    }\n  }\n\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_index {\n      result.append(min_value)\n    } else if i == max_index {\n      result.append(max_value)\n    } else {\n      result.append(lst.get(i))\n    }\n  }\n\n  return result",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n    } else if i == max {\n      result.append(min);\n      min = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result.unsafe_slice(min_index, max_index - min_index + 1)",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index_of(min_value);\n  let max_index = lst.index_of(max_value);\n  let min_index_next = min_index + 1;\n  let max_index_next = max_index + 1;\n  let result = Vec::new(lst.len() - 2);\n  for i in 0..lst.len() - 2 {\n    if (i == min_index) {\n      result[i] = min_value;\n    } else if (i == max_index) {\n      result[i] = max_value;\n    } else if (i < min_index_next) {\n      result[i] = lst[i];\n    } else if (i > max_index_next) {\n      result[i] = lst[i];\n    } else {\n      result[i] = lst[i];\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let max_value = lst[0]\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(i)\n    }\n    if i == max_value {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  if lst.len == 0 {\n    return lst\n  }\n\n  let min = lst.head\n  let max = lst.head\n  let max_index = 0\n  let min_index = 0\n\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    } else if i > max {\n      max = i\n      max_index = i\n    }\n  }\n\n  let result = Vec::new()\n  for i in lst.tail {\n    if i == min {\n      result = result.append(min_index)\n    } else if i == max {\n      result = result.append(max_index)\n    } else {\n      result = result.append(i)\n    }\n  }\n\n  return result",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result.append(min_index)\n    }\n    if i == max_value {\n      result.append(max_index)\n    }\n  }\n  return result",
    "  let lst_len = lst.len();\n  if (lst_len == 0) {\n    return lst;\n  }\n  let min_idx = 0;\n  let max_idx = lst_len - 1;\n  let min_val = lst[min_idx];\n  let max_val = lst[max_idx];\n  let idx = 0;\n  for (; idx < lst_len; idx++) {\n    if (lst[idx] < min_val) {\n      min_val = lst[idx];\n      min_idx = idx;\n    }\n    if (lst[idx] > max_val) {\n      max_val = lst[idx];\n      max_idx = idx;\n    }\n  }\n  let tmp = lst[min_idx];\n  lst[min_idx] = lst[max_idx];\n  lst[max_idx] = tmp;\n  return strange_sort_list(lst);",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if (i < min) {\n      result.set(i, min);\n    } else if (i > max) {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_idx = lst.find(max);\n  let min_idx = lst.find(min);\n  let max_idx_next = lst.find(max, max_idx + 1);\n  let min_idx_next = lst.find(min, min_idx + 1);\n  let result = Vec::new(lst.len() - 2);\n  for i in 0..(lst.len() - 2) {\n    if (i == max_idx_next) {\n      result.set(i, max);\n      max_idx_next = lst.find(max, max_idx_next + 1);\n    } else if (i == min_idx_next) {\n      result.set(i, min);\n      min_idx_next = lst.find(min, min_idx_next + 1);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  let i = 0;\n  for i in 0..min {\n    result.push_back(lst[i]);\n  }\n  for i in max..lst.len() {\n    result.push_back(lst[i]);\n  }\n  for i in 0..min {\n    result.push_back(lst[i]);\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    } else if i > max {\n      max = i;\n    }\n    result.push_back(i);\n  }\n  result.push_back(min);\n  result.push_back(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  let i = 0;\n  for i in 0..lst.len() {\n    if lst[i] == min {\n      result.append(max);\n      max = lst[i];\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = min;\n      min = lst[i];\n    } else if i == max {\n      result.append(min);\n      min = max;\n      max = lst[i];\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if (i < min) {\n      min = i;\n    } else if (i > max) {\n      max = i;\n    }\n    result.push_back(i);\n  }\n  result.push_back(min);\n  result.push_back(max);\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut min_index = 0;\n  let mut max_index = 0;\n  let mut max_index_prev = 0;\n  let mut min_index_prev = 0;\n  let mut min_index_prev_prev = 0;\n  let mut max_index_prev_prev = 0;\n  let mut min_index_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut max",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result = result.append(i);\n    } else if i > max {\n      result = result.append(i);\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in min..max {\n    result.push(i);\n  }\n  for i in lst.iter() {\n    result.push(i);\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.push(i);\n    } else if i > max {\n      result.push(i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n    } else if i == max {\n      result.append(min);\n      min = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let max_index = 0;\n  let min_index = 0;\n  for i in lst.iter() {\n    if i > max {\n      max = i;\n      max_index = i;\n    }\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i == min_index {\n      result = result.append(min);\n    }\n    if i == max_index {\n      result = result.append(max);\n    }\n    result = result.append(i);\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut min_index = 0;\n  let mut max_index = 0;\n  let mut max_value = 0;\n  let mut min_value = 0;\n  let mut min_index_value = 0;\n  let mut max_index_value = 0;\n  let mut max_value_value = 0;\n  let mut min_value_value = 0;\n  let mut min_index_value_value = 0;\n  let mut max_index_value_value = 0;\n  let mut max_value_value_value = 0;\n  let mut min_value_value_value = 0;\n  let mut min_index_value_value_value = 0;\n  let mut max_index_value_value_value = 0;\n  let mut max_value_value_value_value = 0;\n  let mut min_value_value_value_value = 0;\n  let mut min_index_value_value_value_value = 0;\n  let mut max_index_value_value_value_value = 0;\n  let mut max_value_value_value_value_value = 0;\n  let mut min_value_value_value_value_value = 0;\n  let mut min_index_value_value_value_value_value = 0;\n  let mut max_index_value_value_value_value_value = 0;\n  let mut max_value_value_value_value_value_value = 0;\n  let mut min_value_value_value_value_value_value = 0;\n  let mut min_index_value_value_value_value_value_value = 0;\n  let mut max_index_value_value_value_value_value_value = 0;\n  let mut max_value_value_value_value_value_value_value = 0;\n  let mut min_value_value_value_value_value_value_value = 0;\n  let mut min_index_value_value_value_value_value_value_value = 0;\n  let mut max_index_value",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  let i = 0;\n  for i in 0..lst.len() - 1 {\n    if lst[i] < min {\n      result = result.append(lst[i]);\n    } else if lst[i] > max {\n      result = result.append(lst[i]);\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  result = result.append(lst[i]);\n  return result;",
    "  let min = lst.first\n  let max = lst.last\n  let result = Vec::new()\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.append(min);\n    } else if i == max_index {\n      result.append(max);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_value = lst.min();\n  let max_value = lst.max();\n  let min_index = lst.index_of(min_value);\n  let max_index = lst.index_of(max_value);\n  let max_value_index = lst.index_of(max_value);\n  let min_value_index = lst.index_of(min_value);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    let value = lst[i];\n    if (i == min_index) {\n      result.set(value, i);\n    } else if (i == max_value_index) {\n      result.set(value, i);\n    } else if (i == min_value_index) {\n      result.set(value, i);\n    } else if (i == max_index) {\n      result.set(value, i);\n    } else {\n      result.set(value, i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  let i = 0;\n  for i in 0..lst.len() {\n    if lst[i] == min {\n      result.append(max);\n      max = lst[i];\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.append(min);\n    } else if i == max_index {\n      result.append(max);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    } else if i > max {\n      max = i;\n    }\n    result.push(i);\n  }\n  result.push(min);\n  result.push(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (let j = 0; j < lst.len(); j++) {\n    if (j == min_index) {\n      result[i] = min;\n      i += 1;\n    } else if (j == max_index) {\n      result[i] = max;\n      i += 1;\n    } else {\n      result[i] = lst[j];\n      i += 1;\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut max_index = 0;\n  let mut min_index = 0;\n  let mut max_index_prev = 0;\n  let mut min_index_prev = 0;\n  let mut max_index_prev_prev = 0;\n  let mut min_index_prev_prev = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n    if i > max {\n      max = i;\n      max_index = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == max {\n      result = result.append(max);\n      result = result.append(min);\n      min_index_prev = min_index;\n      min_index = max_index;\n      max_index_prev = max_index;\n      max_index = i;\n    } else if i == min {\n      result = result.append(min);\n      result = result.append(max);\n      min_index_prev_prev = min_index_prev;\n      min_index_prev = min_index;\n      max_index_prev_prev = max_index_prev;\n      max_index_prev = max_index;\n      max_index = i;\n    } else {\n      result = result.append(i);\n    }\n  }\n  result = result.append(max);\n  result = result.append(min);\n  result = result.append(max_index_prev);\n  result = result.append(min_index_prev);\n  result = result.append(max_index_prev_prev);\n  result = result.append(min_index_prev_prev);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let res = Vec::new();\n  for i in lst {\n    if i < min {\n      res = res.append(i);\n    } else if i > max {\n      res = res.append(i);\n    } else {\n      res = res.append(i);\n    }\n  }\n  return res;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.append(min);\n    } else if i == max_index {\n      result.append(max);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    } else if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == 0 {\n      result.set(i, min);\n    } else if i == lst.len() - 1 {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i - 1]);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let result = Vec::new();\n  for i in lst.iter() {\n    if (i < min) {\n      min = i;\n    } else if (i > max) {\n      max = i;\n    }\n    result = result.concat(vec![min, max, i]);\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut i = 1;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = i;\n    } else if i == max {\n      result.append(min);\n      min = i;\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (let v of lst) {\n    if (v < min) {\n      result[i] = min;\n      min = v;\n    } else if (v > max) {\n      result[i] = max;\n      max = v;\n    } else {\n      result[i] = v;\n    }\n    i += 1;\n  }\n  return result;",
    "  let lst_len = lst.len();\n  if lst_len == 0 {\n    return Vec::new(0);\n  }\n\n  let min_index = 0;\n  let max_index = lst_len - 1;\n  let min_value = lst[min_index];\n  let max_value = lst[max_index];\n\n  let result = Vec::new(lst_len);\n  for i in 0..lst_len {\n    let value = lst[i];\n    if value < min_value {\n      min_value = value;\n      min_index = i;\n    }\n    if value > max_value {\n      max_value = value;\n      max_index = i;\n    }\n    result[i] = value;\n  }\n\n  result[min_index] = min_value;\n  result[max_index] = max_value;\n  return result;",
    "    let mut result = Vec::new();\n    let mut min = lst[0];\n    let mut max = lst[0];\n    for i in lst.iter() {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    for i in lst.iter() {\n        if i == min {\n            result.push(i);\n            min = lst[0];\n        }\n        if i == max {\n            result.push(i);\n            max = lst[0];\n        }\n    }\n    for i in lst.iter() {\n        if i == min {\n            result.push(i);\n            min = lst[0];\n        }\n        if i == max {\n            result.push(i);\n            max = lst[0];\n        }\n    }\n    return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (let v of lst) {\n    if (v < min) {\n      result[i] = min;\n      min = v;\n    } else if (v > max) {\n      result[i] = max;\n      max = v;\n    } else {\n      result[i] = v;\n    }\n    i += 1;\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result = result.append(max);\n    } else if i == max_index {\n      result = result.append(min);\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst[0];\n  let max = lst[0];\n  let max_index = 0;\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n    if i > max {\n      max = i;\n      max_index = i;\n    }\n  }\n  let result = Vec::new();\n  for i in lst.iter() {\n    if i == min_index {\n      result = result.append(max);\n      max = min;\n      max_index = min_index;\n      min = lst[0];\n      min_index = 0;\n    } else if i == max_index {\n      result = result.append(min);\n      min = max;\n      min_index = max_index;\n      max = lst[0];\n      max_index = 0;\n    } else {\n      result = result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.append(max);\n      max = lst[i];\n    } else if i == max {\n      result.append(min);\n      min = lst[i];\n    } else {\n      result.append(i);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new(lst.len());\n  let i = 0;\n  for (let v of lst) {\n    if (v == min) {\n      result[i] = max;\n      i += 1;\n      max = lst.min();\n    } else if (v == max) {\n      result[i] = min;\n      i += 1;\n      min = lst.max();\n    } else {\n      result[i] = v;\n      i += 1;\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let result = Vec::new();\n  for i in lst {\n    if i < min {\n      result.append(i);\n      min = i;\n    } else if i > max {\n      result.append(i);\n      max = i;\n    }\n  }\n  result.append(min);\n  result.append(max);\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.index_of(max);\n  let min_index = lst.index_of(min);\n  let result = Vec::new(lst.len());\n  for i in 0..lst.len() {\n    if i == min_index {\n      result.set(i, min);\n    } else if i == max_index {\n      result.set(i, max);\n    } else {\n      result.set(i, lst[i]);\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min = lst[0];\n  let mut max = lst[0];\n  let mut i = 1;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n    }\n    if i > max {\n      max = i;\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.push(i);\n    }\n    if i == max {\n      result.push(i);\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      result.push(i);\n    }\n  }\n  for i in lst.iter() {\n    if i == max {\n      result.push(i);\n    }\n  }\n  return result;",
    "    let min = lst.min();\n    let max = lst.max();\n    let result = Vec::new();\n    for i in lst {\n        if i < min {\n            result.push(i);\n            min = i;\n        } else if i > max {\n            result.push(i);\n            max = i;\n        }\n    }\n    result.push(min);\n    result.push(max);\n    return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n    if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(max_value)\n      max_value = i\n      max_index = i\n    } else if i == max_value {\n      result = result.append(min_value)\n      min_value = i\n      min_index = i\n    } else {\n      result = result.append(i)\n    }\n  }\n  result = result.append(min_value)\n  result = result.append(max_value)\n  return result",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_idx = lst.index_of(max);\n  let min_idx = lst.index_of(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_idx {\n      result.append(min);\n    } else if i == max_idx {\n      result.append(max);\n    } else {\n      result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let result = Vec::new();\n  for i in 0..lst.len() {\n    if i == min_index {\n      result = result.append(min);\n    } else if i == max_index {\n      result = result.append(max);\n    } else {\n      result = result.append(lst[i]);\n    }\n  }\n  return result;",
    "  let mut result = Vec::new();\n  let mut min_index = 0;\n  let mut max_index = 0;\n  let mut max_value = 0;\n  let mut min_value = 0;\n  let mut max_value_index = 0;\n  let mut min_value_index = 0;\n  let mut min_value_index_found = false;\n  let mut max_value_index_found = false;\n  let mut min_value_found = false;\n  let mut max_value_found = false;\n\n  for i in lst.iter() {\n    if !min_value_found {\n      min_value = i;\n      min_value_found = true;\n      min_value_index = i;\n    }\n    if !max_value_found {\n      max_value = i;\n      max_value_found = true;\n      max_value_index = i;\n    }\n    if min_value_found && max_value_found {\n      if i < min_value {\n        min_value = i;\n        min_value_index = i;\n      }\n      if i > max_value {\n        max_value = i;\n        max_value_index = i;\n      }\n    }\n    if i == min_value {\n      min_index = i;\n    }\n    if i == max_value {\n      max_index = i;\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_value {\n      result = result.append(min_value_index);\n    }\n    if i == max_value {\n      result = result.append(max_value_index);\n    }\n    if i == min_value_index {\n      result = result.append(min_value_index_found);\n    }\n    if i == max_value_index {\n      result = result.append(max_value_index_found);\n    }\n  }\n\n  return result;",
    "  let min_index = 0\n  let max_index = 0\n  let min_value = lst[0]\n  let max_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    } else if i > max_value {\n      max_value = i\n      max_index = i\n    }\n  }\n  let result = Vec::new()\n  for i in lst.iter() {\n    if i == min_value {\n      result.push_back(min_index)\n    } else if i == max_value {\n      result.push_back(max_index)\n    } else {\n      result.push_back(i)\n    }\n  }\n  return result",
    "  let lst_len = lst.len();\n  if lst_len == 0 {\n    return Vec::new(0);\n  }\n\n  let min_index = 0;\n  let max_index = lst_len - 1;\n  let min_value = lst[min_index];\n  let max_value = lst[max_index];\n\n  for i in 0..lst_len - 1 {\n    if lst[i] < min_value {\n      min_value = lst[i];\n      min_index = i;\n    }\n    if lst[i] > max_value {\n      max_value = lst[i];\n      max_index = i;\n    }\n  }\n\n  let result = Vec::new(lst_len);\n  for i in 0..lst_len - 1 {\n    if i == min_index {\n      result[i] = min_value;\n    } else if i == max_index {\n      result[i] = max_value;\n    } else {\n      result[i] = lst[i];\n    }\n  }\n\n  return result;",
    "  let min = lst.min();\n  let max = lst.max();\n  let max_index = lst.find(max);\n  let min_index = lst.find(min);\n  let result = lst.slice(min_index, max_index + 1);\n  result.extend(lst.slice(0, min_index));\n  result.extend(lst.slice(max_index + 1, lst.len()));\n  return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}