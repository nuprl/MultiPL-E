name: HumanEval_130_tri
language: rs
prompt: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a vector of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>>\
  \ tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
  \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
  \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15,\
  \ 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8),\
  \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
  \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
completions: ["  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return\
    \ Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let a = Vec::new(3)\n\
    \  let b = Vec::new(1)\n  let c = Vec::new(2)\n  for i in 0..n {\n    let t =\
    \ a + b + c\n    a = b\n    b = c\n    c = t\n  }\n  return a", "  if n == 0 {\n\
    \    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n \
    \ if n == 2 {\n    return Vec::new(2);\n  }\n  return Vec::new(1) + Vec::new(n\
    \ / 2) + Vec::new(n / 2);", "    let tri = [0, 1, 1];\n    for i in 0..n {\n \
    \       tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[1] + tri[0]];\n\
    \    }\n    return tri;", "  if n == 0 {\n    return Vec::new(0)\n  } else if\
    \ n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n\
    \    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    return Vec::new(a\
    \ + b + c, d + e + f, g + h + i, j + k + l)\n  }", "    if n == 0 {\n        return\
    \ Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(1);\n    } else\
    \ {\n        let [a, b, c] = tri(n - 1);\n        let [d, e, f] = tri(n - 2);\n\
    \        let [g, h, i] = tri(n - 3);\n        let [j, k, l] = tri(n - 4);\n  \
    \      let [m, n, o] = tri(n - 5);\n        let [p, q, r] = tri(n - 6);\n    \
    \    let [s, t, u] = tri(n - 7);\n        let [v, w, x] = tri(n - 8);\n      \
    \  let [y, z, aa] = tri(n - 9);\n        let [bb, cc, dd] = tri(n - 10);\n   \
    \     let [ee, ff, gg] = tri(n - 11);\n        let [hh, ii, jj] = tri(n - 12);\n\
    \        let [kk, ll, mm] = tri(n - 13);\n        let [nn, oo, pp] = tri(n - 14);\n\
    \        let [qq, rr, ss] = tri(n - 15);\n        let [tt, uu, vv] = tri(n - 16);\n\
    \        let [ww, xx, yy] = tri(n - 17);\n        let [zz, aa, bb] = tri(n - 18);\n\
    \        let [cc, dd, ee] = tri(n - 19);\n        let [ff, gg, hh] = tri(n - 20);\n\
    \        let [ii, jj, kk] = tri(n - 21);\n        let [ll, mm, nn] = tri(n - 22);\n\
    \        let [oo, pp, qq] = tri(n - 23);\n        let [rr, ss, tt] = tri(n - 24);\n\
    \        let [uu, vv, ww] = tri(n - 25);\n        let [xx, yy, zz] = tri(n - 26);\n\
    \        let [aa, bb, cc", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n\
    \ == 1 {\n    return Vec::new(3)\n  }\n  let [a, b] = tri(n - 1)\n  let [c, d]\
    \ = tri(n - 2)\n  let [e, f] = tri(n - 3)\n  let [g, h] = tri(n - 4)\n  let [i,\
    \ j] = tri(n - 5)\n  let [k, l] = tri(n - 6)\n  let [m, n] = tri(n - 7)\n  let\
    \ [o, p] = tri(n - 8)\n  let [q, r] = tri(n - 9)\n  let [s, t] = tri(n - 10)\n\
    \  let [u, v] = tri(n - 11)\n  let [w, x] = tri(n - 12)\n  let [y, z] = tri(n\
    \ - 13)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u,\
    \ v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j,\
    \ k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let\
    \ [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y,\
    \ z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n,\
    \ o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b,", " \
    \ if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    let a\
    \ = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n\
    \ - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n\
    \    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n   \
    \ let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let\
    \ n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q\
    \ = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t =\
    \ tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n\
    \ - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n -\
    \ 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n\
    \ - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n\
    \ - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n\
    \ - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n\
    \ - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao =", " \
    \ if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n\
    \    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    let [m, n,\
    \ o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let [s, t, u] = tri(n -\
    \ 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] = tri(n - 9)\n    let\
    \ [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n - 11)\n    let [hh,\
    \ ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n    let [nn, oo,\
    \ pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let [tt, uu, vv]\
    \ = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz, aa, bb] = tri(n\
    \ - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg, hh] = tri(n - 20)\n\
    \    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn] = tri(n - 22)\n    let\
    \ [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n - 24)\n    let [uu,\
    \ vv, ww] = tri(n - 25)\n    let [xx, yy, zz] = tri(n - 26)\n    let [aa, bb,\
    \ cc", "    if n == 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n\
    \        return Vec::new(1);\n    }\n    if n == 2 {\n        return Vec::new(2);\n\
    \    }\n    return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);", "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return\
    \ Vec::new(1)\n  } else {\n    let a = Vec::new(0)\n    let b = Vec::new(1)\n\
    \    let c = Vec::new(0)\n    for i in 0..n {\n      let t = a + b\n      a =\
    \ b\n      b = c\n      c = t\n    }\n    return c\n  }", "  if n == 0 {\n   \
    \ return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n\
    \ % 2 == 0 {\n    return Vec::new(1 + (n / 2))\n  }\n  return Vec::new(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))", "  if n == 0 {\n    return Vec::new(0);\n  }\
    \ else if n == 1 {\n    return Vec::new(3);\n  } else if n == 2 {\n    return\
    \ Vec::new(1, 2, 3);\n  } else {\n    let a = Vec::new(1, 2, 3);\n    let b =\
    \ Vec::new(1, 2, 3);\n    let c = Vec::new(1, 2, 3);\n    for i in 0..n {\n  \
    \    let t = a + b + c;\n      a = b;\n      b = c;\n      c = t;\n    }\n   \
    \ return c;\n  }", "  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1\
    \ {\n    return Vec::new(1);\n  } else {\n    let a = Vec::new(1);\n    let b\
    \ = Vec::new(1);\n    let c = Vec::new(1);\n    for i in 0..n {\n      let t =\
    \ a + b + c;\n      a = b;\n      b = c;\n      c = t;\n    }\n    return c;\n\
    \  }", "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return\
    \ Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 3, 2, 8)\n  } else\
    \ {\n    let a = Vec::new(1, 3, 2, 8)\n    let b = tri(n - 1)\n    let c = tri(n\
    \ - 2)\n    let d = tri(n + 1)\n    return a + b + c + d\n  }", "  if n == 0 {\n\
    \    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  let\
    \ [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n\
    \ - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p,\
    \ q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n -\
    \ 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee,\
    \ ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm]\
    \ = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n\
    \ - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n\
    \  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff,\
    \ gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn]\
    \ = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n\
    \ - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz] = tri(n - 26)\n\
    \  let [aa, bb, cc]", "  if n == 0 {\n    return Vec::new(0)\n  } else if n ==\
    \ 1 {\n    return Vec::new(3)\n  } else {\n    let a = Vec::new(0)\n    let b\
    \ = Vec::new(1)\n    let c = Vec::new(2)\n    for i in 0..n {\n      let t = a\
    \ + b + c\n      a = b\n      b = c\n      c = t\n    }\n    return a\n  }", " \
    \ if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n   \
    \ let b = 2\n    let c = 3\n    let result = Vec::new(n + 1)\n    for i in 0..n\
    \ {\n      result[i] = a\n      a = b\n      b = c\n      c = a + b\n    }\n \
    \   return result\n  }", "  if n == 0 {\n    return Vec::new(0)\n  } else if n\
    \ == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "    let mut\
    \ result = Vec::new();\n    let mut current = 1;\n    let mut previous = 0;\n\
    \    let mut next = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n       \
    \     next = previous + current;\n        } else {\n            next = previous\
    \ + current + next;\n        }\n        result.push_back(next);\n        previous\
    \ = current;\n        current = next;\n    }\n    return result;", "  if n ==\
    \ 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = 1\n\
    \    let b = 2\n    let c = 3\n    for i in 0..n - 2 {\n      a = b + c\n    \
    \  b = c\n      c = a\n    }\n    return Vec::new(a, b, c)\n  }", "    let tri_vec\
    \ = Vec::new(n + 1);\n    let tri_vec_prev = Vec::new(n + 1);\n    tri_vec_prev[0]\
    \ = 0;\n    tri_vec_prev[1] = 1;\n    for i in 1..n {\n        tri_vec[i] = tri_vec_prev[i\
    \ - 1] + tri_vec_prev[i] + tri_vec_prev[i + 1];\n        tri_vec_prev[i] = tri_vec[i];\n\
    \    }\n    return tri_vec;", "    if n == 0 {\n        return Vec::new(0);\n\
    \    } else if n == 1 {\n        return Vec::new(1);\n    } else if n == 2 {\n\
    \        return Vec::new(2);\n    } else {\n        let a = Vec::new(n - 1);\n\
    \        let b = Vec::new(n - 2);\n        let c = Vec::new(n - 3);\n        let\
    \ d = Vec::new(n - 4);\n        let e = Vec::new(n - 5);\n        let f = Vec::new(n\
    \ - 6);\n        let g = Vec::new(n - 7);\n        let h = Vec::new(n - 8);\n\
    \        let i = Vec::new(n - 9);\n        let j = Vec::new(n - 10);\n       \
    \ let k = Vec::new(n - 11);\n        let l = Vec::new(n - 12);\n        let m\
    \ = Vec::new(n - 13);\n        let n = Vec::new(n - 14);\n        let o = Vec::new(n\
    \ - 15);\n        let p = Vec::new(n - 16);\n        let q = Vec::new(n - 17);\n\
    \        let r = Vec::new(n - 18);\n        let s = Vec::new(n - 19);\n      \
    \  let t = Vec::new(n - 20);\n        let u = Vec::new(n - 21);\n        let v\
    \ = Vec::new(n - 22);\n        let w = Vec::new(n - 23);\n        let x = Vec::new(n\
    \ - 24);\n        let y = Vec::new(n - 25);\n        let z = Vec::new(n - 26);\n\
    \        let a1 = a + b;\n        let b1 = b + c;\n        let c1 = c + d;\n \
    \       let d1 = d + e;\n        let e1 = e + f;\n        let f1 = f + g;\n  \
    \      let g1 = g + h;\n        let h1 = h + i;\n        let i1 = i + j;\n   \
    \     let j1 = j + k;\n        let k1 = k + l;\n        let l1 = l +", "    let\
    \ [a, b, c] = [1, 1, 1];\n    for i in 0..n {\n        let [a, b, c] = [a + b,\
    \ a, b + c];\n    }\n    return vec![a, b, c];", "  let tri_vec = [1, 3, 2, 8];\n\
    \  for i in 0..n {\n    tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i +\
    \ 2]);\n  }\n  return tri_vec;", "  let mut result = Vec::new();\n  let mut a\
    \ = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in 0..n {\n    if i % 2 ==\
    \ 0 {\n      result.push_back(a);\n      a = b + c;\n      b = c;\n      c = a;\n\
    \    } else {\n      result.push_back(a);\n      a = b + c;\n      b = c;\n  \
    \    c = a + b;\n    }\n  }\n  result.push_back(a);\n  return result;", "  if\
    \ n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n\
    \  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    let a = Vec::new(n\
    \ - 1);\n    let b = Vec::new(n - 2);\n    let c = Vec::new(n - 3);\n    let d\
    \ = Vec::new(n - 4);\n    let e = Vec::new(n - 5);\n    let f = Vec::new(n - 6);\n\
    \    let g = Vec::new(n - 7);\n    let h = Vec::new(n - 8);\n    let i = Vec::new(n\
    \ - 9);\n    let j = Vec::new(n - 10);\n    let k = Vec::new(n - 11);\n    let\
    \ l = Vec::new(n - 12);\n    let m = Vec::new(n - 13);\n    let n = Vec::new(n\
    \ - 14);\n    let o = Vec::new(n - 15);\n    let p = Vec::new(n - 16);\n    let\
    \ q = Vec::new(n - 17);\n    let r = Vec::new(n - 18);\n    let s = Vec::new(n\
    \ - 19);\n    let t = Vec::new(n - 20);\n    let u = Vec::new(n - 21);\n    let\
    \ v = Vec::new(n - 22);\n    let w = Vec::new(n - 23);\n    let x = Vec::new(n\
    \ - 24);\n    let y = Vec::new(n - 25);\n    let z = Vec::new(n - 26);\n    let\
    \ a1 = a + b + c;\n    let b1 = b + c + d;\n    let c1 = c + d + e;\n    let d1\
    \ = d + e + f;\n    let e1 = e + f + g;\n    let f1 = f + g + h;\n    let g1 =\
    \ g + h + i;\n    let h1 = h + i + j;\n    let i1 = i + j + k;\n    let j1 = j\
    \ + k +", "  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return\
    \ Vec::new(1);\n  } else {\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f]\
    \ = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n -\
    \ 4);\n    let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let\
    \ [s, t, u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa]\
    \ = tri(n - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n\
    \ - 11);\n    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n -\
    \ 13);\n    let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n\
    \    let [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n  \
    \  let [zz, aaa, bbb] = tri(n - 18);\n    let [ccc, ddd, eee] = tri(n - 19);\n\
    \    let [fff, ggg, hhh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n\
    \    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n  \
    \  let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let\
    \ [xx, yy, zz] = tri(n - 26);\n    let [aaa, bbb", "  if n == 0 {\n    return\
    \ Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n ==\
    \ 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(0)\n   \
    \ let b = Vec::new(1, 2, 3)\n    for i in 0..n {\n      a = a.plus(b)\n      b\
    \ = b.plus(a)\n    }\n    return a\n  }", "  if n == 0 {\n    return Vec::new(0);\n\
    \  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n  } else {\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n  }", "  if n == 0 {\n    return Vec::new(0);\n  } else\
    \ if n == 1 {\n    return Vec::new(3);\n  } else {\n    let a = Vec::new(0);\n\
    \    let b = Vec::new(1);\n    let c = Vec::new(2);\n    let d = Vec::new(3);\n\
    \    let e = Vec::new(4);\n    let f = Vec::new(5);\n    let g = Vec::new(6);\n\
    \    let h = Vec::new(7);\n    let i = Vec::new(8);\n    let j = Vec::new(9);\n\
    \    let k = Vec::new(10);\n    let l = Vec::new(11);\n    let m = Vec::new(12);\n\
    \    let n = Vec::new(13);\n    let o = Vec::new(14);\n    let p = Vec::new(15);\n\
    \    let q = Vec::new(16);\n    let r = Vec::new(17);\n    let s = Vec::new(18);\n\
    \    let t = Vec::new(19);\n    let u = Vec::new(20);\n    let v = Vec::new(21);\n\
    \    let w = Vec::new(22);\n    let x = Vec::new(23);\n    let y = Vec::new(24);\n\
    \    let z = Vec::new(25);\n    let aa = Vec::new(26);\n    let ab = Vec::new(27);\n\
    \    let ac = Vec::new(28);\n    let ad = Vec::new(29);\n    let ae = Vec::new(30);\n\
    \    let af = Vec::new(31);\n    let ag = Vec::new(32);\n    let ah = Vec::new(33);\n\
    \    let ai = Vec::new(34);\n    let aj = Vec::new(35);\n    let ak = Vec::new(36);\n\
    \    let al = Vec::new(37);\n    let am = Vec::new(38);\n    let an = Vec::new(39);\n\
    \    let ao = Vec::new(40);\n    let ap = Vec::new(41);\n    let aq = Vec", " \
    \ let mut res = Vec::new();\n  let mut cur = 1;\n  let mut prev = 0;\n  let mut\
    \ next = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      next = prev + cur;\n\
    \    } else {\n      next = cur + prev + next;\n    }\n    res.push_back(next);\n\
    \    prev = cur;\n    cur = next;\n  }\n  return res;", "  if n == 0 {\n    return\
    \ Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n ==\
    \ 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let\
    \ b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e =\
    \ tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n\
    \ - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n\
    \    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n \
    \   let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n  \
    \  let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n   \
    \ let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let\
    \ x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa\
    \ = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad\
    \ = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag\
    \ = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj\
    \ = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am\
    \ = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(", "  if n == 0 {\n\
    \    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else\
    \ if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }",
  "  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3);\n  } else {\n    let a =\
    \ Vec::new(0);\n    let b = Vec::new(1, 2);\n    let c = Vec::new(3);\n    for\
    \ i in 0..n {\n      let t = a + b + c;\n      a = b;\n      b = c;\n      c =\
    \ t;\n    }\n    return c;\n  }", "    if n == 0 {\n        return Vec::new(0);\n\
    \    } else if n == 1 {\n        return Vec::new(1);\n    } else if n == 2 {\n\
    \        return Vec::new(2);\n    } else {\n        let a = Vec::new(n - 2);\n\
    \        let b = Vec::new(n - 1);\n        let c = Vec::new(n);\n        let d\
    \ = Vec::new(n + 1);\n        let e = Vec::new(n + 2);\n        let f = Vec::new(n\
    \ + 3);\n        let g = Vec::new(n + 4);\n        let h = Vec::new(n + 5);\n\
    \        let i = Vec::new(n + 6);\n        let j = Vec::new(n + 7);\n        let\
    \ k = Vec::new(n + 8);\n        let l = Vec::new(n + 9);\n        let m = Vec::new(n\
    \ + 10);\n        let n = Vec::new(n + 11);\n        let o = Vec::new(n + 12);\n\
    \        let p = Vec::new(n + 13);\n        let q = Vec::new(n + 14);\n      \
    \  let r = Vec::new(n + 15);\n        let s = Vec::new(n + 16);\n        let t\
    \ = Vec::new(n + 17);\n        let u = Vec::new(n + 18);\n        let v = Vec::new(n\
    \ + 19);\n        let w = Vec::new(n + 20);\n        let x = Vec::new(n + 21);\n\
    \        let y = Vec::new(n + 22);\n        let z = Vec::new(n + 23);\n      \
    \  let aa = Vec::new(n + 24);\n        let ab = Vec::new(n + 25);\n        let\
    \ ac = Vec::new(n + 26);\n        let ad = Vec::new(n + 27);\n        let ae =\
    \ Vec::new(n + 28);\n        let af = Vec::new(n + 29);\n        let ag = Vec::new(n\
    \ + 30);\n        let ah = Vec::new(n + 31);\n        let ai = Vec::new(n + 32);",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(1,\
    \ 2, 3)\n    let b = tri(n - 1)\n    let c = tri(n - 2)\n    let d = tri(n - 3)\n\
    \    let e = tri(n - 4)\n    let f = tri(n - 5)\n    let g = tri(n - 6)\n    let\
    \ h = tri(n - 7)\n    let i = tri(n - 8)\n    let j = tri(n - 9)\n    let k =\
    \ tri(n - 10)\n    let l = tri(n - 11)\n    let m = tri(n - 12)\n    let n = tri(n\
    \ - 13)\n    let o = tri(n - 14)\n    let p = tri(n - 15)\n    let q = tri(n -\
    \ 16)\n    let r = tri(n - 17)\n    let s = tri(n - 18)\n    let t = tri(n - 19)\n\
    \    let u = tri(n - 20)\n    let v = tri(n - 21)\n    let w = tri(n - 22)\n \
    \   let x = tri(n - 23)\n    let y = tri(n - 24)\n    let z = tri(n - 25)\n  \
    \  let aa = tri(n - 26)\n    let ab = tri(n - 27)\n    let ac = tri(n - 28)\n\
    \    let ad = tri(n - 29)\n    let ae = tri(n - 30)\n    let af = tri(n - 31)\n\
    \    let ag = tri(n - 32)\n    let ah = tri(n - 33)\n    let ai = tri(n - 34)\n\
    \    let aj = tri(n - 35)\n    let ak = tri(n - 36)\n    let al = tri(n - 37)\n\
    \    let am = tri(n - 38)\n    let an = tri(n - 39)\n    let a", "  if n == 0\
    \ {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n\
    \  let [a, b] = tri(n - 1)\n  let [c, d] = tri(n - 2)\n  let [e, f] = tri(n -\
    \ 3)\n  let [g, h] = tri(n - 4)\n  let [i, j] = tri(n - 5)\n  let [k, l] = tri(n\
    \ - 6)\n  let [m, n] = tri(n - 7)\n  let [o, p] = tri(n - 8)\n  let [q, r] = tri(n\
    \ - 9)\n  let [s, t] = tri(n - 10)\n  let [u, v] = tri(n - 11)\n  let [w, x] =\
    \ tri(n - 12)\n  let [y, z] = tri(n - 13)\n  let [a, b, c, d, e, f, g, h, i, j,\
    \ k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(a + b + c +\
    \ d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v +\
    \ w + x + y + z)", "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1\
    \ {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n\
    \  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n\
    \ - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n\
    \    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let\
    \ j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m\
    \ = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p =\
    \ tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n\
    \ - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n -\
    \ 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n\
    \    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n\
    \    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n\
    \    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n\
    \    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n\
    \    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n\
    \    let ao = tri(", "  if n == 0 {\n    return Vec::new(0)\n  } else if n ==\
    \ 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2,\
    \ 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c =\
    \ tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n\
    \ - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n\
    \    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n \
    \   let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n  \
    \  let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n   \
    \ let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let\
    \ v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y\
    \ = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab\
    \ = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae\
    \ = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah\
    \ = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak\
    \ = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an\
    \ = tri(n - 40)\n    let ao = tri(", "  let mut res = Vec::new();\n  let mut a\
    \ = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in 0..n {\n    if i % 2 ==\
    \ 0 {\n      a = a + b;\n      b = b + c;\n      c = a + b;\n    } else {\n  \
    \    a = a + b;\n      b = b + c;\n      c = a + b;\n    }\n    res.push_back(c);\n\
    \  }\n  return res;", "  if n == 0 {\n    return Vec::new(0)\n  } else if n ==\
    \ 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2,\
    \ 3)\n  } else {\n    let a = 1 + n / 2\n    let b = a - 1\n    let c = b + 1\n\
    \    return Vec::new(a, b, c)\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n % 2 == 0 {\n    return\
    \ Vec::new(1 + (n / 2))\n  }\n  return Vec::new(\n    tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  )", "  let mut result = Vec::new();\n  let mut current = 1;\n\
    \  let mut previous = 0;\n  let mut next = 0;\n  for i in 0..n {\n    if i % 2\
    \ == 0 {\n      next = previous + current;\n      previous = current;\n      current\
    \ = next;\n    } else {\n      next = previous + current;\n      previous = current;\n\
    \      current = next;\n    }\n    result.push_back(current);\n  }\n  return result;",
  "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n\
    \  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  let [a, b, c] = tri(n\
    \ - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j,\
    \ k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n -\
    \ 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z,\
    \ aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n\
    \ - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n\
    \  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt,\
    \ uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb]\
    \ = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n\
    \ - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n\
    \  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu,\
    \ vv, ww] = tri(n - 25)\n  let [xx, y", "  if n == 0 {\n    return Vec::new(0);\n\
    \  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n == 2 {\n    return Vec::new(2);\n\
    \  }\n  let [a, b, c] = tri(n - 1);\n  let [d, e, f] = tri(n - 2);\n  let [g,\
    \ h, i] = tri(n - 3);\n  let [j, k, l] = tri(n - 4);\n  let [m, n, o] = tri(n\
    \ - 5);\n  let [p, q, r] = tri(n - 6);\n  let [s, t, u] = tri(n - 7);\n  let [v,\
    \ w, x] = tri(n - 8);\n  let [y, z, aa] = tri(n - 9);\n  let [bb, cc, dd] = tri(n\
    \ - 10);\n  let [ee, ff, gg] = tri(n - 11);\n  let [hh, ii, jj] = tri(n - 12);\n\
    \  let [kk, ll, mm] = tri(n - 13);\n  let [nn, oo, pp] = tri(n - 14);\n  let [qq,\
    \ rr, ss] = tri(n - 15);\n  let [tt, uu, vv] = tri(n - 16);\n  let [ww, xx, yy]\
    \ = tri(n - 17);\n  let [zz, aa, bb] = tri(n - 18);\n  let [cc, dd, ee] = tri(n\
    \ - 19);\n  let [ff, gg, hh] = tri(n - 20);\n  let [ii, jj, kk] = tri(n - 21);\n\
    \  let [ll, mm, nn] = tri(n - 22);\n  let [oo, pp, qq] = tri(n - 23);\n  let [rr,\
    \ ss, tt] = tri(n - 24);\n  let [uu, vv, ww] = tri(n - 25);\n  let [xx, yy, zz",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n\
    \ - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d =\
    \ Vec::new(n - 1)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 1)\n\
    \    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 1)\n    let i = Vec::new(n\
    \ - 1)\n    let j = Vec::new(n - 1)\n    let k = Vec::new(n - 1)\n    let l =\
    \ Vec::new(n - 1)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 1)\n\
    \    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 1)\n    let q = Vec::new(n\
    \ - 1)\n    let r = Vec::new(n - 1)\n    let s = Vec::new(n - 1)\n    let t =\
    \ Vec::new(n - 1)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 1)\n\
    \    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 1)\n    let y = Vec::new(n\
    \ - 1)\n    let z = Vec::new(n - 1)\n    let a1 = Vec::new(n - 1)\n    let b1\
    \ = Vec::new(n - 1)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 1)\n\
    \    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 1)\n    let g1 = Vec::new(n\
    \ - 1)\n    let h1 = Vec::new(n - 1)\n    let i1 =", "  if n == 0 {\n    return\
    \ Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n\
    \    return Vec::new(2)\n  }\n  let a = 1\n  let b = 1\n  let c = 2\n  let d =\
    \ 3\n  let e = 3\n  let f = 4\n  let g = 5\n  let h = 6\n  let i = 7\n  let j\
    \ = 8\n  let k = 9\n  let l = 10\n  let m = 11\n  let n = 12\n  let o = 13\n \
    \ let p = 14\n  let q = 15\n  let r = 16\n  let s = 17\n  let t = 18\n  let u\
    \ = 19\n  let v = 20\n  let w = 21\n  let x = 22\n  let y = 23\n  let z = 24\n\
    \  let aa = a + (n / 2)\n  let bb = b + (n / 2)\n  let cc = c + (n / 2)\n  let\
    \ dd = d + (n / 2)\n  let ee = e + (n / 2)\n  let ff = f + (n / 2)\n  let gg =\
    \ g + (n / 2)\n  let hh = h + (n / 2)\n  let ii = i + (n / 2)\n  let jj = j +\
    \ (n / 2)\n  let kk = k + (n / 2)\n  let ll = l + (n / 2)\n  let mm = m + (n /\
    \ 2)\n  let nn = n + (n / 2)\n  let oo = o + (n / 2)\n  let pp = p + (n / 2)\n\
    \  let qq = q + (n / 2)\n  let rr = r + (n / 2)\n  let ss = s + (n / 2)\n  let\
    \ tt = t + (n / 2)\n  let uu = u + (n / 2)\n  let vv = v + (n / 2)\n  let ww =\
    \ w + (n / 2)\n  let xx = x + (n", "  if n == 0 {\n    return Vec::new(0)\n  }\
    \ else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else if n == 3 {\n    return Vec::new(3)\n  } else {\n    let a = tri(n -\
    \ 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let result = Vec::new(n\
    \ + 1)\n    for i in 0..n {\n      result[i] = a[i] + b[i] + c[i]\n    }\n   \
    \ return result\n  }", "  if n == 0 {\n    return Vec::new(0);\n  } else if n\
    \ == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n\
    \  } else {\n    let a = Vec::new(3);\n    let b = Vec::new(1);\n    let c = Vec::new(2);\n\
    \    for i in 0..n {\n      let t = a + b + c;\n      a = b;\n      b = c;\n \
    \     c = t;\n    }\n    return c;\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else {\n    let [a, b] = tri(n\
    \ - 1)\n    let [c, d] = tri(n - 2)\n    let [e, f] = tri(n - 3)\n    let [g,\
    \ h] = tri(n - 4)\n    let [i, j] = tri(n - 5)\n    let [k, l] = tri(n - 6)\n\
    \    let [m, n] = tri(n - 7)\n    let [o, p] = tri(n - 8)\n    let [q, r] = tri(n\
    \ - 9)\n    let [s, t] = tri(n - 10)\n    let [u, v] = tri(n - 11)\n    let [w,\
    \ x] = tri(n - 12)\n    let [y, z] = tri(n - 13)\n    let [aa, ab] = tri(n - 14)\n\
    \    let [ac, ad] = tri(n - 15)\n    let [ae, af] = tri(n - 16)\n    let [ag,\
    \ ah] = tri(n - 17)\n    let [ai, aj] = tri(n - 18)\n    let [ak, al] = tri(n\
    \ - 19)\n    let [am, an] = tri(n - 20)\n    let [ao, ap] = tri(n - 21)\n    let\
    \ [aq, ar] = tri(n - 22)\n    let [as, at] = tri(n - 23)\n    let [au, av] = tri(n\
    \ - 24)\n    let [aw, ax] = tri(n - 25)\n    let [ay, az] = tri(n - 26)\n    let\
    \ [ba, bb] = tri(n - 27)\n    let [bc, bd] = tri(n - 28)\n    let [be, bf] = tri(n\
    \ - 29)\n    let [bg, bh] = tri(n - 30)\n    let [bi, bj] = tri(n - 31)\n    let",
  "  let a = [1, 1];\n  let b = [1, 1];\n  for i in 0..n {\n    let c = a + b;\n \
    \   a = b;\n    b = c;\n  }\n  return a;", "    let tri_vec = Vec::new(n + 1);\n\
    \    tri_vec[0] = 1;\n    tri_vec[1] = 3;\n    for i in 1..n {\n        tri_vec[i\
    \ + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n    }\n    return tri_vec;",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else {\n    let a = Vec::new(0)\n    let b = Vec::new(1)\n\
    \    let c = Vec::new(2)\n    for i in 0..n {\n      let t = a + b + c\n     \
    \ a = b\n      b = c\n      c = t\n    }\n    return c\n  }", "    if n == 0 {\n\
    \        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(1);\n\
    \    } else if n == 2 {\n        return Vec::new(2);\n    } else if n % 2 == 0\
    \ {\n        return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    } else {\n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }", "  let mut result =\
    \ Vec::new();\n  let mut a = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in\
    \ 0..n {\n    let t = a + b + c;\n    a = b;\n    b = c;\n    c = t;\n    result.push(t);\n\
    \  }\n  return result;", "    if n == 0 {\n        return Vec::new(0);\n    }\
    \ else if n == 1 {\n        return Vec::new(1);\n    } else if n == 2 {\n    \
    \    return Vec::new(2);\n    } else {\n        let a = Vec::new(n - 1);\n   \
    \     let b = Vec::new(n - 2);\n        let c = Vec::new(n - 3);\n        let\
    \ d = Vec::new(n - 4);\n        let e = Vec::new(n - 5);\n        let f = Vec::new(n\
    \ - 6);\n        let g = Vec::new(n - 7);\n        let h = Vec::new(n - 8);\n\
    \        let i = Vec::new(n - 9);\n        let j = Vec::new(n - 10);\n       \
    \ let k = Vec::new(n - 11);\n        let l = Vec::new(n - 12);\n        let m\
    \ = Vec::new(n - 13);\n        let n = Vec::new(n - 14);\n        let o = Vec::new(n\
    \ - 15);\n        let p = Vec::new(n - 16);\n        let q = Vec::new(n - 17);\n\
    \        let r = Vec::new(n - 18);\n        let s = Vec::new(n - 19);\n      \
    \  let t = Vec::new(n - 20);\n        let u = Vec::new(n - 21);\n        let v\
    \ = Vec::new(n - 22);\n        let w = Vec::new(n - 23);\n        let x = Vec::new(n\
    \ - 24);\n        let y = Vec::new(n - 25);\n        let z = Vec::new(n - 26);\n\
    \        let a1 = Vec::new(n - 27);\n        let b1 = Vec::new(n - 28);\n    \
    \    let c1 = Vec::new(n - 29);\n        let d1 = Vec::new(n - 30);\n        let\
    \ e1 = Vec::new(n - 31);\n        let f1 = Vec::new(n - 32);\n        let g1 =\
    \ Vec::new(n - 33);\n        let h1 = Vec::new(n - 34);\n        let i1 =", " \
    \ if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n\
    \  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  let a = Vec::new(1,\
    \ 2, 3)\n  let b = Vec::new(1, 2, 3)\n  let c = Vec::new(1, 2, 3)\n  for i in\
    \ 0..n {\n    let a_i = a[i]\n    let b_i = b[i]\n    let c_i = c[i]\n    let\
    \ sum = a_i + b_i + c_i\n    a = Vec::new(sum, a_i, b_i)\n    b = Vec::new(sum,\
    \ b_i, c_i)\n    c = Vec::new(sum, a_i, b_i)\n  }\n  return a", "  if n == 0 {\n\
    \    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else\
    \ if n == 2 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    let a = tri(n\
    \ - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n\
    \    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let\
    \ h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k =\
    \ tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n\
    \ - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n -\
    \ 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n\
    \    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n \
    \   let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n  \
    \  let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n\
    \    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n\
    \    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n\
    \    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n\
    \    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao =", "  let tri\
    \ = [0, 1, 3];\n  for i in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1],\
    \ tri[0] + tri[2], tri[0] + tri[1]];\n  }\n  tri", "  if n == 0 {\n    return\
    \ Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else {\n    let\
    \ [a, b] = tri(n - 1)\n    let [c, d] = tri(n - 2)\n    let [e, f] = tri(n - 3)\n\
    \    let [g, h] = tri(n - 4)\n    let [i, j] = tri(n - 5)\n    let [k, l] = tri(n\
    \ - 6)\n    let [m, n] = tri(n - 7)\n    let [o, p] = tri(n - 8)\n    let [q,\
    \ r] = tri(n - 9)\n    let [s, t] = tri(n - 10)\n    let [u, v] = tri(n - 11)\n\
    \    let [w, x] = tri(n - 12)\n    let [y, z] = tri(n - 13)\n    let [aa, ab]\
    \ = tri(n - 14)\n    let [ac, ad] = tri(n - 15)\n    let [ae, af] = tri(n - 16)\n\
    \    let [ag, ah] = tri(n - 17)\n    let [ai, aj] = tri(n - 18)\n    let [ak,\
    \ al] = tri(n - 19)\n    let [am, an] = tri(n - 20)\n    let [ao, ap] = tri(n\
    \ - 21)\n    let [aq, ar] = tri(n - 22)\n    let [as, at] = tri(n - 23)\n    let\
    \ [au, av] = tri(n - 24)\n    let [aw, ax] = tri(n - 25)\n    let [ay, az] = tri(n\
    \ - 26)\n    let [ba, bb] = tri(n - 27)\n    let [bc, bd] = tri(n - 28)\n    let\
    \ [be, bf] = tri(n - 29)\n    let [bg, bh] = tri(n - 30)\n    let [bi, bj] = tri(n\
    \ - 31)\n    let", "  let mut result = Vec::new();\n  let mut sum = 0;\n  for\
    \ i in 0..n {\n    if i % 2 == 0 {\n      sum = sum + 1;\n    } else {\n     \
    \ sum = sum + 2;\n    }\n    result.push(sum);\n  }\n  return result;", "  let\
    \ tri = [0, 1, 1];\n  for i in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1],\
    \ tri[0] + tri[2], tri[0] + tri[1]];\n  }\n  return tri;", "  if n == 0 {\n  \
    \  return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else\
    \ if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(8)\n\
    \  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "  if n ==\
    \ 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] =\
    \ tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n\
    \    return Vec::new(a + b + c, d + e + f, g + h + i)\n  }", "  if n == 0 {\n\
    \    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n  } else\
    \ {\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let\
    \ [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o]\
    \ = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n -\
    \ 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n   \
    \ let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let\
    \ [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn,\
    \ oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu,\
    \ vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aa, bb]\
    \ = tri(n - 18);\n    let [cc, dd, ee] = tri(n - 19);\n    let [ff, gg, hh] =\
    \ tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n\
    \ - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n -\
    \ 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy, zz] = tri(n - 26);\n\
    \    let [aa, bb, cc", "    if n == 0 {\n        return Vec::new(1)\n    } else\
    \ if n == 1 {\n        return Vec::new(3)\n    } else if n == 2 {\n        return\
    \ Vec::new(2)\n    } else {\n        let [a, b, c] = tri(n - 1)\n        let [d,\
    \ e, f] = tri(n - 2)\n        let [g, h, i] = tri(n - 3)\n        let [j, k, l]\
    \ = tri(n - 4)\n        return Vec::new(a + b + c,\n                        d\
    \ + e + f,\n                        g + h + i,\n                        j + k\
    \ + l)\n    }", "    if n == 0 {\n        return Vec::new(0);\n    }\n    if n\
    \ == 1 {\n        return Vec::new(3);\n    }\n    if n == 2 {\n        return\
    \ Vec::new(2);\n    }\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n\
    \ - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n  \
    \  let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t,\
    \ u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n\
    \ - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n\
    \    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n  \
    \  let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let\
    \ [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz,\
    \ aa, bb] = tri(n - 18);\n    let [cc, dd, ee] = tri(n - 19);\n    let [ff, gg,\
    \ hh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn]\
    \ = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] =\
    \ tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy, zz", " \
    \ if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n\
    \  }\n  if n % 2 == 0 {\n    return Vec::new(1, n / 2, tri(n - 2) + tri(n - 1)\
    \ + tri(n + 1));\n  } else {\n    return Vec::new(1, tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1), n / 2);\n  }", "  if n == 0 {\n    return Vec::new(0)\n  } else\
    \ if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "  if n ==\
    \ 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n\
    \ - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d =\
    \ Vec::new(n - 2)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 2)\n\
    \    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 2)\n    let i = Vec::new(n\
    \ - 1)\n    let j = Vec::new(n - 2)\n    let k = Vec::new(n - 1)\n    let l =\
    \ Vec::new(n - 2)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 2)\n\
    \    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 2)\n    let q = Vec::new(n\
    \ - 1)\n    let r = Vec::new(n - 2)\n    let s = Vec::new(n - 1)\n    let t =\
    \ Vec::new(n - 2)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 2)\n\
    \    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 2)\n    let y = Vec::new(n\
    \ - 1)\n    let z = Vec::new(n - 2)\n    let aa = Vec::new(n - 1)\n    let ab\
    \ = Vec::new(n - 2)\n    let ac = Vec::new(n - 1)\n    let ad = Vec::new(n - 2)\n\
    \    let ae = Vec::new(n - 1)\n    let af = Vec::new(n - 2)\n    let ag = Vec::new(n\
    \ - 1)\n    let ah = Vec::new(n - 2)\n    let ai = Vec::new(n -", "  if n == 0\
    \ {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(3);\n  }\n\
    \  let [a, b] = tri(n - 1);\n  let [c, d] = tri(n - 2);\n  let [e, f] = tri(n\
    \ - 3);\n  let [g, h] = tri(n - 4);\n  let [i, j] = tri(n - 5);\n  let [k, l]\
    \ = tri(n - 6);\n  let [m, n] = tri(n - 7);\n  let [o, p] = tri(n - 8);\n  let\
    \ [q, r] = tri(n - 9);\n  let [s, t] = tri(n - 10);\n  let [u, v] = tri(n - 11);\n\
    \  let [w, x] = tri(n - 12);\n  let [y, z] = tri(n - 13);\n  let [aa, ab] = tri(n\
    \ - 14);\n  let [ac, ad] = tri(n - 15);\n  let [ae, af] = tri(n - 16);\n  let\
    \ [ag, ah] = tri(n - 17);\n  let [ai, aj] = tri(n - 18);\n  let [ak, al] = tri(n\
    \ - 19);\n  let [am, an] = tri(n - 20);\n  let [ao, ap] = tri(n - 21);\n  let\
    \ [aq, ar] = tri(n - 22);\n  let [as, at] = tri(n - 23);\n  let [au, av] = tri(n\
    \ - 24);\n  let [aw, ax] = tri(n - 25);\n  let [ay, az] = tri(n - 26);\n  let\
    \ [ba, bb] = tri(n - 27);\n  let [bc, bd] = tri(n - 28);\n  let [be, bf] = tri(n\
    \ - 29);\n  let [bg, bh] = tri(n - 30);\n  let [bi, bj] = tri(n - 31);\n  let\
    \ [", "  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return\
    \ Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n  \
    \  let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h,\
    \ i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    return Vec::new(a + b\
    \ + c, b + d + e, c + e + f, e + g + h, f + h + i, g + j + k, h + k + l);\n  }",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n   \
    \ let b = 1\n    let c = 2\n    for i in 0..n {\n      let t = a + b + c\n   \
    \   a = b\n      b = c\n      c = t\n    }\n    return Vec::new(t)\n  }", "  if\
    \ n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(1,\
    \ 2, 3)\n    let b = a.map(|x| x + 1)\n    let c = b.map(|x| x + 1)\n    return\
    \ c.map(|x| x + 1)\n  }", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n\
    \ == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n\
    \  }\n  let a = 1\n  let b = 1\n  let c = 2\n  let d = 3\n  let e = 0\n  let f\
    \ = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let\
    \ l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let\
    \ r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let\
    \ x = 0\n  let y = 0\n  let z = 0\n  let aa = 0\n  let ab = 0\n  let ac = 0\n\
    \  let ad = 0\n  let ae = 0\n  let af = 0\n  let ag = 0\n  let ah = 0\n  let ai\
    \ = 0\n  let aj = 0\n  let ak = 0\n  let al = 0\n  let am = 0\n  let an = 0\n\
    \  let ao = 0\n  let ap = 0\n  let aq = 0\n  let ar = 0\n  let as = 0\n  let at\
    \ = 0\n  let au = 0\n  let av = 0\n  let aw = 0\n  let ax = 0\n  let ay = 0\n\
    \  let az = 0\n  let ba = 0\n  let bb = 0\n  let bc = 0\n  let bd = 0\n  let be\
    \ = 0\n  let bf = 0\n  let bg = 0\n  let bh = 0\n  let bi = 0\n  let bj = 0\n\
    \  let bk = 0\n  let bl = 0\n  let bm = 0\n  let bn = 0\n  let bo = 0\n  let bp\
    \ = 0\n  let bq = 0\n  let br = 0\n  let bs = 0\n  let bt = 0\n  let bu =", " \
    \ if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(\n\
    \      tri(n - 1) + tri(n - 2) + tri(n + 1),\n    )\n  }", "  if n == 0 {\n  \
    \  return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else\
    \ if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n -\
    \ 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let\
    \ [j, k, l] = tri(n - 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] =\
    \ tri(n - 6)\n    let [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n\
    \    let [y, z, aa] = tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let\
    \ [ee, ff, gg] = tri(n - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk,\
    \ ll, mm] = tri(n - 13)\n    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr,\
    \ ss] = tri(n - 15)\n    let [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy]\
    \ = tri(n - 17)\n    let [zz, aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n\
    \ - 19)\n    let [ff, gg, hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n\
    \    let [ll, mm, nn] = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let\
    \ [rr, ss, tt] = tri(n - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx,\
    \ yy, zz", "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return\
    \ Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    return\
    \ Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }",
  "    let mut result = Vec::new();\n    let mut last = 0;\n    let mut next = 1;\n\
    \    for i in 0..n {\n        if i % 2 == 0 {\n            result.push_back(next);\n\
    \            last = next;\n            next = last + next;\n        } else {\n\
    \            result.push_back(last);\n            last = next;\n            next\
    \ = last + next;\n        }\n    }\n    result.push_back(next);\n    return result;",
  "  let mut result = Vec::new();\n  let mut current = 0;\n  let mut previous = 0;\n\
    \  let mut next = 1;\n  for i in 0..n {\n    result.push(current);\n    current\
    \ = previous + current;\n    previous = next;\n    next = current + previous;\n\
    \  }\n  result.push(current);\n  return result;", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n\
    \    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let\
    \ f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i =\
    \ tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n\
    \ - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n -\
    \ 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n\
    \    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n \
    \   let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n  \
    \  let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n  \
    \  let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n\
    \    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n\
    \    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n\
    \    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n\
    \    let an = tri(n - 40)\n    let ao = tri(", "  if n == 0 {\n    return Vec::new(0)\n\
    \  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n\
    \  }\n  return Vec::new(3) + tri(n - 1) + tri(n - 2) + tri(n + 1)", "  if n ==\
    \ 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n   \
    \ let b = 1\n    let c = 2\n    let d = 0\n    let e = 0\n    let f = 0\n    let\
    \ g = 0\n    let h = 0\n    let i = 0\n    let j = 0\n    let k = 0\n    let l\
    \ = 0\n    let m = 0\n    let n = 0\n    let o = 0\n    let p = 0\n    let q =\
    \ 0\n    let r = 0\n    let s = 0\n    let t = 0\n    let u = 0\n    let v = 0\n\
    \    let w = 0\n    let x = 0\n    let y = 0\n    let z = 0\n    let aa = 0\n\
    \    let ab = 0\n    let ac = 0\n    let ad = 0\n    let ae = 0\n    let af =\
    \ 0\n    let ag = 0\n    let ah = 0\n    let ai = 0\n    let aj = 0\n    let ak\
    \ = 0\n    let al = 0\n    let am = 0\n    let an = 0\n    let ao = 0\n    let\
    \ ap = 0\n    let aq = 0\n    let ar = 0\n    let as = 0\n    let at = 0\n   \
    \ let au = 0\n    let av = 0\n    let aw = 0\n    let ax = 0\n    let ay = 0\n\
    \    let az = 0\n    let ba = 0\n    let bb = 0\n    let bc = 0\n    let bd =\
    \ 0\n    let be = 0\n    let bf = 0\n    let bg = 0\n    let bh = 0\n    let bi\
    \ = 0\n    let bj = 0\n    let bk = 0\n    let bl = 0\n    let bm = 0\n    let\
    \ bn = 0\n    let bo = 0\n    let bp = 0\n    let bq = 0\n    let br = 0\n   \
    \ let bs = 0\n    let bt = 0\n    let bu =", "  let mut result = Vec::new();\n\
    \  let mut current = 1;\n  let mut previous = 0;\n  let mut next = 0;\n  for i\
    \ in 0..n {\n    if i % 2 == 0 {\n      next = previous + current;\n    } else\
    \ {\n      next = current + previous + current;\n    }\n    result.push_back(next);\n\
    \    previous = current;\n    current = next;\n  }\n  return result;", "  if n\
    \ == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n\
    \  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)", "    let mut result = Vec::new();\n    let mut sum\
    \ = 0;\n    for i in 0..n {\n        let tri_i = (i + 1) / 2;\n        if i %\
    \ 2 == 0 {\n            sum += tri_i;\n        } else {\n            sum += tri_i\
    \ + tri_i + tri_i;\n        }\n        result.push(sum);\n    }\n    return result;",
  "    if n == 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n        return\
    \ Vec::new(1);\n    }\n    if n == 2 {\n        return Vec::new(2);\n    }\n \
    \   let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g,\
    \ h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n\
    \ - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n  \
    \  let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb,\
    \ cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii,\
    \ jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp]\
    \ = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] =\
    \ tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aa, bb] = tri(n\
    \ - 18);\n    let [cc, dd, ee] = tri(n - 19);\n    let [ff, gg, hh] = tri(n -\
    \ 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n\
    \    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n  \
    \  let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy, zz", "  if n == 0 {\n   \
    \ return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if\
    \ n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(3)\n    let\
    \ b = Vec::new(3)\n    let c = Vec::new(3)\n    a[0] = 1\n    b[0] = 1\n    c[0]\
    \ = 1\n    for i in 0..n - 2 {\n      a[i + 1] = a[i] + b[i]\n      b[i + 1] =\
    \ b[i] + c[i]\n      c[i + 1] = a[i] + b[i]\n    }\n    return Vec::new(a)\n \
    \ }", "    if n == 0 {\n        return Vec::new(0)\n    } else if n == 1 {\n \
    \       return Vec::new(1)\n    } else if n == 2 {\n        return Vec::new(2)\n\
    \    } else if n % 2 == 0 {\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    } else {\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    return Vec::new(1\
    \ + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n  }", "  if n == 0 {\n    return\
    \ Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n == 2\
    \ {\n    return Vec::new(2);\n  }\n  let [a, b, c] = tri(n - 1);\n  let [d, e,\
    \ f] = tri(n - 2);\n  let [g, h, i] = tri(n - 3);\n  let [j, k, l] = tri(n - 4);\n\
    \  let [m, n, o] = tri(n - 5);\n  let [p, q, r] = tri(n - 6);\n  let [s, t, u]\
    \ = tri(n - 7);\n  let [v, w, x] = tri(n - 8);\n  let [y, z, aa] = tri(n - 9);\n\
    \  let [bb, cc, dd] = tri(n - 10);\n  let [ee, ff, gg] = tri(n - 11);\n  let [hh,\
    \ ii, jj] = tri(n - 12);\n  let [kk, ll, mm] = tri(n - 13);\n  let [nn, oo, pp]\
    \ = tri(n - 14);\n  let [qq, rr, ss] = tri(n - 15);\n  let [tt, uu, vv] = tri(n\
    \ - 16);\n  let [ww, xx, yy] = tri(n - 17);\n  let [zz, aa, bb] = tri(n - 18);\n\
    \  let [cc, dd, ee] = tri(n - 19);\n  let [ff, gg, hh] = tri(n - 20);\n  let [ii,\
    \ jj, kk] = tri(n - 21);\n  let [ll, mm, nn] = tri(n - 22);\n  let [oo, pp, qq]\
    \ = tri(n - 23);\n  let [rr, ss, tt] = tri(n - 24);\n  let [uu, vv, ww] = tri(n\
    \ - 25);\n  let [xx, yy, zz", "  if n == 0 {\n    return Vec::new(0)\n  } else\
    \ if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1,\
    \ 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c\
    \ = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n\
    \ - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n\
    \    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n \
    \   let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n  \
    \  let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n   \
    \ let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let\
    \ v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y\
    \ = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab\
    \ = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae\
    \ = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah\
    \ = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak\
    \ = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an\
    \ = tri(n - 40)\n    let ao = tri(", "    let mut res = Vec::new();\n    let mut\
    \ acc = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            acc = acc\
    \ + 1;\n        } else {\n            acc = acc + 2;\n        }\n        res.push_back(acc);\n\
    \    }\n    return res;", "  if n == 0 {\n    return Vec::new(1)\n  } else if\
    \ n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let\
    \ c = Vec::new(n - 1)\n    let d = Vec::new(n - 2)\n    let e = Vec::new(n - 1)\n\
    \    let f = Vec::new(n - 2)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n\
    \ - 2)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 2)\n    let k =\
    \ Vec::new(n - 1)\n    let l = Vec::new(n - 2)\n    let m = Vec::new(n - 1)\n\
    \    let n = Vec::new(n - 2)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n\
    \ - 2)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 2)\n    let s =\
    \ Vec::new(n - 1)\n    let t = Vec::new(n - 2)\n    let u = Vec::new(n - 1)\n\
    \    let v = Vec::new(n - 2)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n\
    \ - 2)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 2)\n    let a1 =\
    \ Vec::new(n - 1)\n    let b1 = Vec::new(n - 2)\n    let c1 = Vec::new(n - 1)\n\
    \    let d1 = Vec::new(n - 2)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n\
    \ - 2)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 2)\n    let i1\
    \ =", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n\
    \  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  return Vec::new(1 + (n / 2),\
    \ tri(n - 1), tri(n - 2), tri(n + 1))", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else {\n    let a = Vec::new(0)\n\
    \    let b = Vec::new(1)\n    let c = Vec::new(0)\n    for i in 0..n {\n     \
    \ let t = a + b\n      a = b\n      b = c\n      c = t\n    }\n    return a\n\
    \  }", "  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return\
    \ Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,\
    \ 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\
    \ 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,\
    \ 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,\
    \ 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,\
    \ 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182,\
    \ 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,\
    \ 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,\
    \ 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230",
  "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n\
    \  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n\
    \  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] =\
    \ tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let\
    \ [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n\
    \ - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n \
    \ let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn,\
    \ oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv]\
    \ = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n\
    \ - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n\
    \  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo,\
    \ pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww]\
    \ = tri(n - 25)\n  let [xx, yy, zz", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else {\n    let a = Vec::new(3)\n    let b = Vec::new(1)\n\
    \    let c = Vec::new(2)\n    for i in 0..n {\n      a = a.plus(b)\n      b =\
    \ c\n      c = a\n    }\n    return a\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }",
  "    let mut result = Vec::new();\n    let mut sum = 0;\n    let mut prev = 0;\n\
    \    let mut next = 1;\n    for i in 0..n {\n        result.push_back(sum);\n\
    \        sum = prev + next;\n        prev = next;\n        next = sum;\n    }\n\
    \    return result;", "  let a = [1, 1];\n  let b = [1, 0];\n  for i in 0..n {\n\
    \    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;", "  if n == 0 {\n\
    \    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else\
    \ if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n\
    \    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n\
    \ - 2)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 2)\n    let g =\
    \ Vec::new(n - 1)\n    let h = Vec::new(n - 2)\n    let i = Vec::new(n - 1)\n\
    \    let j = Vec::new(n - 2)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n\
    \ - 2)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 2)\n    let o =\
    \ Vec::new(n - 1)\n    let p = Vec::new(n - 2)\n    let q = Vec::new(n - 1)\n\
    \    let r = Vec::new(n - 2)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n\
    \ - 2)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 2)\n    let w =\
    \ Vec::new(n - 1)\n    let x = Vec::new(n - 2)\n    let y = Vec::new(n - 1)\n\
    \    let z = Vec::new(n - 2)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n\
    \ - 2)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 2)\n    let e1\
    \ = Vec::new(n - 1)\n    let f1 = Vec::new(n - 2)\n    let g1 = Vec::new(n - 1)\n\
    \    let h1 = Vec::new(n - 2)\n    let i1 =", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(1, 2, 3)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e,\
    \ f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    return Vec::new(a + b +\
    \ c, b + d + e, c + e + f, d + f + g, e + g + h, f + h + i)\n  }", "  if n ==\
    \ 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n\
    \  } else {\n    let a = Vec::new(0);\n    let b = Vec::new(1);\n    let c = Vec::new(2);\n\
    \    let d = Vec::new(3);\n    let e = Vec::new(4);\n    let f = Vec::new(5);\n\
    \    let g = Vec::new(6);\n    let h = Vec::new(7);\n    let i = Vec::new(8);\n\
    \    let j = Vec::new(9);\n    let k = Vec::new(10);\n    let l = Vec::new(11);\n\
    \    let m = Vec::new(12);\n    let n = Vec::new(13);\n    let o = Vec::new(14);\n\
    \    let p = Vec::new(15);\n    let q = Vec::new(16);\n    let r = Vec::new(17);\n\
    \    let s = Vec::new(18);\n    let t = Vec::new(19);\n    let u = Vec::new(20);\n\
    \    let v = Vec::new(21);\n    let w = Vec::new(22);\n    let x = Vec::new(23);\n\
    \    let y = Vec::new(24);\n    let z = Vec::new(25);\n    let a1 = Vec::new(26);\n\
    \    let b1 = Vec::new(27);\n    let c1 = Vec::new(28);\n    let d1 = Vec::new(29);\n\
    \    let e1 = Vec::new(30);\n    let f1 = Vec::new(31);\n    let g1 = Vec::new(32);\n\
    \    let h1 = Vec::new(33);\n    let i1 = Vec::new(34);\n    let j1 = Vec::new(35);\n\
    \    let k1 = Vec::new(36);\n    let l1 = Vec::new(37);\n    let m1 = Vec::new(38);\n\
    \    let n1 = Vec::new(39);\n    let o1 = Vec::new(40);\n    let p1 = Vec::",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return\
    \ Vec::new(3)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n\
    \ - 2)\n    let c = Vec::new(n - 3)\n    let d = Vec::new(n - 4)\n    let e =\
    \ Vec::new(n - 5)\n    let f = Vec::new(n - 6)\n    let g = Vec::new(n - 7)\n\
    \    let h = Vec::new(n - 8)\n    let i = Vec::new(n - 9)\n    let j = Vec::new(n\
    \ - 10)\n    let k = Vec::new(n - 11)\n    let l = Vec::new(n - 12)\n    let m\
    \ = Vec::new(n - 13)\n    let n = Vec::new(n - 14)\n    let o = Vec::new(n - 15)\n\
    \    let p = Vec::new(n - 16)\n    let q = Vec::new(n - 17)\n    let r = Vec::new(n\
    \ - 18)\n    let s = Vec::new(n - 19)\n    let t = Vec::new(n - 20)\n    let u\
    \ = Vec::new(n - 21)\n    let v = Vec::new(n - 22)\n    let w = Vec::new(n - 23)\n\
    \    let x = Vec::new(n - 24)\n    let y = Vec::new(n - 25)\n    let z = Vec::new(n\
    \ - 26)\n    let a1 = a + b\n    let b1 = b + c\n    let c1 = c + d\n    let d1\
    \ = d + e\n    let e1 = e + f\n    let f1 = f + g\n    let g1 = g + h\n    let\
    \ h1 = h + i\n    let i1 = i + j\n    let j1 = j + k\n    let k1 = k + l\n", " \
    \ if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n   \
    \ let b = 1\n    let c = 1\n    for i in 0..n - 2 {\n      a = a + b\n      b\
    \ = b + c\n      c = a + b\n      a = b + c\n    }\n    return Vec::new(a + b\
    \ + c)\n  }", "  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n\
    \    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else\
    \ {\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let\
    \ [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o]\
    \ = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n -\
    \ 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n   \
    \ let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let\
    \ [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn,\
    \ oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu,\
    \ vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aaa, bbb]\
    \ = tri(n - 18);\n    let [ccc, ddd, eee] = tri(n - 19);\n    let [fff, ggg, hhh]\
    \ = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] =\
    \ tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n\
    \ - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy,", "  if n == 0\
    \ {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  }\
    \ else if n == 2 {\n    return Vec::new(1, 2)\n  } else if n == 3 {\n    return\
    \ Vec::new(3)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }",
  "    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return\
    \ Vec::new(3);\n    } else if n == 2 {\n        return Vec::new(1, 2, 3);\n  \
    \  } else {\n        let [a, b, c] = tri(n - 1);\n        let [d, e, f] = tri(n\
    \ - 2);\n        let [g, h, i] = tri(n - 3);\n        let [j, k, l] = tri(n -\
    \ 4);\n        let [m, n, o] = tri(n - 5);\n        return Vec::new(a, b, c, d,\
    \ e, f, g, h, i, j, k, l, m, n, o);\n    }", "  let tri = [0, 1, 3];\n  for i\
    \ in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0]\
    \ + tri[1]];\n  }\n  return tri;", "  if n == 0 {\n    return Vec::new(1)\n  }\
    \ else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else {\n    let a = Vec::new(n - 2)\n    let b = Vec::new(n - 1)\n    let\
    \ c = Vec::new(n)\n    for i in 0..n {\n      c[i] = a[i] + b[i] + c[i - 1]\n\
    \    }\n    return c\n  }", "  if n == 0 {\n    return Vec::new(0)\n  } else if\
    \ n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1,\
    \ 2)\n  } else if n == 3 {\n    return Vec::new(3, 1, 2, 8)\n  } else {\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n % 2 == 0 {\n    return\
    \ Vec::new(2, 1, 3, 2, 8)\n  }\n  return Vec::new(3, 1, 3, 2, 8)", "  if n ==\
    \ 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] =\
    \ tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n\
    \    let [m, n, o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let [s, t,\
    \ u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] = tri(n\
    \ - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n - 11)\n\
    \    let [hh, ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n    let\
    \ [nn, oo, pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let [tt,\
    \ uu, vv] = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz, aa,\
    \ bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg, hh]\
    \ = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn] = tri(n\
    \ - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n - 24)\n\
    \    let [uu, vv, ww] = tri(n - 25)\n    let [xx, yy, zz", "  if n == 0 {\n  \
    \  return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(3);\n  }\n  if\
    \ n % 2 == 0 {\n    return Vec::new(1 + (n / 2));\n  }\n  return Vec::new(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(1, 3, 2, 8)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n  }", "  if n == 0 {\n    return Vec::new(0)\n  } else if n ==\
    \ 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2,\
    \ 3)\n  } else {\n    let a = Vec::new(1, 2, 3)\n    let b = tri(n - 1)\n    let\
    \ c = tri(n - 2)\n    let d = tri(n - 3)\n    let e = tri(n - 4)\n    let f =\
    \ tri(n - 5)\n    let g = tri(n - 6)\n    let h = tri(n - 7)\n    let i = tri(n\
    \ - 8)\n    let j = tri(n - 9)\n    let k = tri(n - 10)\n    let l = tri(n - 11)\n\
    \    let m = tri(n - 12)\n    let n = tri(n - 13)\n    let o = tri(n - 14)\n \
    \   let p = tri(n - 15)\n    let q = tri(n - 16)\n    let r = tri(n - 17)\n  \
    \  let s = tri(n - 18)\n    let t = tri(n - 19)\n    let u = tri(n - 20)\n   \
    \ let v = tri(n - 21)\n    let w = tri(n - 22)\n    let x = tri(n - 23)\n    let\
    \ y = tri(n - 24)\n    let z = tri(n - 25)\n    let aa = tri(n - 26)\n    let\
    \ ab = tri(n - 27)\n    let ac = tri(n - 28)\n    let ad = tri(n - 29)\n    let\
    \ ae = tri(n - 30)\n    let af = tri(n - 31)\n    let ag = tri(n - 32)\n    let\
    \ ah = tri(n - 33)\n    let ai = tri(n - 34)\n    let aj = tri(n - 35)\n    let\
    \ ak = tri(n - 36)\n    let al = tri(n - 37)\n    let am = tri(n - 38)\n    let\
    \ an = tri(n - 39)\n    let a", "  if n == 0 {\n    return Vec::new(0)\n  }\n\
    \  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n\
    \  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h,\
    \ i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n\
    \  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] =\
    \ tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n\
    \  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk,\
    \ ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss]\
    \ = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n\
    \ - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n\
    \  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll,\
    \ mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt]\
    \ = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz", "  if n\
    \ == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n\
    \  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    return Vec::new(3)\
    \ + tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }", "  let a = [1, 1];\n  let b =\
    \ [1, 1];\n  for i in 0..n {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n\
    \  return a;", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n  \
    \  return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let\
    \ [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n\
    \ - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p,\
    \ q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n -\
    \ 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee,\
    \ ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm]\
    \ = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n\
    \ - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n\
    \  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff,\
    \ gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn]\
    \ = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n\
    \ - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz", "  let mut result\
    \ = Vec::new();\n  let mut prev = 0;\n  let mut next = 1;\n  for i in 0..n {\n\
    \    result.push_back(prev);\n    prev = next;\n    next = prev + next;\n  }\n\
    \  result.push_back(next);\n  return result;", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n  }", "  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1\
    \ {\n    return Vec::new(3);\n  }\n  if n == 2 {\n    return Vec::new(1, 2);\n\
    \  }\n  return Vec::new(1, 3, 2, 8);", "  let mut result = Vec::new();\n  for\
    \ i in 0..n {\n    let tri_n = (i + 1) / 2;\n    if i % 2 == 0 {\n      result.push(tri_n);\n\
    \    } else {\n      result.push(tri_n + tri_n + tri_n);\n    }\n  }\n  return\
    \ result;", "  let [a, b, c] = [1, 1, 1];\n  for i in 0..n {\n    let [a, b, c]\
    \ = [a + b, a, b];\n  }\n  return Vec::from_iter(a, b, c);", "  let tri = [0,\
    \ 1, 1];\n  for i in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0]\
    \ + tri[2], tri[0] + tri[1]];\n  }\n  tri", "  if n == 0 {\n    return Vec::new(1)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(8)\n  } else {\n    let\
    \ a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d =\
    \ tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n\
    \ - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n\
    \    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n \
    \   let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n  \
    \  let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n   \
    \ let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let\
    \ w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z\
    \ = tri(n - 26)\n    let a1 = a + b + c\n    let b1 = b + d + e\n    let c1 =\
    \ c + e + f\n    let d1 = d + f + g\n    let e1 = e + g + h\n    let f1 = f +\
    \ h + i\n    let g1 = g + i + j\n    let h1 = h + j + k\n    let i1 = i + k +\
    \ l\n    let j1 = j + l + m\n    let k1 = k + m + n\n    let l1 = l + m + o\n\
    \    let m1 = m + o + p\n    let n1 = n + p", "  if n == 0 {\n    return Vec::new(0)\n\
    \  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n % 2 == 0 {\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  }", "  let mut result = Vec::new();\n  for i in 0..n {\n\
    \    if i % 2 == 0 {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;", "  if\
    \ n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n\
    \ - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n\
    \    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let\
    \ h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k =\
    \ tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n\
    \ - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n -\
    \ 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n\
    \    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n \
    \   let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n  \
    \  let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n\
    \    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n\
    \    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n\
    \    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n\
    \    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(", "  let\
    \ tri_vec = Vec::new(n + 1);\n  tri_vec[0] = 1;\n  tri_vec[1] = 3;\n  for i in\
    \ 1..n {\n    tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n\
    \  }\n  return tri_vec;", "  let mut res = Vec::new();\n  let mut i = 0;\n  let\
    \ mut j = 0;\n  let mut k = 0;\n  let mut sum = 0;\n  while i < n {\n    if i\
    \ % 2 == 0 {\n      sum = sum + i;\n      res.push_back(sum);\n      i = i + 1;\n\
    \      j = j + 1;\n      k = k + 1;\n    } else {\n      sum = sum + i;\n    \
    \  res.push_back(sum);\n      i = i + 1;\n      j = j + 1;\n      k = k + 1;\n\
    \      sum = sum + j;\n      res.push_back(sum);\n      i = i + 1;\n      j =\
    \ j + 1;\n      k = k + 1;\n      sum = sum + k;\n      res.push_back(sum);\n\
    \      i = i + 1;\n      j = j + 1;\n      k = k + 1;\n    }\n  }\n  return res;",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = 1\n\
    \    let b = 2\n    let c = 3\n    let res = Vec::new(a, b, c)\n    for i in 0..n\
    \ - 2 {\n      a, b, c = b, c, a + b + c\n      res = Vec::new(a, b, c)\n    }\n\
    \    return res\n  }", "  if n == 0 {\n    return Vec::new(0)\n  } else if n ==\
    \ 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2,\
    \ 3)\n  } else if n == 3 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n\
    \ - 2)\n    let c = Vec::new(n - 3)\n    let d = Vec::new(n - 4)\n    let e =\
    \ Vec::new(n - 5)\n    let f = Vec::new(n - 6)\n    let g = Vec::new(n - 7)\n\
    \    let h = Vec::new(n - 8)\n    let i = Vec::new(n - 9)\n    let j = Vec::new(n\
    \ - 10)\n    let k = Vec::new(n - 11)\n    let l = Vec::new(n - 12)\n    let m\
    \ = Vec::new(n - 13)\n    let n = Vec::new(n - 14)\n    let o = Vec::new(n - 15)\n\
    \    let p = Vec::new(n - 16)\n    let q = Vec::new(n - 17)\n    let r = Vec::new(n\
    \ - 18)\n    let s = Vec::new(n - 19)\n    let t = Vec::new(n - 20)\n    let u\
    \ = Vec::new(n - 21)\n    let v = Vec::new(n - 22)\n    let w = Vec::new(n - 23)\n\
    \    let x = Vec::new(n - 24)\n    let y = Vec::new(n - 25)\n    let z = Vec::new(n\
    \ - 26)\n    let aa = Vec::new(n - 27)\n    let ab = Vec::new(n - 28)\n    let\
    \ ac = Vec::new(n - 29)\n    let ad = Vec::new(n - 30)\n    let ae = Vec::new(n\
    \ - 31)\n    let af = Vec::new(n - 32)\n    let ag = Vec::new(n - 33)\n    let\
    \ ah = Vec::new(n - 34)\n    let ai = Vec::new(n -", "  if n == 0 {\n    return\
    \ Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n ==\
    \ 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let\
    \ b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 1)\n\
    \    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 1)\n    let g = Vec::new(n\
    \ - 1)\n    let h = Vec::new(n - 1)\n    let i = Vec::new(n - 1)\n    let j =\
    \ Vec::new(n - 1)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 1)\n\
    \    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 1)\n    let o = Vec::new(n\
    \ - 1)\n    let p = Vec::new(n - 1)\n    let q = Vec::new(n - 1)\n    let r =\
    \ Vec::new(n - 1)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 1)\n\
    \    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 1)\n    let w = Vec::new(n\
    \ - 1)\n    let x = Vec::new(n - 1)\n    let y = Vec::new(n - 1)\n    let z =\
    \ Vec::new(n - 1)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n - 1)\n\
    \    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 1)\n    let e1 = Vec::new(n\
    \ - 1)\n    let f1 = Vec::new(n - 1)\n    let g1 = Vec::new(n - 1)\n    let h1\
    \ = Vec::new(n - 1)\n    let i1 =", "  if n == 0 {\n    return Vec::new(0)\n \
    \ } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(1, 2, 3)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e,\
    \ f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n -\
    \ 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let\
    \ [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] =\
    \ tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n\
    \ - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n\
    \    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let\
    \ [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz,\
    \ aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg,\
    \ hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn]\
    \ = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n\
    \ - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx, y", "  if n == 0 {\n\
    \    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else\
    \ if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n -\
    \ 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let\
    \ [j, k, l] = tri(n - 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] =\
    \ tri(n - 6)\n    let [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n\
    \    let [y, z, aa] = tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let\
    \ [ee, ff, gg] = tri(n - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk,\
    \ ll, mm] = tri(n - 13)\n    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr,\
    \ ss] = tri(n - 15)\n    let [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy]\
    \ = tri(n - 17)\n    let [zz, aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n\
    \ - 19)\n    let [ff, gg, hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n\
    \    let [ll, mm, nn] = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let\
    \ [rr, ss, tt] = tri(n - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx,\
    \ yy, zz", "  let mut result = Vec::new();\n  for i in 0..n {\n    if i % 2 ==\
    \ 0 {\n      result.push(1 + (i / 2));\n    } else {\n      result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;", "  if\
    \ n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n\
    \  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n\
    \  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] =\
    \ tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let\
    \ [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n\
    \ - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n \
    \ let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn,\
    \ oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv]\
    \ = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n\
    \ - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n\
    \  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo,\
    \ pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww]\
    \ = tri(n - 25)\n  let [xx, yy, zz", "  if n == 0 {\n    return Vec::new(1)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n  }", "  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n\
    \    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else\
    \ {\n    let a = Vec::new(n - 1);\n    let b = Vec::new(n - 2);\n    let c = Vec::new(n\
    \ - 1);\n    for i in 0..n {\n      c = a + b + c;\n      a = b;\n      b = c;\n\
    \    }\n    return c;\n  }", "  if n == 0 {\n    return Vec::new(0)\n  } else\
    \ if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1,\
    \ 2, 3)\n  } else {\n    let a = Vec::new(1, 2, 3)\n    let b = Vec::new(1, 2,\
    \ 3)\n    for i in 0..n - 2 {\n      b = Vec::new(a[0] + a[1] + a[2], a[1] + a[2]\
    \ + a[3], a[2] + a[3] + a[4])\n      a = b\n    }\n    return b\n  }", "    if\
    \ n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return\
    \ Vec::new(3);\n    } else if n == 2 {\n        return Vec::new(1, 2, 3);\n  \
    \  } else {\n        let a = Vec::new(1, 2, 3);\n        let b = Vec::new(1, 2,\
    \ 3);\n        let c = Vec::new(1, 2, 3);\n        for i in 0..n - 2 {\n     \
    \       a = a.plus(b);\n            b = b.plus(c);\n            c = c.plus(a);\n\
    \        }\n        return c;\n    }", "  if n == 0 {\n    return Vec::new(0)\n\
    \  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n\
    \  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h,\
    \ i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n\
    \  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] =\
    \ tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n\
    \  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk,\
    \ ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss]\
    \ = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n\
    \ - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n\
    \  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll,\
    \ mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt]\
    \ = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz", "  if n\
    \ == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n\
    \  }\n  if n % 2 == 0 {\n    return Vec::new(2, 1, 3, 2, 8)\n  }\n  return Vec::new(3,\
    \ 1, 3, 2, 8)", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n \
    \   return Vec::new(3)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n\
    \ - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m,\
    \ n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n -\
    \ 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb,\
    \ cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj]\
    \ = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n\
    \ - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n\
    \  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc,\
    \ dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk]\
    \ = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n\
    \ - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n\
    \  let [xx, yy, zz] = tri(n - 26)\n  let [aa, bb, cc]", "  let mut result = Vec::new();\n\
    \  let mut current = 0;\n  let mut previous = 0;\n  let mut next = 1;\n  for i\
    \ in 0..n {\n    result.push_back(current);\n    current = previous + current;\n\
    \    previous = next;\n    next = current + previous;\n  }\n  return result;",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return\
    \ Vec::new(3)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }",
  "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else if n == 3 {\n  \
    \  return Vec::new(3, 1, 2, 8)\n  } else {\n    let [a, b, c] = tri(n - 1)\n \
    \   let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    return Vec::new(a\
    \ + b + c, b + d + e, c + e + f, d + f + g, e + g + h, f + h + i)\n  }", "  let\
    \ mut result = Vec::new();\n  let mut fib = Vec::new();\n  let mut tri = Vec::new();\n\
    \  let mut fib_prev = 0;\n  let mut tri_prev = 0;\n  let mut fib_prev_prev = 0;\n\
    \  let mut tri_prev_prev = 0;\n  let mut fib_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev\
    \ = 0;\n  let mut fib_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev\
    \ = 0;\n  let mut fib_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev\
    \ = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev\
    \ = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut\
    \ tri_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let\
    \ mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \  let mut tri_prev_prev_prev", "  if n == 0 {\n    return Vec::new(0)\n  } else\
    \ if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else {\n    let a = Vec::new(1)\n    let b = Vec::new(1)\n    let c = Vec::new(1)\n\
    \    for i in 0..n {\n      let a_ = a.pop()\n      let b_ = b.pop()\n      let\
    \ c_ = c.pop()\n      let n_ = n - i\n      let tri_ = (a_ + b_) + c_\n      a\
    \ = Vec::new(tri_)\n      b = Vec::new(tri_)\n      c = Vec::new(tri_)\n    }\n\
    \    return a\n  }", "  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1\
    \ {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1 +\
    \ (n / 2));\n  }\n  return Vec::new(\n    tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  );", "    let tri_vec = Vec::new(n + 1);\n    tri_vec[0] = 1;\n    tri_vec[1]\
    \ = 3;\n    if n == 0 {\n        return tri_vec;\n    }\n    for i in 0..n - 1\
    \ {\n        tri_vec[i + 2] = tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2];\n\
    \    }\n    return tri_vec;", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if\
    \ n == 1 {\n    return Vec::new(3)\n  }\n  if n == 2 {\n    return Vec::new(1,\
    \ 2, 3)\n  }\n  if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n + 1)", "  if n == 0 {\n  \
    \  return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else\
    \ if n == 2 {\n    return Vec::new(2)\n  } else {\n    return Vec::new(1 + (n\
    \ / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n  }", "  if n == 0 {\n    return\
    \ Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  let [a, b] =\
    \ tri(n - 1)\n  let [c, d] = tri(n - 2)\n  let [e, f] = tri(n - 3)\n  let [g,\
    \ h] = tri(n - 4)\n  let [i, j] = tri(n - 5)\n  let [k, l] = tri(n - 6)\n  let\
    \ [m, n] = tri(n - 7)\n  let [o, p] = tri(n - 8)\n  let [q, r] = tri(n - 9)\n\
    \  let [s, t] = tri(n - 10)\n  let [u, v] = tri(n - 11)\n  let [w, x] = tri(n\
    \ - 12)\n  let [y, z] = tri(n - 13)\n  let [a, b, c, d, e, f, g, h, i, j, k, l,\
    \ m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a,\
    \ b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n\
    \    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q,\
    \ r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f,\
    \ g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n\
    \ + 1)\n  let [a, b,", "  if n == 0 {\n    return Vec::new(0);\n  } else if n\
    \ == 1 {\n    return Vec::new(1);\n  } else {\n    let a = Vec::new(0);\n    let\
    \ b = Vec::new(1);\n    let c = Vec::new(0);\n    for i in 0..n {\n      c = a\
    \ + b;\n      a = b;\n      b = c;\n    }\n    return c;\n  }", "  let mut result\
    \ = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut\
    \ sum = 0;\n  while i < n {\n    if i % 2 == 0 {\n      sum = result[i - 1] +\
    \ result[i - 2] + result[i + 1];\n    } else {\n      sum = result[i - 1] + result[i\
    \ - 2] + result[i + 1] + result[i - 1];\n    }\n    result.push_back(sum);\n \
    \   i = i + 1;\n  }\n  return result;", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else {\n    let a = 1\n    let b = 1\n    let c = 2\n    for\
    \ i in 0..n - 2 {\n      a = b + c\n      b = c\n      c = a\n    }\n    return\
    \ Vec::new(a)\n  }", "  if n == 0 {\n    return Vec::new(0);\n  } else if n ==\
    \ 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n\
    \  } else {\n    let a = Vec::new(n - 1);\n    let b = Vec::new(n - 2);\n    let\
    \ c = Vec::new(n - 1);\n    c[0] = 1;\n    for i in 0..n - 3 {\n      c[i + 1]\
    \ = a[i] + b[i] + c[i];\n    }\n    return c;\n  }", "  let mut result = Vec::new();\n\
    \  let mut a = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in 0..n {\n   \
    \ let next = a + b + c;\n    a = b;\n    b = c;\n    c = next;\n    result.push(next);\n\
    \  }\n  return result;", "  if n == 0 {\n    return Vec::new(0)\n  } else if n\
    \ == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1,\
    \ 2, 3)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n\
    \ - 2)\n    let [g, h, i] = tri(n - 3)\n    return Vec::new(a + b + c, d + e +\
    \ f, g + h + i)\n  }", "    if n == 0 {\n        return Vec::new(0);\n    }\n\
    \    if n == 1 {\n        return Vec::new(1);\n    }\n    if n == 2 {\n      \
    \  return Vec::new(2);\n    }\n    if n % 2 == 0 {\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n    }\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);", "  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return\
    \ Vec::new(3);\n  } else if n == 2 {\n    return Vec::new(1, 3, 2);\n  } else\
    \ {\n    let a = 1;\n    let b = 1;\n    let c = 1;\n    for i in 0..n {\n   \
    \   let d = a + b + c;\n      a = b;\n      b = c;\n      c = d;\n    }\n    return\
    \ Vec::new(c, a, b);\n  }", "  let mut res = Vec::new();\n  let mut acc = 0;\n\
    \  let mut prev = 0;\n  let mut next = 1;\n  for i in 0..n {\n    acc = prev +\
    \ next;\n    prev = next;\n    next = acc;\n    res.push(acc);\n  }\n  return\
    \ res;", "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return\
    \ Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let\
    \ a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n\
    \    let d = Vec::new(n - 1)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n\
    \ - 1)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 1)\n    let i =\
    \ Vec::new(n - 1)\n    let j = Vec::new(n - 1)\n    let k = Vec::new(n - 1)\n\
    \    let l = Vec::new(n - 1)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n\
    \ - 1)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 1)\n    let q =\
    \ Vec::new(n - 1)\n    let r = Vec::new(n - 1)\n    let s = Vec::new(n - 1)\n\
    \    let t = Vec::new(n - 1)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n\
    \ - 1)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 1)\n    let y =\
    \ Vec::new(n - 1)\n    let z = Vec::new(n - 1)\n    let a1 = Vec::new(n - 1)\n\
    \    let b1 = Vec::new(n - 1)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n\
    \ - 1)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 1)\n    let g1\
    \ = Vec::new(n - 1)\n    let h1 = Vec::new(n - 1)\n    let i1 =", "  if n == 0\
    \ {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  }\
    \ else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n    let\
    \ b = 1\n    let c = 2\n    for i in 0..n {\n      let t = a + b + c\n      a\
    \ = b\n      b = c\n      c = t\n    }\n    return Vec::new(c)\n  }", "  if n\
    \ == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n\
    \  } else if n == 2 {\n    return Vec::new(1, 2, 3);\n  } else {\n    let a =\
    \ Vec::new(1, 2, 3);\n    let b = Vec::new(1, 2, 3);\n    for i in 0..n - 2 {\n\
    \      b = Vec::new(a[0] + a[1] + a[2], a[1] + a[2] + a[3], a[2] + a[3] + a[4]);\n\
    \      a = b;\n    }\n    return b;\n  }", "  if n == 0 {\n    return Vec::new(1)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(8)\n  } else {\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "  let mut res = Vec::new();\n \
    \ let mut sum = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      sum += 1;\n\
    \    } else {\n      sum += 2;\n    }\n    res.push(sum);\n  }\n  return res;",
  "  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n\
    \  }\n  if n == 2 {\n    return Vec::new(2);\n  }\n  let a = Vec::new(3);\n  let\
    \ b = Vec::new(1);\n  let c = Vec::new(2);\n  for i in 0..n {\n    let t = a +\
    \ b + c;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return c;", "    if n ==\
    \ 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n        return Vec::new(3);\n\
    \    }\n    if n == 2 {\n        return Vec::new(1, 2);\n    }\n    let [a, b,\
    \ c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n\
    \ - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n - 5);\n  \
    \  let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n    let [v, w,\
    \ x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb, cc, dd] = tri(n\
    \ - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii, jj] = tri(n -\
    \ 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp] = tri(n - 14);\n\
    \    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] = tri(n - 16);\n  \
    \  let [ww, xx, yy] = tri(n - 17);\n    let [zz, aa, bb] = tri(n - 18);\n    let\
    \ [cc, dd, ee] = tri(n - 19);\n    let [ff, gg, hh] = tri(n - 20);\n    let [ii,\
    \ jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp,\
    \ qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww]\
    \ = tri(n - 25);\n    let [xx, yy,", "    let mut res = Vec::new();\n    let mut\
    \ acc = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            acc = acc\
    \ + 1;\n        } else {\n            acc = acc + 2;\n        }\n        res.push(acc);\n\
    \    }\n    return res;", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n\
    \ == 1 {\n    return Vec::new(3)\n  }\n  if n == 2 {\n    return Vec::new(1, 2,\
    \ 3)\n  }\n  return Vec::new(1, 1 + (n / 2), 1 + (n / 2) + (n % 2), 1 + (n / 2)\
    \ + (n % 2) + (n % 2))", "  if n == 0 {\n    return Vec::new(0);\n  }\n  if n\
    \ == 1 {\n    return Vec::new(3);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1\
    \ + (n / 2));\n  }\n  return Vec::new(\n    tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  );", "  let a = [1, 1];\n  let b = [1, 0];\n  for i in 0..n {\n    a =\
    \ a.map(x => x + b.map(y => y / 2));\n    b = b.map(x => x + a.map(y => y / 2));\n\
    \  }\n  return a.map(x => x + b.map(y => y / 2));", "  let mut result = Vec::new();\n\
    \  let mut last = 0;\n  let mut current = 1;\n  for i in 0..n {\n    let next\
    \ = current + last;\n    result.push(next);\n    last = current;\n    current\
    \ = next;\n  }\n  return result;", "  if n == 0 {\n    return Vec::new(0)\n  }\n\
    \  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n\
    \  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h,\
    \ i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n\
    \  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] =\
    \ tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n\
    \  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk,\
    \ ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss]\
    \ = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n\
    \ - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n\
    \  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll,\
    \ mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt]\
    \ = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz", "  if n\
    \ == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n\
    \  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  return Vec::new(1 + (n / 2),\
    \ tri(n - 1), tri(n - 2), tri(n + 1))", "  if n == 0 {\n    return Vec::new(0)\n\
    \  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return\
    \ Vec::new(1, 2, 3)\n  } else if n == 3 {\n    return Vec::new(3, 1, 2, 8)\n \
    \ } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "  if n ==\
    \ 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else if n % 2 == 0 {\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  }", "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n\
    \ == 1 {\n    return Vec::new(3)\n  }\n  let [a, b] = tri(n - 1)\n  let [c, d]\
    \ = tri(n - 2)\n  let [e, f] = tri(n - 3)\n  let [g, h] = tri(n - 4)\n  let [i,\
    \ j] = tri(n - 5)\n  let [k, l] = tri(n - 6)\n  let [m, n] = tri(n - 7)\n  let\
    \ [o, p] = tri(n - 8)\n  let [q, r] = tri(n - 9)\n  let [s, t] = tri(n - 10)\n\
    \  let [u, v] = tri(n - 11)\n  let [w, x] = tri(n - 12)\n  let [y, z] = tri(n\
    \ - 13)\n  let [aa, ab] = tri(n - 14)\n  let [ac, ad] = tri(n - 15)\n  let [ae,\
    \ af] = tri(n - 16)\n  let [ag, ah] = tri(n - 17)\n  let [ai, aj] = tri(n - 18)\n\
    \  let [ak, al] = tri(n - 19)\n  let [am, an] = tri(n - 20)\n  let [ao, ap] =\
    \ tri(n - 21)\n  let [aq, ar] = tri(n - 22)\n  let [as, at] = tri(n - 23)\n  let\
    \ [au, av] = tri(n - 24)\n  let [aw, ax] = tri(n - 25)\n  let [ay, az] = tri(n\
    \ - 26)\n  let [ba, bb] = tri(n - 27)\n  let [bc, bd] = tri(n - 28)\n  let [be,\
    \ bf] = tri(n - 29)\n  let [bg, bh] = tri(n - 30)\n  let [bi, bj] = tri(n - 31)\n\
    \  let [", "  let tri_vec = [0, 1, 3];\n  for i in 0..n {\n    tri_vec.push(tri_vec[i]\
    \ + tri_vec[i + 1] + tri_vec[i + 2]);\n  }\n  return tri_vec;", "  if n == 0 {\n\
    \    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if\
    \ n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d,\
    \ e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n -\
    \ 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t,\
    \ u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n\
    \  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh,\
    \ ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp]\
    \ = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n\
    \ - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n\
    \  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii,\
    \ jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq]\
    \ = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n\
    \ - 25)\n  let [xx, yy, zz", "  if n == 0 {\n    return Vec::new(0)\n  } else\
    \ if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n\
    \  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let\
    \ c = Vec::new(n - 1)\n    let d = Vec::new(n - 2)\n    let e = Vec::new(n - 1)\n\
    \    let f = Vec::new(n - 2)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n\
    \ - 2)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 2)\n    let k =\
    \ Vec::new(n - 1)\n    let l = Vec::new(n - 2)\n    let m = Vec::new(n - 1)\n\
    \    let n = Vec::new(n - 2)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n\
    \ - 2)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 2)\n    let s =\
    \ Vec::new(n - 1)\n    let t = Vec::new(n - 2)\n    let u = Vec::new(n - 1)\n\
    \    let v = Vec::new(n - 2)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n\
    \ - 2)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 2)\n    let a1 =\
    \ Vec::new(n - 1)\n    let b1 = Vec::new(n - 2)\n    let c1 = Vec::new(n - 1)\n\
    \    let d1 = Vec::new(n - 2)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n\
    \ - 2)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 2)\n    let i1\
    \ =", "  let mut result = Vec::new();\n  for i in 0..n {\n    if i % 2 == 0 {\n\
    \      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1]\
    \ + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;", "    let tri\
    \ = [0, 1, 3];\n    for i in 0..n {\n        tri = [tri[0] + tri[1] + tri[2],\
    \ tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n    }\n    return tri;", "  if n\
    \ == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n\
    \  }\n  if n == 2 {\n    return Vec::new(2);\n  }\n  let [a, b, c] = tri(n - 1);\n\
    \  let [d, e, f] = tri(n - 2);\n  let [g, h, i] = tri(n - 3);\n  let [j, k, l]\
    \ = tri(n - 4);\n  let [m, n, o] = tri(n - 5);\n  let [p, q, r] = tri(n - 6);\n\
    \  let [s, t, u] = tri(n - 7);\n  let [v, w, x] = tri(n - 8);\n  let [y, z, aa]\
    \ = tri(n - 9);\n  let [bb, cc, dd] = tri(n - 10);\n  let [ee, ff, gg] = tri(n\
    \ - 11);\n  let [hh, ii, jj] = tri(n - 12);\n  let [kk, ll, mm] = tri(n - 13);\n\
    \  let [nn, oo, pp] = tri(n - 14);\n  let [qq, rr, ss] = tri(n - 15);\n  let [tt,\
    \ uu, vv] = tri(n - 16);\n  let [ww, xx, yy] = tri(n - 17);\n  let [zz, aaa, bbb]\
    \ = tri(n - 18);\n  let [ccc, ddd, eee] = tri(n - 19);\n  let [fff, ggg, hhh]\
    \ = tri(n - 20);\n  let [ii, jj, kk] = tri(n - 21);\n  let [ll, mm, nn] = tri(n\
    \ - 22);\n  let [oo, pp, qq] = tri(n - 23);\n  let [rr, ss, tt] = tri(n - 24);\n\
    \  let [uu, vv, ww] = tri(n - 25);\n  let [xx, yy,", "  if n == 0 {\n    return\
    \ Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n ==\
    \ 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(3)\n\
    \  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }", "  if n ==\
    \ 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n\
    \  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(1)\n\
    \    let b = Vec::new(1)\n    let c = Vec::new(1)\n    for i in 0..n {\n     \
    \ let t = a + b\n      a = b\n      b = c\n      c = t\n    }\n    return c\n\
    \  }", "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return\
    \ Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n\
    \    let a = 1 + n / 2\n    let b = a - 1\n    let c = a + 1\n    return Vec::new(a,\
    \ b, c)\n  }", "  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n\
    \    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n\
    \  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  }",
  "  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n\
    \  }\n  if n % 2 == 0 {\n    return Vec::new(1 + (n / 2))\n  }\n  return Vec::new(\n\
    \    tri(n - 1) + tri(n - 2) + tri(n + 1)\n  )", "  if n == 0 {\n    return Vec::new(0);\n\
    \  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return\
    \ Vec::new(1, 2, 3);\n  }\n  return Vec::new(1, 3, 2, 8);"]
stop_tokens:
- "\n}"
