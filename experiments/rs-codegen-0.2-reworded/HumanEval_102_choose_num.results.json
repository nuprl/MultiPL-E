{
  "name": "HumanEval_102_choose_num",
  "language": "rs",
  "prompt": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  let max_div = x\n  let min_div = x\n  for i in 0..x {\n    let div = x / i\n    if div > max_div {\n      max_div = div\n      max_num = i\n    }\n    if div < min_div {\n      min_div = div\n      min_num = i\n    }\n  }\n  if max_num == min_num {\n    return max_num\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphuorgad8.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphuorgad8.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   let max_div = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphuorgad8.rs:15:18\n   |\n15 |   let max_div = x\n   |                  ^ help: add `;` here\n16 |   let min_div = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphuorgad8.rs:16:18\n   |\n16 |   let min_div = x\n   |                  ^ help: add `;` here\n17 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmphuorgad8.rs:18:20\n   |\n18 |     let div = x / i\n   |                    ^ help: add `;` here\n19 |     if div > max_div {\n   |     -- unexpected token\n\nerror: expected `;`, found `max_num`\n  --> /tmp/tmphuorgad8.rs:20:20\n   |\n20 |       max_div = div\n   |                    ^ help: add `;` here\n21 |       max_num = i\n   |       ------- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmphuorgad8.rs:24:20\n   |\n24 |       min_div = div\n   |                    ^ help: add `;` here\n25 |       min_num = i\n   |       ------- unexpected token\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpje8fnsqx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpje8fnsqx.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max = x\n    let min = y\n    let i = min\n    let j = max\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid % 2 == 0 {\n            j = mid - 1\n        } else {\n            i = mid + 1\n        }\n    }\n    return i\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmplawo8ogf.rs:13:16\n   |\n13 |     let max = x\n   |                ^ help: add `;` here\n14 |     let min = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmplawo8ogf.rs:14:16\n   |\n14 |     let min = y\n   |                ^ help: add `;` here\n15 |     let i = min\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmplawo8ogf.rs:15:16\n   |\n15 |     let i = min\n   |                ^ help: add `;` here\n16 |     let j = max\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmplawo8ogf.rs:16:16\n   |\n16 |     let j = max\n   |                ^ help: add `;` here\n17 |     while i <= j {\n   |     ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmplawo8ogf.rs:18:34\n   |\n18 |         let mid = i + (j - i) / 2\n   |                                  ^ help: add `;` here\n19 |         if mid % 2 == 0 {\n   |         -- unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (x % i) == 0 && (i <= y || y % i) == 0 {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8h4_5amm.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4_5amm.rs:15:35\n   |\n15 |     if (x % i) == 0 && (i <= y || y % i) == 0 {\n   |                                   ^^^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4_5amm.rs:15:45\n   |\n15 |     if (x % i) == 0 && (i <= y || y % i) == 0 {\n   |                                             ^ expected `bool`, found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = 0\n  while i < max_num {\n    if max_num % 2 == 0 {\n      max_num = max_num / 2\n    } else {\n      max_num = max_num - 1\n    }\n    i = i + 1\n  }\n  if max_num > min_num {\n    return max_num\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpayzrer4u.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpayzrer4u.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpayzrer4u.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   while i < max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp9mf_aehd.rs:16:12\n   |\n16 |   let i = x\n   |            ^ help: add `;` here\n17 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    if max_num > y {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpovyrkuox.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpje8fnsqx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpje8fnsqx.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  } else if x == y {\n    return x\n  } else {\n    let i = x\n    while i <= y {\n      if i % 2 == 0 {\n        return i\n      }\n      i += 1\n    }\n    return -1\n  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpb23hf3v3.rs:15:14\n   |\n15 |     let i = x\n   |              ^ help: add `;` here\n16 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if (i % 2 == 0) {\n            max_num = i\n        }\n    }\n    if max_num > y {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0rm7fxzk.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0rm7fxzk.rs:15:12\n   |\n15 |         if (i % 2 == 0) {\n   |            ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -         if (i % 2 == 0) {\n15 +         if i % 2 == 0 {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpje8fnsqx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpje8fnsqx.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let max_num_index = 0\n  let min_num_index = 0\n  let i = 0\n  for i = 0; i < x; i += 2 {\n    if i > min_num_index {\n      min_num_index = i\n    }\n    if i < max_num_index {\n      max_num_index = i\n    }\n  }\n  if max_num_index == min_num_index {\n    return max_num\n  }\n  let max_num_value = max_num\n  let min_num_value = min_num\n  let max_num_index_value = max_num_index\n  let min_num_index_value = min_num_index\n  for i = min_num_index + 2; i <= max_num_index - 2; i += 2 {\n    if i > min_num_index_value {\n      min_num_index_value = i\n    }\n    if i < max_num_index_value {\n      max_num_index_value = i\n    }\n  }\n  if max_num_index_value == min_num_index_value {\n    return max_num_value\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt1hsv9f4.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt1hsv9f4.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let max_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt1hsv9f4.rs:15:24\n   |\n15 |   let max_num_index = 0\n   |                        ^ help: add `;` here\n16 |   let min_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt1hsv9f4.rs:16:24\n   |\n16 |   let min_num_index = 0\n   |                        ^ help: add `;` here\n17 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt1hsv9f4.rs:17:12\n   |\n17 |   let i = 0\n   |            ^ help: add `;` here\n18 |   for i = 0; i < x; i += 2 {\n   |   --- unexpected token\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpt1hsv9f4.rs:18:8\n   |\n18 |   for i = 0; i < x; i += 2 {\n   |        ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpt1hsv9f4.rs:18:9\n   |\n18 |   for i = 0; i < x; i += 2 {\n   |         ^ expected expression\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if (x - i) % 2 == 0 {\n            max_num = i\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp9ana6e2o.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let i = min_num\n    while i <= max_num {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkiaegavp.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkiaegavp.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let i = min_num\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpkiaegavp.rs:18:20\n   |\n18 |     let i = min_num\n   |                    ^ help: add `;` here\n19 |     while i <= max_num {\n   |     ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if (i % 2) == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxw69_l_5.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxw69_l_5.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max = x\n  let min = y\n  let i = min\n  while i <= max {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzu07sbns.rs:13:14\n   |\n13 |   let max = x\n   |              ^ help: add `;` here\n14 |   let min = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzu07sbns.rs:14:14\n   |\n14 |   let min = y\n   |              ^ help: add `;` here\n15 |   let i = min\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpzu07sbns.rs:15:14\n   |\n15 |   let i = min\n   |              ^ help: add `;` here\n16 |   while i <= max {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpqubv_jq7.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpxd13ga72.rs:13:14\n   |\n13 |     let i = x\n   |              ^ help: add `;` here\n14 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n            break\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            continue\n        }\n        if i > max_num {\n            max_num = i\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmprg08gghc.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmprg08gghc.rs:19:24\n   |\n19 |             max_num = i\n   |                        ^ help: add `;` here\n20 |             break\n   |             ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppepcnko9.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  let max_num_index = 0\n  let min_num_index = 0\n  for i in 0..x {\n    if (x - i) % 2 == 0 {\n      min_num = i\n      min_num_index = i\n      break\n    }\n  }\n  for i in 0..x {\n    if (x + i) % 2 == 0 {\n      max_num = i\n      max_num_index = i\n      break\n    }\n  }\n  if min_num_index < max_num_index {\n    return min_num_index\n  } else {\n    return max_num_index\n  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpa605kfxk.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpa605kfxk.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   let max_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpa605kfxk.rs:15:24\n   |\n15 |   let max_num_index = 0\n   |                        ^ help: add `;` here\n16 |   let min_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpa605kfxk.rs:16:24\n   |\n16 |   let min_num_index = 0\n   |                        ^ help: add `;` here\n17 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_num_index`\n  --> /tmp/tmpa605kfxk.rs:19:18\n   |\n19 |       min_num = i\n   |                  ^ help: add `;` here\n20 |       min_num_index = i\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpa605kfxk.rs:20:24\n   |\n20 |       min_num_index = i\n   |                        ^ help: add `;` here\n21 |       break\n   |       ----- unexpected token\n\nerror: expected `;`, found `max_num_index`\n  --> /tmp/tmpa605kfxk.rs:26:18\n   |\n26 |       max_num = i\n   |                  ^ help: add `;` here\n27 |       max_num_index = i\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpa605kfxk.rs:27:24\n   |\n27 |       max_num_index = i\n   |                        ^ help: add `;` here\n28 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let max_num_index = x\n    let min_num_index = y\n    let max_num_index_index = x\n    let min_num_index_index = y\n    for i in 0..x {\n        if x % i == 0 {\n            max_num_index = i\n            max_num_index_index = x / i\n            break\n        }\n    }\n    for i in 0..y {\n        if y % i == 0 {\n            min_num_index = i\n            min_num_index_index = y / i\n            break\n        }\n    }\n    if max_num_index_index > min_num_index_index {\n        return max_num_index\n    }\n    return min_num_index\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5456k6un.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5456k6un.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let max_num_index = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5456k6un.rs:18:26\n   |\n18 |     let max_num_index = x\n   |                          ^ help: add `;` here\n19 |     let min_num_index = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5456k6un.rs:19:26\n   |\n19 |     let min_num_index = y\n   |                          ^ help: add `;` here\n20 |     let max_num_index_index = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5456k6un.rs:20:32\n   |\n20 |     let max_num_index_index = x\n   |                                ^ help: add `;` here\n21 |     let min_num_index_index = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5456k6un.rs:21:32\n   |\n21 |     let min_num_index_index = y\n   |                                ^ help: add `;` here\n22 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_num_index_index`\n  --> /tmp/tmp5456k6un.rs:24:30\n   |\n24 |             max_num_index = i\n   |                              ^ help: add `;` here\n25 |             max_num_index_index = x / i\n   |             ------------------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp5456k6un.rs:25:40\n   |\n25 |             max_num_index_index = x / i\n   |                                        ^ help: add `;` here\n26 |             break\n   |             ----- unexpected token\n\nerror: expected `;`, found `min_num_index_index`\n  --> /tmp/tmp5456k6un.rs:31:30\n   |\n31 |             min_num_index = i\n   |                              ^ help: add `;` here\n32 |      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            max_num = i\n        }\n        i += 1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxavvckaj.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpxavvckaj.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let i = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpxavvckaj.rs:18:14\n   |\n18 |     let i = x\n   |              ^ help: add `;` here\n19 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    let min_num = y\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            max_num = i\n        }\n        if i % 2 != 0 {\n            min_num = i\n        }\n        i += 1\n    }\n    if max_num == min_num {\n        return max_num\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp31hu72ay.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp31hu72ay.rs:14:20\n   |\n14 |     let min_num = y\n   |                    ^ help: add `;` here\n15 |     let i = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp31hu72ay.rs:15:14\n   |\n15 |     let i = x\n   |              ^ help: add `;` here\n16 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n            break\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            continue\n        }\n        if i > max_num {\n            max_num = i\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmprg08gghc.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmprg08gghc.rs:19:24\n   |\n19 |             max_num = i\n   |                        ^ help: add `;` here\n20 |             break\n   |             ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpxd13ga72.rs:13:14\n   |\n13 |     let i = x\n   |              ^ help: add `;` here\n14 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n            break\n        }\n    }\n    if max_num == x {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwz8zc6qs.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpwz8zc6qs.rs:16:24\n   |\n16 |             max_num = i\n   |                        ^ help: add `;` here\n17 |             break\n   |             ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      min_num = i\n    }\n    if i % 2 == 1 {\n      max_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7mpdbss4.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7mpdbss4.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max = x\n  let min = y\n  let i = max\n  while i >= min {\n    if i % 2 == 0 {\n      return i\n    }\n    i -= 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppledga95.rs:13:14\n   |\n13 |   let max = x\n   |              ^ help: add `;` here\n14 |   let min = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmppledga95.rs:14:14\n   |\n14 |   let min = y\n   |              ^ help: add `;` here\n15 |   let i = max\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmppledga95.rs:15:14\n   |\n15 |   let i = max\n   |              ^ help: add `;` here\n16 |   while i >= min {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpje8fnsqx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpje8fnsqx.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpeofj4xfu.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpeofj4xfu.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    if max_num < y {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp23s7ijqa.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = min_num\n  while i <= max_num {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpda_fku2j.rs:15:18\n   |\n15 |   let i = min_num\n   |                  ^ help: add `;` here\n16 |   while i <= max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpjefkzryl.rs:16:14\n   |\n16 |     let i = x\n   |              ^ help: add `;` here\n17 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (x % i) == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpqd2bnrd7.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let max_num_index = 0\n  let min_num_index = 0\n  for i in 0..x {\n    if x % i == 0 {\n      max_num_index = i\n      max_num = x / i\n      break\n    }\n  }\n  for i in 0..y {\n    if y % i == 0 {\n      min_num_index = i\n      min_num = y / i\n      break\n    }\n  }\n  if max_num_index > min_num_index {\n    return max_num\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpih_i_77t.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpih_i_77t.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let max_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpih_i_77t.rs:15:24\n   |\n15 |   let max_num_index = 0\n   |                        ^ help: add `;` here\n16 |   let min_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpih_i_77t.rs:16:24\n   |\n16 |   let min_num_index = 0\n   |                        ^ help: add `;` here\n17 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_num`\n  --> /tmp/tmpih_i_77t.rs:19:24\n   |\n19 |       max_num_index = i\n   |                        ^ help: add `;` here\n20 |       max_num = x / i\n   |       ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpih_i_77t.rs:20:22\n   |\n20 |       max_num = x / i\n   |                      ^ help: add `;` here\n21 |       break\n   |       ----- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmpih_i_77t.rs:26:24\n   |\n26 |       min_num_index = i\n   |                        ^ help: add `;` here\n27 |       min_num = y / i\n   |       ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpih_i_77t.rs:27:22\n   |\n27 |       min_num = y / i\n   |                      ^ help: add `;` here\n28 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    let min_num = y\n    let max_num_index = 0\n    let min_num_index = 0\n    let max_num_value = x\n    let min_num_value = y\n    let max_num_value_index = 0\n    let min_num_value_index = 0\n    let max_num_value_value = x\n    let min_num_value_value = y\n    let max_num_value_value_index = 0\n    let min_num_value_value_index = 0\n    let max_num_value_value_value = x\n    let min_num_value_value_value = y\n    let max_num_value_value_value_index = 0\n    let min_num_value_value_value_index = 0\n    let max_num_value_value_value_value = x\n    let min_num_value_value_value_value = y\n    let max_num_value_value_value_value_index = 0\n    let min_num_value_value_value_value_index = 0\n    let max_num_value_value_value_value_value = x\n    let min_num_value_value_value_value_value = y\n    let max_num_value_value_value_value_value_index = 0\n    let min_num_value_value_value_value_value_index = 0\n    let max_num_value_value_value_value_value_value = x\n    let min_num_value_value_value_value_value_value = y\n    let max_num_value_value_value_value_value_value_index = 0\n    let min_num_value_value_value_value_value_value_index = 0\n    let max_num_value_value_value_value_value_value_value = x\n    let min_num_value_value_value_value_value_value_value = y\n    let max_num_value_value_value_value_value_value_value_index = 0\n    let min_num_value_value\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:14:20\n   |\n14 |     let min_num = y\n   |                    ^ help: add `;` here\n15 |     let max_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:15:26\n   |\n15 |     let max_num_index = 0\n   |                          ^ help: add `;` here\n16 |     let min_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:16:26\n   |\n16 |     let min_num_index = 0\n   |                          ^ help: add `;` here\n17 |     let max_num_value = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:17:26\n   |\n17 |     let max_num_value = x\n   |                          ^ help: add `;` here\n18 |     let min_num_value = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:18:26\n   |\n18 |     let min_num_value = y\n   |                          ^ help: add `;` here\n19 |     let max_num_value_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:19:32\n   |\n19 |     let max_num_value_index = 0\n   |                                ^ help: add `;` here\n20 |     let min_num_value_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:20:32\n   |\n20 |     let min_num_value_index = 0\n   |                                ^ help: add `;` here\n21 |     let max_num_value_value = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:21:32\n   |\n21 |     let max_num_value_value = x\n   |                                ^ help: add `;` here\n22 |     let min_num_value_value = y\n   |     --- unexpected token\n\nerror: expected `;`,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let i = min_num\n    let j = max_num\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid % 2 == 0 {\n            max_num = mid\n        } else {\n            j = mid - 1\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmvuna4yq.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmvuna4yq.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let i = min_num\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmvuna4yq.rs:18:20\n   |\n18 |     let i = min_num\n   |                    ^ help: add `;` here\n19 |     let j = max_num\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpmvuna4yq.rs:19:20\n   |\n19 |     let j = max_num\n   |                    ^ help: add `;` here\n20 |     while i <= j {\n   |     ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmvuna4yq.rs:21:34\n   |\n21 |         let mid = i + (j - i) / 2\n   |                                  ^ help: add `;` here\n22 |         if mid % 2 == 0 {\n   |         -- unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let num = min_num\n  while num <= max_num {\n    if num % 2 == 0 {\n      return num\n    }\n    num += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpddgti7jx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpddgti7jx.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let num = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpddgti7jx.rs:15:20\n   |\n15 |   let num = min_num\n   |                    ^ help: add `;` here\n16 |   while num <= max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    let min_num = y\n    let max_num_index = 0\n    let min_num_index = 0\n    let max_num_value = x\n    let min_num_value = y\n    let max_num_value_index = 0\n    let min_num_value_index = 0\n    let max_num_value_value = x\n    let min_num_value_value = y\n    let max_num_value_value_index = 0\n    let min_num_value_value_index = 0\n    let max_num_value_value_value = x\n    let min_num_value_value_value = y\n    let max_num_value_value_value_index = 0\n    let min_num_value_value_value_index = 0\n    let max_num_value_value_value_value = x\n    let min_num_value_value_value_value = y\n    let max_num_value_value_value_value_index = 0\n    let min_num_value_value_value_value_index = 0\n    let max_num_value_value_value_value_value = x\n    let min_num_value_value_value_value_value = y\n    let max_num_value_value_value_value_value_index = 0\n    let min_num_value_value_value_value_value_index = 0\n    let max_num_value_value_value_value_value_value = x\n    let min_num_value_value_value_value_value_value = y\n    let max_num_value_value_value_value_value_value_index = 0\n    let min_num_value_value_value_value_value_value_index = 0\n    let max_num_value_value_value_value_value_value_value = x\n    let min_num_value_value_value_value_value_value_value = y\n    let max_num_value_value_value_value_value_value_value_index = 0\n    let min_num_value_value\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:14:20\n   |\n14 |     let min_num = y\n   |                    ^ help: add `;` here\n15 |     let max_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:15:26\n   |\n15 |     let max_num_index = 0\n   |                          ^ help: add `;` here\n16 |     let min_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:16:26\n   |\n16 |     let min_num_index = 0\n   |                          ^ help: add `;` here\n17 |     let max_num_value = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:17:26\n   |\n17 |     let max_num_value = x\n   |                          ^ help: add `;` here\n18 |     let min_num_value = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:18:26\n   |\n18 |     let min_num_value = y\n   |                          ^ help: add `;` here\n19 |     let max_num_value_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:19:32\n   |\n19 |     let max_num_value_index = 0\n   |                                ^ help: add `;` here\n20 |     let min_num_value_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:20:32\n   |\n20 |     let min_num_value_index = 0\n   |                                ^ help: add `;` here\n21 |     let max_num_value_value = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl09hhwrb.rs:21:32\n   |\n21 |     let max_num_value_value = x\n   |                                ^ help: add `;` here\n22 |     let min_num_value_value = y\n   |     --- unexpected token\n\nerror: expected `;`,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwsc8de0r.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpeofj4xfu.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpeofj4xfu.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = 0\n  while i < max_num {\n    if max_num % 2 == 0 {\n      max_num = max_num / 2\n    } else {\n      max_num = max_num - 1\n    }\n    i = i + 1\n  }\n  if max_num == min_num {\n    return max_num\n  } else {\n    return -1\n  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ydc76w.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ydc76w.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpq3ydc76w.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   while i < max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max = x\n  let min = y\n  let result = -1\n  let i = min\n  while i <= max {\n    if i % 2 == 0 {\n      result = i\n      break\n    }\n    i += 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpweqjruqd.rs:13:14\n   |\n13 |   let max = x\n   |              ^ help: add `;` here\n14 |   let min = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpweqjruqd.rs:14:14\n   |\n14 |   let min = y\n   |              ^ help: add `;` here\n15 |   let result = -1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpweqjruqd.rs:15:18\n   |\n15 |   let result = -1\n   |                  ^ help: add `;` here\n16 |   let i = min\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpweqjruqd.rs:16:14\n   |\n16 |   let i = min\n   |              ^ help: add `;` here\n17 |   while i <= max {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpweqjruqd.rs:19:17\n   |\n19 |       result = i\n   |                 ^ help: add `;` here\n20 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if (i % 2) == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxw69_l_5.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxw69_l_5.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    if i % 2 == 1 {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv_1fb675.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv_1fb675.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpjefkzryl.rs:16:14\n   |\n16 |     let i = x\n   |              ^ help: add `;` here\n17 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp9mf_aehd.rs:16:12\n   |\n16 |   let i = x\n   |            ^ help: add `;` here\n17 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    if max_num < y {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp23s7ijqa.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = min_num\n  while i <= max_num {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpda_fku2j.rs:15:18\n   |\n15 |   let i = min_num\n   |                  ^ help: add `;` here\n16 |   while i <= max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    i += 1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5pu3fmlp.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5pu3fmlp.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp5pu3fmlp.rs:15:12\n   |\n15 |   let i = x\n   |            ^ help: add `;` here\n16 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let max_num_index = 0\n    let min_num_index = 0\n    for i in 0..x {\n        if x % i == 0 {\n            max_num_index = i\n            max_num = x / i\n            break\n        }\n    }\n    for i in 0..y {\n        if y % i == 0 {\n            min_num_index = i\n            min_num = y / i\n            break\n        }\n    }\n    if max_num_index > min_num_index {\n        return max_num\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1s9dkm1t.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1s9dkm1t.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let max_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1s9dkm1t.rs:18:26\n   |\n18 |     let max_num_index = 0\n   |                          ^ help: add `;` here\n19 |     let min_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1s9dkm1t.rs:19:26\n   |\n19 |     let min_num_index = 0\n   |                          ^ help: add `;` here\n20 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_num`\n  --> /tmp/tmp1s9dkm1t.rs:22:30\n   |\n22 |             max_num_index = i\n   |                              ^ help: add `;` here\n23 |             max_num = x / i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp1s9dkm1t.rs:23:28\n   |\n23 |             max_num = x / i\n   |                            ^ help: add `;` here\n24 |             break\n   |             ----- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmp1s9dkm1t.rs:29:30\n   |\n29 |             min_num_index = i\n   |                              ^ help: add `;` here\n30 |             min_num = y / i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp1s9dkm1t.rs:30:28\n   |\n30 |             min_num = y / i\n   |                            ^ help: add `;` here\n31 |             break\n   |             ----- unexpected token\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (x % i == 0) && (i <= y) {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmplpw40mt9.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  for i in y..max_num {\n    if i % 2 == 0 {\n      return i\n    }\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpshgmpgxf.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpshgmpgxf.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    if max_num < y {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp23s7ijqa.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpeofj4xfu.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpeofj4xfu.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let max_divisor = 1\n    let min_divisor = 1\n    for i in 0..max_num {\n        let divisor = 2 * i + 1\n        if divisor > max_divisor {\n            max_divisor = divisor\n        }\n        if divisor < min_divisor {\n            min_divisor = divisor\n        }\n    }\n    for i in 0..min_num {\n        let divisor = 2 * i + 1\n        if divisor > max_divisor {\n            max_divisor = divisor\n        }\n        if divisor < min_divisor {\n            min_divisor = divisor\n        }\n    }\n    let max_num_divisor = max_divisor\n    let min_num_divisor = min_divisor\n    for i in 0..max_num {\n        let divisor = 2 * i + 1\n        if divisor == max_num_divisor {\n            max_num_divisor = divisor\n        }\n        if divisor == min_num_divisor {\n            min_num_divisor = divisor\n        }\n    }\n    let max_num_divisor_index = 0\n    let min_num_divisor_index = 0\n    for i in 0..max_num {\n        let divisor = 2 * i + 1\n        if divisor == max_num_divisor {\n            max_num_divisor_index = i\n        }\n        if divisor == min_num_divisor {\n            min_num_divisor_index = i\n        }\n    }\n    let max_num_divisor_index_divisor = 2 * max_num_divisor_index + 1\n    let min_num_divisor_index_divisor = 2 * min_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp5aro_uz.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp5aro_uz.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let max_divisor = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp5aro_uz.rs:18:24\n   |\n18 |     let max_divisor = 1\n   |                        ^ help: add `;` here\n19 |     let min_divisor = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp5aro_uz.rs:19:24\n   |\n19 |     let min_divisor = 1\n   |                        ^ help: add `;` here\n20 |     for i in 0..max_num {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpp5aro_uz.rs:21:32\n   |\n21 |         let divisor = 2 * i + 1\n   |                                ^ help: add `;` here\n22 |         if divisor > max_divisor {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpp5aro_uz.rs:30:32\n   |\n30 |         let divisor = 2 * i + 1\n   |                                ^ help: add `;` here\n31 |         if divisor > max_divisor {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp5aro_uz.rs:38:38\n   |\n38 |     let max_num_divisor = max_divisor\n   |                                      ^ help: add `;` here\n39 |     let min_num_divisor = min_divisor\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp5aro_uz.rs:39:38\n   |\n39 |     let min_num_divisor = min_divisor\n   |                                      ^ help: add `;` here\n40 |     for i in 0..max_num {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpp5aro_uz.rs:41:32\n   |\n41 |         let divisor = 2 * i + 1\n   |                                ^ help: add `;` here\n42 |         if divisor == max_num_di",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let max_num_index = 0\n  let min_num_index = 0\n  for i in 0..x {\n    if x % i == 0 {\n      max_num_index = i\n      max_num = x / i\n      break\n    }\n  }\n  for i in 0..y {\n    if y % i == 0 {\n      min_num_index = i\n      min_num = y / i\n      break\n    }\n  }\n  if max_num_index > min_num_index {\n    return max_num\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpih_i_77t.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpih_i_77t.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let max_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpih_i_77t.rs:15:24\n   |\n15 |   let max_num_index = 0\n   |                        ^ help: add `;` here\n16 |   let min_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpih_i_77t.rs:16:24\n   |\n16 |   let min_num_index = 0\n   |                        ^ help: add `;` here\n17 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_num`\n  --> /tmp/tmpih_i_77t.rs:19:24\n   |\n19 |       max_num_index = i\n   |                        ^ help: add `;` here\n20 |       max_num = x / i\n   |       ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpih_i_77t.rs:20:22\n   |\n20 |       max_num = x / i\n   |                      ^ help: add `;` here\n21 |       break\n   |       ----- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmpih_i_77t.rs:26:24\n   |\n26 |       min_num_index = i\n   |                        ^ help: add `;` here\n27 |       min_num = y / i\n   |       ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpih_i_77t.rs:27:22\n   |\n27 |       min_num = y / i\n   |                      ^ help: add `;` here\n28 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  let j = y\n  let k = 0\n  while i <= j {\n    if i % 2 == 0 {\n      k = i\n    }\n    i += 1\n  }\n  return k\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp06mbhgip.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   let j = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp06mbhgip.rs:14:12\n   |\n14 |   let j = y\n   |            ^ help: add `;` here\n15 |   let k = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp06mbhgip.rs:15:12\n   |\n15 |   let k = 0\n   |            ^ help: add `;` here\n16 |   while i <= j {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  for i in 0..y {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpfl2vn2v1.rs:16:18\n   |\n16 |   let max_num = x\n   |                  ^ help: add `;` here\n17 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if (i % 2) == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxw69_l_5.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxw69_l_5.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    if i % 2 == 1 {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv_1fb675.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv_1fb675.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  let max_even_num = x\n  let min_even_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      min_even_num = i\n      max_even_num = i\n    } else {\n      min_num = i\n      max_num = i\n    }\n  }\n  if max_even_num > max_num {\n    return max_even_num\n  } else {\n    return max_num\n  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq1allt8h.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1allt8h.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   let max_even_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1allt8h.rs:15:23\n   |\n15 |   let max_even_num = x\n   |                       ^ help: add `;` here\n16 |   let min_even_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq1allt8h.rs:16:23\n   |\n16 |   let min_even_num = x\n   |                       ^ help: add `;` here\n17 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_even_num`\n  --> /tmp/tmpq1allt8h.rs:19:23\n   |\n19 |       min_even_num = i\n   |                       ^ help: add `;` here\n20 |       max_even_num = i\n   |       ------------ unexpected token\n\nerror: expected `;`, found `max_num`\n  --> /tmp/tmpq1allt8h.rs:22:18\n   |\n22 |       min_num = i\n   |                  ^ help: add `;` here\n23 |       max_num = i\n   |       ------- unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let max_num_index = 0\n  let min_num_index = 0\n  let i = 0\n  for i = 0; i < x; i += 2 {\n    if i < min_num {\n      min_num_index = i\n    }\n    if i > max_num {\n      max_num_index = i\n    }\n  }\n  for i = 1; i < y; i += 2 {\n    if i < min_num {\n      min_num_index = i\n    }\n    if i > max_num {\n      max_num_index = i\n    }\n  }\n  if max_num_index == 0 {\n    return -1\n  }\n  return max_num_index\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpngc4cvc9.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpngc4cvc9.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let max_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpngc4cvc9.rs:15:24\n   |\n15 |   let max_num_index = 0\n   |                        ^ help: add `;` here\n16 |   let min_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpngc4cvc9.rs:16:24\n   |\n16 |   let min_num_index = 0\n   |                        ^ help: add `;` here\n17 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpngc4cvc9.rs:17:12\n   |\n17 |   let i = 0\n   |            ^ help: add `;` here\n18 |   for i = 0; i < x; i += 2 {\n   |   --- unexpected token\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpngc4cvc9.rs:18:8\n   |\n18 |   for i = 0; i < x; i += 2 {\n   |        ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpngc4cvc9.rs:18:9\n   |\n18 |   for i = 0; i < x; i += 2 {\n   |         ^ expected expression\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = min_num\n  while i <= max_num {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpda_fku2j.rs:15:18\n   |\n15 |   let i = min_num\n   |                  ^ help: add `;` here\n16 |   while i <= max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let max_num_index = 0\n    let min_num_index = 0\n    for i in 0..x {\n        if x % i == 0 {\n            max_num_index = i\n            max_num = x / i\n            break\n        }\n    }\n    for i in 0..y {\n        if y % i == 0 {\n            min_num_index = i\n            min_num = y / i\n            break\n        }\n    }\n    if max_num_index > min_num_index {\n        return max_num\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1s9dkm1t.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1s9dkm1t.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let max_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1s9dkm1t.rs:18:26\n   |\n18 |     let max_num_index = 0\n   |                          ^ help: add `;` here\n19 |     let min_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1s9dkm1t.rs:19:26\n   |\n19 |     let min_num_index = 0\n   |                          ^ help: add `;` here\n20 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_num`\n  --> /tmp/tmp1s9dkm1t.rs:22:30\n   |\n22 |             max_num_index = i\n   |                              ^ help: add `;` here\n23 |             max_num = x / i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp1s9dkm1t.rs:23:28\n   |\n23 |             max_num = x / i\n   |                            ^ help: add `;` here\n24 |             break\n   |             ----- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmp1s9dkm1t.rs:29:30\n   |\n29 |             min_num_index = i\n   |                              ^ help: add `;` here\n30 |             min_num = y / i\n   |             ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp1s9dkm1t.rs:30:28\n   |\n30 |             min_num = y / i\n   |                            ^ help: add `;` here\n31 |             break\n   |             ----- unexpected token\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwsc8de0r.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if x % i == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpko6lcen_.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (x % i == 0) && (i <= y) {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmplpw40mt9.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if x % i == 0 && y % i == 0 {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpr8aufjqv.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpxd13ga72.rs:13:14\n   |\n13 |     let i = x\n   |              ^ help: add `;` here\n14 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwsc8de0r.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  let j = y\n  while i <= j {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbffp1uax.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   let j = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpbffp1uax.rs:14:12\n   |\n14 |   let j = y\n   |            ^ help: add `;` here\n15 |   while i <= j {\n   |   ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    return max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpxfxyc0jr.rs:16:16\n   |\n16 |     let max = x\n   |                ^ help: add `;` here\n17 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwsc8de0r.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  for i in 0..y {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpfl2vn2v1.rs:16:18\n   |\n16 |   let max_num = x\n   |                  ^ help: add `;` here\n17 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppepcnko9.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return max_num\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwdvy_sim.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if x % i == 0 && y % i == 0 {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpr8aufjqv.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  } else if x == y {\n    return x\n  } else {\n    let i = x\n    while i <= y {\n      if i % 2 == 0 {\n        return i\n      }\n      i += 1\n    }\n    return -1\n  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpb23hf3v3.rs:15:14\n   |\n15 |     let i = x\n   |              ^ help: add `;` here\n16 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    if max_num == x {\n        return max_num\n    } else {\n        return -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4tu774c5.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpeofj4xfu.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpeofj4xfu.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let max_num_index = 0\n    let min_num_index = 0\n    let max_num_value = x\n    let min_num_value = y\n    let max_num_value_index = 0\n    let min_num_value_index = 0\n    for i in 0..x {\n        if x % i == 0 {\n            max_num = i\n            max_num_index = i\n            max_num_value = x / i\n            max_num_value_index = i\n            break\n        }\n    }\n    for i in 0..y {\n        if y % i == 0 {\n            min_num = i\n            min_num_index = i\n            min_num_value = y / i\n            min_num_value_index = i\n            break\n        }\n    }\n    if max_num_value > min_num_value {\n        return max_num_value * max_num_index + min_num_value_index\n    }\n    return max_num_index * max_num_value + min_num_index * min_num_value\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgr_n63e0.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgr_n63e0.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let max_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgr_n63e0.rs:18:26\n   |\n18 |     let max_num_index = 0\n   |                          ^ help: add `;` here\n19 |     let min_num_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgr_n63e0.rs:19:26\n   |\n19 |     let min_num_index = 0\n   |                          ^ help: add `;` here\n20 |     let max_num_value = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgr_n63e0.rs:20:26\n   |\n20 |     let max_num_value = x\n   |                          ^ help: add `;` here\n21 |     let min_num_value = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgr_n63e0.rs:21:26\n   |\n21 |     let min_num_value = y\n   |                          ^ help: add `;` here\n22 |     let max_num_value_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgr_n63e0.rs:22:32\n   |\n22 |     let max_num_value_index = 0\n   |                                ^ help: add `;` here\n23 |     let min_num_value_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgr_n63e0.rs:23:32\n   |\n23 |     let min_num_value_index = 0\n   |                                ^ help: add `;` here\n24 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_num_index`\n  --> /tmp/tmpgr_n63e0.rs:26:24\n   |\n26 |             max_num = i\n   |                        ^ help: add `;` here\n27 |             max_num_index = i\n   |             ------------- unexpected token\n\nerror: expected `;`, found `ma",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if x % i == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  for j in 0..y {\n    if y % j == 0 {\n      return j\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv0bdt2wq.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpv0bdt2wq.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if (x - i) % 2 == 0 {\n      max_num = i\n      min_num = i\n      break\n    }\n  }\n  if max_num == min_num {\n    return max_num\n  }\n  let max_num_index = x - max_num\n  let min_num_index = x - min_num\n  let max_num_index_mod_2 = max_num_index % 2\n  let min_num_index_mod_2 = min_num_index % 2\n  if max_num_index_mod_2 == 0 {\n    return max_num\n  }\n  if min_num_index_mod_2 == 0 {\n    return min_num\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpplsu9q_d.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpplsu9q_d.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmpplsu9q_d.rs:17:18\n   |\n17 |       max_num = i\n   |                  ^ help: add `;` here\n18 |       min_num = i\n   |       ------- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpplsu9q_d.rs:18:18\n   |\n18 |       min_num = i\n   |                  ^ help: add `;` here\n19 |       break\n   |       ----- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpplsu9q_d.rs:25:34\n   |\n25 |   let max_num_index = x - max_num\n   |                                  ^ help: add `;` here\n26 |   let min_num_index = x - min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpplsu9q_d.rs:26:34\n   |\n26 |   let min_num_index = x - min_num\n   |                                  ^ help: add `;` here\n27 |   let max_num_index_mod_2 = max_num_index % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpplsu9q_d.rs:27:46\n   |\n27 |   let max_num_index_mod_2 = max_num_index % 2\n   |                                              ^ help: add `;` here\n28 |   let min_num_index_mod_2 = min_num_index % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpplsu9q_d.rs:28:46\n   |\n28 |   let min_num_index_mod_2 = min_num_index % 2\n   |                                              ^ help: add `;` here\n29 |   if max_num_index_mod_2 == 0 {\n   |   -- unexpected token\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp9mf_aehd.rs:16:12\n   |\n16 |   let i = x\n   |            ^ help: add `;` here\n17 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max = x\n  let min = y\n  let mid = (max + min) / 2\n  let i = mid\n  while i >= min {\n    if (i % 2 == 0) {\n      return i\n    }\n    i = i - 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8mziyxrb.rs:13:14\n   |\n13 |   let max = x\n   |              ^ help: add `;` here\n14 |   let min = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8mziyxrb.rs:14:14\n   |\n14 |   let min = y\n   |              ^ help: add `;` here\n15 |   let mid = (max + min) / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8mziyxrb.rs:15:28\n   |\n15 |   let mid = (max + min) / 2\n   |                            ^ help: add `;` here\n16 |   let i = mid\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp8mziyxrb.rs:16:14\n   |\n16 |   let i = mid\n   |              ^ help: add `;` here\n17 |   while i >= min {\n   |   ----- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8mziyxrb.rs:18:8\n   |\n18 |     if (i % 2 == 0) {\n   |        ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (i % 2 == 0) {\n18 +     if i % 2 == 0 {\n   | \n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let i = x\n    while i <= y {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpjefkzryl.rs:16:14\n   |\n16 |     let i = x\n   |              ^ help: add `;` here\n17 |     while i <= y {\n   |     ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (x % i == 0) && (y % i == 0) {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpw_zlt74d.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    i += 1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5pu3fmlp.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5pu3fmlp.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp5pu3fmlp.rs:15:12\n   |\n15 |   let i = x\n   |            ^ help: add `;` here\n16 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (i % 2 == 0) {\n      max_num = i\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpgefiq5ez.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgefiq5ez.rs:15:8\n   |\n15 |     if (i % 2 == 0) {\n   |        ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (i % 2 == 0) {\n15 +     if i % 2 == 0 {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let num = min_num\n  while num <= max_num {\n    if num % 2 == 0 {\n      return num\n    }\n    num += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpddgti7jx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpddgti7jx.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let num = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpddgti7jx.rs:15:20\n   |\n15 |   let num = min_num\n   |                    ^ help: add `;` here\n16 |   while num <= max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max = x\n    let min = y\n    let mid = (max + min) / 2\n    while max - min > 1 {\n        if mid * mid > x * y {\n            max = mid\n        } else {\n            min = mid\n        }\n        mid = (max + min) / 2\n    }\n    return max * max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzzw3ryd7.rs:13:16\n   |\n13 |     let max = x\n   |                ^ help: add `;` here\n14 |     let min = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzzw3ryd7.rs:14:16\n   |\n14 |     let min = y\n   |                ^ help: add `;` here\n15 |     let mid = (max + min) / 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpzzw3ryd7.rs:15:30\n   |\n15 |     let mid = (max + min) / 2\n   |                              ^ help: add `;` here\n16 |     while max - min > 1 {\n   |     ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (x % i) == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp3kh9j8zy.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp3kh9j8zy.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let max_div = x\n    let min_div = y\n    let max_div_index = 0\n    let min_div_index = 0\n    for i in 0..x {\n        if x % i == 0 {\n            max_div = i\n            max_div_index = i\n        }\n    }\n    for i in 0..y {\n        if y % i == 0 {\n            min_div = i\n            min_div_index = i\n        }\n    }\n    if max_div_index < min_div_index {\n        max_num = max_div\n        min_num = min_div\n    }\n    if max_div_index > min_div_index {\n        max_num = max_div\n        min_num = min_div\n    }\n    let max_num_index = 0\n    let min_num_index = 0\n    for i in 0..x {\n        if x % i == 0 {\n            max_num_index = i\n        }\n    }\n    for i in 0..y {\n        if y % i == 0 {\n            min_num_index = i\n        }\n    }\n    if max_num_index < min_num_index {\n        max_num = max_num_index\n        min_num = min_num_index\n    }\n    if max_num_index > min_num_index {\n        max_num = max_num_index\n        min_num = min_num_index\n    }\n    if max_num > min_num {\n        return max_num\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpobe_8dtd.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpobe_8dtd.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let max_div = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpobe_8dtd.rs:18:20\n   |\n18 |     let max_div = x\n   |                    ^ help: add `;` here\n19 |     let min_div = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpobe_8dtd.rs:19:20\n   |\n19 |     let min_div = y\n   |                    ^ help: add `;` here\n20 |     let max_div_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpobe_8dtd.rs:20:26\n   |\n20 |     let max_div_index = 0\n   |                          ^ help: add `;` here\n21 |     let min_div_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpobe_8dtd.rs:21:26\n   |\n21 |     let min_div_index = 0\n   |                          ^ help: add `;` here\n22 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found `max_div_index`\n  --> /tmp/tmpobe_8dtd.rs:24:24\n   |\n24 |             max_div = i\n   |                        ^ help: add `;` here\n25 |             max_div_index = i\n   |             ------------- unexpected token\n\nerror: expected `;`, found `min_div_index`\n  --> /tmp/tmpobe_8dtd.rs:30:24\n   |\n30 |             min_div = i\n   |                        ^ help: add `;` here\n31 |             min_div_index = i\n   |             ------------- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmpobe_8dtd.rs:35:26\n   |\n35 |         max_num = max_div\n   |                          ^ help: add `;` here\n36 |         min_num = min_div\n   |         ------- unexpected token\n\nerror: expected `;`, found `min_num`\n  --> /tmp/tmpobe_8dtd.rs:39:26\n   |\n39 |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max = i\n    }\n  }\n  for i in y..max {\n    if i % 2 == 0 {\n      return i\n    }\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy1tjyrfi.rs:13:14\n   |\n13 |   let max = x\n   |              ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let num = min_num\n  while num < max_num {\n    num = num + 2\n  }\n  if num > max_num {\n    return -1\n  }\n  return num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8i25s70_.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8i25s70_.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let num = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp8i25s70_.rs:15:20\n   |\n15 |   let num = min_num\n   |                    ^ help: add `;` here\n16 |   while num < max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let max_num = x\n  let min_num = y\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    i += 1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpme30nkgh.rs:16:18\n   |\n16 |   let max_num = x\n   |                  ^ help: add `;` here\n17 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpme30nkgh.rs:17:18\n   |\n17 |   let min_num = y\n   |                  ^ help: add `;` here\n18 |   let i = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpme30nkgh.rs:18:12\n   |\n18 |   let i = x\n   |            ^ help: add `;` here\n19 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp9mf_aehd.rs:16:12\n   |\n16 |   let i = x\n   |            ^ help: add `;` here\n17 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let max_div = x\n  let min_div = y\n  let max_div_index = 0\n  let min_div_index = 0\n  let max_div_value = x\n  let min_div_value = y\n  let max_div_value_index = 0\n  let min_div_value_index = 0\n  let max_div_value_value = x\n  let min_div_value_value = y\n  let max_div_value_value_index = 0\n  let min_div_value_value_index = 0\n  let max_div_value_value_value = x\n  let min_div_value_value_value = y\n  let max_div_value_value_value_index = 0\n  let min_div_value_value_value_index = 0\n  let max_div_value_value_value_value = x\n  let min_div_value_value_value_value = y\n  let max_div_value_value_value_value_index = 0\n  let min_div_value_value_value_value_index = 0\n  let max_div_value_value_value_value_value = x\n  let min_div_value_value_value_value_value = y\n  let max_div_value_value_value_value_value_index = 0\n  let min_div_value_value_value_value_value_index = 0\n  let max_div_value_value_value_value_value_value = x\n  let min_div_value_value_value_value_value_value = y\n  let max_div_value_value_value_value_value_value_index = 0\n  let min_div_value_value_value_value_value_value_index = 0\n  let max_div_value_value_value_value_value_value_value = x\n  let min_div_value_value_value_value_value_value_value = y\n  let max_div_value_value_value_value_value_value\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let max_div = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:15:18\n   |\n15 |   let max_div = x\n   |                  ^ help: add `;` here\n16 |   let min_div = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:16:18\n   |\n16 |   let min_div = y\n   |                  ^ help: add `;` here\n17 |   let max_div_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:17:24\n   |\n17 |   let max_div_index = 0\n   |                        ^ help: add `;` here\n18 |   let min_div_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:18:24\n   |\n18 |   let min_div_index = 0\n   |                        ^ help: add `;` here\n19 |   let max_div_value = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:19:24\n   |\n19 |   let max_div_value = x\n   |                        ^ help: add `;` here\n20 |   let min_div_value = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:20:24\n   |\n20 |   let min_div_value = y\n   |                        ^ help: add `;` here\n21 |   let max_div_value_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:21:30\n   |\n21 |   let max_div_value_index = 0\n   |                              ^ help: add `;` here\n22 |   let min_div_value_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_vwo00a1.rs:22:30\n   |\n22 |   let min_div_value_index = 0\n   |                              ^ help: add `;` h",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..y - x {\n    if (max_num % 2) != 0 {\n      max_num = max_num + 1\n    } else {\n      max_num = max_num + 2\n    }\n    if (min_num % 2) != 0 {\n      min_num = min_num + 1\n    } else {\n      min_num = min_num + 2\n    }\n  }\n  if (max_num - min_num) == y - x {\n    return max_num\n  } else {\n    return -1\n  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8ahvoptw.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8ahvoptw.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..y - x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if x % i == 0 {\n      max_num = i\n    }\n  }\n  if max_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp80zez7gf.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  if x == y {\n    return x\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp9mf_aehd.rs:16:12\n   |\n16 |   let i = x\n   |            ^ help: add `;` here\n17 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    if i % 2 != 0 {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppfd46_d1.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppfd46_d1.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n            break\n        }\n    }\n    if max_num > y {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpjye98_wq.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpjye98_wq.rs:16:24\n   |\n16 |             max_num = i\n   |                        ^ help: add `;` here\n17 |             break\n   |             ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = min_num\n  while i <= max_num {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpda_fku2j.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpda_fku2j.rs:15:18\n   |\n15 |   let i = min_num\n   |                  ^ help: add `;` here\n16 |   while i <= max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let max_num_index = 0\n  let min_num_index = 0\n  let max_num_value = x\n  let min_num_value = y\n  let max_num_value_index = 0\n  let min_num_value_index = 0\n  for i in 0..x {\n    if x % i == 0 {\n      if i > max_num {\n        max_num = i\n        max_num_index = i\n        max_num_value = x\n        max_num_value_index = i\n      }\n      if i < min_num {\n        min_num = i\n        min_num_index = i\n        min_num_value = x\n        min_num_value_index = i\n      }\n    }\n  }\n  if max_num == min_num {\n    return max_num\n  }\n  if max_num_value == min_num_value {\n    return max_num_value\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_tvzh761.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_tvzh761.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let max_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_tvzh761.rs:15:24\n   |\n15 |   let max_num_index = 0\n   |                        ^ help: add `;` here\n16 |   let min_num_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_tvzh761.rs:16:24\n   |\n16 |   let min_num_index = 0\n   |                        ^ help: add `;` here\n17 |   let max_num_value = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_tvzh761.rs:17:24\n   |\n17 |   let max_num_value = x\n   |                        ^ help: add `;` here\n18 |   let min_num_value = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_tvzh761.rs:18:24\n   |\n18 |   let min_num_value = y\n   |                        ^ help: add `;` here\n19 |   let max_num_value_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_tvzh761.rs:19:30\n   |\n19 |   let max_num_value_index = 0\n   |                              ^ help: add `;` here\n20 |   let min_num_value_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_tvzh761.rs:20:30\n   |\n20 |   let min_num_value_index = 0\n   |                              ^ help: add `;` here\n21 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_num_index`\n  --> /tmp/tmp_tvzh761.rs:24:20\n   |\n24 |         max_num = i\n   |                    ^ help: add `;` here\n25 |         max_num_index = i\n   |         ------------- unexpected token\n\nerror: expected `;`, found `max_num_value`\n  --> /tmp/tmp_tvzh761.rs:25:26\n   |\n25 |         max_num_index = i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpje8fnsqx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpje8fnsqx.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n  }\n  if max_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmprjkfot2g.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    if i % 2 == 1 {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  if min_num < y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv_1fb675.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv_1fb675.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = 0\n  while i < max_num {\n    if max_num % 2 == 0 {\n      max_num = max_num / 2\n    } else {\n      max_num = max_num - 1\n    }\n    i = i + 1\n  }\n  if max_num == min_num {\n    return max_num\n  } else {\n    return -1\n  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ydc76w.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ydc76w.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpq3ydc76w.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   while i < max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max = x\n  let min = y\n  let i = min\n  while i <= max {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzu07sbns.rs:13:14\n   |\n13 |   let max = x\n   |              ^ help: add `;` here\n14 |   let min = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzu07sbns.rs:14:14\n   |\n14 |   let min = y\n   |              ^ help: add `;` here\n15 |   let i = min\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpzu07sbns.rs:15:14\n   |\n15 |   let i = min\n   |              ^ help: add `;` here\n16 |   while i <= max {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      max_num = i\n    }\n    i += 1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5pu3fmlp.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5pu3fmlp.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp5pu3fmlp.rs:15:12\n   |\n15 |   let i = x\n   |            ^ help: add `;` here\n16 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (y - i) % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpbiqeibxc.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpbiqeibxc.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let i = 0\n  while max_num - min_num > 1 {\n    let mid = (max_num + min_num) / 2\n    if mid % 2 == 0 {\n      max_num = mid\n    } else {\n      min_num = mid\n    }\n    i += 1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpghf62y3_.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpghf62y3_.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpghf62y3_.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   while max_num - min_num > 1 {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpghf62y3_.rs:17:38\n   |\n17 |     let mid = (max_num + min_num) / 2\n   |                                      ^ help: add `;` here\n18 |     if mid % 2 == 0 {\n   |     -- unexpected token\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let num = x\n  for i in 0..x {\n    if num % 2 == 0 {\n      num = num / 2\n    } else {\n      num = num * 3 + 1\n    }\n    if num > y {\n      return -1\n    }\n  }\n  return num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdr3tkup1.rs:13:14\n   |\n13 |   let num = x\n   |              ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    let min_num = x\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n        if i % 2 != 0 {\n            min_num = i\n        }\n    }\n    if max_num > y {\n        return -1\n    }\n    if min_num < y {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpky9vxe9t.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     let min_num = x\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpky9vxe9t.rs:14:20\n   |\n14 |     let min_num = x\n   |                    ^ help: add `;` here\n15 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if (x % i) == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp3kh9j8zy.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp3kh9j8zy.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    let i = 0\n    while i < max_num {\n        if max_num % 2 == 0 {\n            max_num = max_num / 2\n        } else {\n            max_num = max_num - 1\n        }\n        i = i + 1\n    }\n    i = 0\n    while i < min_num {\n        if min_num % 2 == 0 {\n            min_num = min_num / 2\n        } else {\n            min_num = min_num - 1\n        }\n        i = i + 1\n    }\n    if max_num < min_num {\n        return -1\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpryz8kb7p.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpryz8kb7p.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     let i = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpryz8kb7p.rs:18:14\n   |\n18 |     let i = 0\n   |              ^ help: add `;` here\n19 |     while i < max_num {\n   |     ----- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpryz8kb7p.rs:27:10\n   |\n27 |     i = 0\n   |          ^ help: add `;` here\n28 |     while i < min_num {\n   |     ----- unexpected token\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  let num = min_num\n  while num <= max_num {\n    if num % 2 == 0 {\n      return num\n    }\n    num += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpddgti7jx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpddgti7jx.rs:14:18\n   |\n14 |   let min_num = y\n   |                  ^ help: add `;` here\n15 |   let num = min_num\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpddgti7jx.rs:15:20\n   |\n15 |   let num = min_num\n   |                    ^ help: add `;` here\n16 |   while num <= max_num {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let num = x\n  while num <= y {\n    num += 2\n  }\n  return num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp61n7sa8y.rs:13:14\n   |\n13 |   let num = x\n   |              ^ help: add `;` here\n14 |   while num <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  let j = y\n  let k = 0\n  while i <= j {\n    if i % 2 == 0 {\n      k = i\n    }\n    i = i + 1\n  }\n  return k\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4ot2qrmc.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   let j = y\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4ot2qrmc.rs:14:12\n   |\n14 |   let j = y\n   |            ^ help: add `;` here\n15 |   let k = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp4ot2qrmc.rs:15:12\n   |\n15 |   let k = 0\n   |            ^ help: add `;` here\n16 |   while i <= j {\n   |   ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if x % i == 0 {\n      max_num = i\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpko6lcen_.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if (i % 2 == 0) {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmplpqvzp3v.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmplpqvzp3v.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplpqvzp3v.rs:16:8\n   |\n16 |     if (i % 2 == 0) {\n   |        ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i % 2 == 0) {\n16 +     if i % 2 == 0 {\n   | \n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if (i % 2) == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxw69_l_5.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxw69_l_5.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  let min_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n    } else {\n      min_num = i\n    }\n  }\n  if max_num > y {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfimcmkjr.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   let min_num = x\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfimcmkjr.rs:14:18\n   |\n14 |   let min_num = x\n   |                  ^ help: add `;` here\n15 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    let max_num = x\n    let min_num = y\n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num = i\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            min_num = i\n        }\n    }\n    if max_num > min_num {\n        return max_num\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpz_r6smos.rs:16:20\n   |\n16 |     let max_num = x\n   |                    ^ help: add `;` here\n17 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpz_r6smos.rs:17:20\n   |\n17 |     let min_num = y\n   |                    ^ help: add `;` here\n18 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    for i in 0..x {\n        if x % i == 0 && y % i == 0 {\n            max_num = i\n        }\n    }\n    return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpl_nb04qm.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     for i in 0..x {\n   |     --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let i = x\n  while i <= y {\n    if i % 2 == 0 {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpr2yasv_4.rs:13:12\n   |\n13 |   let i = x\n   |            ^ help: add `;` here\n14 |   while i <= y {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        return -1\n    }\n    let max_num = x\n    let min_num = y\n    let i = min_num\n    while i <= max_num {\n        if i % 2 == 0 {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpf734ouro.rs:13:20\n   |\n13 |     let max_num = x\n   |                    ^ help: add `;` here\n14 |     let min_num = y\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpf734ouro.rs:14:20\n   |\n14 |     let min_num = y\n   |                    ^ help: add `;` here\n15 |     let i = min_num\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpf734ouro.rs:15:20\n   |\n15 |     let i = min_num\n   |                    ^ help: add `;` here\n16 |     while i <= max_num {\n   |     ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n  if x > y {\n    return -1\n  }\n  let max_num = x\n  for i in 0..x {\n    if i % 2 == 0 {\n      max_num = i\n      break\n    }\n  }\n  if max_num == x {\n    return -1\n  }\n  return max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n",
      "timestamp": 1664292635,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpje8fnsqx.rs:13:18\n   |\n13 |   let max_num = x\n   |                  ^ help: add `;` here\n14 |   for i in 0..x {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpje8fnsqx.rs:16:18\n   |\n16 |       max_num = i\n   |                  ^ help: add `;` here\n17 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}