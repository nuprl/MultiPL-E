{
  "name": "HumanEval_84_solve",
  "language": "rs",
  "prompt": "/// Given a positive integer N, return the total sum of its digits in binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>> solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n",
  "completions": [
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in 0..digits.len {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in digits.chars() {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, digits.len() + 1) {\n    let next = String::from(sum);\n    result = result.concat(next);\n    sum = sum % 2;\n  }\n  return result;",
    "  let digits = [0, 1];\n  let sum = 0;\n  for i in 0..N - 1 {\n    let digit = digits[i % 2];\n    sum += digit;\n    digits.push(digit);\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = \"\";\n  while (sum > 0) {\n    let digit = sum % 2;\n    result = String::from(digit) + result;\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  let r = String::from(N);\n  let l = s.len;\n  let rl = r.len;\n  let result = s.pad_left(l + rl, '0');\n  result.pad_right(l, '0');\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in range(N) {\n    sum += i % 2;\n  }\n  let s = String(sum);\n  for i in range(N - 1, -1, -1) {\n    s = String::concat(s, String(i % 2));\n  }\n  return s;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  for i in 0..N {\n    s = s.pad_left(i, \"0\");\n  }\n  return s;",
    "  let digits = []\n  let sum = 0\n  for i in range(N) {\n    let digit = N % 2\n    digits.push_back(digit)\n    sum += digit\n    N /= 2\n  }\n  let result = \"\"\n  for i in range(len(digits)) {\n    result += digits[i]\n  }\n  return result",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum.iter(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for _, c in Enum.iter(result) {\n    if c == '0' {\n      result = result.substr(1);\n    } else {\n      result = result.substr(0, result.length - 1);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  let n = N - 1;\n  while n > 0 {\n    let d = s.len() - n;\n    let s = s.pad_left(d, '0');\n    n -= d;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  for i in 0..N - 1 {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  for i in 0..N - 1 {\n    s = s.pad_left(i + 1, \"0\");\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 2;\n    N /= 2;\n  }\n  let s = String::from(sum);\n  let i = 0;\n  while i < s.len {\n    let j = i + 1;\n    while j < s.len and s[j] == s[i] {\n      j += 1;\n    }\n    s = s.substr(i, j - i);\n    i = j;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len() {\n    sum += digits[digits.len() - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  for i in range(N) {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  return s;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in reverse(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, len(result)) {\n    result = result.substr(0, i) + result.substr(i);\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let digits = [0] * 10;\n  let sum = 0;\n  for i in 0..N {\n    digits[i % 10] += 1;\n    sum += digits[i % 10];\n  }\n  let s = \"\";\n  for i in 0..9 {\n    s += String::from(digits[i]);\n  }\n  return s;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  let n = N;\n  while (n > 0) {\n    let d = n % 10;\n    let s2 = s.substr(d, 1);\n    s = s2 + s.substr(0, d);\n    n /= 10;\n  }\n  return s;",
    "  let sum = 0;\n  for i in 0..N - 1 {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  let s2 = s.pad_left(N, '0');\n  return s2;",
    "  let digits = [0, 1];\n  let sum = 0;\n  for i in 0..N - 1 {\n    sum += digits[i % 2];\n    digits.push(sum % 2);\n    sum /= 2;\n  }\n  let result = \"\";\n  for i in 0..N - 1 {\n    result += digits[i];\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let s = String::from(N);\n  for _, c in s.chars() {\n    sum += c - '0';\n  }\n  let digits = String::from(sum);\n  let result = \"\";\n  for i in 0..digits.len() {\n    result += digits[i];\n  }\n  return result;",
    "  let digits = []\n  let sum = 0\n  for i in range(N) {\n    let digit = N % 2\n    digits.push_back(digit)\n    sum += digit\n    N /= 2\n  }\n  let result = \"\"\n  for i in range(len(digits)) {\n    result += digits[i]\n  }\n  return result",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N.abs()) {\n    sum += N % 2;\n    N /= 2;\n  }\n  let str = String::from(sum);\n  if N != 0 {\n    str += \"1\"\n  }\n  return str;",
    "  let sum = 0;\n  for i in range(N) {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  for i in range(N - 1, -1, -1) {\n    let digit = i % 2;\n    s = String::concat(String::from(digit), s);\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.pad_left(digits.len - 1 - _, \"0\");\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = 0; i < digits.len; i++) {\n    let digit = digits[i];\n    let next = digits[i + 1];\n    if (next - digit == 1) {\n      result = result.concat(String::from(digit));\n    } else {\n      result = result.concat(String::from(digit));\n      result = result.concat(String::from(next));\n    }\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = 0; i < digits.len; i++) {\n    let c = digits[i];\n    let digit = String::from(c - '0');\n    let left = result.len - digit.len;\n    let right = result.len - left;\n    result = result.pad_left(left) + digit.pad_right(right);\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, digits.len() + 1) {\n    let next = String::from(sum);\n    let carry = 0;\n    for j in range(i, digits.len()) {\n      let digit = digits[j];\n      let digit_sum = sum - digit * 2 + carry;\n      carry = digit_sum / 10;\n      result = result.concat(String::from(digit_sum % 10));\n    }\n    if carry != 0 {\n      result = result.concat(String::from(carry));\n    }\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let result = String::from(sum);\n  for _ in range(N) {\n    result = result + \"0\";\n  }\n  return result;",
    "  let sum = 0;\n  let s = String(N);\n  for _, c in s.chars() {\n    sum += c - '0';\n  }\n  let res = String::from(sum);\n  for i in range(1, len(res) - 1) {\n    let c = res[i];\n    let d = res[i + 1];\n    if c == '0' and d == '1' {\n      res = res.slice(0, i) + '1' + res.slice(i + 1);\n    }\n  }\n  return res;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(result.len - 1) {\n    result = result.pad_left(result.len + 1, '0');\n  }\n  return result;",
    "  let digits = [0, 1];\n  let sum = 0;\n  let result = String::from(\"\");\n  while N > 0 {\n    let digit = N % 2;\n    N /= 2;\n    sum += digit;\n    result = String::concat(result, String::from(digits[digit]));\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  for _ in range(N) {\n    s = String::from(s + \"0\");\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  let r = String::from(N);\n  let l = s.length();\n  let rl = r.length();\n  let res = s.pad_left(rl, '0');\n  let res2 = s.pad_left(rl, '0');\n  for (i in range(rl - l)) {\n    res2 += r.pad_left(l, '0');\n  }\n  return res2;",
    "  let sum = 0;\n  for _ in range(N.abs()) {\n    sum += N % 2;\n    N /= 2;\n  }\n  let s = String(sum);\n  s = s.pad_left(N.abs(), '0');\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let digits = []\n  let sum = 0\n  for i in range(N) {\n    let digit = N % 2\n    digits.push_back(digit)\n    sum += digit\n    N /= 2\n  }\n  let result = \"\"\n  for i in range(len(digits)) {\n    result += digits[i]\n  }\n  return result",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  let r = String::from(N);\n  let l = s.length() - r.length();\n  let ans = s.pad_left(l, \"0\");\n  return ans + r;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in 0..digits.len() - 1 {\n    let digit = digits[i];\n    let digit_sum = sum % 2;\n    sum /= 2;\n    let digit_str = String::from(digit_sum);\n    result = result.concat(digit_str);\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  let n = N;\n  while n > 0 {\n    let digit = n % 2;\n    let s = String::concat(s, String::from(digit));\n    n /= 2;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = 0; i < digits.len; i++) {\n    result = result.concat(String::from(digits[i] - '0'));\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].to_i() * 2;\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = \"\";\n  while (sum > 0) {\n    let digit = sum % 2;\n    result = String::from(digit) + result;\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  let n = N - 1;\n  while n > 0 {\n    let d = s.len();\n    let s = s.pad_left(d + 1, \"0\");\n    n -= d;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum.iter(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in 0..len(result) - 1 {\n    let digit = result[i];\n    let next_digit = result[i + 1];\n    if digit == '0' and next_digit == '1' {\n      result = result.substr(0, i) + '1' + result.substr(i + 1);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N.abs()) {\n    sum += N % 2;\n    N /= 2;\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, digits.len() - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  for _ in range(N) {\n    s = s.pad_left(1, '0');\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].to_i();\n  }\n  let result = String::from(sum);\n  for i in 0..len(result) {\n    if result[i] == '1' {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N.abs()) {\n    sum += N % 2;\n    N /= 2;\n  }\n  let s = String::from(sum);\n  if N != 0 {\n    s += \"0\";\n  }\n  return s;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  for i in 0..N - 1 {\n    s = s.pad_left(1, '0');\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = result.len() - 1; i >= 0; i--) {\n    result = result.pad_left(i + 1, '0');\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in 0..digits.len {\n    result = result.pad_left(digits.len, '0');\n  }\n  return result;",
    "  let digits = [0] * 10;\n  let sum = 0;\n  for i in 0..N {\n    digits[i % 10] += 1;\n    sum += digits[i % 10];\n  }\n  let s = \"\";\n  for i in 0..9 {\n    s += String::from(digits[i]);\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  for i in 0..N {\n    s = s.pad_left(1, '0');\n  }\n  return s;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  let n = N % 2;\n  if n == 1 {\n    s = s + \"1\";\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in reverse(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = 0; i < digits.len; i++) {\n    let digit = digits[i];\n    let index = i + 1;\n    let next = result[index];\n    if (next == '0') {\n      result = result.slice(0, index) + '1' + result.slice(index);\n    } else {\n      result = result.slice(0, index) + '0' + result.slice(index);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in 0..digits.len {\n    result = result.pad_left(digits.len, '0');\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += int(String(N).chars().map(c => c - '0').join(''));\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len() {\n    sum += digits[digits.len() - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in 0..digits.len() {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum.iter(digits) {\n    sum += c.to_i() * pow(2, digits.length() - 1 - i);\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  let n = N;\n  while (n > 0) {\n    let digit = n % 10;\n    n /= 10;\n    s = String::concat(String::from(digit), s);\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c.to_i();\n  }\n  let result = \"\";\n  while (sum > 0) {\n    let digit = sum % 2;\n    sum /= 2;\n    result = String::concat(result, String::from(digit));\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].to_i() * pow(2, len(digits) - i - 1);\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  let s2 = s.pad_left(N, '0');\n  return s2;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum::from(digits) {\n    sum += c.to_i();\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  let s2 = String::from(sum);\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.chomp_left();\n  s2.chomp_right();\n  s2.",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let digits = String(N).split(\"\").map(x => x - 48).filter(x => x >= 0).sort()\n  let sum = 0\n  for _ in range(digits.length) {\n    sum += digits[digits.length - 1 - _]\n  }\n  return sum.toString()",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.pad_left(digits.len - _, \"0\");\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (i := 0; i < digits.len; i++) {\n    result = result.concat(String::from(digits[i] - '0'));\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].digitValue();\n  }\n  let result = String::from(sum);\n  for i in 0..len(result) {\n    let digit = result[i].digitValue();\n    if (digit > 1) {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let digits = []\n  for i in 0..N {\n    digits.push(i % 2);\n  }\n  let s = String::from(digits.join(\"\"));\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in digits.iter() {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in 0..digits.len() - 1 {\n    let c = digits[i];\n    let d = result[i];\n    if c == '1' {\n      result = result.replace(i, 1, d + d);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  for i in 0..N - 1 {\n    s = s.pad_left(1, '0');\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(result.len - 1) {\n    result = result.pad_left(result.len + 1, '0');\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in reverse(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for _, c in reverse(result) {\n    result = String::from(c + sum);\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].to_i() * 2;\n  }\n  return String::from(sum);",
    "  let digits = [0] * 10;\n  let sum = 0;\n  for i in 0..N {\n    digits[i % 10] += 1;\n    sum += i % 10;\n  }\n  let result = \"\";\n  for i in 0..9 {\n    result += String::from(digits[i]);\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  let n = N;\n  while n > 0 {\n    let d = n % 10;\n    let r = s.len() - d;\n    let s = s.pad_left(r, '0');\n    n /= 10;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits.chars[digits.len - 1 - _].to_i();\n  }\n  let result = String::from(sum);\n  for _ in range(result.len - 1) {\n    result = result.chars[result.len - 1 - _] + result;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  let n = N - 1;\n  while n > 0 {\n    let d = s.len() - n;\n    if d > 0 {\n      s = s.pad_left(d, '0');\n    } else {\n      s = s.pad_left(1, '0');\n    }\n    n--;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  s.pad_left(N, '0');\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in 0..digits.len {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  for i in 0..N {\n    s += String::from(i % 2);\n  }\n  return s;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  for _ in range(N) {\n    s = s + \"0\";\n  }\n  return s;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  let r = s.split(\"\").map(String::from).join(\"\");\n  return r;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (i in range(1, digits.len)) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  while s.len() < N {\n    s = \"0\" + s;\n  }\n  return s;",
    "  let digits = [0] * 10;\n  let sum = 0;\n  for i in 0..N {\n    digits[i % 10] += 1;\n    sum += digits[i % 10];\n  }\n  let result = \"\";\n  for i in 0..9 {\n    result += String::from(digits[i]);\n  }\n  return result;",
    "  let digits = []\n  let sum = 0\n  for i in range(N) {\n    let digit = N % 2\n    digits.push_back(digit)\n    sum += digit\n    N /= 2\n  }\n  let result = \"\"\n  for i in range(len(digits)) {\n    result += String::from(digits[i])\n  }\n  return result",
    "  let digits = [0] * 10;\n  let sum = 0;\n  for i in 0..N {\n    digits[i % 10] += 1;\n    sum += i % 10;\n  }\n  let result = String::from(digits);\n  if sum % 2 == 1 {\n    result += \"1\";\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let str = String::from(sum);\n  for i in 0..N - 1 {\n    str = String::from(str + \"0\");\n  }\n  return str;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = 0; i < digits.length(); i++) {\n    let digit = digits[i];\n    let next = digits[i + 1];\n    if (digit == '1' && next == '0') {\n      result = result.substr(0, result.length() - 1);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let digits = []\n  let sum = 0\n  let i = 0\n  while i < N {\n    let digit = N % 2\n    digits.push_back(digit)\n    sum += digit\n    i = i + 1\n    N = N / 2\n  }\n  let result = \"\"\n  for i in 0..len(digits) - 1 {\n    result += String::from(digits[i])\n  }\n  return result",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum.iter(digits) {\n    sum += c.to_i();\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  for _ in range(N.abs()) {\n    sum += N % 2;\n    N /= 2;\n  }\n  let s = String::from(sum);\n  if N > 0 {\n    s += \"1\";\n  }\n  return s;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  for _ in range(N) {\n    s = s.pad_left(1, \"0\");\n  }\n  return s;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  if N > 0 {\n    s += String::from(N);\n  }\n  return s;",
    "  let sum = 0;\n  let s = String::from(N);\n  for _, c in s.chars() {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, len(result) - 1) {\n    result = result.substr(0, i) + result.substr(i + 1);\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in reverse(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = 0; i < digits.len; i++) {\n    let c = digits[i];\n    let digit = String::from(c - '0');\n    let left = result.len - digit.len;\n    let right = result.len - digit.len - 1;\n    let left_str = result.substr(left);\n    let right_str = result.substr(right);\n    result = left_str + digit + right_str;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len() {\n    sum += digits[digits.len() - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in 0..digits.len() {\n    result = result.pad_left(digits.len() - _, \"0\");\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].digitValue();\n  }\n  let result = String::from(sum);\n  for i in 0..len(result) {\n    let digit = result[i].digitValue();\n    if (digit != 0) {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let s = String::from(sum);\n  for i in 0..N - 1 {\n    s = s.pad_left(1, \"0\");\n  }\n  return s;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String::from(sum);\n  while s.len() < N {\n    s = \"0\" + s;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (let i = 0; i < digits.len; i++) {\n    result = result.concat(String::from(digits[i] - '0'));\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum.iter(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, len(result) - 1) {\n    result = result.substr(0, i) + result.substr(i + 1);\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  for i in 0..N {\n    s = s.pad_left(i + 1, \"0\");\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, len(result) - 1) {\n    result = result.pad_left(i, '0');\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.pad_left(digits.len - _, \"0\");\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let digits = []\n  let sum = 0\n  for i in 0..N {\n    let digit = i % 10\n    digits.push_back(digit)\n    sum += digit\n  }\n  let result = \"\"\n  for i in 0..N {\n    let digit = digits[i]\n    result += digit\n  }\n  return result",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = \"\";\n  while (sum > 0) {\n    let digit = sum % 2;\n    sum /= 2;\n    result = String::from(digit) + result;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N.abs()) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String(sum);\n  let i = 0;\n  while (i < s.len) {\n    let j = i;\n    while (j < s.len && s[j] == s[i]) {\n      j += 1;\n    }\n    s = s.substr(i, j - i);\n    i = j;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].digitValue();\n  }\n  let result = String::from(sum);\n  for i in 0..len(result) {\n    if result[i] == '1' {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let digits = [0] * 10;\n  let sum = 0;\n  for i in 0..N - 1 {\n    digits[i % 10] += 1;\n    sum += digits[i % 10];\n  }\n  let result = String::from(digits.map(x => x.to_s()).join(\"\"));\n  return result + String::from(sum.to_s());",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum.iter(digits) {\n    sum += c.to_i();\n  }\n  let result = String::from(sum);\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let s = String::from(N);\n  for i in s.chars() {\n    sum += i.to_i();\n  }\n  let digits = String::from(sum);\n  let result = \"\";\n  for i in range(digits.length()) {\n    result += digits[i];\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String::from(sum);\n  let n = N;\n  while n > 0 {\n    let d = n % 2;\n    n /= 2;\n    s = String::concat(String::from(d), s);\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in 0..digits.len {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in 0..digits.len {\n    result = result.pad_left(digits.len, '0');\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 10;\n  }\n  let str = String::from(sum);\n  for i in 0..N {\n    str = String::concat(str, String::from(i % 10));\n  }\n  return str;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for (i in 1..digits.len) {\n    let digit = digits[i];\n    let next = String::from(sum);\n    let next_sum = sum;\n    if (i < digits.len - 1) {\n      next_sum += digit - '0';\n    }\n    let next_digits = String::from(next_sum);\n    let next_result = String::from(next_sum);\n    for (j in 1..next_digits.len) {\n      let next_digit = next_digits[j];\n      let next_next = String::from(next_sum);\n      let next_next_sum = next_sum;\n      if (j < next_digits.len - 1) {\n        next_next_sum += next_digit - '0';\n      }\n      let next_next_digits = String::from(next_next_sum);\n      let next_next_result = String::from(next_next_sum);\n      result = result.concat(next_next_digits);\n      result = result.concat(next_next_result);\n    }\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 2;\n    N /= 2;\n  }\n  let s = String(sum);\n  for _ in range(N) {\n    s = s + String(N % 2);\n    N /= 2;\n  }\n  return s;",
    "  let digits = [0];\n  let sum = 0;\n  let result = String::from(\"\");\n  let n = N;\n  while (n > 0) {\n    let digit = n % 2;\n    n /= 2;\n    digits.push_back(digit);\n    sum += digit;\n  }\n  for (let i = digits.length() - 1; i >= 0; i--) {\n    result = String::from(digits[i] + result);\n  }\n  return sum == N ? result : \"\";",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result + String::from(sum % 2);\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for _ in range(N) {\n    sum += N % 10;\n    N /= 10;\n  }\n  let s = String(sum);\n  let i = 0;\n  while i < s.len {\n    let c = s[i];\n    if c == '1' {\n      s = s.substr(0, i) + s.substr(i + 1);\n    }\n    i += 1;\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for i in 0..len(digits) {\n    sum += digits[i].to_i();\n  }\n  let result = String::from(sum);\n  for i in 0..len(result) {\n    if result[i] == '1' {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n  }\n  return result;",
    "  let digits = [0] * 10;\n  let sum = 0;\n  for i in 0..N {\n    digits[i % 10] += 1;\n    sum += i % 10;\n  }\n  let s = \"\";\n  for i in 0..9 {\n    s += digits[i];\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  for i in 0..N {\n    sum += i % 2;\n  }\n  let s = String(sum);\n  for i in 0..N - 1 {\n    let d = s.chars[i] - '0';\n    let t = s.chars[i + 1] - '0';\n    s = String(d + t);\n  }\n  return s;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  let result = String::from(sum);\n  for _ in range(digits.len - 1) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let digits = String::from(N);\n  let sum = 0;\n  for c in digits {\n    sum += c - '0';\n  }\n  let result = String::from(sum);\n  for i in range(1, digits.len) {\n    result = result.concat(String::from(sum % 2));\n    sum /= 2;\n  }\n  return result;",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _ in range(digits.len) {\n    sum += digits[digits.len - 1 - _];\n  }\n  return String::from(sum);",
    "  let sum = 0;\n  let digits = String::from(N);\n  for _, c in Enum.iter(digits) {\n    sum += c - '0';\n  }\n  return String::from(sum);",
    "  let digits = String(N);\n  let sum = 0;\n  for _, c in chars(digits) {\n    sum += c - '0';\n  }\n  let result = \"\";\n  while (sum > 0) {\n    let digit = sum % 2;\n    sum /= 2;\n    result = String::from(digit) + result;\n  }\n  return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}